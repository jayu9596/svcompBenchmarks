var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: ref;

var $M.3: i32;

var $M.4: i32;

var $M.5: i32;

var $M.6: [ref]ref;

var $M.7: [ref]ref;

var $M.8: [ref]ref;

var $M.9: [ref]ref;

var $M.10: [ref]i24;

var $M.11: [ref]i8;

var $M.12: i32;

var $M.13: ref;

var $M.14: i32;

var $M.15: ref;

var $M.16: i32;

var $M.17: ref;

var $M.18: i32;

var $M.19: ref;

var $M.20: [ref]i8;

var $M.21: [ref]i32;

var $M.22: [ref]i32;

var $M.23: [ref]i8;

var $M.24: i32;

var $M.25: [ref]i16;

var $M.26: [ref]i16;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: [ref]i8;

var $M.30: [ref]ref;

var $M.31: [ref]i64;

var $M.32: [ref]ref;

var $M.33: [ref]i8;

var $M.34: [ref]i8;

var $M.35: [ref]i8;

var $M.36: [ref]i16;

var $M.37: [ref]ref;

var $M.38: [ref]i8;

var $M.39: [ref]i8;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i16;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.49: [ref]i8;

var $M.50: [ref]i64;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: [ref]i8;

var $M.55: [ref]i8;

var $M.56: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.63: [ref]ref;

var $M.64: [ref]i16;

var $M.65: [ref]i16;

var $M.66: [ref]i8;

var $M.67: ref;

var $M.68: i32;

var $M.69: i32;

var $M.70: i32;

var $M.71: i32;

var $M.72: i32;

var $M.73: i32;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.79: [ref]i16;

var $M.80: [ref]i16;

var $M.81: [ref]i16;

var $M.82: [ref]i16;

var $M.83: [ref]i16;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i8;

var $M.87: [ref]i8;

var $M.88: [ref]i8;

var $M.89: [ref]i8;

var $M.90: [ref]i8;

var $M.91: [ref]i64;

var $M.92: [ref]i16;

var $M.181: [ref]i8;

var $M.182: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 519679);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 2056);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 3088);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 4116);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 5148);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 6176);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 7208);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 8236);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 9268);

const vt6656_driver_group1: ref;

axiom vt6656_driver_group1 == $sub.ref(0, 10300);

const vnt_mac_ops_group0: ref;

axiom vnt_mac_ops_group0 == $sub.ref(0, 11332);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 12360);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 13388);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 14416);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 15444);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 16472);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 17500);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 18528);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 19556);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 20584);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 21612);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 22640);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 23668);

const {:count 2} __mod_usb__vt6656_table_device_table: ref;

axiom __mod_usb__vt6656_table_device_table == $sub.ref(0, 24756);

const {:count 5} fallback_rate1: ref;

axiom fallback_rate1 == $sub.ref(0, 25805);

const {:count 5} fallback_rate0: ref;

axiom fallback_rate0 == $sub.ref(0, 26854);

const {:count 12} vnt_rates_bg: ref;

axiom vnt_rates_bg == $sub.ref(0, 28022);

const vnt_supported_2ghz_band: ref;

axiom vnt_supported_2ghz_band == $sub.ref(0, 29118);

const {:count 14} vnt_channels_2ghz: ref;

axiom vnt_channels_2ghz == $sub.ref(0, 31038);

const {:count 8} vnt_rates_a: ref;

axiom vnt_rates_a == $sub.ref(0, 32158);

const vnt_supported_5ghz_band: ref;

axiom vnt_supported_5ghz_band == $sub.ref(0, 33254);

const {:count 42} vnt_channels_5ghz: ref;

axiom vnt_channels_5ghz == $sub.ref(0, 36966);

const {:count 56} al7230_channel_table2: ref;

axiom al7230_channel_table2 == $sub.ref(0, 38158);

const {:count 16} al7230_init_table_amode: ref;

axiom al7230_init_table_amode == $sub.ref(0, 39230);

const {:count 56} vt3342_channel_table1: ref;

axiom vt3342_channel_table1 == $sub.ref(0, 40422);

const {:count 56} vt3342_channel_table0: ref;

axiom vt3342_channel_table0 == $sub.ref(0, 41614);

const {:count 13} vt3342a0_init_table: ref;

axiom vt3342a0_init_table == $sub.ref(0, 42677);

const {:count 11} vt3226d0_init_table: ref;

axiom vt3226d0_init_table == $sub.ref(0, 43734);

const {:count 14} vt3226_channel_table1: ref;

axiom vt3226_channel_table1 == $sub.ref(0, 44800);

const {:count 14} vt3226_channel_table0: ref;

axiom vt3226_channel_table0 == $sub.ref(0, 45866);

const {:count 11} vt3226_init_table: ref;

axiom vt3226_init_table == $sub.ref(0, 46923);

const {:count 56} al7230_channel_table1: ref;

axiom al7230_channel_table1 == $sub.ref(0, 48115);

const {:count 56} al7230_channel_table0: ref;

axiom al7230_channel_table0 == $sub.ref(0, 49307);

const {:count 16} al7230_init_table: ref;

axiom al7230_init_table == $sub.ref(0, 50379);

const {:count 14} al2230_channel_table1: ref;

axiom al2230_channel_table1 == $sub.ref(0, 51445);

const {:count 14} al2230_channel_table0: ref;

axiom al2230_channel_table0 == $sub.ref(0, 52511);

const {:count 15} al2230_init_table: ref;

axiom al2230_init_table == $sub.ref(0, 53580);

const {:count 14} vt3226d0_lo_current_table: ref;

axiom vt3226d0_lo_current_table == $sub.ref(0, 54660);

const {:count 64} al2230_power_table: ref;

axiom al2230_power_table == $sub.ref(0, 55940);

const {:count 2} vnt_time_stampoff: ref;

axiom vnt_time_stampoff == $sub.ref(0, 57012);

const {:count 2} vnt_fb_opt1: ref;

axiom vnt_fb_opt1 == $sub.ref(0, 58056);

const {:count 2} vnt_fb_opt0: ref;

axiom vnt_fb_opt0 == $sub.ref(0, 59100);

const {:count 256} vnt_vt3184_vt3226d0: ref;

axiom vnt_vt3184_vt3226d0 == $sub.ref(0, 60380);

const {:count 64} vnt_vt3184_agc: ref;

axiom vnt_vt3184_agc == $sub.ref(0, 61468);

const {:count 256} vnt_vt3184_al2230: ref;

axiom vnt_vt3184_al2230 == $sub.ref(0, 62748);

const {:count 12} vnt_frame_time: ref;

axiom vnt_frame_time == $sub.ref(0, 63796);

const {:count 12} cwRXBCNTSFOff: ref;

axiom cwRXBCNTSFOff == $sub.ref(0, 64844);

const vnt_rx_buffers: ref;

axiom vnt_rx_buffers == $sub.ref(0, 65872);

const vnt_tx_buffers: ref;

axiom vnt_tx_buffers == $sub.ref(0, 66900);

const vnt_mac_ops: ref;

axiom vnt_mac_ops == $sub.ref(0, 68628);

const {:count 2} vt6656_table: ref;

axiom vt6656_table == $sub.ref(0, 69716);

const vt6656_driver: ref;

axiom vt6656_driver == $sub.ref(0, 71044);

const {:count 7} .str.68: ref;

axiom .str.68 == $sub.ref(0, 72075);

const {:count 12} .str.82: ref;

axiom .str.82 == $sub.ref(0, 73111);

const {:count 39} .str.83: ref;

axiom .str.83 == $sub.ref(0, 74174);

const {:count 9} .str.84: ref;

axiom .str.84 == $sub.ref(0, 75207);

const {:count 54} .str.85: ref;

axiom .str.85 == $sub.ref(0, 76285);

const {:count 33} .str.86: ref;

axiom .str.86 == $sub.ref(0, 77342);

const {:count 22} .str.87: ref;

axiom .str.87 == $sub.ref(0, 78388);

const {:count 16} .str.88: ref;

axiom .str.88 == $sub.ref(0, 79428);

const {:count 35} .str.89: ref;

axiom .str.89 == $sub.ref(0, 80487);

const {:count 36} .str.90: ref;

axiom .str.90 == $sub.ref(0, 81547);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 33} .str.91: ref;

axiom .str.91 == $sub.ref(0, 82604);

const {:count 19} .str.12: ref;

axiom .str.12 == $sub.ref(0, 83647);

const {:count 17} .str.13: ref;

axiom .str.13 == $sub.ref(0, 84688);

const .str: ref;

axiom .str == $sub.ref(0, 85725);

const {:count 16} .str.14: ref;

axiom .str.14 == $sub.ref(0, 86765);

const {:count 208} .str.15: ref;

axiom .str.15 == $sub.ref(0, 87997);

const {:count 25} .str.16: ref;

axiom .str.16 == $sub.ref(0, 89046);

const {:count 19} .str.29: ref;

axiom .str.29 == $sub.ref(0, 90089);

const {:count 206} .str.30: ref;

axiom .str.30 == $sub.ref(0, 91319);

const {:count 21} .str.31: ref;

axiom .str.31 == $sub.ref(0, 92364);

const {:count 35} .str.32: ref;

axiom .str.32 == $sub.ref(0, 93423);

const {:count 16} .str.101: ref;

axiom .str.101 == $sub.ref(0, 94463);

const {:count 208} .str.18: ref;

axiom .str.18 == $sub.ref(0, 95695);

const {:count 21} .str.102: ref;

axiom .str.102 == $sub.ref(0, 96740);

const {:count 15} .str.39: ref;

axiom .str.39 == $sub.ref(0, 97779);

const {:count 211} .str.34: ref;

axiom .str.34 == $sub.ref(0, 99014);

const {:count 25} .str.40: ref;

axiom .str.40 == $sub.ref(0, 100063);

const {:count 24} .str.109: ref;

axiom .str.109 == $sub.ref(0, 101111);

const {:count 16} .str.110: ref;

axiom .str.110 == $sub.ref(0, 102151);

const {:count 20} .str.111: ref;

axiom .str.111 == $sub.ref(0, 103195);

const {:count 21} .str.98: ref;

axiom .str.98 == $sub.ref(0, 104240);

const {:count 4} .str.99: ref;

axiom .str.99 == $sub.ref(0, 105268);

const {:count 23} .str.100: ref;

axiom .str.100 == $sub.ref(0, 106315);

const {:count 19} .str.58: ref;

axiom .str.58 == $sub.ref(0, 107358);

const {:count 212} .str.59: ref;

axiom .str.59 == $sub.ref(0, 108594);

const {:count 32} .str.60: ref;

axiom .str.60 == $sub.ref(0, 109650);

const {:count 35} .str.61: ref;

axiom .str.61 == $sub.ref(0, 110709);

const {:count 24} .str.62: ref;

axiom .str.62 == $sub.ref(0, 111757);

const {:count 22} .str.63: ref;

axiom .str.63 == $sub.ref(0, 112803);

const {:count 22} .str.64: ref;

axiom .str.64 == $sub.ref(0, 113849);

const {:count 34} .str.65: ref;

axiom .str.65 == $sub.ref(0, 114907);

const {:count 23} .str.66: ref;

axiom .str.66 == $sub.ref(0, 115954);

const {:count 27} .str.67: ref;

axiom .str.67 == $sub.ref(0, 117005);

const {:count 16} .str.7: ref;

axiom .str.7 == $sub.ref(0, 118045);

const {:count 212} .str.8: ref;

axiom .str.8 == $sub.ref(0, 119281);

const {:count 12} .str.9: ref;

axiom .str.9 == $sub.ref(0, 120317);

const {:count 28} .str.47: ref;

axiom .str.47 == $sub.ref(0, 121369);

const {:count 212} .str.42: ref;

axiom .str.42 == $sub.ref(0, 122605);

const {:count 21} .str.48: ref;

axiom .str.48 == $sub.ref(0, 123650);

const {:count 22} .str.41: ref;

axiom .str.41 == $sub.ref(0, 124696);

const {:count 24} .str.43: ref;

axiom .str.43 == $sub.ref(0, 125744);

const {:count 11} .str.44: ref;

axiom .str.44 == $sub.ref(0, 126779);

const {:count 38} .str.45: ref;

axiom .str.45 == $sub.ref(0, 127841);

const {:count 28} .str.46: ref;

axiom .str.46 == $sub.ref(0, 128893);

const {:count 27} .str.49: ref;

axiom .str.49 == $sub.ref(0, 129944);

const {:count 25} .str.50: ref;

axiom .str.50 == $sub.ref(0, 130993);

const {:count 19} .str.51: ref;

axiom .str.51 == $sub.ref(0, 132036);

const {:count 12} .str.52: ref;

axiom .str.52 == $sub.ref(0, 133072);

const {:count 21} .str.1: ref;

axiom .str.1 == $sub.ref(0, 134117);

const {:count 208} .str.2: ref;

axiom .str.2 == $sub.ref(0, 135349);

const {:count 16} .str.3: ref;

axiom .str.3 == $sub.ref(0, 136389);

const {:count 28} .str.10: ref;

axiom .str.10 == $sub.ref(0, 137441);

const {:count 22} .str.11: ref;

axiom .str.11 == $sub.ref(0, 138487);

const {:count 18} .str.92: ref;

axiom .str.92 == $sub.ref(0, 139529);

const {:count 19} .str.93: ref;

axiom .str.93 == $sub.ref(0, 140572);

const {:count 17} .str.94: ref;

axiom .str.94 == $sub.ref(0, 141613);

const {:count 13} .str.95: ref;

axiom .str.95 == $sub.ref(0, 142650);

const {:count 20} .str.96: ref;

axiom .str.96 == $sub.ref(0, 143694);

const {:count 21} .str.4: ref;

axiom .str.4 == $sub.ref(0, 144739);

const {:count 207} .str.5: ref;

axiom .str.5 == $sub.ref(0, 145970);

const {:count 36} .str.6: ref;

axiom .str.6 == $sub.ref(0, 147030);

const {:count 14} .str.79: ref;

axiom .str.79 == $sub.ref(0, 148068);

const {:count 17} .str.80: ref;

axiom .str.80 == $sub.ref(0, 149109);

const {:count 17} .str.81: ref;

axiom .str.81 == $sub.ref(0, 150150);

const byte_rev_table: ref;

axiom byte_rev_table == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 21} .str.76: ref;

axiom .str.76 == $sub.ref(0, 151195);

const {:count 16} .str.77: ref;

axiom .str.77 == $sub.ref(0, 152235);

const {:count 18} .str.78: ref;

axiom .str.78 == $sub.ref(0, 153277);

const {:count 24} .str.26: ref;

axiom .str.26 == $sub.ref(0, 154325);

const {:count 209} .str.27: ref;

axiom .str.27 == $sub.ref(0, 155558);

const {:count 32} .str.28: ref;

axiom .str.28 == $sub.ref(0, 156614);

const {:count 10} .str.69: ref;

axiom .str.69 == $sub.ref(0, 157648);

const {:count 24} .str.70: ref;

axiom .str.70 == $sub.ref(0, 158696);

const {:count 21} .str.71: ref;

axiom .str.71 == $sub.ref(0, 159741);

const {:count 24} .str.53: ref;

axiom .str.53 == $sub.ref(0, 160789);

const {:count 207} .str.54: ref;

axiom .str.54 == $sub.ref(0, 162020);

const {:count 31} .str.55: ref;

axiom .str.55 == $sub.ref(0, 163075);

const {:count 24} .str.33: ref;

axiom .str.33 == $sub.ref(0, 164123);

const {:count 26} .str.35: ref;

axiom .str.35 == $sub.ref(0, 165173);

const {:count 33} .str.103: ref;

axiom .str.103 == $sub.ref(0, 166230);

const {:count 16} .str.104: ref;

axiom .str.104 == $sub.ref(0, 167270);

const {:count 21} .str.56: ref;

axiom .str.56 == $sub.ref(0, 168315);

const {:count 31} .str.57: ref;

axiom .str.57 == $sub.ref(0, 169370);

const {:count 23} .str.97: ref;

axiom .str.97 == $sub.ref(0, 170417);

const {:count 21} .str.72: ref;

axiom .str.72 == $sub.ref(0, 171462);

const {:count 30} .str.73: ref;

axiom .str.73 == $sub.ref(0, 172516);

const {:count 24} .str.74: ref;

axiom .str.74 == $sub.ref(0, 173564);

const {:count 25} .str.75: ref;

axiom .str.75 == $sub.ref(0, 174613);

const {:count 18} .str.36: ref;

axiom .str.36 == $sub.ref(0, 175655);

const {:count 18} .str.37: ref;

axiom .str.37 == $sub.ref(0, 176697);

const {:count 25} .str.38: ref;

axiom .str.38 == $sub.ref(0, 177746);

const {:count 27} .str.105: ref;

axiom .str.105 == $sub.ref(0, 178797);

const {:count 19} .str.106: ref;

axiom .str.106 == $sub.ref(0, 179840);

const {:count 27} .str.107: ref;

axiom .str.107 == $sub.ref(0, 180891);

const {:count 28} .str.108: ref;

axiom .str.108 == $sub.ref(0, 181943);

const {:count 12} .str.20: ref;

axiom .str.20 == $sub.ref(0, 182979);

const {:count 207} .str.21: ref;

axiom .str.21 == $sub.ref(0, 184210);

const {:count 24} .str.22: ref;

axiom .str.22 == $sub.ref(0, 185258);

const {:count 23} .str.23: ref;

axiom .str.23 == $sub.ref(0, 186305);

const {:count 22} .str.24: ref;

axiom .str.24 == $sub.ref(0, 187351);

const {:count 17} .str.25: ref;

axiom .str.25 == $sub.ref(0, 188392);

const {:count 14} .str.17: ref;

axiom .str.17 == $sub.ref(0, 189430);

const {:count 20} .str.19: ref;

axiom .str.19 == $sub.ref(0, 190474);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 191506);

const {:count 3} .str.1.236: ref;

axiom .str.1.236 == $sub.ref(0, 192533);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 193571);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 194599);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 195631);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 196663);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const vt6656_probe: ref;

axiom vt6656_probe == $sub.ref(0, 197695);

procedure vt6656_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.2, $CurrAddr, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation vt6656_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $p28: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p36: ref;
  var $p39: ref;
  var $p42: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i77: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_69: ref;
  var vslice_dummy_var_70: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p7 := interface_to_usbdev($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p8 := usb_get_dev($p7);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} dev_notice.ref.ref.ref.ref($p9, .str.82, .str.83, .str.84);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} dev_notice.ref.ref($p10, .str.85);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p11 := ldv_ieee80211_alloc_hw_46(3248, vnt_mac_ops);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p11, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p11);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p8);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} vnt_set_options($p17);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} vslice_dummy_var_69 := spinlock_check($p20);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(56, 1)), $mul.ref(0, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} __raw_spin_lock_init($p24, .str.87, $p2);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(128, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} __mutex_init($p25, .str.88, $p3);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(0, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} __init_work($p27, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, 137438953408);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p5);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 18} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p32, $p33, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} lockdep_init_map($p36, .str.89, $p4, 0);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} INIT_LIST_HEAD($p39);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, vnt_run_command);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(80, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} init_timer_key($p44, 2097152, .str.90, $p6);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(80, 1)), $mul.ref(24, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, delayed_work_timer_fn);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1));
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(3008, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p52, $i49);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p17);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} usb_set_intfdata($p0, $p53);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 1776)), $mul.ref(108, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 2346);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p57, $mul.ref(0, 1776)), $mul.ref(112, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 2347);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p57, $mul.ref(0, 1776)), $mul.ref(48, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, 14);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} _ieee80211_hw_set($p62, 24);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} _ieee80211_hw_set($p64, 4);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} _ieee80211_hw_set($p66, 1);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} _ieee80211_hw_set($p68, 16);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 160)), $mul.ref(116, 1));
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 100);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} SET_IEEE80211_DEV($p73, $p74);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} usb_device_reset($p17);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p17, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} clear_bit(2, $p75);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vnt_reset_command_timer($p17);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} vslice_dummy_var_70 := vnt_schedule_command($p17, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i77 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $r := $i77;
    return;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} dev_err.ref.ref($p14, .str.86);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} usb_put_dev($p8);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32(0, 12);
    goto $bb5;
}



const vt6656_disconnect: ref;

axiom vt6656_disconnect == $sub.ref(0, 198727);

procedure vt6656_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation vt6656_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 3248)), $mul.ref(16, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p11 := interface_to_usbdev($p0);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} usb_put_dev($p11);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} set_bit(1, $p12);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_ieee80211_free_hw_47($p14);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} ieee80211_unregister_hw($p10);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vt6656_suspend: ref;

axiom vt6656_suspend == $sub.ref(0, 199759);

procedure vt6656_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $CurrAddr;



implementation vt6656_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i1);
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vt6656_resume: ref;

axiom vt6656_resume == $sub.ref(0, 200791);

procedure vt6656_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vt6656_resume($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 201823);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ieee80211_unregister_hw: ref;

axiom ieee80211_unregister_hw == $sub.ref(0, 202855);

procedure ieee80211_unregister_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_unregister_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 203887);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} dev_set_drvdata($p2, $p1);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    return;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 204919);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const usb_put_dev: ref;

axiom usb_put_dev == $sub.ref(0, 205951);

procedure usb_put_dev($p0: ref);
  free requires assertsPassed;



implementation usb_put_dev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 206983);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 43} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ieee80211_free_hw_47: ref;

axiom ldv_ieee80211_free_hw_47 == $sub.ref(0, 208015);

procedure ldv_ieee80211_free_hw_47($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_ieee80211_free_hw_47($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} ieee80211_free_hw($p0);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p1 := $M.2;
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 45} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_free_hw: ref;

axiom ieee80211_free_hw == $sub.ref(0, 209047);

procedure ieee80211_free_hw($p0: ref);
  free requires assertsPassed;



implementation ieee80211_free_hw($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 210079);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 211111);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_get_dev: ref;

axiom usb_get_dev == $sub.ref(0, 212143);

procedure usb_get_dev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_dev($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $p1 := external_alloc();
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_notice: ref;

axiom dev_notice == $sub.ref(0, 213175);

procedure dev_notice.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_notice.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_notice.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation dev_notice.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ieee80211_alloc_hw_46: ref;

axiom ldv_ieee80211_alloc_hw_46 == $sub.ref(0, 214207);

procedure ldv_ieee80211_alloc_hw_46($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.3, $M.2, $M.0, $CurrAddr;



implementation ldv_ieee80211_alloc_hw_46($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} {:cexpr "ldv_ieee80211_alloc_hw_46:arg:priv_data_len"} boogie_si_record_i64($i0);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p2 := ieee80211_alloc_hw($i0, $p1);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 49} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} ldv_initialize_ieee80211_ops_3();
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $M.2 := $p2;
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 215239);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    return;
}



const vnt_set_options: ref;

axiom vnt_set_options == $sub.ref(0, 216271);

procedure vnt_set_options($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_set_options($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i1 := $M.4;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 15);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $i3 := $M.4;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 128);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i6 := $M.4;
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2368, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i8 := $M.5;
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 15);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i9 == 1);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i10 := $M.5;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 128);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i13 := $M.5;
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1336, 1));
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2820, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 8);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2821, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 4);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2824, 1));
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 2);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2473, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p21, $i20);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3000, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p23, 0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2429, 1));
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p24, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1336, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 64);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2368, 1));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 64);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 217303);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 218335);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 219367);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 220399);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 221431);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 222463);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 223495);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    return;
}



const vnt_run_command: ref;

axiom vnt_run_command == $sub.ref(0, 224527);

procedure vnt_run_command($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.3, $M.20, $CurrAddr, $M.23, $M.29, $M.33, $M.34, $M.28, $M.35, $M.24, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18, assertsPassed;



implementation vnt_run_command($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(288, 1));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i5 := constant_test_bit(2, $p4);
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2984, 1));
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 1);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2836, 1));
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_73 := vnt_cmd_complete($p3);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, .str);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p54, .str.14);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p55, .str.15);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p56, .str.16);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.10, $p58);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 145);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p58, $i61);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p62, 0);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.11, $p63);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 58} {:cexpr "tmp___1"} boogie_si_record_i64($i67);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2448, 1));
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 0);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i76 == 1);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2448, 1));
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, 0);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2444, 1));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i84 == 1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} vnt_set_antenna_mode($p3, 2);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb41:
    assume $i84 == 1;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} vnt_set_antenna_mode($p3, 3);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb35:
    assume $i76 == 1;
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2448, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, 1);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2444, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i80 == 1);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} vnt_set_antenna_mode($p3, 3);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i80 == 1;
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} vnt_set_antenna_mode($p3, 2);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb32:
    assume $i68 == 1;
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(24, 1));
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2448, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p71, .str.16, $i73);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(8, 1));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i36 := $eq.i64($i35, 0);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(8, 1));
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_74 := vnt_beacon_make($p3, $p38);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} vnt_mac_reg_bits_on($p3, 87, 1);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i36 == 1;
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb11:
    assume $i13 == 1;
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} vslice_dummy_var_71 := vnt_next_tbtt_wakeup($p3);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i16 == 1);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(2814, 1));
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(0, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($add.ref($p44, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} vslice_dummy_var_72 := vnt_rf_setpower($p3, $i42, $i51);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb17;

  $bb20:
    assume $i17 == 1;
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(16, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(24, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} _dev_info.ref.ref($p24, .str.12);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i25 := vnt_init($p3);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 63} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb26:
    assume $i26 == 1;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(24, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} dev_err.ref.ref($p29, .str.13);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 3008), 3248)), $mul.ref(0, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} ldv_ieee80211_free_hw_239($p31);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i21 == 1;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 225559);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 226591);

procedure delayed_work_timer_fn($i0: i64);



const _ieee80211_hw_set: ref;

axiom _ieee80211_hw_set == $sub.ref(0, 227623);

procedure _ieee80211_hw_set($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation _ieee80211_hw_set($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} {:cexpr "_ieee80211_hw_set:arg:flg"} boogie_si_record_i32($i1);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    return;
}



const SET_IEEE80211_DEV: ref;

axiom SET_IEEE80211_DEV == $sub.ref(0, 228655);

procedure SET_IEEE80211_DEV($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_DEV($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} set_wiphy_dev($p3, $p1);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    return;
}



const usb_device_reset: ref;

axiom usb_device_reset == $sub.ref(0, 229687);

procedure usb_device_reset($p0: ref);
  free requires assertsPassed;



implementation usb_device_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i3 := usb_reset_device($p2);
    call {:si_unique_call 77} {:cexpr "status"} boogie_si_record_i32($i3);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} dev_warn.ref.ref.i32($p7, .str.91, $i3);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 230719);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 80} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    return;
}



const vnt_reset_command_timer: ref;

axiom vnt_reset_command_timer == $sub.ref(0, 231751);

procedure vnt_reset_command_timer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_reset_command_timer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2980, 1));
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 32);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2972, 1));
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2976, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2836, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 5);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2984, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    return;
}



const vnt_schedule_command: ref;

axiom vnt_schedule_command == $sub.ref(0, 232783);

procedure vnt_schedule_command($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation vnt_schedule_command($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $i5: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "vnt_schedule_command:arg:command"} boogie_si_record_i32($i1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2980, 1));
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2976, 1));
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2844, 1)), $mul.ref($i8, 4));
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i1);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2976, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 30);
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2976, 1));
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2976, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2980, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2980, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2984, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} vslice_dummy_var_75 := vnt_cmd_complete($p0);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2976, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const vnt_cmd_complete: ref;

axiom vnt_cmd_complete == $sub.ref(0, 233815);

procedure vnt_cmd_complete($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation vnt_cmd_complete($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2836, 1));
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 5);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2980, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 32);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2972, 1));
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2844, 1)), $mul.ref($i8, 4));
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2840, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2972, 1));
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 30);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2972, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i18, 1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2972, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2980, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, 1);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2980, 1));
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2984, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 1);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2840, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i27, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i27, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} vnt_cmd_timer_wait($p0, 0);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2836, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, 4);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2836, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 3);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2836, 1));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 2);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i27, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i32 == 1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2836, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 1);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb18:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i27, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb17;

  $bb20:
    assume $i33 == 1;
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2836, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2972, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2984, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_cmd_timer_wait: ref;

axiom vnt_cmd_timer_wait == $sub.ref(0, 234847);

procedure vnt_cmd_timer_wait($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation vnt_cmd_timer_wait($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var vslice_dummy_var_76: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "vnt_cmd_timer_wait:arg:msecs"} boogie_si_record_i64($i1);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $i3 := msecs_to_jiffies($i2);
    call {:si_unique_call 86} {:cexpr "tmp"} boogie_si_record_i64($i3);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3008, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} vslice_dummy_var_76 := schedule_delayed_work($p4, $i3);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 235879);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 90} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 236911);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 93} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 237943);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $i3 := ldv_queue_delayed_work_on_213(8192, $p0, $p1, $i2);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 96} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_queue_delayed_work_on_213: ref;

axiom ldv_queue_delayed_work_on_213 == $sub.ref(0, 238975);

procedure ldv_queue_delayed_work_on_213($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation ldv_queue_delayed_work_on_213($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;
  var $i5: i8;
  var $i6: i1;
  var $i7: i8;
  var $p8: ref;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} {:cexpr "ldv_queue_delayed_work_on_213:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 98} {:cexpr "ldv_queue_delayed_work_on_213:arg:ldv_func_arg4"} boogie_si_record_i64($i3);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i4 := queue_delayed_work_on($i0, $p1, $p2, $i3);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 100} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 101} {:cexpr "ldv_func_res"} boogie_si_record_i8($i7);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} activate_work_1($p8, 2);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i7);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 240007);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 103} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 104} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 1} true;
    call {:si_unique_call 105} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 106} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 241039);

procedure activate_work_1($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation activate_work_1($p0: ref, $i1: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "activate_work_1:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $i2 := $M.12;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.14;
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.16;
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.19 := $p0;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $M.18 := $i1;
    call {:si_unique_call 111} {:cexpr "ldv_work_1_3"} boogie_si_record_i32($i1);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $M.17 := $p0;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.16 := $i1;
    call {:si_unique_call 110} {:cexpr "ldv_work_1_2"} boogie_si_record_i32($i1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.15 := $p0;
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $M.14 := $i1;
    call {:si_unique_call 109} {:cexpr "ldv_work_1_1"} boogie_si_record_i32($i1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $M.13 := $p0;
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $M.12 := $i1;
    call {:si_unique_call 108} {:cexpr "ldv_work_1_0"} boogie_si_record_i32($i1);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 242071);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 112} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 1} true;
    call {:si_unique_call 113} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 114} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_reset_device: ref;

axiom usb_reset_device == $sub.ref(0, 243103);

procedure usb_reset_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_reset_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 115} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 116} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 244135);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    return;
}



const set_wiphy_dev: ref;

axiom set_wiphy_dev == $sub.ref(0, 245167);

procedure set_wiphy_dev($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation set_wiphy_dev($p0: ref, $p1: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1776)), $mul.ref(264, 1)), $mul.ref(0, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $p1);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 246199);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 247231);

procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    return;
}



const vnt_init: ref;

axiom vnt_init == $sub.ref(0, 248263);

procedure vnt_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.20, $M.29, $M.33, $M.34, $M.28, $M.35, $CurrAddr, assertsPassed;



implementation vnt_init($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i3: i32;
  var vslice_dummy_var_77: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $i1 := vnt_init_registers($p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 119} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2423, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} SET_IEEE80211_PERM_ADDR($p5, $p7);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} vnt_init_bands($p0);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i10 := ieee80211_register_hw($p9);
    call {:si_unique_call 123} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(16, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 1);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} vslice_dummy_var_77 := vnt_radio_power_off($p0);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, 11);
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const ldv_ieee80211_free_hw_239: ref;

axiom ldv_ieee80211_free_hw_239 == $sub.ref(0, 249295);

procedure ldv_ieee80211_free_hw_239($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_ieee80211_free_hw_239($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 125} ieee80211_free_hw($p0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p1 := $M.2;
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 126} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_next_tbtt_wakeup: ref;

axiom vnt_next_tbtt_wakeup == $sub.ref(0, 250327);

procedure vnt_next_tbtt_wakeup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $CurrAddr;



implementation vnt_next_tbtt_wakeup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} vnt_mac_reg_bits_on($p0, 97, 4);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;
}



const vnt_beacon_make: ref;

axiom vnt_beacon_make == $sub.ref(0, 251359);

procedure vnt_beacon_make($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.24, $CurrAddr, assertsPassed;



implementation vnt_beacon_make($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p4 := ieee80211_beacon_get($p3, $p1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $i8 := vnt_beacon_xmit($p0, $p4);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 130} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} ieee80211_free_txskb($p11, $p4);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 12);
    goto $bb3;
}



const vnt_mac_reg_bits_on: ref;

axiom vnt_mac_reg_bits_on == $sub.ref(0, 252391);

procedure vnt_mac_reg_bits_on($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;
  modifies $M.20, $CurrAddr;



implementation vnt_mac_reg_bits_on($p0: ref, $i1: i8, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 133} {:cexpr "vnt_mac_reg_bits_on:arg:reg_ofs"} boogie_si_record_i8($i1);
    call {:si_unique_call 134} {:cexpr "vnt_mac_reg_bits_on:arg:bits"} boogie_si_record_i8($i2);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p4, $i2);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $M.20 := $store.i8($M.20, $p5, $i2);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} vslice_dummy_var_78 := vnt_control_out($p0, 4, $i7, 3, 2, $p8);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    return;
}



const vnt_rf_setpower: ref;

axiom vnt_rf_setpower == $sub.ref(0, 253423);

procedure vnt_rf_setpower($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.23, $CurrAddr;



implementation vnt_rf_setpower($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $p24: ref;
  var $i25: i8;
  var $i26: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $p32: ref;
  var $i33: i8;
  var $i35: i32;
  var $i36: i64;
  var $p38: ref;
  var $i39: i8;
  var $i34: i8;
  var $i27: i8;
  var $i40: i32;
  var $i41: i8;
  var $i42: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} {:cexpr "vnt_rf_setpower:arg:rate"} boogie_si_record_i32($i1);
    call {:si_unique_call 137} {:cexpr "vnt_rf_setpower:arg:channel"} boogie_si_record_i32($i2);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    call {:si_unique_call 138} {:cexpr "power"} boogie_si_record_i8($i4);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i27 := $i4;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i27);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i8($i40);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i42 := vnt_rf_set_txpower($p0, $i41, $i1);
    call {:si_unique_call 142} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i6 := $i42;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i2, 14);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i28 == 1);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32($i2, 1);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref($i36, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    call {:si_unique_call 144} {:cexpr "power"} boogie_si_record_i8($i39);
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i27 := $i34;
    goto $bb46;

  $bb47:
    assume $i28 == 1;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i2, 15);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref($i30, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    call {:si_unique_call 143} {:cexpr "power"} boogie_si_record_i8($i33);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb49;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i1, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb29, $bb31;

  $bb31:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i1, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb32:
    assume $i16 == 1;
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i2, 1);
    call {:si_unique_call 139} {:cexpr "channel"} boogie_si_record_i32($i20);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i21 := $ule.i32($i20, 13);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i4;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb46;

  $bb43:
    assume $i21 == 1;
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i20);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref($i22, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    call {:si_unique_call 140} {:cexpr "power"} boogie_si_record_i8($i25);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb45;

  $bb27:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb37, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb19;

  $bb41:
    assume $i19 == 1;
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 254455);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 146} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 255487);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i64);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i64($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i64)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    return;
}



const vnt_set_antenna_mode: ref;

axiom vnt_set_antenna_mode == $sub.ref(0, 256519);

procedure vnt_set_antenna_mode($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_set_antenna_mode($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i8;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i32;
  var $i27: i16;
  var vslice_dummy_var_79: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} {:cexpr "vnt_set_antenna_mode:arg:antenna_mode"} boogie_si_record_i8($i1);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} vslice_dummy_var_79 := vnt_control_out($p0, 11, $i27, 0, 0, $0.ref);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 254);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i18);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i22, 2);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i24);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 252);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i12);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i2, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb12:
    assume $i7 == 1;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const vnt_control_out: ref;

axiom vnt_control_out == $sub.ref(0, 257551);

procedure vnt_control_out($p0: ref, $i1: i8, $i2: i16, $i3: i16, $i4: i16, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vnt_control_out($p0: ref, $i1: i8, $i2: i16, $i3: i16, $i4: i16, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "vnt_control_out:arg:request"} boogie_si_record_i8($i1);
    call {:si_unique_call 150} {:cexpr "vnt_control_out:arg:value"} boogie_si_record_i16($i2);
    call {:si_unique_call 151} {:cexpr "vnt_control_out:arg:index"} boogie_si_record_i16($i3);
    call {:si_unique_call 152} {:cexpr "vnt_control_out:arg:length"} boogie_si_record_i16($i4);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} $i7 := constant_test_bit(2, $p6);
    call {:si_unique_call 154} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(128, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} mutex_lock_nested($p10, 0);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $i13 := __create_pipe($p12, 0);
    call {:si_unique_call 157} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, $sub.i32(0, 2147483648));
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i1);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i2);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i3);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i4);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $i25 := usb_control_msg($p15, $i16, $i18, 64, $i20, $i22, $p5, $i24, 500);
    call {:si_unique_call 159} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(128, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} mutex_unlock($p26);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i4);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i25);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 258583);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    return;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 259615);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 260647);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 163} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 164} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 165} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 166} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 167} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 168} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 169} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 170} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 171} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 261679);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    return;
}



const vnt_rf_set_txpower: ref;

axiom vnt_rf_set_txpower == $sub.ref(0, 262711);

procedure vnt_rf_set_txpower($p0: ref, $i1: i8, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.23, $CurrAddr;



implementation vnt_rf_set_txpower($p0: ref, $i1: i8, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i32;
  var $i43: i32;
  var $i44: i32;
  var $i42: i32;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i59: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i68: i32;
  var $i69: i32;
  var $i67: i32;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i24;
  var $i111: i24;
  var $i112: i24;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i32;
  var $i126: i16;
  var $i127: i32;
  var $i128: i1;
  var $i129: i32;
  var $i130: i64;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i24;
  var $i146: i24;
  var $i147: i24;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i32;
  var $i169: i32;
  var $i138: i32;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i45: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 174} {:cexpr "vnt_rf_set_txpower:arg:power"} boogie_si_record_i8($i1);
    call {:si_unique_call 175} {:cexpr "vnt_rf_set_txpower:arg:rate"} boogie_si_record_i32($i2);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $i5 := vnt_rf_addpower($p0);
    call {:si_unique_call 177} {:cexpr "tmp"} boogie_si_record_i8($i5);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i6, $i7);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    call {:si_unique_call 178} {:cexpr "power"} boogie_si_record_i8($i9);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, 63);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2742, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i12);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i15, $i16);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2742, 1));
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p19, $i12);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i22, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i22, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i45 := 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i18 := $i45;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb15:
    assume $i26 == 1;
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i12);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, 63);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i12);
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i48);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref($i49, 4));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.21, $p50);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $i52 := vnt_rf_write_embedded($p0, $i51);
    call {:si_unique_call 189} {:cexpr "tmp___3"} boogie_si_record_i32($i52);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 1);
    call {:si_unique_call 190} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i54 := $ule.i32($i2, 3);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i54 == 1);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i60 := vnt_rf_write_embedded($p0, 369664);
    call {:si_unique_call 198} {:cexpr "tmp___6"} boogie_si_record_i32($i60);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, $i53);
    call {:si_unique_call 199} {:cexpr "ret"} boogie_si_record_i32($i61);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $i62 := vnt_rf_write_embedded($p0, 629504);
    call {:si_unique_call 201} {:cexpr "tmp___7"} boogie_si_record_i32($i62);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, $i61);
    call {:si_unique_call 202} {:cexpr "ret"} boogie_si_record_i32($i63);
    assume {:verifier.code 0} true;
    $i59 := $i63;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i45 := $i59;
    goto $bb32;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i55 := vnt_rf_write_embedded($p0, 67900416);
    call {:si_unique_call 192} {:cexpr "tmp___4"} boogie_si_record_i32($i55);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, $i53);
    call {:si_unique_call 193} {:cexpr "ret"} boogie_si_record_i32($i56);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $i57 := vnt_rf_write_embedded($p0, 2726656);
    call {:si_unique_call 195} {:cexpr "tmp___5"} boogie_si_record_i32($i57);
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, $i56);
    call {:si_unique_call 196} {:cexpr "ret"} boogie_si_record_i32($i58);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i59 := $i58;
    goto $bb38;

  $bb33:
    assume $i47 == 1;
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $i170 := $zext.i8.i32($i12);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i171 := $ugt.i32($i170, 63);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i12);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i173 := $sub.i32(63, $i172);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i174 := $shl.i32($i173, 20);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i174, 9984);
    call {:si_unique_call 251} {:cexpr "power_setting"} boogie_si_record_i32($i175);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i176 := vnt_rf_write_embedded($p0, $i175);
    call {:si_unique_call 253} {:cexpr "tmp___22"} boogie_si_record_i32($i176);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 1);
    call {:si_unique_call 254} {:cexpr "ret"} boogie_si_record_i32($i177);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i45 := $i177;
    goto $bb32;

  $bb63:
    assume $i171 == 1;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i12);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i86 := $ugt.i32($i85, 63);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i87 := $ule.i32($i2, 3);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i87 == 1);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p139, .str);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p140, .str.29);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p141, .str.30);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p142, .str.32);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i145 := $load.i24($M.10, $p144);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i146 := $and.i24($i145, $sub.i24(0, 262144));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i147 := $or.i24($i146, 778);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p144, $i147);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p148, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.11, $p149);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i64($i150);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $i152 := $and.i64($i151, 1);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} $i153 := ldv__builtin_expect($i152, 0);
    call {:si_unique_call 228} {:cexpr "tmp___17"} boogie_si_record_i64($i153);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i12);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i159 := $sub.i32(63, $i158);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i160 := $shl.i32($i159, 20);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i161 := $or.i32($i160, 1792);
    call {:si_unique_call 238} {:cexpr "power_setting"} boogie_si_record_i32($i161);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i162 := vnt_rf_write_embedded($p0, $i161);
    call {:si_unique_call 240} {:cexpr "tmp___18"} boogie_si_record_i32($i162);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 1);
    call {:si_unique_call 241} {:cexpr "ret"} boogie_si_record_i32($i163);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i164 := vnt_rf_write_embedded($p0, 13017600);
    call {:si_unique_call 243} {:cexpr "tmp___19"} boogie_si_record_i32($i164);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i165 := $and.i32($i164, $i163);
    call {:si_unique_call 244} {:cexpr "ret"} boogie_si_record_i32($i165);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i166 := vnt_rf_write_embedded($p0, 23840256);
    call {:si_unique_call 246} {:cexpr "tmp___20"} boogie_si_record_i32($i166);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i167 := $and.i32($i166, $i165);
    call {:si_unique_call 247} {:cexpr "ret"} boogie_si_record_i32($i167);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} $i168 := vnt_rf_write_embedded($p0, 9439232);
    call {:si_unique_call 249} {:cexpr "tmp___21"} boogie_si_record_i32($i168);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, $i167);
    call {:si_unique_call 250} {:cexpr "ret"} boogie_si_record_i32($i169);
    assume {:verifier.code 0} true;
    $i138 := $i169;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i45 := $i138;
    goto $bb32;

  $bb60:
    assume $i154 == 1;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p156, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} __dynamic_dev_dbg.ref.ref.ref($p4, $p157, .str.32);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb51:
    assume $i87 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($add.ref($p89, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.0, $p94);
    call {:si_unique_call 217} {:cexpr "hw_value"} boogie_si_record_i16($i95);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i12);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32(63, $i96);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i98 := $shl.i32($i97, 20);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i98, 919296);
    call {:si_unique_call 218} {:cexpr "power_setting"} boogie_si_record_i32($i99);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i100 := vnt_rf_write_embedded($p0, $i99);
    call {:si_unique_call 220} {:cexpr "tmp___12"} boogie_si_record_i32($i100);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 1);
    call {:si_unique_call 221} {:cexpr "ret"} boogie_si_record_i32($i101);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i102 := vnt_rf_write_embedded($p0, 63349248);
    call {:si_unique_call 223} {:cexpr "tmp___13"} boogie_si_record_i32($i102);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i103 := $and.i32($i102, $i101);
    call {:si_unique_call 224} {:cexpr "ret"} boogie_si_record_i32($i103);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p104, .str);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p105, .str.29);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p106, .str.30);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p107, .str.31);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i110 := $load.i24($M.10, $p109);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i111 := $and.i24($i110, $sub.i24(0, 262144));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i112 := $or.i24($i111, 767);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p109, $i112);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p113, 0);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.11, $p114);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i64($i115);
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i117 := $and.i64($i116, 1);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i118 := ldv__builtin_expect($i117, 0);
    call {:si_unique_call 226} {:cexpr "tmp___14"} boogie_si_record_i64($i118);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i95);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i125 := $sub.i32($i124, 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i32.i16($i125);
    call {:si_unique_call 230} {:cexpr "hw_value"} boogie_si_record_i16($i126);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i127 := $zext.i16.i32($i126);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i128 := $ule.i32($i127, 13);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i135 := $i103;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i136 := vnt_rf_write_embedded($p0, 22808576);
    call {:si_unique_call 235} {:cexpr "tmp___16"} boogie_si_record_i32($i136);
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, $i135);
    call {:si_unique_call 236} {:cexpr "ret"} boogie_si_record_i32($i137);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $i138 := $i137;
    goto $bb59;

  $bb56:
    assume $i128 == 1;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i126);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref($i130, 4));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.22, $p131);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} $i133 := vnt_rf_write_embedded($p0, $i132);
    call {:si_unique_call 232} {:cexpr "tmp___15"} boogie_si_record_i32($i133);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, $i103);
    call {:si_unique_call 233} {:cexpr "ret"} boogie_si_record_i32($i134);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i135 := $i134;
    goto $bb58;

  $bb53:
    assume $i119 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p121 := $load.ref($M.0, $p120);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i95);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p122, .str.31, .str.29, $i123);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb48:
    assume $i86 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb9:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i22, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i22, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i22, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb17;

  $bb22:
    assume $i29 == 1;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i64 := $ule.i32($i2, 3);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i64 == 1);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i68 := vnt_rf_write_embedded($p0, 572242176);
    call {:si_unique_call 207} {:cexpr "tmp___9"} boogie_si_record_i32($i68);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i68, 1);
    call {:si_unique_call 208} {:cexpr "ret"} boogie_si_record_i32($i69);
    assume {:verifier.code 0} true;
    $i67 := $i69;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i12);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i71 := $ugt.i32($i70, 63);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i12);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $i73 := $shl.i32($i72, 12);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 135006976);
    call {:si_unique_call 209} {:cexpr "power_setting"} boogie_si_record_i32($i74);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i75 := vnt_rf_write_embedded($p0, $i74);
    call {:si_unique_call 211} {:cexpr "tmp___10"} boogie_si_record_i32($i75);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, $i67);
    call {:si_unique_call 212} {:cexpr "ret"} boogie_si_record_i32($i76);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i45 := $i76;
    goto $bb32;

  $bb42:
    assume $i71 == 1;
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb39:
    assume $i64 == 1;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i65 := vnt_rf_write_embedded($p0, 287029504);
    call {:si_unique_call 204} {:cexpr "tmp___8"} boogie_si_record_i32($i65);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 1);
    call {:si_unique_call 205} {:cexpr "ret"} boogie_si_record_i32($i66);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i67 := $i66;
    goto $bb41;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i12);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $i78 := $ugt.i32($i77, 63);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i12);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32(63, $i79);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 20);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, 5888);
    call {:si_unique_call 213} {:cexpr "power_setting"} boogie_si_record_i32($i82);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i83 := vnt_rf_write_embedded($p0, $i82);
    call {:si_unique_call 215} {:cexpr "tmp___11"} boogie_si_record_i32($i83);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i83, 1);
    call {:si_unique_call 216} {:cexpr "ret"} boogie_si_record_i32($i84);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i45 := $i84;
    goto $bb32;

  $bb45:
    assume $i78 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb18:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb17;

  $bb24:
    assume $i30 == 1;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i12);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i32 := $ugt.i32($i31, 63);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i12);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i33);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref($i34, 4));
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.21, $p35);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i37 := vnt_rf_write_embedded($p0, $i36);
    call {:si_unique_call 180} {:cexpr "tmp___0"} boogie_si_record_i32($i37);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 1);
    call {:si_unique_call 181} {:cexpr "ret"} boogie_si_record_i32($i38);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i39 := $ule.i32($i2, 3);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i39 == 1);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i43 := vnt_rf_write_embedded($p0, 369664);
    call {:si_unique_call 186} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, $i38);
    call {:si_unique_call 187} {:cexpr "ret"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    $i42 := $i44;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $i45 := $i42;
    goto $bb32;

  $bb29:
    assume $i39 == 1;
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $i40 := vnt_rf_write_embedded($p0, 111616);
    call {:si_unique_call 183} {:cexpr "tmp___1"} boogie_si_record_i32($i40);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, $i38);
    call {:si_unique_call 184} {:cexpr "ret"} boogie_si_record_i32($i41);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $i42 := $i41;
    goto $bb31;

  $bb26:
    assume $i32 == 1;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i12 := 63;
    goto $bb3;
}



const vnt_rf_addpower: ref;

axiom vnt_rf_addpower == $sub.ref(0, 263743);

procedure vnt_rf_addpower($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation vnt_rf_addpower($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i5: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2440, 1));
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i3 := $sub.i32(0, $i2);
    call {:si_unique_call 255} {:cexpr "rssi"} boogie_si_record_i32($i3);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 12);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i3, $sub.i32(0, 80));
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i13 == 1);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i3, $sub.i32(0, 75));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i14 == 1);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i3, $sub.i32(0, 70));
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $i5 := 5;
    goto $bb3;

  $bb19:
    assume $i14 == 1;
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i5 := 7;
    goto $bb3;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i5 := 9;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i3, $sub.i32(0, 70));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i3, $sub.i32(0, 65));
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i11 == 1);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i3, $sub.i32(0, 60));
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i5 := 5;
    goto $bb3;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i5 := 7;
    goto $bb3;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i5 := 9;
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $i5 := 7;
    goto $bb3;
}



const vnt_rf_write_embedded: ref;

axiom vnt_rf_write_embedded == $sub.ref(0, 264775);

procedure vnt_rf_write_embedded($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $CurrAddr;



implementation vnt_rf_write_embedded($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i8;
  var $p5: ref;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 257} {:cexpr "vnt_rf_write_embedded:arg:data"} boogie_si_record_i32($i1);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i1, 185);
    call {:si_unique_call 258} {:cexpr "data"} boogie_si_record_i32($i3);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i8($i3);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p5, $i4);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i3, 8);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p8, $i7);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i32($i3, 16);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p11, $i10);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i3, 24);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $M.23 := $store.i8($M.23, $p14, $i13);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p2);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} vslice_dummy_var_80 := vnt_control_out($p0, 17, 0, 0, 4, $p15);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const ieee80211_beacon_get: ref;

axiom ieee80211_beacon_get == $sub.ref(0, 265807);

procedure ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p2 := ieee80211_beacon_get_tim($p0, $p1, $0.ref, $0.ref);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vnt_beacon_xmit: ref;

axiom vnt_beacon_xmit == $sub.ref(0, 266839);

procedure vnt_beacon_xmit($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.24, $CurrAddr, assertsPassed;



implementation vnt_beacon_xmit($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i24;
  var $i16: i24;
  var $i17: i24;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $i42: i16;
  var $p43: ref;
  var $i44: i32;
  var $i45: i16;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i16;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $p53: ref;
  var $i54: i32;
  var $i55: i16;
  var $p56: ref;
  var $i57: i16;
  var $p58: ref;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $p85: ref;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i32;
  var $i90: i16;
  var $p91: ref;
  var $p92: ref;
  var $i93: i16;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i16;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i29: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 4);
    call {:si_unique_call 262} {:cexpr "frame_size"} boogie_si_record_i32($i5);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} ldv_spin_lock();
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} $p6 := vnt_get_free_context($p0);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(8, 1));
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p1);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} spin_unlock_irqrestore($p31, $u0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(50, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    $p48 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i49 := $load.i16($M.0, $p48);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i49);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 256);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    $p53 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p53, $i52);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32(0);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    $p56 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} vnt_get_phy_field($p0, $i5, $i55, 1, $p56);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} $i57 := vnt_get_duration_le($p0, 1, 0);
    $p58 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, $i57);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32(0);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $i61 := vnt_time_stamp_off($p0, $i60);
    $p62 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(10, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, $i61);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i68 := $load.i32($M.0, $p67);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i69 := $zext.i32.i64($i68);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 276} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p64, $p66, $i69, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    $p70 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(16, 1)), $mul.ref(24, 1));
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, 0);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p73 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i75, 2);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2834, 1));
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2834, 1));
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p91, $i90);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2834, 1));
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p92);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 4095);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    $i101 := $add.i32($i100, 12);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    call {:si_unique_call 278} {:cexpr "count"} boogie_si_record_i16($i102);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(2, 1));
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p103, $i102);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(45, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(1, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p106, $i105);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 1);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(44, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, 3);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i102);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i110 := $add.i32($i109, 4);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(32, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} ldv_spin_lock();
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i112 := vnt_tx_context($p0, $p6);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 281} {:cexpr "tmp___0"} boogie_si_record_i32($i112);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 3);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} spin_unlock_irqrestore($p118, $u0);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb17:
    assume $i113 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(8, 1));
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} ieee80211_free_txskb($p115, $p117);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i95 == 1;
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2834, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, 0);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb11:
    assume $i77 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p63);
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 30)), $mul.ref(2, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, 0);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2834, 1));
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i83 := $shl.i32($i82, 4);
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i16($i83);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p78, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p85, $i84);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32(4);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    $p41 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(4, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} vnt_get_phy_field($p0, $i5, $i40, 0, $p41);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i42 := vnt_get_duration_le($p0, 0, 0);
    $p43 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(8, 1));
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32(4);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $i46 := vnt_time_stamp_off($p0, $i45);
    $p47 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 56)), $mul.ref(4, 1)), $mul.ref(10, 1));
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i46);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p9, .str);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p10, .str.101);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p11, .str.18);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p12, .str.102);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i15 := $load.i24($M.10, $p14);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i16 := $and.i24($i15, $sub.i24(0, 262144));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i17 := $or.i24($i16, 1003);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p14, $i17);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p18, 0);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.11, $p19);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i64($i20);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 1);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i23 := ldv__builtin_expect($i22, 0);
    call {:si_unique_call 266} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} spin_unlock_irqrestore($p28, $u0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 12);
    goto $bb6;

  $bb3:
    assume $i24 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p27, .str.102, .str.101);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ieee80211_free_txskb: ref;

axiom ieee80211_free_txskb == $sub.ref(0, 267871);

procedure ieee80211_free_txskb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_free_txskb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 268903);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 284} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    return;
}



const vnt_get_free_context: ref;

axiom vnt_get_free_context == $sub.ref(0, 269935);

procedure vnt_get_free_context($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr;



implementation vnt_get_free_context($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i27: i64;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i34: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i26: i32;
  var $i49: i32;
  var $i25: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p33: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p3, .str);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p4, .str.98);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p5, .str.18);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p6, .str.99);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.10, $p8);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 83);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p8, $i11);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p12, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.11, $p13);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2368, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i24 := $ult.i32(0, $i23);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i25 := 0;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2368, 1));
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i25, $i51);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p33 := $0.ref;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $r := $p33;
    return;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p53, .str);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p54, .str.98);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p55, .str.18);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p56, .str.100);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.10, $p58);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 102);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p58, $i61);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p62, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.11, $p63);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 293} {:cexpr "tmp___0"} boogie_si_record_i64($i67);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i68 == 1;
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p71, .str.100, .str.98);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb7;

  $bb7:
    call $i27, $p29, $p30, $i31, $i32, $i34, $p36, $p37, $p38, $i39, $i40, $p41, $i46, $i47, $i48, $i26, $i49 := vnt_get_free_context_loop_$bb7($p0, $p22, $i27, $p29, $p30, $i31, $i32, $i34, $p36, $p37, $p38, $i39, $i40, $p41, $i46, $i47, $i48, $i26, $i49);
    goto $bb7_last;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i26);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref($i27, 8));
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $sext.i32.i64($i26);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref($i34, 8));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i8.i1($i39);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p41 := $p37;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 1);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p41, $mul.ref(0, 2952)), $mul.ref(50, 1));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 290} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p44, 0, 2900, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p41, $mul.ref(0, 2952)), $mul.ref(24, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p33 := $p41;
    goto $bb11;

  $bb13:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i26, 1);
    call {:si_unique_call 291} {:cexpr "ii"} boogie_si_record_i32($i46);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p22);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i46, $i47);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i49 := $i46;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i25 := $i49;
    goto $bb6;

  $bb16:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i26 := $i46;
    goto $bb16_dummy;

  $bb9:
    assume $i32 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p33 := $0.ref;
    goto $bb11;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p21, .str.99, .str.98);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1342;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 270967);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.24;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} ldv_spin_unlock();
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} ldv_spin_unlock_irqrestore_257($p0, $i1);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    return;
}



const vnt_get_phy_field: ref;

axiom vnt_get_phy_field == $sub.ref(0, 271999);

procedure vnt_get_phy_field($p0: ref, $i1: i32, $i2: i16, $i3: i8, $p4: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_get_phy_field($p0: ref, $i1: i32, $i2: i16, $i3: i8, $p4: ref)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i23: i32;
  var $i24: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i32;
  var $i98: i8;
  var $p99: ref;
  var $i100: i16;
  var $p101: ref;
  var $p102: ref;
  var $i103: i16;
  var $p104: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "vnt_get_phy_field:arg:frame_length"} boogie_si_record_i32($i1);
    call {:si_unique_call 299} {:cexpr "vnt_get_phy_field:arg:tx_rate"} boogie_si_record_i16($i2);
    call {:si_unique_call 300} {:cexpr "vnt_get_phy_field:arg:pkt_type"} boogie_si_record_i8($i3);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    call {:si_unique_call 301} {:cexpr "preamble_type"} boogie_si_record_i8($i6);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i7 := $mul.i32($i1, 8);
    call {:si_unique_call 302} {:cexpr "bit_count"} boogie_si_record_i32($i7);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i8, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i8, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i8, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i8, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i32($i3);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i87 == 1);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, $sub.i8(0, 116));
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i3);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i91 == 1);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i1);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p104, $i103);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    return;

  $bb76:
    assume $i91 == 1;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, 0);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i93 := $ne.i32($i24, 0);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i23);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p101, $i100);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i93 == 1;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, 128);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i97);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i98);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb73:
    assume $i87 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $sub.i8(0, 100));
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb10:
    assume $i13 == 1;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i3);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i83 == 1);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, $sub.i8(0, 116));
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb69:
    assume $i83 == 1;
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, $sub.i8(0, 100));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i3);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i79 == 1);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $sub.i8(0, 120));
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb66:
    assume $i79 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, $sub.i8(0, 104));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i3);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i75 == 1);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, $sub.i8(0, 115));
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb63:
    assume $i75 == 1;
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, $sub.i8(0, 99));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb4:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i8, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i8, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i3);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 0);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i71 == 1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, $sub.i8(0, 119));
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb60:
    assume $i71 == 1;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p72, $sub.i8(0, 103));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i3);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i67 == 1);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $sub.i8(0, 114));
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb57:
    assume $i67 == 1;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, $sub.i8(0, 98));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb13:
    assume $i14 == 1;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i3);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i63 == 1);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p65, $sub.i8(0, 118));
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb54:
    assume $i63 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, $sub.i8(0, 102));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb2:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i8, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i8, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i8, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i18 == 1);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i3);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 0);
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i59 == 1);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p61, $sub.i8(0, 113));
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb51:
    assume $i59 == 1;
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, $sub.i8(0, 97));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb21:
    assume $i18 == 1;
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i3);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 0);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i55 == 1);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $sub.i8(0, 117));
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i23, $i24 := 0, 0;
    goto $bb29;

  $bb48:
    assume $i55 == 1;
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, $sub.i8(0, 101));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb19:
    assume $i17 == 1;
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i41 := $udiv.i32($i7, 11);
    call {:si_unique_call 303} {:cexpr "count"} boogie_si_record_i32($i41);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 11);
    call {:si_unique_call 304} {:cexpr "tmp"} boogie_si_record_i32($i42);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, $i7);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i48, $i49 := $i41, 0;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i6);
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i51 == 1);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, 3);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i48, $i49;
    goto $bb29;

  $bb45:
    assume $i51 == 1;
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 11);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb39:
    assume $i43 == 1;
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i41, 1);
    call {:si_unique_call 309} {:cexpr "count"} boogie_si_record_i32($i44);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i7, $i42);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i46 := $ule.i32($i45, 3);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i44, $i47;
    goto $bb44;

  $bb41:
    assume $i46 == 1;
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $i47 := 1;
    goto $bb43;

  $bb17:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i8, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i8, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i20 == 1);
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $i30 := $mul.i32($i7, 10);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $i31 := $udiv.i32($i30, 55);
    call {:si_unique_call 306} {:cexpr "count"} boogie_si_record_i32($i31);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i32 := $mul.i32($i31, 55);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i33 := $udiv.i32($i32, 10);
    call {:si_unique_call 307} {:cexpr "tmp"} boogie_si_record_i32($i33);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, $i7);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i31;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i6);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i38 == 1);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 2);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i36, 0;
    goto $bb29;

  $bb36:
    assume $i38 == 1;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p39, 10);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i34 == 1;
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i31, 1);
    call {:si_unique_call 308} {:cexpr "count"} boogie_si_record_i32($i35);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb35;

  $bb25:
    assume $i20 == 1;
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $i25 := $udiv.i32($i7, 2);
    call {:si_unique_call 305} {:cexpr "count"} boogie_si_record_i32($i25);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i6);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 1);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i27 == 1);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i25, 0;
    goto $bb29;

  $bb30:
    assume $i27 == 1;
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, 9);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb23:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i8, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb12;

  $bb27:
    assume $i21 == 1;
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i7, 0;
    goto $bb29;
}



const vnt_get_duration_le: ref;

axiom vnt_get_duration_le == $sub.ref(0, 273031);

procedure vnt_get_duration_le($p0: ref, $i1: i8, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation vnt_get_duration_le($p0: ref, $i1: i8, $i2: i32) returns ($r: i16)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $i17: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i32;
  var $i36: i16;
  var $i37: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} {:cexpr "vnt_get_duration_le:arg:pkt_type"} boogie_si_record_i8($i1);
    call {:si_unique_call 311} {:cexpr "vnt_get_duration_le:arg:need_ack"} boogie_si_record_i32($i2);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $r := $i37;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i1);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 314} $i28 := vnt_get_frame_time($i21, $i23, 14, $i27);
    call {:si_unique_call 315} {:cexpr "ack_time"} boogie_si_record_i32($i28);
    assume {:verifier.code 0} true;
    $i17 := $i28;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i17);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i32, $i34);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb6;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i16 := vnt_get_frame_time($i9, $i11, 14, $i15);
    call {:si_unique_call 313} {:cexpr "ack_time"} boogie_si_record_i32($i16);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb5;
}



const vnt_time_stamp_off: ref;

axiom vnt_time_stamp_off == $sub.ref(0, 274063);

procedure vnt_time_stamp_off($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation vnt_time_stamp_off($p0: ref, $i1: i16) returns ($r: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i64;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i64;
  var $p11: ref;
  var $i12: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} {:cexpr "vnt_time_stamp_off:arg:rate"} boogie_si_record_i16($i1);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i3 := $urem.i32($i2, 12);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref($i9, 24)), $mul.ref($i4, 2));
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.25, $p11);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;
}



const IEEE80211_SKB_CB: ref;

axiom IEEE80211_SKB_CB == $sub.ref(0, 275095);

procedure IEEE80211_SKB_CB($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation IEEE80211_SKB_CB($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(40, 1));
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vnt_tx_context: ref;

axiom vnt_tx_context == $sub.ref(0, 276127);

procedure vnt_tx_context($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation vnt_tx_context($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i4 := constant_test_bit(2, $p3);
    call {:si_unique_call 319} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i12 := __create_pipe($p11, 3);
    call {:si_unique_call 321} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i15 := $or.i32($i12, $sub.i32(0, 1073741824));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 2952)), $mul.ref(50, 1));
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 2952)), $mul.ref(32, 1));
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p1);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} usb_fill_bulk_urb($p9, $p14, $i15, $p17, $i19, vnt_tx_context_complete, $p20);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} $i21 := ldv_usb_submit_urb_521($p9, 32);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 324} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p23, .str);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p24, .str.39);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p25, .str.34);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p26, .str.40);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.10, $p28);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 301);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p28, $i31);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p32, 0);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.11, $p33);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 326} {:cexpr "tmp___1"} boogie_si_record_i64($i37);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 0);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p40, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p41, .str.40, $i21);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 0);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i7 := 2;
    goto $bb3;
}



const vnt_tx_context_complete: ref;

axiom vnt_tx_context_complete == $sub.ref(0, 277159);

procedure vnt_tx_context_complete($p0: ref);



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 278191);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 329} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_521: ref;

axiom ldv_usb_submit_urb_521 == $sub.ref(0, 279223);

procedure ldv_usb_submit_urb_521($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_521($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} {:cexpr "ldv_usb_submit_urb_521:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} ldv_check_alloc_flags($i1);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $p2 := ldv_undef_ptr();
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 280255);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $i1 := $M.24;
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} ldv_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 281287);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 1} true;
    call {:si_unique_call 335} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 336} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 282319);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} __VERIFIER_error();
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const ieee80211_wake_queues: ref;

axiom ieee80211_wake_queues == $sub.ref(0, 283351);

procedure ieee80211_wake_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_wake_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    return;
}



const vnt_get_frame_time: ref;

axiom vnt_get_frame_time == $sub.ref(0, 284383);

procedure vnt_get_frame_time($i0: i8, $i1: i8, $i2: i32, $i3: i16) returns ($r: i32);
  free requires assertsPassed;



implementation vnt_get_frame_time($i0: i8, $i1: i8, $i2: i32, $i3: i16) returns ($r: i32)
{
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} {:cexpr "vnt_get_frame_time:arg:preamble_type"} boogie_si_record_i8($i0);
    call {:si_unique_call 339} {:cexpr "vnt_get_frame_time:arg:pkt_type"} boogie_si_record_i8($i1);
    call {:si_unique_call 340} {:cexpr "vnt_get_frame_time:arg:frame_length"} boogie_si_record_i32($i2);
    call {:si_unique_call 341} {:cexpr "vnt_get_frame_time:arg:tx_rate"} boogie_si_record_i16($i3);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i4, 11);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i3);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref($i8, 2));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.26, $p9);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 342} {:cexpr "rate"} boogie_si_record_i32($i11);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i3);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i12, 3);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i25 := $mul.i32($i2, 8);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 22);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i27 := $udiv.i32($i26, $i11);
    call {:si_unique_call 346} {:cexpr "frame_time"} boogie_si_record_i32($i27);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, $i11);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i28, 22);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i30 := $udiv.i32($i29, 8);
    call {:si_unique_call 347} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i2, $i30);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i33 := $i27;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i34 := $mul.i32($i33, 4);
    call {:si_unique_call 349} {:cexpr "frame_time"} boogie_si_record_i32($i34);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i1);
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i34;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 20);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i6 := $i39;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i36 == 1;
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i34, 6);
    call {:si_unique_call 350} {:cexpr "frame_time"} boogie_si_record_i32($i37);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb19;

  $bb14:
    assume $i31 == 1;
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i27, 1);
    call {:si_unique_call 348} {:cexpr "frame_time"} boogie_si_record_i32($i32);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb16;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i0);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 192;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i2, 80);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32($i17, $i11);
    call {:si_unique_call 343} {:cexpr "frame_time"} boogie_si_record_i32($i18);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, $i11);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i20 := $udiv.i32($i19, 80);
    call {:si_unique_call 344} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i2, $i20);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i23 := $i18;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i16, $i23);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $i6 := $i24;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i18, 1);
    call {:si_unique_call 345} {:cexpr "frame_time"} boogie_si_record_i32($i22);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i23 := $i22;
    goto $bb12;

  $bb7:
    assume $i15 == 1;
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i16 := 96;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 285415);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.24;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 351} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_257: ref;

axiom ldv_spin_unlock_irqrestore_257 == $sub.ref(0, 286447);

procedure ldv_spin_unlock_irqrestore_257($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_257($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} {:cexpr "ldv_spin_unlock_irqrestore_257:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 287479);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 288511);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ieee80211_beacon_get_tim: ref;

axiom ieee80211_beacon_get_tim == $sub.ref(0, 289543);

procedure ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_beacon_get_tim($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $p4 := external_alloc();
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 290575);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 1} true;
    call {:si_unique_call 356} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 357} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const vnt_init_registers: ref;

axiom vnt_init_registers == $sub.ref(0, 291607);

procedure vnt_init_registers($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.20, $M.29, $M.33, $M.34, $M.28, $M.35, $CurrAddr, assertsPassed;



implementation vnt_init_registers($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i24;
  var $i67: i24;
  var $i68: i24;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i24;
  var $i88: i24;
  var $i89: i24;
  var $p90: ref;
  var $p91: ref;
  var $i92: i8;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i8;
  var $p103: ref;
  var $p105: ref;
  var $i106: i8;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i24;
  var $i125: i24;
  var $i126: i24;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i24;
  var $i147: i24;
  var $i148: i24;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p166: ref;
  var $i167: i8;
  var $p168: ref;
  var $p170: ref;
  var $i171: i8;
  var $p172: ref;
  var $p174: ref;
  var $i175: i8;
  var $p177: ref;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i1;
  var $p183: ref;
  var $i184: i8;
  var $p186: ref;
  var $p188: ref;
  var $i189: i8;
  var $p191: ref;
  var $p193: ref;
  var $i194: i8;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i8;
  var $p200: ref;
  var $p202: ref;
  var $i203: i8;
  var $p205: ref;
  var $p207: ref;
  var $i208: i8;
  var $p210: ref;
  var $p211: ref;
  var $p213: ref;
  var $i214: i8;
  var $p216: ref;
  var $p218: ref;
  var $i219: i8;
  var $i220: i32;
  var $i221: i1;
  var $p222: ref;
  var $i223: i8;
  var $p225: ref;
  var $p227: ref;
  var $i228: i8;
  var $i229: i32;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i8;
  var $i237: i32;
  var $i238: i1;
  var $i239: i8;
  var $i240: i32;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i32;
  var $i262: i1;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i8;
  var $i267: i32;
  var $i268: i8;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i8;
  var $p273: ref;
  var $p274: ref;
  var $i275: i8;
  var $i276: i32;
  var $i277: i1;
  var $p279: ref;
  var $i280: i8;
  var $i281: i32;
  var $i282: i1;
  var $p284: ref;
  var $i285: i8;
  var $i286: i32;
  var $i287: i1;
  var $p289: ref;
  var $i290: i8;
  var $p292: ref;
  var $i293: i8;
  var $p295: ref;
  var $i296: i8;
  var $i297: i32;
  var $i298: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i303: i32;
  var $i304: i8;
  var $i305: i32;
  var $i306: i8;
  var $i307: i32;
  var $i308: i8;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $i323: i24;
  var $i324: i24;
  var $i325: i24;
  var $p326: ref;
  var $p327: ref;
  var $i328: i8;
  var $i329: i64;
  var $i330: i64;
  var $i331: i64;
  var $i332: i1;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $i339: i8;
  var $i340: i32;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $p345: ref;
  var $i346: i8;
  var $p347: ref;
  var $p348: ref;
  var $i349: i8;
  var $i350: i32;
  var $i351: i1;
  var $i352: i32;
  var $i353: i1;
  var $i354: i8;
  var $i355: i32;
  var $i356: i32;
  var $i357: i1;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $i365: i24;
  var $i366: i24;
  var $i367: i24;
  var $p368: ref;
  var $p369: ref;
  var $i370: i8;
  var $i371: i64;
  var $i372: i64;
  var $i373: i64;
  var $i374: i1;
  var $p375: ref;
  var $p376: ref;
  var $p377: ref;
  var $i59: i32;
  var $p379: ref;
  var $i380: i8;
  var $p382: ref;
  var $p384: ref;
  var $i385: i8;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $i389: i8;
  var $p391: ref;
  var $p393: ref;
  var $i394: i8;
  var $p396: ref;
  var $p398: ref;
  var $i399: i8;
  var $i400: i32;
  var $i401: i1;
  var $p402: ref;
  var $i403: i8;
  var $p405: ref;
  var $p407: ref;
  var $i408: i8;
  var $p410: ref;
  var $p412: ref;
  var $i413: i8;
  var $i414: i32;
  var $i415: i1;
  var $p416: ref;
  var $i417: i8;
  var $p419: ref;
  var $p421: ref;
  var $i422: i8;
  var $p424: ref;
  var $p426: ref;
  var $i427: i8;
  var $i428: i32;
  var $i429: i1;
  var $p430: ref;
  var $i431: i8;
  var $p433: ref;
  var $p435: ref;
  var $i436: i8;
  var $p438: ref;
  var $p440: ref;
  var $i441: i8;
  var $i442: i32;
  var $i443: i1;
  var $p444: ref;
  var $i445: i8;
  var $p447: ref;
  var $p449: ref;
  var $i450: i8;
  var $p452: ref;
  var $p454: ref;
  var $i455: i8;
  var $i456: i32;
  var $i457: i1;
  var $p458: ref;
  var $i459: i8;
  var $p461: ref;
  var $p463: ref;
  var $i464: i8;
  var $p466: ref;
  var $p468: ref;
  var $i469: i8;
  var $i470: i32;
  var $i471: i1;
  var $p472: ref;
  var $i473: i8;
  var $p475: ref;
  var $p477: ref;
  var $i478: i8;
  var $p480: ref;
  var $p482: ref;
  var $i483: i8;
  var $i484: i32;
  var $i485: i1;
  var $p486: ref;
  var $i487: i8;
  var $p489: ref;
  var $p491: ref;
  var $i492: i8;
  var $p494: ref;
  var $p496: ref;
  var $i497: i8;
  var $i498: i32;
  var $i499: i1;
  var $p500: ref;
  var $i501: i8;
  var $p503: ref;
  var $p505: ref;
  var $i506: i8;
  var $p508: ref;
  var $p510: ref;
  var $i511: i8;
  var $i512: i32;
  var $i513: i1;
  var $p514: ref;
  var $i515: i8;
  var $p517: ref;
  var $p519: ref;
  var $i520: i8;
  var $p522: ref;
  var $p524: ref;
  var $i525: i8;
  var $i526: i32;
  var $i527: i1;
  var $p528: ref;
  var $i529: i8;
  var $p531: ref;
  var $p533: ref;
  var $i534: i8;
  var $p536: ref;
  var $p538: ref;
  var $i539: i8;
  var $i540: i32;
  var $i541: i1;
  var $p542: ref;
  var $i543: i8;
  var $p545: ref;
  var $p547: ref;
  var $i548: i8;
  var $p550: ref;
  var $p552: ref;
  var $i553: i8;
  var $i554: i32;
  var $i555: i1;
  var $p556: ref;
  var $i557: i8;
  var $p559: ref;
  var $p561: ref;
  var $i562: i8;
  var $p564: ref;
  var $p566: ref;
  var $i567: i8;
  var $i568: i32;
  var $i569: i1;
  var $p570: ref;
  var $i571: i8;
  var $p573: ref;
  var $p575: ref;
  var $i576: i8;
  var $p578: ref;
  var $p580: ref;
  var $i581: i8;
  var $i582: i32;
  var $i583: i1;
  var $p584: ref;
  var $i585: i8;
  var $p587: ref;
  var $p589: ref;
  var $i590: i8;
  var $p592: ref;
  var $p594: ref;
  var $i595: i8;
  var $i596: i32;
  var $i597: i1;
  var $p598: ref;
  var $i599: i8;
  var $p601: ref;
  var $p603: ref;
  var $i604: i8;
  var $p606: ref;
  var $p608: ref;
  var $i609: i8;
  var $i610: i32;
  var $i611: i1;
  var $p612: ref;
  var $i613: i8;
  var $p615: ref;
  var $p617: ref;
  var $i618: i8;
  var $p620: ref;
  var $p622: ref;
  var $i623: i8;
  var $i624: i32;
  var $i625: i1;
  var $p626: ref;
  var $i627: i8;
  var $p629: ref;
  var $p631: ref;
  var $i632: i8;
  var $p634: ref;
  var $p636: ref;
  var $i637: i8;
  var $i638: i32;
  var $i639: i1;
  var $p640: ref;
  var $i641: i8;
  var $p643: ref;
  var $p645: ref;
  var $i646: i8;
  var $p648: ref;
  var $p650: ref;
  var $i651: i8;
  var $i652: i32;
  var $i653: i1;
  var $p654: ref;
  var $i655: i8;
  var $p657: ref;
  var $p659: ref;
  var $i660: i8;
  var $p662: ref;
  var $p664: ref;
  var $i665: i8;
  var $i666: i32;
  var $i667: i1;
  var $p668: ref;
  var $i669: i8;
  var $p671: ref;
  var $p673: ref;
  var $i674: i8;
  var $p676: ref;
  var $p678: ref;
  var $i679: i8;
  var $i680: i32;
  var $i681: i1;
  var $p682: ref;
  var $i683: i8;
  var $p685: ref;
  var $p687: ref;
  var $i688: i8;
  var $p690: ref;
  var $p692: ref;
  var $i693: i8;
  var $i694: i32;
  var $i695: i1;
  var $p696: ref;
  var $i697: i8;
  var $p699: ref;
  var $p701: ref;
  var $i702: i8;
  var $p704: ref;
  var $p706: ref;
  var $i707: i8;
  var $i708: i32;
  var $i709: i1;
  var $p710: ref;
  var $i711: i8;
  var $p713: ref;
  var $p715: ref;
  var $i716: i8;
  var $p718: ref;
  var $p720: ref;
  var $i721: i8;
  var $i722: i32;
  var $i723: i1;
  var $p724: ref;
  var $i725: i8;
  var $p727: ref;
  var $p729: ref;
  var $i730: i8;
  var $p732: ref;
  var $p734: ref;
  var $i735: i8;
  var $i736: i32;
  var $i737: i1;
  var $p738: ref;
  var $i739: i8;
  var $p741: ref;
  var $p743: ref;
  var $i744: i8;
  var $p746: ref;
  var $p748: ref;
  var $i749: i8;
  var $i750: i32;
  var $i751: i1;
  var $p752: ref;
  var $i753: i8;
  var $p755: ref;
  var $p757: ref;
  var $i758: i8;
  var $p760: ref;
  var $p762: ref;
  var $i763: i8;
  var $i764: i32;
  var $i765: i1;
  var $p766: ref;
  var $i767: i8;
  var $p769: ref;
  var $p771: ref;
  var $i772: i8;
  var $p774: ref;
  var $p776: ref;
  var $i777: i8;
  var $i778: i32;
  var $i779: i1;
  var $p780: ref;
  var $i781: i8;
  var $p783: ref;
  var $p785: ref;
  var $i786: i8;
  var $p788: ref;
  var $p790: ref;
  var $i791: i8;
  var $i792: i32;
  var $i793: i1;
  var $p794: ref;
  var $i795: i8;
  var $p797: ref;
  var $p799: ref;
  var $i800: i8;
  var $p802: ref;
  var $p804: ref;
  var $i805: i8;
  var $i806: i32;
  var $i807: i1;
  var $p808: ref;
  var $i809: i8;
  var $p811: ref;
  var $p813: ref;
  var $i814: i8;
  var $p816: ref;
  var $p818: ref;
  var $i819: i8;
  var $i820: i32;
  var $i821: i1;
  var $p822: ref;
  var $i823: i8;
  var $p825: ref;
  var $p827: ref;
  var $i828: i8;
  var $p830: ref;
  var $p832: ref;
  var $i833: i8;
  var $i834: i32;
  var $i835: i1;
  var $p836: ref;
  var $i837: i8;
  var $p839: ref;
  var $p841: ref;
  var $i842: i8;
  var $p844: ref;
  var $p846: ref;
  var $i847: i8;
  var $i848: i32;
  var $i849: i1;
  var $p850: ref;
  var $i851: i8;
  var $p853: ref;
  var $p855: ref;
  var $i856: i8;
  var $p858: ref;
  var $p860: ref;
  var $i861: i8;
  var $i862: i32;
  var $i863: i1;
  var $p864: ref;
  var $i865: i8;
  var $p867: ref;
  var $p869: ref;
  var $i870: i8;
  var $p872: ref;
  var $p874: ref;
  var $i875: i8;
  var $i876: i32;
  var $i877: i1;
  var $p878: ref;
  var $i879: i8;
  var $p881: ref;
  var $p883: ref;
  var $i884: i8;
  var $p886: ref;
  var $p888: ref;
  var $i889: i8;
  var $i890: i32;
  var $i891: i1;
  var $p892: ref;
  var $i893: i8;
  var $p895: ref;
  var $p897: ref;
  var $i898: i8;
  var $p900: ref;
  var $p902: ref;
  var $i903: i8;
  var $i904: i32;
  var $i905: i1;
  var $p906: ref;
  var $i907: i8;
  var $p909: ref;
  var $p911: ref;
  var $i912: i8;
  var $p914: ref;
  var $p916: ref;
  var $i917: i8;
  var $i918: i32;
  var $i919: i1;
  var $p920: ref;
  var $i921: i8;
  var $p923: ref;
  var $p925: ref;
  var $i926: i8;
  var $p928: ref;
  var $p930: ref;
  var $i931: i8;
  var $i932: i32;
  var $i933: i1;
  var $p934: ref;
  var $i935: i8;
  var $p937: ref;
  var $p939: ref;
  var $i940: i8;
  var $p942: ref;
  var $p944: ref;
  var $i945: i8;
  var $i946: i32;
  var $i947: i1;
  var $p948: ref;
  var $i949: i8;
  var $p951: ref;
  var $p953: ref;
  var $i954: i8;
  var $p956: ref;
  var $p958: ref;
  var $i959: i8;
  var $p961: ref;
  var $p963: ref;
  var $i964: i8;
  var $p966: ref;
  var $p968: ref;
  var $i969: i8;
  var $p971: ref;
  var $p973: ref;
  var $i974: i8;
  var $p976: ref;
  var $p978: ref;
  var $i979: i8;
  var $i980: i32;
  var $i981: i1;
  var $p982: ref;
  var $i983: i8;
  var $p985: ref;
  var $p987: ref;
  var $i988: i8;
  var $p990: ref;
  var $p992: ref;
  var $i993: i8;
  var $i994: i32;
  var $i995: i1;
  var $p996: ref;
  var $i997: i8;
  var $p999: ref;
  var $p1001: ref;
  var $i1002: i8;
  var $p1004: ref;
  var $p1006: ref;
  var $i1007: i8;
  var $i1008: i32;
  var $i1009: i1;
  var $p1010: ref;
  var $i1011: i8;
  var $p1013: ref;
  var $p1015: ref;
  var $i1016: i8;
  var $p1018: ref;
  var $p1020: ref;
  var $i1021: i8;
  var $i1022: i32;
  var $i1023: i1;
  var $p1024: ref;
  var $i1025: i8;
  var $p1027: ref;
  var $p1029: ref;
  var $i1030: i8;
  var $p1032: ref;
  var $p1034: ref;
  var $i1035: i8;
  var $i1036: i32;
  var $i1037: i1;
  var $p1038: ref;
  var $i1039: i8;
  var $p1041: ref;
  var $p1043: ref;
  var $i1044: i8;
  var $p1046: ref;
  var $p1048: ref;
  var $i1049: i8;
  var $i1050: i32;
  var $i1051: i1;
  var $p1052: ref;
  var $i1053: i8;
  var $p1055: ref;
  var $p1057: ref;
  var $i1058: i8;
  var $p1060: ref;
  var $p1062: ref;
  var $i1063: i8;
  var $i1064: i32;
  var $i1065: i1;
  var $p1066: ref;
  var $i1067: i8;
  var $p1069: ref;
  var $p1071: ref;
  var $i1072: i8;
  var $p1074: ref;
  var $p1076: ref;
  var $i1077: i8;
  var $i1078: i32;
  var $i1079: i1;
  var $p1080: ref;
  var $i1081: i8;
  var $p1083: ref;
  var $p1085: ref;
  var $i1086: i8;
  var $p1088: ref;
  var $p1090: ref;
  var $i1091: i8;
  var $i1092: i32;
  var $i1093: i1;
  var $p1094: ref;
  var $i1095: i8;
  var $p1097: ref;
  var $p1099: ref;
  var $i1100: i8;
  var $p1102: ref;
  var $p1104: ref;
  var $i1105: i8;
  var $i1106: i32;
  var $i1107: i1;
  var $p1108: ref;
  var $i1109: i8;
  var $p1111: ref;
  var $p1113: ref;
  var $i1114: i8;
  var $p1116: ref;
  var $p1118: ref;
  var $i1119: i8;
  var $i1120: i32;
  var $i1121: i1;
  var $p1122: ref;
  var $i1123: i8;
  var $p1125: ref;
  var $p1127: ref;
  var $i1128: i8;
  var $p1130: ref;
  var $p1132: ref;
  var $i1133: i8;
  var $i1134: i32;
  var $i1135: i1;
  var $p1136: ref;
  var $i1137: i8;
  var $p1139: ref;
  var $p1141: ref;
  var $i1142: i8;
  var $p1144: ref;
  var $p1146: ref;
  var $i1147: i8;
  var $i1148: i32;
  var $i1149: i1;
  var $p1150: ref;
  var $i1151: i8;
  var $p1153: ref;
  var $p1155: ref;
  var $i1156: i8;
  var $p1158: ref;
  var $p1160: ref;
  var $i1161: i8;
  var $i1162: i32;
  var $i1163: i1;
  var $p1164: ref;
  var $i1165: i8;
  var $p1167: ref;
  var $p1169: ref;
  var $i1170: i8;
  var $p1172: ref;
  var $p1174: ref;
  var $i1175: i8;
  var $i1176: i32;
  var $i1177: i1;
  var $p1178: ref;
  var $i1179: i8;
  var $p1181: ref;
  var $p1183: ref;
  var $i1184: i8;
  var $p1186: ref;
  var $p1188: ref;
  var $i1189: i8;
  var $i1190: i32;
  var $i1191: i1;
  var $p1192: ref;
  var $i1193: i8;
  var $p1195: ref;
  var $p1197: ref;
  var $i1198: i8;
  var $p1200: ref;
  var $p1202: ref;
  var $i1203: i8;
  var $i1204: i32;
  var $i1205: i1;
  var $p1206: ref;
  var $i1207: i8;
  var $p1209: ref;
  var $p1211: ref;
  var $i1212: i8;
  var $p1214: ref;
  var $p1216: ref;
  var $i1217: i8;
  var $i1218: i32;
  var $i1219: i1;
  var $p1220: ref;
  var $i1221: i8;
  var $p1223: ref;
  var $p1225: ref;
  var $i1226: i8;
  var $p1228: ref;
  var $p1230: ref;
  var $i1231: i8;
  var $i1232: i32;
  var $i1233: i1;
  var $p1234: ref;
  var $i1235: i8;
  var $p1237: ref;
  var $p1239: ref;
  var $i1240: i8;
  var $p1242: ref;
  var $p1244: ref;
  var $i1245: i8;
  var $i1246: i32;
  var $i1247: i1;
  var $p1248: ref;
  var $i1249: i8;
  var $p1251: ref;
  var $p1253: ref;
  var $i1254: i8;
  var $p1256: ref;
  var $p1258: ref;
  var $i1259: i8;
  var $i1260: i32;
  var $i1261: i1;
  var $p1262: ref;
  var $i1263: i8;
  var $p1265: ref;
  var $p1267: ref;
  var $i1268: i8;
  var $p1270: ref;
  var $p1272: ref;
  var $i1273: i8;
  var $i1274: i32;
  var $i1275: i1;
  var $p1276: ref;
  var $i1277: i8;
  var $p1279: ref;
  var $p1281: ref;
  var $i1282: i8;
  var $p1284: ref;
  var $p1286: ref;
  var $i1287: i8;
  var $i1288: i32;
  var $i1289: i1;
  var $p1290: ref;
  var $i1291: i8;
  var $p1293: ref;
  var $p1295: ref;
  var $i1296: i8;
  var $p1298: ref;
  var $p1300: ref;
  var $i1301: i8;
  var $i1302: i32;
  var $i1303: i1;
  var $p1304: ref;
  var $i1305: i8;
  var $p1307: ref;
  var $p1309: ref;
  var $i1310: i8;
  var $p1312: ref;
  var $p1314: ref;
  var $i1315: i8;
  var $i1316: i32;
  var $i1317: i1;
  var $p1318: ref;
  var $i1319: i8;
  var $p1321: ref;
  var $p1323: ref;
  var $i1324: i8;
  var $p1326: ref;
  var $p1328: ref;
  var $i1329: i8;
  var $i1330: i32;
  var $i1331: i1;
  var $p1332: ref;
  var $i1333: i8;
  var $p1335: ref;
  var $p1337: ref;
  var $i1338: i8;
  var $p1340: ref;
  var $p1342: ref;
  var $i1343: i8;
  var $p1345: ref;
  var $p1347: ref;
  var $i1348: i8;
  var $p1350: ref;
  var $p1352: ref;
  var $i1353: i8;
  var $p1355: ref;
  var $p1357: ref;
  var $i1358: i8;
  var $p1360: ref;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2407, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.58);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p14, .str.59);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p15, .str.60);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.10, $p17);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 134);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p17, $i20);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p21, 0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.11, $p22);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 368} {:cexpr "tmp___0"} boogie_si_record_i64($i26);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i34 := vnt_check_firmware_version($p0);
    call {:si_unique_call 371} {:cexpr "tmp___5"} boogie_si_record_i32($i34);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} $i79 := vnt_vt3184_init($p0);
    call {:si_unique_call 383} {:cexpr "tmp___7"} boogie_si_record_i32($i79);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(0, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 0);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2429, 1));
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    $p103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(1, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $i102);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1)), $mul.ref(0, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    $p108 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(2, 1)), $mul.ref(0, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, $i106);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p1337 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1)), $mul.ref(1, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $i1338 := $load.i8($M.0, $p1337);
    $p1340 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(2, 1)), $mul.ref(1, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1340, $i1338);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    $p1342 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1)), $mul.ref(2, 1));
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i1343 := $load.i8($M.0, $p1342);
    $p1345 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(2, 1)), $mul.ref(2, 1));
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1345, $i1343);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $p1347 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1)), $mul.ref(3, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i1348 := $load.i8($M.0, $p1347);
    $p1350 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(2, 1)), $mul.ref(3, 1));
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1350, $i1348);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $p1352 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1)), $mul.ref(4, 1));
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i1353 := $load.i8($M.0, $p1352);
    $p1355 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(2, 1)), $mul.ref(4, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1355, $i1353);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p1357 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1)), $mul.ref(5, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i1358 := $load.i8($M.0, $p1357);
    $p1360 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(2, 1)), $mul.ref(5, 1));
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1360, $i1358);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2820, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.0, $p109);
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(8, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, $i110);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2821, 1));
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.0, $p112);
    $p114 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2397, 1)), $mul.ref(9, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p114, $i113);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p10);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i116 := vnt_control_out($p0, 5, 0, 0, 10, $p115);
    call {:si_unique_call 388} {:cexpr "status"} boogie_si_record_i32($i116);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p11);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} $i138 := vnt_control_in($p0, 6, 0, 0, 10, $p137);
    call {:si_unique_call 393} {:cexpr "status"} boogie_si_record_i32($i138);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i139} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2394, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} $i160 := vnt_control_in($p0, 1, 20, 3, 1, $p159);
    call {:si_unique_call 398} {:cexpr "status"} boogie_si_record_i32($i160);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p162, 8);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p163, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2742, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p164, $sub.i8(0, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(32, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.0, $p166);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p168, $i167);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(35, 1));
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p172, $i171);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(48, 1));
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(0, 1));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p177, $i175);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(0, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.0, $p179);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i181, 0);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(64, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(0, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p191, $i189);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(0, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.0, $p193);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i32($i194);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 0);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p973 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(49, 1));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i974 := $load.i8($M.0, $p973);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(1, 1));
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p976, $i974);
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p978 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(1, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i979 := $load.i8($M.0, $p978);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i980 := $zext.i8.i32($i979);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i981 := $eq.i32($i980, 0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i981} true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i981 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(65, 1));
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i988 := $load.i8($M.0, $p987);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(1, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p990, $i988);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(1, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i993 := $load.i8($M.0, $p992);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i994 := $zext.i8.i32($i993);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i995 := $eq.i32($i994, 0);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i995} true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i995 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(50, 1));
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i1002 := $load.i8($M.0, $p1001);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $p1004 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(2, 1));
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1004, $i1002);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(2, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $i1007 := $load.i8($M.0, $p1006);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $i1008 := $zext.i8.i32($i1007);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $i1009 := $eq.i32($i1008, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1009} true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i1009 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p1015 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(66, 1));
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i1016 := $load.i8($M.0, $p1015);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(2, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1018, $i1016);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p1020 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(2, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i1021 := $load.i8($M.0, $p1020);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i1022 := $zext.i8.i32($i1021);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i1023 := $eq.i32($i1022, 0);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1023} true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i1023 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p1029 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(51, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i1030 := $load.i8($M.0, $p1029);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(3, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1032, $i1030);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p1034 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(3, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i1035 := $load.i8($M.0, $p1034);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i1036 := $zext.i8.i32($i1035);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i1037 := $eq.i32($i1036, 0);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1037} true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i1037 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p1043 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(67, 1));
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i1044 := $load.i8($M.0, $p1043);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p1046 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(3, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1046, $i1044);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p1048 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(3, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i1049 := $load.i8($M.0, $p1048);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i1050 := $zext.i8.i32($i1049);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i1051 := $eq.i32($i1050, 0);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1051} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i1051 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p1057 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(52, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i1058 := $load.i8($M.0, $p1057);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $p1060 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(4, 1));
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1060, $i1058);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $p1062 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(4, 1));
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i1063 := $load.i8($M.0, $p1062);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $i1064 := $zext.i8.i32($i1063);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i1065 := $eq.i32($i1064, 0);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1065} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i1065 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    $p1071 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(68, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i1072 := $load.i8($M.0, $p1071);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p1074 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(4, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1074, $i1072);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p1076 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(4, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $i1077 := $load.i8($M.0, $p1076);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i1078 := $zext.i8.i32($i1077);
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i1079 := $eq.i32($i1078, 0);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1079} true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i1079 == 1);
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $p1085 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(53, 1));
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i1086 := $load.i8($M.0, $p1085);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $p1088 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(5, 1));
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1088, $i1086);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p1090 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(5, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i1091 := $load.i8($M.0, $p1090);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i1092 := $zext.i8.i32($i1091);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i1093 := $eq.i32($i1092, 0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1093} true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i1093 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p1099 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(69, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i1100 := $load.i8($M.0, $p1099);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p1102 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(5, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1102, $i1100);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p1104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(5, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i1105 := $load.i8($M.0, $p1104);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i1106 := $zext.i8.i32($i1105);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i1107 := $eq.i32($i1106, 0);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1107} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i1107 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    $p1113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(54, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i1114 := $load.i8($M.0, $p1113);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p1116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(6, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1116, $i1114);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p1118 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(6, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i1119 := $load.i8($M.0, $p1118);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i1120 := $zext.i8.i32($i1119);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i1121 := $eq.i32($i1120, 0);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1121} true;
    goto $bb321, $bb322;

  $bb322:
    assume !($i1121 == 1);
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p1127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(70, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i1128 := $load.i8($M.0, $p1127);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p1130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(6, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1130, $i1128);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p1132 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(6, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i1133 := $load.i8($M.0, $p1132);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i1134 := $zext.i8.i32($i1133);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $i1135 := $eq.i32($i1134, 0);
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1135} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i1135 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p1141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(55, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i1142 := $load.i8($M.0, $p1141);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p1144 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(7, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1144, $i1142);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p1146 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(7, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i1147 := $load.i8($M.0, $p1146);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i1148 := $zext.i8.i32($i1147);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i1149 := $eq.i32($i1148, 0);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1149} true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i1149 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p1155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(71, 1));
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i1156 := $load.i8($M.0, $p1155);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $p1158 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(7, 1));
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1158, $i1156);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p1160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(7, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i1161 := $load.i8($M.0, $p1160);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i1162 := $zext.i8.i32($i1161);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i1163 := $eq.i32($i1162, 0);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1163} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i1163 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p1169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(56, 1));
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i1170 := $load.i8($M.0, $p1169);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p1172 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(8, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1172, $i1170);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $p1174 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(8, 1));
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i1175 := $load.i8($M.0, $p1174);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i1176 := $zext.i8.i32($i1175);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i1177 := $eq.i32($i1176, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1177} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i1177 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    $p1183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(72, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i1184 := $load.i8($M.0, $p1183);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p1186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(8, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1186, $i1184);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p1188 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(8, 1));
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i1189 := $load.i8($M.0, $p1188);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i1190 := $zext.i8.i32($i1189);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i1191 := $eq.i32($i1190, 0);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1191} true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i1191 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    $p1197 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(57, 1));
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i1198 := $load.i8($M.0, $p1197);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p1200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(9, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1200, $i1198);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p1202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(9, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i1203 := $load.i8($M.0, $p1202);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i1204 := $zext.i8.i32($i1203);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $i1205 := $eq.i32($i1204, 0);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1205} true;
    goto $bb342, $bb343;

  $bb343:
    assume !($i1205 == 1);
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    $p1211 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(73, 1));
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $i1212 := $load.i8($M.0, $p1211);
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $p1214 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(9, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1214, $i1212);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $p1216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(9, 1));
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i1217 := $load.i8($M.0, $p1216);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i1218 := $zext.i8.i32($i1217);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i1219 := $eq.i32($i1218, 0);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1219} true;
    goto $bb345, $bb346;

  $bb346:
    assume !($i1219 == 1);
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p1225 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(58, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i1226 := $load.i8($M.0, $p1225);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p1228 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(10, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1228, $i1226);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p1230 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(10, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i1231 := $load.i8($M.0, $p1230);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $i1232 := $zext.i8.i32($i1231);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i1233 := $eq.i32($i1232, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1233} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i1233 == 1);
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $p1239 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(74, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i1240 := $load.i8($M.0, $p1239);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p1242 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(10, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1242, $i1240);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p1244 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(10, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $i1245 := $load.i8($M.0, $p1244);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i1246 := $zext.i8.i32($i1245);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i1247 := $eq.i32($i1246, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1247} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i1247 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p1253 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(59, 1));
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $i1254 := $load.i8($M.0, $p1253);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $p1256 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(11, 1));
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1256, $i1254);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $p1258 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(11, 1));
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i1259 := $load.i8($M.0, $p1258);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i1260 := $zext.i8.i32($i1259);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i1261 := $eq.i32($i1260, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1261} true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i1261 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p1267 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(75, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i1268 := $load.i8($M.0, $p1267);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $p1270 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(11, 1));
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1270, $i1268);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p1272 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(11, 1));
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i1273 := $load.i8($M.0, $p1272);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $i1274 := $zext.i8.i32($i1273);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i1275 := $eq.i32($i1274, 0);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1275} true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i1275 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $p1281 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(60, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i1282 := $load.i8($M.0, $p1281);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p1284 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(12, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1284, $i1282);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p1286 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(12, 1));
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i1287 := $load.i8($M.0, $p1286);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $i1288 := $zext.i8.i32($i1287);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i1289 := $eq.i32($i1288, 0);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1289} true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i1289 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $p1295 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(76, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i1296 := $load.i8($M.0, $p1295);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p1298 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(12, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1298, $i1296);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p1300 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(12, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i1301 := $load.i8($M.0, $p1300);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i1302 := $zext.i8.i32($i1301);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $i1303 := $eq.i32($i1302, 0);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1303} true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i1303 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    $p1309 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(61, 1));
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i1310 := $load.i8($M.0, $p1309);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p1312 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(13, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1312, $i1310);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p1314 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(13, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i1315 := $load.i8($M.0, $p1314);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i1316 := $zext.i8.i32($i1315);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i1317 := $eq.i32($i1316, 0);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1317} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i1317 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $p1323 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(77, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i1324 := $load.i8($M.0, $p1323);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p1326 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(13, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1326, $i1324);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $p1328 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(13, 1));
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i1329 := $load.i8($M.0, $p1328);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i1330 := $zext.i8.i32($i1329);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i1331 := $eq.i32($i1330, 0);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1331} true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i1331 == 1);
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(10, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(11, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p205, $i203);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(10, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.0, $p207);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(11, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p210, $i208);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(10, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i954 := $load.i8($M.0, $p953);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(12, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p956, $i954);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p958 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(10, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i959 := $load.i8($M.0, $p958);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $p961 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(12, 1));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p961, $i959);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(10, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i964 := $load.i8($M.0, $p963);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $p966 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(13, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p966, $i964);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p968 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(10, 1));
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i969 := $load.i8($M.0, $p968);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(13, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p971, $i969);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p211, 52);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(80, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.0, $p213);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(0, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p216, $i214);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(0, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i219 := $load.i8($M.0, $p218);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i220 := $zext.i8.i32($i219);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i221 := $eq.i32($i220, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(81, 1));
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i380 := $load.i8($M.0, $p379);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(1, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p382, $i380);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(1, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i385 := $load.i8($M.0, $p384);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i386 := $zext.i8.i32($i385);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i387 := $eq.i32($i386, 0);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(82, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i394 := $load.i8($M.0, $p393);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(2, 1));
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p396, $i394);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(2, 1));
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i399 := $load.i8($M.0, $p398);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i400 := $zext.i8.i32($i399);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i401 := $eq.i32($i400, 0);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(83, 1));
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i408 := $load.i8($M.0, $p407);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(3, 1));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p410, $i408);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(3, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i413 := $load.i8($M.0, $p412);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i414 := $zext.i8.i32($i413);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i415 := $eq.i32($i414, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i415} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(84, 1));
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i422 := $load.i8($M.0, $p421);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(4, 1));
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p424, $i422);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(4, 1));
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i427 := $load.i8($M.0, $p426);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i428 := $zext.i8.i32($i427);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i429 := $eq.i32($i428, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(85, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i436 := $load.i8($M.0, $p435);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(5, 1));
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p438, $i436);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(5, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i441 := $load.i8($M.0, $p440);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i442 := $zext.i8.i32($i441);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i443 := $eq.i32($i442, 0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i443} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(86, 1));
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i450 := $load.i8($M.0, $p449);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(6, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p452, $i450);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(6, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $i455 := $load.i8($M.0, $p454);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i456 := $zext.i8.i32($i455);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i457 := $eq.i32($i456, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i457} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(87, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.0, $p463);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(7, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p466, $i464);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p468 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(7, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i469 := $load.i8($M.0, $p468);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i470 := $zext.i8.i32($i469);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i471 := $eq.i32($i470, 0);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i471} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i471 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    $p477 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(88, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i478 := $load.i8($M.0, $p477);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p480 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(8, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p480, $i478);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(8, 1));
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i483 := $load.i8($M.0, $p482);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i484 := $zext.i8.i32($i483);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i485 := $eq.i32($i484, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(89, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i492 := $load.i8($M.0, $p491);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(9, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p494, $i492);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(9, 1));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i497 := $load.i8($M.0, $p496);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i498 := $zext.i8.i32($i497);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i499 := $eq.i32($i498, 0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i499} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i499 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(90, 1));
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i506 := $load.i8($M.0, $p505);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(10, 1));
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p508, $i506);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $p510 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(10, 1));
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    $i511 := $load.i8($M.0, $p510);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i512 := $zext.i8.i32($i511);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i513 := $eq.i32($i512, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(91, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i520 := $load.i8($M.0, $p519);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(11, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p522, $i520);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(11, 1));
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i525 := $load.i8($M.0, $p524);
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $i526 := $zext.i8.i32($i525);
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i526, 0);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    assume {:branchcond $i527} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(92, 1));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i534 := $load.i8($M.0, $p533);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(12, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p536, $i534);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(12, 1));
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i539 := $load.i8($M.0, $p538);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i540 := $zext.i8.i32($i539);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i541 := $eq.i32($i540, 0);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i541} true;
    goto $bb166, $bb167;

  $bb167:
    assume !($i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(93, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i548 := $load.i8($M.0, $p547);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p550 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(13, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p550, $i548);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(13, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i553 := $load.i8($M.0, $p552);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i554 := $zext.i8.i32($i553);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i555 := $eq.i32($i554, 0);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i555} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $p561 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(94, 1));
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $i562 := $load.i8($M.0, $p561);
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $p564 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(14, 1));
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p564, $i562);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p566 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(14, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i567 := $load.i8($M.0, $p566);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i568 := $zext.i8.i32($i567);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i568, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i569} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(95, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i576 := $load.i8($M.0, $p575);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(15, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p578, $i576);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p580 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(15, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i581 := $load.i8($M.0, $p580);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i582 := $zext.i8.i32($i581);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i583 := $eq.i32($i582, 0);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    assume {:branchcond $i583} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i583 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(96, 1));
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i590 := $load.i8($M.0, $p589);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p592 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(16, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p592, $i590);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p594 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(16, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i595 := $load.i8($M.0, $p594);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i596 := $zext.i8.i32($i595);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i597 := $eq.i32($i596, 0);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(97, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i604 := $load.i8($M.0, $p603);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p606 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(17, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p606, $i604);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p608 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(17, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i609 := $load.i8($M.0, $p608);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i610 := $zext.i8.i32($i609);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i610, 0);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i611} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p617 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(98, 1));
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $i618 := $load.i8($M.0, $p617);
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(18, 1));
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p620, $i618);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(18, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $i623 := $load.i8($M.0, $p622);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i624 := $zext.i8.i32($i623);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i625 := $eq.i32($i624, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i625} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i625 == 1);
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(99, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i632 := $load.i8($M.0, $p631);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p634 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(19, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p634, $i632);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(19, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i637 := $load.i8($M.0, $p636);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $i638 := $zext.i8.i32($i637);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i639 := $eq.i32($i638, 0);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $p645 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(100, 1));
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i646 := $load.i8($M.0, $p645);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p648 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(20, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p648, $i646);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p650 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(20, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i651 := $load.i8($M.0, $p650);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i652 := $zext.i8.i32($i651);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i653 := $eq.i32($i652, 0);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i653} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i653 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(101, 1));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i660 := $load.i8($M.0, $p659);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(21, 1));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p662, $i660);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p664 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(21, 1));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i665 := $load.i8($M.0, $p664);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i666 := $zext.i8.i32($i665);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i667 := $eq.i32($i666, 0);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i667} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i667 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(102, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i674 := $load.i8($M.0, $p673);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(22, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p676, $i674);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p678 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(22, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i679 := $load.i8($M.0, $p678);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i680 := $zext.i8.i32($i679);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i681 := $eq.i32($i680, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(103, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i688 := $load.i8($M.0, $p687);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p690 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(23, 1));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p690, $i688);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p692 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(23, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i693 := $load.i8($M.0, $p692);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i694 := $zext.i8.i32($i693);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i694, 0);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i695} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $p701 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(104, 1));
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i702 := $load.i8($M.0, $p701);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(24, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p704, $i702);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p706 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(24, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i707 := $load.i8($M.0, $p706);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i708 := $zext.i8.i32($i707);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i709 := $eq.i32($i708, 0);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    assume {:branchcond $i709} true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(105, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i716 := $load.i8($M.0, $p715);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(25, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p718, $i716);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $p720 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(25, 1));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i721 := $load.i8($M.0, $p720);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i722 := $zext.i8.i32($i721);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i723 := $eq.i32($i722, 0);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(106, 1));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i730 := $load.i8($M.0, $p729);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(26, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p732, $i730);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p734 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(26, 1));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i735 := $load.i8($M.0, $p734);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i736 := $zext.i8.i32($i735);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i736, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i737} true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(107, 1));
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i744 := $load.i8($M.0, $p743);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(27, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p746, $i744);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p748 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(27, 1));
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i749 := $load.i8($M.0, $p748);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i750 := $zext.i8.i32($i749);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i751 := $eq.i32($i750, 0);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i751} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i751 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(108, 1));
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i758 := $load.i8($M.0, $p757);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p760 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(28, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p760, $i758);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(28, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i763 := $load.i8($M.0, $p762);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i764 := $zext.i8.i32($i763);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i765 := $eq.i32($i764, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i765} true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i765 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(109, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i772 := $load.i8($M.0, $p771);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $p774 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(29, 1));
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p774, $i772);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(29, 1));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i777 := $load.i8($M.0, $p776);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i778 := $zext.i8.i32($i777);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i779 := $eq.i32($i778, 0);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i779} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i779 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p785 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(110, 1));
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $i786 := $load.i8($M.0, $p785);
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(30, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p788, $i786);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p790 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(30, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $i791 := $load.i8($M.0, $p790);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i792 := $zext.i8.i32($i791);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i793 := $eq.i32($i792, 0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i793} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i793 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(111, 1));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i800 := $load.i8($M.0, $p799);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(31, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p802, $i800);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $p804 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(31, 1));
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i805 := $load.i8($M.0, $p804);
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i806 := $zext.i8.i32($i805);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i807 := $eq.i32($i806, 0);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i807} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(112, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i814 := $load.i8($M.0, $p813);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(32, 1));
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p816, $i814);
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(32, 1));
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i819 := $load.i8($M.0, $p818);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i820 := $zext.i8.i32($i819);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i821 := $eq.i32($i820, 0);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i821 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(113, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i828 := $load.i8($M.0, $p827);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(33, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p830, $i828);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(33, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i833 := $load.i8($M.0, $p832);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i834 := $zext.i8.i32($i833);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i835 := $eq.i32($i834, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    assume {:branchcond $i835} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i835 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(114, 1));
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i842 := $load.i8($M.0, $p841);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $p844 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(34, 1));
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p844, $i842);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $p846 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(34, 1));
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $i847 := $load.i8($M.0, $p846);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i848 := $zext.i8.i32($i847);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $i849 := $eq.i32($i848, 0);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    assume {:branchcond $i849} true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i849 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p855 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(115, 1));
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i856 := $load.i8($M.0, $p855);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $p858 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(35, 1));
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p858, $i856);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p860 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(35, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $i861 := $load.i8($M.0, $p860);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i862 := $zext.i8.i32($i861);
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i863 := $eq.i32($i862, 0);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    assume {:branchcond $i863} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i863 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(116, 1));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i870 := $load.i8($M.0, $p869);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(36, 1));
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p872, $i870);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p874 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(36, 1));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i875 := $load.i8($M.0, $p874);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i876 := $zext.i8.i32($i875);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $i877 := $eq.i32($i876, 0);
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i877} true;
    goto $bb262, $bb263;

  $bb263:
    assume !($i877 == 1);
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(117, 1));
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $i884 := $load.i8($M.0, $p883);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $p886 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(37, 1));
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p886, $i884);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p888 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(37, 1));
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i889 := $load.i8($M.0, $p888);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i890 := $zext.i8.i32($i889);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i891 := $eq.i32($i890, 0);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i891} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i891 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p897 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(118, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i898 := $load.i8($M.0, $p897);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p900 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(38, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p900, $i898);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(38, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i903 := $load.i8($M.0, $p902);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i904 := $zext.i8.i32($i903);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i905 := $eq.i32($i904, 0);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i905} true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i905 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(119, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i912 := $load.i8($M.0, $p911);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(39, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p914, $i912);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(39, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i917 := $load.i8($M.0, $p916);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i918 := $zext.i8.i32($i917);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $i919 := $eq.i32($i918, 0);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    assume {:branchcond $i919} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i919 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(120, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i926 := $load.i8($M.0, $p925);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p928 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(40, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p928, $i926);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p930 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(40, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i931 := $load.i8($M.0, $p930);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i932 := $zext.i8.i32($i931);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $i933 := $eq.i32($i932, 0);
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    assume {:branchcond $i933} true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i933 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    $p939 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(121, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $i940 := $load.i8($M.0, $p939);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(41, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p942, $i940);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p944 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(41, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i945 := $load.i8($M.0, $p944);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $i946 := $zext.i8.i32($i945);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i947 := $eq.i32($i946, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i947} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i947 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(23, 1));
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.0, $p227);
    call {:si_unique_call 399} {:cexpr "antenna"} boogie_si_record_i8($i228);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i32($i228);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i230 := $and.i32($i229, 4);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i231 == 1);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2444, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, 0);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i32($i228);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i235 := $and.i32($i234, 3);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i236 := $trunc.i32.i8($i235);
    call {:si_unique_call 400} {:cexpr "antenna"} boogie_si_record_i8($i236);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i32($i236);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 0);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    $i239 := $i236;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i241 := $eq.i32($i240, 3);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i241 == 1);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2448, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p249, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i239);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i251 := $and.i32($i250, 2);
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i252 == 1);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2453, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p259, 1);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2444, 1));
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i262 := $eq.i32($i261, 1);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i262 == 1);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2452, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p264, 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2452, 1));
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i266 := $load.i8($M.0, $p265);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i267 := $zext.i8.i32($i266);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i268 := $trunc.i32.i8($i267);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} vnt_set_antenna_mode($p0, $i268);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3000, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p269, 1);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p270, 2);
    $p271 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2407, 1)), $mul.ref(7, 1));
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i272 := $load.i8($M.0, $p271);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p273, $i272);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.0, $p274);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i275);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 12);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2423, 1));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p310 := $bitcast.ref.ref($p309);
    $p311 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2407, 1)), $mul.ref(1, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p312 := $bitcast.ref.ref($p311);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 410} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p310, $p312, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p313);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2423, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p316 := $bitcast.ref.ref($p315);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} ether_addr_copy($p314, $p316);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p317, .str);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p318, .str.58);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p319, .str.59);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p320, .str.66);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p322 := $bitcast.ref.ref($p321);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i323 := $load.i24($M.10, $p322);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i324 := $and.i24($i323, $sub.i24(0, 262144));
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i325 := $or.i24($i324, 327);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p322, $i325);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p326, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $i328 := $load.i8($M.11, $p327);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i64($i328);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i330 := $and.i64($i329, 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i331 := ldv__builtin_expect($i330, 0);
    call {:si_unique_call 413} {:cexpr "tmp___10"} boogie_si_record_i64($i331);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i332 := $ne.i64($i331, 0);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i339 := $load.i8($M.0, $p338);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $i340 := $zext.i8.i32($i339);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i341 := $eq.i32($i340, 0);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i341 == 1);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2828, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p343, 0);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vnt_set_short_slot_time($p0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(24, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i346 := $load.i8($M.0, $p345);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2454, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p347, $i346);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2454, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.0, $p348);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i350 := $sext.i8.i32($i349);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i351 := $slt.i32($i350, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i351 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} vnt_mac_set_led($p0, 120, 56);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} vnt_mac_set_led($p0, 6, 4);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vnt_mac_reg_bits_on($p0, 122, 1);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} vslice_dummy_var_81 := vnt_radio_power_on($p0);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p359, .str);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p360, .str.58);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p361, .str.59);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p362, .str.67);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p364 := $bitcast.ref.ref($p363);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i365 := $load.i24($M.10, $p364);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i366 := $and.i24($i365, $sub.i24(0, 262144));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i367 := $or.i24($i366, 365);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p364, $i367);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p368, 0);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i370 := $load.i8($M.11, $p369);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i64($i370);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i372 := $and.i64($i371, 1);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i373 := ldv__builtin_expect($i372, 0);
    call {:si_unique_call 425} {:cexpr "tmp___11"} boogie_si_record_i64($i373);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i374 := $ne.i64($i373, 0);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i374} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i59 := 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb119:
    assume $i374 == 1;
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $p376 := $load.ref($M.0, $p375);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($p376, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} __dynamic_dev_dbg.ref.ref.ref($p9, $p377, .str.67);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb110:
    assume $i351 == 1;
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i352 := vnt_control_in($p0, 1, 123, 3, 1, $p1);
    call {:si_unique_call 417} {:cexpr "status"} boogie_si_record_i32($i352);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i354 := $load.i8($M.27, $p1);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i355 := $zext.i8.i32($i354);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $i356 := $and.i32($i355, 64);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 0);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i357 == 1);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} vnt_mac_reg_bits_off($p0, 123, $sub.i8(0, 128));
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb115:
    assume $i357 == 1;
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} vnt_mac_reg_bits_on($p0, 123, $sub.i8(0, 128));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb112:
    assume $i353 == 1;
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb107:
    assume $i341 == 1;
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2828, 1));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p342, 1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb104:
    assume $i332 == 1;
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.0, $p333);
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p334, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2417, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p337 := $bitcast.ref.ref($p336);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __dynamic_dev_dbg.ref.ref.ref.ref($p8, $p335, .str.66, $p337);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb87:
    assume $i277 == 1;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(46, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.0, $p279);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i280);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i282 := $eq.i32($i281, 1);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb89, $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    assume !($i282 == 1);
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb89:
    assume $i282 == 1;
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(47, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.0, $p284);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i286 := $zext.i8.i32($i285);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i287 := $ugt.i32($i286, 3);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i287 == 1);
    goto $bb91;

  $bb92:
    assume $i287 == 1;
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(36, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i290 := $load.i8($M.0, $p289);
    call {:si_unique_call 402} {:cexpr "calib_tx_iq"} boogie_si_record_i8($i290);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(37, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.0, $p292);
    call {:si_unique_call 403} {:cexpr "calib_tx_dc"} boogie_si_record_i8($i293);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(38, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i296 := $load.i8($M.0, $p295);
    call {:si_unique_call 404} {:cexpr "calib_rx_iq"} boogie_si_record_i8($i296);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i290);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 0);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb94, $bb96;

  $bb96:
    assume !($i298 == 1);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i299 := $zext.i8.i32($i293);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i300 := $ne.i32($i299, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i300 == 1);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i296);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i302 == 1);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vnt_control_out_u8($p0, 2, $sub.i8(0, 1), 0);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} vnt_control_out_u8($p0, 2, $sub.i8(0, 1), 3);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i290);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i304 := $trunc.i32.i8($i303);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} vnt_control_out_u8($p0, 2, $sub.i8(0, 5), $i304);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i305 := $zext.i8.i32($i293);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i306 := $trunc.i32.i8($i305);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} vnt_control_out_u8($p0, 2, $sub.i8(0, 4), $i306);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i307 := $zext.i8.i32($i296);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i8($i307);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} vnt_control_out_u8($p0, 2, $sub.i8(0, 3), $i308);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i300 == 1;
    goto $bb95;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb95;

  $bb84:
    assume $i262 == 1;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2452, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p263, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb78:
    assume $i252 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2453, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p253, 0);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2444, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i255 := $load.i32($M.0, $p254);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 1);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i256 == 1);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p258 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2452, 1));
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p258, 0);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb80:
    assume $i256 == 1;
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2452, 1));
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p257, 1);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb72:
    assume $i241 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2453, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p242, 1);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2448, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p243, 1);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2444, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.0, $p244);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i246 := $eq.i32($i245, 1);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i246 == 1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2452, 1));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p248, 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb74:
    assume $i246 == 1;
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2452, 1));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p247, 0);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb69:
    assume $i238 == 1;
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i239 := 3;
    goto $bb71;

  $bb66:
    assume $i231 == 1;
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2444, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p232, 1);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb282:
    assume $i947 == 1;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i949 := $load.i8($M.0, $p948);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(41, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p951, $i949);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb278:
    assume $i933 == 1;
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i935 := $load.i8($M.0, $p934);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p937 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(40, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p937, $i935);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb274:
    assume $i919 == 1;
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p920 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i921 := $load.i8($M.0, $p920);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(39, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p923, $i921);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb270:
    assume $i905 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i907 := $load.i8($M.0, $p906);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(38, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p909, $i907);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb266:
    assume $i891 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i893 := $load.i8($M.0, $p892);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p895 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(37, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p895, $i893);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb262:
    assume $i877 == 1;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p878 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $i879 := $load.i8($M.0, $p878);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(36, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p881, $i879);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb258:
    assume $i863 == 1;
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i865 := $load.i8($M.0, $p864);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(35, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p867, $i865);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb254:
    assume $i849 == 1;
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i851 := $load.i8($M.0, $p850);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(34, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p853, $i851);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb250:
    assume $i835 == 1;
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i837 := $load.i8($M.0, $p836);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p839 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(33, 1));
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p839, $i837);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb246:
    assume $i821 == 1;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $i823 := $load.i8($M.0, $p822);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $p825 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(32, 1));
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p825, $i823);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb242:
    assume $i807 == 1;
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i809 := $load.i8($M.0, $p808);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(31, 1));
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p811, $i809);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb238:
    assume $i793 == 1;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p794 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i795 := $load.i8($M.0, $p794);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p797 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(30, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p797, $i795);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb234:
    assume $i779 == 1;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i781 := $load.i8($M.0, $p780);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(29, 1));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p783, $i781);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb230:
    assume $i765 == 1;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i767 := $load.i8($M.0, $p766);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(28, 1));
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p769, $i767);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb226:
    assume $i751 == 1;
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $p752 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i753 := $load.i8($M.0, $p752);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p755 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(27, 1));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p755, $i753);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb222:
    assume $i737 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i739 := $load.i8($M.0, $p738);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $p741 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(26, 1));
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p741, $i739);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb218:
    assume $i723 == 1;
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i725 := $load.i8($M.0, $p724);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(25, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p727, $i725);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb214:
    assume $i709 == 1;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $p710 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $i711 := $load.i8($M.0, $p710);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(24, 1));
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p713, $i711);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb210:
    assume $i695 == 1;
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i697 := $load.i8($M.0, $p696);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p699 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(23, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p699, $i697);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb206:
    assume $i681 == 1;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i683 := $load.i8($M.0, $p682);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p685 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(22, 1));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p685, $i683);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb202:
    assume $i667 == 1;
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p668 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i669 := $load.i8($M.0, $p668);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(21, 1));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p671, $i669);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb198:
    assume $i653 == 1;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i655 := $load.i8($M.0, $p654);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p657 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(20, 1));
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p657, $i655);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb194:
    assume $i639 == 1;
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i641 := $load.i8($M.0, $p640);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(19, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p643, $i641);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb190:
    assume $i625 == 1;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p626 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i627 := $load.i8($M.0, $p626);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(18, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p629, $i627);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    goto $bb192;

  $bb186:
    assume $i611 == 1;
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i613 := $load.i8($M.0, $p612);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p615 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(17, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p615, $i613);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb182:
    assume $i597 == 1;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i599 := $load.i8($M.0, $p598);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(16, 1));
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p601, $i599);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb178:
    assume $i583 == 1;
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i585 := $load.i8($M.0, $p584);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(15, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p587, $i585);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb174:
    assume $i569 == 1;
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i571 := $load.i8($M.0, $p570);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(14, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p573, $i571);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb170:
    assume $i555 == 1;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i557 := $load.i8($M.0, $p556);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $p559 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(13, 1));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p559, $i557);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb166:
    assume $i541 == 1;
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $i543 := $load.i8($M.0, $p542);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(12, 1));
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p545, $i543);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb162:
    assume $i527 == 1;
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i529 := $load.i8($M.0, $p528);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(11, 1));
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p531, $i529);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb158:
    assume $i513 == 1;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i515 := $load.i8($M.0, $p514);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p517 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(10, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p517, $i515);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb154:
    assume $i499 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i501 := $load.i8($M.0, $p500);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(9, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p503, $i501);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb150:
    assume $i485 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $i487 := $load.i8($M.0, $p486);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(8, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p489, $i487);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb146:
    assume $i471 == 1;
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i473 := $load.i8($M.0, $p472);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $p475 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(7, 1));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p475, $i473);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb142:
    assume $i457 == 1;
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.0, $p458);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p461 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(6, 1));
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p461, $i459);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb138:
    assume $i443 == 1;
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i445 := $load.i8($M.0, $p444);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(5, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p447, $i445);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb134:
    assume $i429 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $i431 := $load.i8($M.0, $p430);
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(4, 1));
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p433, $i431);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb136;

  $bb130:
    assume $i415 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i417 := $load.i8($M.0, $p416);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p419 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(3, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p419, $i417);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb126:
    assume $i401 == 1;
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i403 := $load.i8($M.0, $p402);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(2, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p405, $i403);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb122:
    assume $i387 == 1;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i389 := $load.i8($M.0, $p388);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(1, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p391, $i389);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb61:
    assume $i221 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2741, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p222);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2771, 1)), $mul.ref(0, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p225, $i223);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb373:
    assume $i1331 == 1;
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p1332 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i1333 := $load.i8($M.0, $p1332);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p1335 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(13, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1335, $i1333);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb370:
    assume $i1317 == 1;
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p1318 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $i1319 := $load.i8($M.0, $p1318);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $p1321 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(13, 1));
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1321, $i1319);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb366:
    assume $i1303 == 1;
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p1304 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i1305 := $load.i8($M.0, $p1304);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p1307 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(12, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1307, $i1305);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb363:
    assume $i1289 == 1;
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $p1290 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i1291 := $load.i8($M.0, $p1290);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p1293 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(12, 1));
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1293, $i1291);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb359:
    assume $i1275 == 1;
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $p1276 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $i1277 := $load.i8($M.0, $p1276);
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p1279 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(11, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1279, $i1277);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb356:
    assume $i1261 == 1;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p1262 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $i1263 := $load.i8($M.0, $p1262);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p1265 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(11, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1265, $i1263);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb352:
    assume $i1247 == 1;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $p1248 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i1249 := $load.i8($M.0, $p1248);
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p1251 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(10, 1));
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1251, $i1249);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb349:
    assume $i1233 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p1234 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i1235 := $load.i8($M.0, $p1234);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p1237 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(10, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1237, $i1235);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb345:
    assume $i1219 == 1;
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p1220 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i1221 := $load.i8($M.0, $p1220);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p1223 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(9, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1223, $i1221);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb342:
    assume $i1205 == 1;
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p1206 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $i1207 := $load.i8($M.0, $p1206);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p1209 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(9, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1209, $i1207);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    goto $bb344;

  $bb338:
    assume $i1191 == 1;
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $p1192 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i1193 := $load.i8($M.0, $p1192);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p1195 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(8, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1195, $i1193);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb335:
    assume $i1177 == 1;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p1178 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i1179 := $load.i8($M.0, $p1178);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p1181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(8, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1181, $i1179);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb331:
    assume $i1163 == 1;
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $p1164 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i1165 := $load.i8($M.0, $p1164);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $p1167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(7, 1));
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1167, $i1165);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb328:
    assume $i1149 == 1;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p1150 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i1151 := $load.i8($M.0, $p1150);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $p1153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(7, 1));
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1153, $i1151);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb324:
    assume $i1135 == 1;
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $p1136 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i1137 := $load.i8($M.0, $p1136);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p1139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(6, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1139, $i1137);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb321:
    assume $i1121 == 1;
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p1122 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i1123 := $load.i8($M.0, $p1122);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p1125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(6, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1125, $i1123);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb317:
    assume $i1107 == 1;
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p1108 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i1109 := $load.i8($M.0, $p1108);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p1111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(5, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1111, $i1109);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb314:
    assume $i1093 == 1;
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p1094 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i1095 := $load.i8($M.0, $p1094);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p1097 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(5, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1097, $i1095);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb310:
    assume $i1079 == 1;
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p1080 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i1081 := $load.i8($M.0, $p1080);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p1083 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(4, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1083, $i1081);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb307:
    assume $i1065 == 1;
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p1066 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i1067 := $load.i8($M.0, $p1066);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p1069 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(4, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1069, $i1067);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb303:
    assume $i1051 == 1;
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p1052 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i1053 := $load.i8($M.0, $p1052);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p1055 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(3, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1055, $i1053);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb300:
    assume $i1037 == 1;
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p1038 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i1039 := $load.i8($M.0, $p1038);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p1041 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(3, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1041, $i1039);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb296:
    assume $i1023 == 1;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p1024 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i1025 := $load.i8($M.0, $p1024);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $p1027 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(2, 1));
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1027, $i1025);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb293:
    assume $i1009 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p1010 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i1011 := $load.i8($M.0, $p1010);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(2, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1013, $i1011);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb289:
    assume $i995 == 1;
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i997 := $load.i8($M.0, $p996);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p999 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(1, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p999, $i997);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb286:
    assume $i981 == 1;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p982 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i983 := $load.i8($M.0, $p982);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(1, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p985, $i983);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb50:
    assume $i196 == 1;
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2740, 1));
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.0, $p197);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2757, 1)), $mul.ref(0, 1));
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p200, $i198);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i182 == 1;
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2739, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.0, $p183);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2743, 1)), $mul.ref(0, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p186, $i184);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb42:
    assume $i161 == 1;
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb36:
    assume $i139 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p140, .str);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p141, .str.58);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p142, .str.59);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p143, .str.65);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i146 := $load.i24($M.10, $p145);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i147 := $and.i24($i146, $sub.i24(0, 262144));
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i148 := $or.i24($i147, 174);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p145, $i148);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p149, 0);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.11, $p150);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i64($i151);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $i153 := $and.i64($i152, 1);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 395} {:cexpr "tmp___9"} boogie_si_record_i64($i154);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb38:
    assume $i155 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} __dynamic_dev_dbg.ref.ref.ref($p7, $p158, .str.65);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb30:
    assume $i117 == 1;
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p118, .str);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p119, .str.58);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p120, .str.59);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p121, .str.64);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $i124 := $load.i24($M.10, $p123);
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $i125 := $and.i24($i124, $sub.i24(0, 262144));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $i126 := $or.i24($i125, 166);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p123, $i126);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p127, 0);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.11, $p128);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i64($i129);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i131 := $and.i64($i130, 1);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $i132 := ldv__builtin_expect($i131, 0);
    call {:si_unique_call 390} {:cexpr "tmp___8"} boogie_si_record_i64($i132);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    assume {:branchcond $i133} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb32:
    assume $i133 == 1;
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} __dynamic_dev_dbg.ref.ref.ref($p6, $p136, .str.64);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb20:
    assume $i80 == 1;
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p81, .str);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p82, .str.58);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p83, .str.59);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p84, .str.63);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i87 := $load.i24($M.10, $p86);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i88 := $and.i24($i87, $sub.i24(0, 262144));
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $i89 := $or.i24($i88, 150);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p86, $i89);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p90, 0);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.11, $p91);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i64($i92);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    $i94 := $and.i64($i93, 1);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i95 := ldv__builtin_expect($i94, 0);
    call {:si_unique_call 385} {:cexpr "tmp___6"} boogie_si_record_i64($i95);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb22:
    assume $i96 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p98, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} __dynamic_dev_dbg.ref.ref.ref($p5, $p99, .str.63);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} $i36 := vnt_download_firmware($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 373} {:cexpr "tmp___4"} boogie_si_record_i32($i36);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 1);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i37 == 1);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p60, .str);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p61, .str.58);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p62, .str.59);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p63, .str.62);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i66 := $load.i24($M.10, $p65);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i67 := $and.i24($i66, $sub.i24(0, 262144));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i68 := $or.i24($i67, 144);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p65, $i68);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p69, 0);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.11, $p70);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i64($i71);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, 1);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 377} {:cexpr "tmp___3"} boogie_si_record_i64($i74);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb16:
    assume $i75 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} __dynamic_dev_dbg.ref.ref.ref($p4, $p78, .str.62);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i37 == 1;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i38 := vnt_firmware_branch_to_sram($p0);
    call {:si_unique_call 375} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i39 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p40, .str);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p41, .str.58);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p42, .str.59);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p43, .str.61);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.10, $p45);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 140);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p45, $i48);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p49, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.11, $p50);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 379} {:cexpr "tmp___1"} boogie_si_record_i64($i54);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb13;

  $bb10:
    assume $i55 == 1;
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} __dynamic_dev_dbg.ref.ref.ref($p3, $p58, .str.61);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2473, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p2, $p30, .str.60, 0, $i33);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const SET_IEEE80211_PERM_ADDR: ref;

axiom SET_IEEE80211_PERM_ADDR == $sub.ref(0, 292639);

procedure SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation SET_IEEE80211_PERM_ADDR($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 1776)), $mul.ref(0, 1));
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 427} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p5, $p1, 6, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    return;
}



const vnt_init_bands: ref;

axiom vnt_init_bands == $sub.ref(0, 293671);

procedure vnt_init_bands($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_init_bands($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(8, 1)), 48);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref(1, 8));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, vnt_supported_5ghz_band);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 48);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 63);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 48);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref(0, 8));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, vnt_supported_2ghz_band);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb11;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb13;

  $bb19:
    assume $i10 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb14:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb22;
}



const ieee80211_register_hw: ref;

axiom ieee80211_register_hw == $sub.ref(0, 294703);

procedure ieee80211_register_hw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_register_hw($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 1} true;
    call {:si_unique_call 428} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 429} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vnt_radio_power_off: ref;

axiom vnt_radio_power_off == $sub.ref(0, 295735);

procedure vnt_radio_power_off($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.28, $M.29, $CurrAddr;



implementation vnt_radio_power_off($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} vnt_mac_reg_bits_off($p0, 84, 4);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vnt_set_deep_sleep($p0);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} vnt_mac_reg_bits_on($p0, 123, $sub.i8(0, 128));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} vnt_mac_reg_bits_off($p0, 120, 5);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb13;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb20;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb14:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb22:
    assume $i11 == 1;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const vnt_mac_reg_bits_off: ref;

axiom vnt_mac_reg_bits_off == $sub.ref(0, 296767);

procedure vnt_mac_reg_bits_off($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;
  modifies $M.28, $CurrAddr;



implementation vnt_mac_reg_bits_off($p0: ref, $i1: i8, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 435} {:cexpr "vnt_mac_reg_bits_off:arg:reg_ofs"} boogie_si_record_i8($i1);
    call {:si_unique_call 436} {:cexpr "vnt_mac_reg_bits_off:arg:bits"} boogie_si_record_i8($i2);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p4, 0);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $M.28 := $store.i8($M.28, $p5, $i2);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} vslice_dummy_var_82 := vnt_control_out($p0, 4, $i7, 3, 2, $p8);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    return;
}



const vnt_set_deep_sleep: ref;

axiom vnt_set_deep_sleep == $sub.ref(0, 297799);

procedure vnt_set_deep_sleep($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $CurrAddr;



implementation vnt_set_deep_sleep($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vnt_control_out_u8($p0, 2, 12, 23);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} vnt_control_out_u8($p0, 2, 13, $sub.i8(0, 71));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    return;
}



const vnt_control_out_u8: ref;

axiom vnt_control_out_u8 == $sub.ref(0, 298831);

procedure vnt_control_out_u8($p0: ref, $i1: i8, $i2: i8, $i3: i8);
  free requires assertsPassed;
  modifies $M.29, $CurrAddr;



implementation vnt_control_out_u8($p0: ref, $i1: i8, $i2: i8, $i3: i8)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 441} {:cexpr "vnt_control_out_u8:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 442} {:cexpr "vnt_control_out_u8:arg:reg_off"} boogie_si_record_i8($i2);
    assume {:verifier.code 0} true;
    $M.29 := $store.i8($M.29, $p4, $i3);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i1);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} vslice_dummy_var_83 := vnt_control_out($p0, 0, $i6, $i8, 1, $p4);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    return;
}



const vnt_check_firmware_version: ref;

axiom vnt_check_firmware_version == $sub.ref(0, 299863);

procedure vnt_check_firmware_version($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_check_firmware_version($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $i52: i16;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i24;
  var $i81: i24;
  var $i82: i24;
  var $p83: ref;
  var $p84: ref;
  var $i85: i8;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i16;
  var $i95: i32;
  var $p96: ref;
  var $i97: i16;
  var $i98: i32;
  var $i99: i1;
  var $i50: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2392, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $i7 := vnt_control_in($p0, 1, 0, 8, 2, $p6);
    call {:si_unique_call 449} {:cexpr "status"} boogie_si_record_i32($i7);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p8, .str);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p9, .str.49);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p10, .str.42);
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p11, .str.50);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.10, $p13);
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 121);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p13, $i16);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p17, 0);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.11, $p18);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 451} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i7, 0);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2392, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p51);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 65535);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p74, .str);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p75, .str.49);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p76, .str.42);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p77, .str.50);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i80 := $load.i24($M.10, $p79);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i81 := $and.i24($i80, $sub.i24(0, 262144));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i82 := $or.i24($i81, 133);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p79, $i82);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p83, 0);
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i85 := $load.i8($M.11, $p84);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i86 := $zext.i8.i64($i85);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i87 := $and.i64($i86, 1);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $i88 := ldv__builtin_expect($i87, 0);
    call {:si_unique_call 460} {:cexpr "tmp___2"} boogie_si_record_i64($i88);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i89 := $ne.i64($i88, 0);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2392, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $i99 := $ule.i32($i98, 306);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i50 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb20:
    assume $i99 == 1;
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_84 := vnt_firmware_branch_to_sram($p0);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb9;

  $bb17:
    assume $i89 == 1;
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2392, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i95 := $zext.i16.i32($i94);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p92, .str.50, $i95);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i54 == 1;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p55, .str);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p56, .str.49);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p57, .str.42);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p58, .str.52);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.10, $p60);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 128);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p60, $i63);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p64, 0);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.11, $p65);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 457} {:cexpr "tmp___1"} boogie_si_record_i64($i69);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb9;

  $bb13:
    assume $i70 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p72, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} __dynamic_dev_dbg.ref.ref.ref($p3, $p73, .str.52);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p31, .str);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p32, .str.49);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p33, .str.42);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p34, .str.51);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.10, $p36);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 124);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p36, $i39);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p40, 0);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.11, $p41);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 454} {:cexpr "tmp___0"} boogie_si_record_i64($i45);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb9;

  $bb6:
    assume $i46 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} __dynamic_dev_dbg.ref.ref.ref($p2, $p49, .str.51);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2392, 1));
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p26, .str.50, $i29);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_download_firmware: ref;

axiom vnt_download_firmware == $sub.ref(0, 300895);

procedure vnt_download_firmware($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr, assertsPassed;



implementation vnt_download_firmware($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i32;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i16;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $i77: i32;
  var $i78: i64;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $i35: i32;
  var $i30: i8;
  var $p83: ref;
  var $p25: ref;
  var $i26: i8;
  var $i84: i1;
  var $i85: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p7, .str);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p8, .str.41);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p9, .str.42);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p10, .str.43);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.10, $p12);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 53);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p12, $i15);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p16, 0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.11, $p17);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 467} {:cexpr "tmp"} boogie_si_record_i64($i21);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i23 := request_firmware($p1, .str.44, $p6);
    call {:si_unique_call 470} {:cexpr "rc"} boogie_si_record_i32($i23);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} $p27 := kmalloc(1024, 208);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.30, $p1);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i33 := $load.i64($M.31, $p32);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i34 := $ult.i64(0, $i33);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i30 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.30, $p1);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} release_firmware($p83);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p25, $i26 := $p27, $i30;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} kfree($p25);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i8.i1($i26);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i85 := $zext.i1.i32($i84);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $r := $i85;
    return;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb15;

  $bb15:
    call $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $i75, $i76, $i77, $i78, $p79, $p80, $i81, $i82, $i35, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16 := vnt_download_firmware_loop_$bb15($p0, $p1, $p3, $p6, $p27, $p36, $p37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $i63, $i64, $i65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $p73, $p74, $i75, $i76, $i77, $i78, $p79, $p80, $i81, $i82, $i35, cmdloc_dummy_var_14, cmdloc_dummy_var_15, cmdloc_dummy_var_16);
    goto $bb15_last;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.30, $p1);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.31, $p37);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i39, $i35);
    call {:si_unique_call 475} {:cexpr "__min1"} boogie_si_record_i32($i40);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 1024);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i42 := 1024;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    call {:si_unique_call 476} {:cexpr "length"} boogie_si_record_i16($i43);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.30, $p1);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.32, $p45);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i35);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p46, $mul.ref($i47, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i64($i43);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 477} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p27, $p48, $i49, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i16($i35);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i51, 4608);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i43);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $i56 := vnt_control_out($p0, 0, $i53, 0, $i55, $p27);
    call {:si_unique_call 479} {:cexpr "status"} boogie_si_record_i32($i56);
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p57, .str);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p58, .str.41);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p59, .str.42);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p60, .str.46);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.10, $p62);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 77);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p62, $i65);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p66, 0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.11, $p67);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 481} {:cexpr "tmp___0"} boogie_si_record_i64($i71);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i76 := $ne.i32($i56, 0);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i35, 1024);
    call {:si_unique_call 483} {:cexpr "ii"} boogie_si_record_i32($i77);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.30, $p1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.31, $p80);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i82 := $ult.i64($i78, $i81);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i82 == 1);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb26:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i35 := $i77;
    goto $bb26_dummy;

  $bb23:
    assume $i76 == 1;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb10;

  $bb20:
    assume $i72 == 1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.30, $p1);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.31, $p74);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __dynamic_dev_dbg.ref.ref.ref.i32.i64($p3, $p6, .str.46, $i35, $i75);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i42 := $i40;
    goto $bb19;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb10;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i24 == 1;
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} dev_err.ref.ref.ref.i32($p6, .str.45, .str.44, $i23);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p25, $i26 := $0.ref, 0;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __dynamic_dev_dbg.ref.ref.ref($p2, $p6, .str.43);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;
}



const vnt_firmware_branch_to_sram: ref;

axiom vnt_firmware_branch_to_sram == $sub.ref(0, 301927);

procedure vnt_firmware_branch_to_sram($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_firmware_branch_to_sram($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, .str);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p3, .str.47);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p4, .str.42);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p5, .str.48);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.10, $p7);
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 98);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p7, $i10);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p11, 0);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.11, $p12);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 486} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $i21 := vnt_control_out($p0, 1, 4608, 0, 0, $0.ref);
    call {:si_unique_call 489} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __dynamic_dev_dbg.ref.ref.ref($p1, $p20, .str.48);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_vt3184_init: ref;

axiom vnt_vt3184_init == $sub.ref(0, 302959);

procedure vnt_vt3184_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.20, $M.29, $M.33, $CurrAddr;



implementation vnt_vt3184_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i58: i8;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $i78: i8;
  var $p79: ref;
  var $p81: ref;
  var $p83: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i32;
  var $i91: i1;
  var $i92: i8;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p69: ref;
  var $p53: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i32;
  var $i105: i16;
  var $p106: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i32;
  var $i111: i16;
  var $p112: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i1;
  var $i127: i8;
  var $i128: i32;
  var $i129: i32;
  var $i130: i8;
  var $i8: i32;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} $i6 := vnt_control_in($p0, 1, 0, 4, 256, $p5);
    call {:si_unique_call 494} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2482, 1)), $mul.ref(27, 1));
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p13, .str);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p14, .str.7);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p15, .str.8);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p16, .str.9);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.10, $p18);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 397);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p18, $i21);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p22, 0);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.11, $p23);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 496} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 3);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 14);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 10);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    assume {:branchcond $i57} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i57 == 1);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 9);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i73 == 1);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 12);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i77 == 1);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i89);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 13);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i91 == 1);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb23:
    assume $i91 == 1;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $i92 := $load.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(10, 1)));
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, $i92);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 32);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(1, 1));
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 16);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(2, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(3, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 0);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vnt_mac_reg_bits_on($p0, 121, 8);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p69 := vnt_vt3184_vt3226d0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p53 := $p69;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p1);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i64(256);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 498} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p102, $p53, $i103, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i104 := $zext.i16.i32(256);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p1);
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} vslice_dummy_var_85 := vnt_control_out($p0, 0, 0, 2, $i105, $p106);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p1);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i64(64);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 500} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p108, vnt_vt3184_agc, $i109, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32(64);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i16($i110);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p1);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} vslice_dummy_var_86 := vnt_control_out($p0, 0, 0, 7, $i111, $p112);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 9);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i117} true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i117 == 1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i121 := $eq.i32($i120, 13);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i121} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i121 == 1);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 12);
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} vnt_control_out_u8($p0, 2, 4, 127);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} vnt_control_out_u8($p0, 2, 13, 1);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} vnt_rf_table_download($p0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} vslice_dummy_var_87 := vnt_control_in($p0, 1, 1540, 1, 1, $p2);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $i127 := $load.i8($M.33, $p2);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i128 := $zext.i8.i32($i127);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i128, 2);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i8($i129);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $M.33 := $store.i8($M.33, $p2, $i130);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_88 := vnt_control_out($p0, 0, 1540, 1, 1, $p2);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i8 := 1;
    goto $bb3;

  $bb32:
    assume $i125 == 1;
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} vnt_control_out_u8($p0, 3, 116, 17);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} vnt_mac_reg_bits_on($p0, 119, 1);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vnt_control_out_u8($p0, 3, 116, 35);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} vnt_mac_reg_bits_on($p0, 119, 1);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i117 == 1;
    goto $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(10, 1)));
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $i78);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, 32);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(1, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p83, 16);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(2, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p85, 0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(3, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vnt_mac_reg_bits_on($p0, 121, 8);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb18;

  $bb14:
    assume $i57 == 1;
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(10, 1)));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p59, $i58);
    $p60 := $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(215, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 6);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 28);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(1, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 16);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(2, 1));
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(3, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p68, 0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p69 := vnt_vt3184_al2230;
    goto $bb16;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(10, 1)));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 28);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(1, 1));
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 16);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(2, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(3, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p53 := vnt_vt3184_al2230;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb9;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p31, .str.9, $i34);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;
}



const vnt_control_in: ref;

axiom vnt_control_in == $sub.ref(0, 303991);

procedure vnt_control_in($p0: ref, $i1: i8, $i2: i16, $i3: i16, $i4: i16, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vnt_control_in($p0: ref, $i1: i8, $i2: i16, $i3: i16, $i4: i16, $p5: ref) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i8;
  var $i19: i32;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} {:cexpr "vnt_control_in:arg:request"} boogie_si_record_i8($i1);
    call {:si_unique_call 514} {:cexpr "vnt_control_in:arg:value"} boogie_si_record_i16($i2);
    call {:si_unique_call 515} {:cexpr "vnt_control_in:arg:index"} boogie_si_record_i16($i3);
    call {:si_unique_call 516} {:cexpr "vnt_control_in:arg:length"} boogie_si_record_i16($i4);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i7 := constant_test_bit(2, $p6);
    call {:si_unique_call 518} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(128, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} mutex_lock_nested($p10, 0);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $i13 := __create_pipe($p12, 0);
    call {:si_unique_call 521} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, $sub.i32(0, 2147483520));
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i1);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i8($i17);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i2);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i19);
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i3);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i4);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i25 := usb_control_msg($p15, $i16, $i18, $sub.i8(0, 64), $i20, $i22, $p5, $i24, 500);
    call {:si_unique_call 523} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(128, 1));
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} mutex_unlock($p26);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i4);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i25);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb3;
}



const ether_addr_copy: ref;

axiom ether_addr_copy == $sub.ref(0, 305023);

procedure ether_addr_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ether_addr_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 2));
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(4, 2));
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i7);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    return;
}



const vnt_set_short_slot_time: ref;

axiom vnt_set_short_slot_time == $sub.ref(0, 306055);

procedure vnt_set_short_slot_time($p0: ref);
  free requires assertsPassed;
  modifies $M.34, $M.0, $M.29, $CurrAddr;



implementation vnt_set_short_slot_time($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;
  var $i9: i8;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p1, 0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2828, 1));
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 32);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $i15);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} vnt_control_in_u8($p0, 2, $sub.i8(0, 25), $p1);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.34, $p1);
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i20, $i22);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} vnt_control_out_u8($p0, 2, 10, $i33);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 32);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 223);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i9);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_mac_set_led: ref;

axiom vnt_mac_set_led == $sub.ref(0, 307087);

procedure vnt_mac_set_led($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;
  modifies $M.35, $CurrAddr;



implementation vnt_mac_set_led($p0: ref, $i1: i8, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 529} {:cexpr "vnt_mac_set_led:arg:state"} boogie_si_record_i8($i1);
    call {:si_unique_call 530} {:cexpr "vnt_mac_set_led:arg:led"} boogie_si_record_i8($i2);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $M.35 := $store.i8($M.35, $p4, $i2);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.35 := $store.i8($M.35, $p5, $i1);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p3);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} vslice_dummy_var_89 := vnt_control_out($p0, 4, 119, 3, 2, $p6);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    return;
}



const vnt_radio_power_on: ref;

axiom vnt_radio_power_on == $sub.ref(0, 308119);

procedure vnt_radio_power_on($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.20, $M.28, $M.29, $CurrAddr;



implementation vnt_radio_power_on($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} vnt_exit_deep_sleep($p0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} vnt_mac_reg_bits_on($p0, 84, 4);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i3, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb10, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} vnt_mac_reg_bits_off($p0, 123, $sub.i8(0, 128));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vnt_mac_reg_bits_on($p0, 120, 5);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb5;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i3, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i3, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb13;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb20;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb14:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i3, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb13;

  $bb22:
    assume $i11 == 1;
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const vnt_exit_deep_sleep: ref;

axiom vnt_exit_deep_sleep == $sub.ref(0, 309151);

procedure vnt_exit_deep_sleep($p0: ref);
  free requires assertsPassed;
  modifies $M.29, $CurrAddr;



implementation vnt_exit_deep_sleep($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vnt_control_out_u8($p0, 2, 12, 0);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} vnt_control_out_u8($p0, 2, 13, 1);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    return;
}



const vnt_control_in_u8: ref;

axiom vnt_control_in_u8 == $sub.ref(0, 310183);

procedure vnt_control_in_u8($p0: ref, $i1: i8, $i2: i8, $p3: ref);
  free requires assertsPassed;



implementation vnt_control_in_u8($p0: ref, $i1: i8, $i2: i8, $p3: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} {:cexpr "vnt_control_in_u8:arg:reg"} boogie_si_record_i8($i1);
    call {:si_unique_call 539} {:cexpr "vnt_control_in_u8:arg:reg_off"} boogie_si_record_i8($i2);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i2);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i1);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_90 := vnt_control_in($p0, 1, $i5, $i7, 1, $p3);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    return;
}



const vnt_rf_table_download: ref;

axiom vnt_rf_table_download == $sub.ref(0, 311215);

procedure vnt_rf_table_download($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vnt_rf_table_download($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i16;
  var $i17: i16;
  var $i18: i16;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $i25: i32;
  var $i26: i1;
  var $i30: i32;
  var $i31: i1;
  var $i32: i16;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $p39: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i16;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $i27: i16;
  var $i28: i16;
  var $p29: ref;
  var $i53: i32;
  var $i54: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i16;
  var $p61: ref;
  var $i62: i64;
  var $i63: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i16;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i55: i16;
  var $i56: i16;
  var $p57: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $i87: i32;
  var $i88: i16;
  var $p89: ref;
  var $i94: i32;
  var $i95: i1;
  var $i96: i16;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $i100: i16;
  var $i101: i32;
  var $i102: i16;
  var $p103: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i16;
  var $i109: i32;
  var $i110: i32;
  var $i111: i32;
  var $i112: i16;
  var $i113: i64;
  var $p114: ref;
  var $i115: i32;
  var $i116: i1;
  var $i91: i16;
  var $i92: i16;
  var $p93: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p1 := $alloc($mul.ref(256, $zext.i32.i64(1)));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $i17, $i18 := $0.ref, $0.ref, $0.ref, 0, 0, 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i18);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 542} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p19, $p15, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i18);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} vslice_dummy_var_91 := vnt_control_out($p0, 0, 0, 9, $i22, $p23);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i17);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i16);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 10);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume $i84 == 1;
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p1);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i64(48);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 552} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p85, al7230_init_table_amode, $i86, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32(48);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p1);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} vslice_dummy_var_94 := vnt_control_out($p0, 0, 0, 10, $i88, $p89);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i91, $i92, $p93 := 0, 168, al7230_channel_table2;
    goto $bb46;

  $bb46:
    call $i94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $i91, $i92, $p93, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, vslice_dummy_var_95 := vnt_rf_table_download_loop_$bb46($p0, $p1, $i94, $i95, $i96, $p97, $i98, $i99, $i100, $i101, $i102, $p103, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $p114, $i115, $i116, $i91, $i92, $p93, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37, vslice_dummy_var_95);
    goto $bb46_last;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i92);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, 63);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i92;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p1);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i64($i96);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 554} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p97, $p93, $i98, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i91);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i96);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} vslice_dummy_var_95 := vnt_control_out($p0, 0, $i100, 13, $i102, $p103);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i92);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $i106 := $zext.i16.i32($i96);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $i107 := $sub.i32($i105, $i106);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    call {:si_unique_call 556} {:cexpr "length2"} boogie_si_record_i16($i108);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i91);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i96);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i111 := $add.i32($i109, $i110);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    call {:si_unique_call 557} {:cexpr "value"} boogie_si_record_i16($i112);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i64($i96);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p93, $mul.ref($i113, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i115 := $zext.i16.i32($i108);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i116 := $ne.i32($i115, 0);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i91, $i92, $p93 := $i112, $i108, $p114;
    goto $bb51_dummy;

  $bb48:
    assume $i95 == 1;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i96 := 64;
    goto $bb50;

  $bb33:
    assume $i54 == 1;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $i55, $i56, $p57 := 0, $i16, $p13;
    goto $bb36;

  $bb36:
    call $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $i55, $i56, $p57, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, vslice_dummy_var_93 := vnt_rf_table_download_loop_$bb36($p0, $p1, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $i55, $i56, $p57, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, vslice_dummy_var_93);
    goto $bb36_last;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i56);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i58, 63);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $i56;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p1);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i64($i60);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 548} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p61, $p57, $i62, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i55);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i63);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i60);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p1);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_93 := vnt_control_out($p0, 0, $i64, 12, $i66, $p67);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i56);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i60);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32($i69, $i70);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    call {:si_unique_call 550} {:cexpr "length3"} boogie_si_record_i16($i72);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i55);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i60);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i73, $i74);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i75);
    call {:si_unique_call 551} {:cexpr "value"} boogie_si_record_i16($i76);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i64($i60);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p57, $mul.ref($i77, 1));
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i72);
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i80 == 1);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb41:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $i55, $i56, $p57 := $i76, $i72, $p78;
    goto $bb41_dummy;

  $bb38:
    assume $i59 == 1;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i60 := 64;
    goto $bb40;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := 0, $i17, $p14;
    goto $bb25;

  $bb25:
    call $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $i27, $i28, $p29, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, vslice_dummy_var_92 := vnt_rf_table_download_loop_$bb25($p0, $p1, $i30, $i31, $i32, $p33, $i34, $i35, $i36, $i37, $i38, $p39, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $p50, $i51, $i52, $i27, $i28, $p29, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, vslice_dummy_var_92);
    goto $bb25_last;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i28);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i31 := $ugt.i32($i30, 63);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i28;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i64($i32);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 544} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p33, $p29, $i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i27);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i32);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} vslice_dummy_var_92 := vnt_control_out($p0, 0, $i36, 11, $i38, $p39);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i28);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i32);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i41, $i42);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    call {:si_unique_call 546} {:cexpr "length2"} boogie_si_record_i16($i44);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i27);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i32);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i45, $i46);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    call {:si_unique_call 547} {:cexpr "value"} boogie_si_record_i16($i48);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i64($i32);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p29, $mul.ref($i49, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i44);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i52 == 1);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb30:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := $i48, $i44, $p50;
    goto $bb30_dummy;

  $bb27:
    assume $i31 == 1;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $i32 := 64;
    goto $bb29;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $i17, $i18 := al2230_channel_table1, al2230_channel_table0, al2230_init_table, 42, 42, 45;
    goto $bb20;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $i17, $i18 := vt3342_channel_table1, vt3342_channel_table0, vt3342a0_init_table, 168, 168, 39;
    goto $bb20;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $i17, $i18 := vt3226_channel_table1, vt3226_channel_table0, vt3226d0_init_table, 42, 42, 33;
    goto $bb20;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb11;

  $bb16:
    assume $i11 == 1;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $i17, $i18 := al7230_channel_table1, al7230_channel_table0, al7230_init_table, 168, 168, 48;
    goto $bb20;

  $bb14:
    assume $i10 == 1;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $p13, $p14, $p15, $i16, $i17, $i18 := vt3226_channel_table1, vt3226_channel_table0, vt3226_init_table, 42, 42, 33;
    goto $bb20;

  $bb12:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i4, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb11;

  $bb18:
    assume $i12 == 1;
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb51_dummy:
    assume false;
    return;

  $bb46_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  $bb41_dummy:
    assume false;
    return;

  $bb36_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4342;

  $bb30_dummy:
    assume false;
    return;

  $bb25_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4305;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 312247);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 1} true;
    call {:si_unique_call 558} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 559} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 313279);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 561} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv_check_alloc_flags($i1);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} $p2 := ldv_undef_ptr();
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 314311);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 315343);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} free_($p0);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 316375);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 565} $free($p0);
    return;
}



const ieee80211_alloc_hw: ref;

axiom ieee80211_alloc_hw == $sub.ref(0, 317407);

procedure ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw($i0: i64, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} {:cexpr "ieee80211_alloc_hw:arg:priv_data_len"} boogie_si_record_i64($i0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p2 := ieee80211_alloc_hw_nm($i0, $p1, $0.ref);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_initialize_ieee80211_ops_3: ref;

axiom ldv_initialize_ieee80211_ops_3 == $sub.ref(0, 318439);

procedure ldv_initialize_ieee80211_ops_3();
  free requires assertsPassed;
  modifies $M.2, $M.0, $CurrAddr;



implementation ldv_initialize_ieee80211_ops_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $p0 := ldv_init_zalloc(160);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $M.2 := $p0;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 319471);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} $p1 := calloc(1, $i0);
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 1} true;
    call {:si_unique_call 571} __VERIFIER_assume($i4);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ieee80211_alloc_hw_nm: ref;

axiom ieee80211_alloc_hw_nm == $sub.ref(0, 320503);

procedure ieee80211_alloc_hw_nm($i0: i64, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_alloc_hw_nm($i0: i64, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} {:cexpr "ieee80211_alloc_hw_nm:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p3 := external_alloc();
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const vnt_tx_80211: ref;

axiom vnt_tx_80211 == $sub.ref(0, 321535);

procedure vnt_tx_80211($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.63, $M.0, $M.24, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, assertsPassed, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation vnt_tx_80211($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} ieee80211_stop_queues($p0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} $i6 := vnt_tx_packet($p5, $p2);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 576} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} ieee80211_free_txskb($p0, $p2);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} ieee80211_wake_queues($p0);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const vnt_start: ref;

axiom vnt_start == $sub.ref(0, 322567);

procedure vnt_start($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.20, $M.29, $M.33, $M.34, $M.28, $M.35, $M.24, $CurrAddr, assertsPassed;



implementation vnt_start($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i24;
  var $i42: i24;
  var $i43: i24;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3248)), $mul.ref(44, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 2900);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i7 := vnt_alloc_bufs($p5);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 582} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} clear_bit(2, $p32);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i33 := vnt_init_registers($p5);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    call {:si_unique_call 588} {:cexpr "tmp___3"} boogie_si_record_i32($i33);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 3248)), $mul.ref(304, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 1);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} vnt_int_start_interrupt($p5);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} ieee80211_wake_queues($p0);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i31 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p35, .str);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p36, .str.69);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p37, .str.59);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p38, .str.71);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i41 := $load.i24($M.10, $p40);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i42 := $and.i24($i41, $sub.i24(0, 262144));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $i43 := $or.i24($i42, 533);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p40, $i43);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p44, 0);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.11, $p45);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i64($i46);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 1);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i49 := ldv__builtin_expect($i48, 0);
    call {:si_unique_call 590} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} vnt_free_rx_bufs($p5);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} vnt_free_tx_bufs($p5);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vnt_free_int_bufs($p5);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} usb_kill_urb($p56);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} usb_free_urb($p58);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb9;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} __dynamic_dev_dbg.ref.ref.ref($p2, $p53, .str.71);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p12, .str);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p13, .str.69);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p14, .str.59);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p15, .str.70);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.10, $p17);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 526);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p17, $i20);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p21, 0);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.11, $p22);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 584} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb9;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} __dynamic_dev_dbg.ref.ref.ref($p1, $p30, .str.70);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  SeqInstr_40:
    assume !assertsPassed;
    return;
}



const vnt_stop: ref;

axiom vnt_stop == $sub.ref(0, 323599);

procedure vnt_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.12, $M.14, $M.16, $M.18, $CurrAddr;



implementation vnt_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_96: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} vnt_mac_disable_keyentry($p3, 0);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vnt_mac_disable_keyentry($p3, 1);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vnt_mac_disable_keyentry($p3, 2);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} vnt_mac_disable_keyentry($p3, 3);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} vnt_mac_disable_keyentry($p3, 4);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} vnt_mac_disable_keyentry($p3, 5);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} vnt_mac_disable_keyentry($p3, 6);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} vnt_mac_disable_keyentry($p3, 7);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vnt_mac_disable_keyentry($p3, 8);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} vnt_mac_disable_keyentry($p3, 9);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} vnt_mac_disable_keyentry($p3, 10);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p6, 0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i8 := constant_test_bit(1, $p7);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} ieee80211_stop_queues($p0);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3248)), $mul.ref(288, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} set_bit(2, $p10);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 3248)), $mul.ref(3008, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_96 := ldv_cancel_delayed_work_sync_45($p11);
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 3248)), $mul.ref(2984, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} vnt_free_tx_bufs($p3);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} vnt_free_rx_bufs($p3);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} vnt_free_int_bufs($p3);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} usb_kill_urb($p15);
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} usb_free_urb($p17);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vnt_mac_shutdown($p3);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_add_interface: ref;

axiom vnt_add_interface == $sub.ref(0, 324631);

procedure vnt_add_interface($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.20, $M.35, $M.29, $CurrAddr, $M.40, $M.41, $M.42, $M.43, $M.44, $M.47, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation vnt_add_interface($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(8, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $p1);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 95);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} vnt_mac_reg_bits_off($p4, 86, 32);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vnt_mac_reg_bits_on($p4, 84, 16);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2824, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} vnt_set_bss_mode($p4);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} vnt_mac_set_led($p4, 6, 6);
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb13;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb9:
    assume $i11 == 1;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} vnt_mac_reg_bits_off($p4, 86, 32);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vnt_mac_reg_bits_on($p4, 84, 32);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const vnt_remove_interface: ref;

axiom vnt_remove_interface == $sub.ref(0, 325663);

procedure vnt_remove_interface($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.28, $M.20, $M.0, $M.35, $CurrAddr, $M.29;



implementation vnt_remove_interface($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p12: ref;
  var vslice_dummy_var_97: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(0, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} vslice_dummy_var_97 := vnt_radio_power_off($p4);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2824, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vnt_mac_set_led($p4, 6, 4);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} vnt_mac_reg_bits_off($p4, 87, 1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} vnt_mac_reg_bits_off($p4, 72, 1);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} vnt_mac_reg_bits_off($p4, 84, 16);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vnt_mac_reg_bits_off($p4, 87, 1);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} vnt_mac_reg_bits_off($p4, 72, 1);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} vnt_mac_reg_bits_off($p4, 84, 32);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb11;
}



const vnt_config: ref;

axiom vnt_config == $sub.ref(0, 326695);

procedure vnt_config($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.28, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.29, $M.57, $M.40, $M.41, $M.42, $M.43, $M.44, $M.47, $M.23, $CurrAddr;



implementation vnt_config($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $i34: i8;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} {:cexpr "vnt_config:arg:changed"} boogie_si_record_i32($i1);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 16);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i1, 64);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i17 == 1);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 8);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i1, 32);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb19:
    assume $i42 == 1;
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i46 == 1);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2814, 1));
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, 11);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2814, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} vslice_dummy_var_98 := vnt_rf_setpower($p4, $i51, $i57);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i46 == 1;
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2814, 1));
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, 0);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb8;

  $bb8:
    $p23 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} vnt_set_channel($p4, $i27);
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := 2;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i34);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i37, $i38);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i39 == 1;
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, $i34);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} vnt_set_bss_mode($p4);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i33 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb14;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb8;

  $bb1:
    assume $i7 == 1;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 2);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i11 == 1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} vnt_disable_power_saving($p4);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i11 == 1;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vnt_enable_power_saving($p4, $i15);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const vnt_bss_info_changed: ref;

axiom vnt_bss_info_changed == $sub.ref(0, 327727);

procedure vnt_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.34, $M.29, $M.20, $M.28, $M.51, $M.52, $M.53, $M.54, $CurrAddr, $M.23, $M.55, $M.56, $M.24, assertsPassed;



implementation vnt_bss_info_changed($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i8;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i52: i8;
  var $i53: i1;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i24;
  var $i87: i24;
  var $i88: i24;
  var $p89: ref;
  var $p90: ref;
  var $i91: i8;
  var $i92: i64;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i1;
  var $i102: i32;
  var $p103: ref;
  var $i104: i8;
  var $i105: i1;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 643} {:cexpr "vnt_bss_info_changed:arg:changed"} boogie_si_record_i32($i3);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(12, 1));
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(2832, 1));
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p11, $i10);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i3, 128);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i3, 32);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i3, 4);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i3, 2);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i3, 8);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i3, 262144);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i78 := $and.i32($i3, 512);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i79 == 1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p80, .str);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p81, .str.76);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p82, .str.59);
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p83, .str.78);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i86 := $load.i24($M.10, $p85);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i87 := $and.i24($i86, $sub.i24(0, 262144));
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i88 := $or.i24($i87, 750);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p85, $i88);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p89, 0);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.11, $p90);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i64($i91);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i93 := $and.i64($i92, 1);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $i94 := ldv__builtin_expect($i93, 0);
    call {:si_unique_call 658} {:cexpr "tmp___0"} boogie_si_record_i64($i94);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(17, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i105 == 1);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} vnt_mac_reg_bits_off($p8, 87, 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i105 == 1;
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_100 := vnt_beacon_enable($p8, $p1, $p2);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} vnt_mac_reg_bits_on($p8, 87, 1);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i95 == 1;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(17, 1));
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i8.i1($i100);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p98, .str.78, $i102);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i67 == 1;
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(2814, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 64)), $mul.ref(6, 1));
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.36, $p74);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} vslice_dummy_var_99 := vnt_rf_setpower($p8, $i70, $i76);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb22:
    assume $i55 == 1;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(16, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i57);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(2828, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, 0);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} vnt_set_short_slot_time($p8);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i64);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vnt_set_vga_gain_offset($p8, $i65);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} vnt_update_pre_ed_threshold($p8, 0);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(2828, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, 1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(14, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i8.i1($i52);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i53 == 1);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} vnt_mac_disable_protect_mode($p8);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i53 == 1;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} vnt_mac_enable_protect_mode($p8);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb10:
    assume $i43 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(15, 1));
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i46 == 1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} vnt_mac_disable_barker_preamble_mode($p8);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 0);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i46 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} vnt_mac_enable_barker_preamble_mode($p8);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 1);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} vnt_update_top_rates($p8);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p21, .str);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p22, .str.76);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p23, .str.59);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p24, .str.77);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.10, $p26);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 713);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p26, $i29);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p30, 0);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.11, $p31);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 647} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p8, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(40, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p39, .str.77, $i41);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(0, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} vnt_mac_set_bssid_addr($p8, $p15);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_prepare_multicast: ref;

axiom vnt_prepare_multicast == $sub.ref(0, 328759);

procedure vnt_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_prepare_multicast($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i13: i64;
  var $p14: ref;
  var $i30: i64;
  var $i12: i64;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i9, $i10);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i12 := 0;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(48, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i13, $p14 := 0, $p7;
    goto $bb4;

  $bb4:
    call $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $p26, $p27, $i28, $i29, $i13, $p14, $i30 := vnt_prepare_multicast_loop_$bb4($i10, $p15, $p16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $p25, $p26, $p27, $i28, $i29, $i13, $p14, $i30);
    goto $bb4_last;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $i17 := crc32_le($sub.i32(0, 1), $p16, 6);
    call {:si_unique_call 664} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $i18 := __bitrev32($i17);
    call {:si_unique_call 666} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i32($i18, 26);
    call {:si_unique_call 667} {:cexpr "bit_nr"} boogie_si_record_i32($i19);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 63);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i20);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $i22 := $shl.i64(1, $i21);
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i23 := $or.i64($i22, $i13);
    call {:si_unique_call 668} {:cexpr "mc_filter"} boogie_si_record_i64($i23);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.37, $p25);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, $i10);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i30 := $i23;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i12 := $i30;
    goto $bb3;

  $bb6:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i13, $p14 := $i23, $p26;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;
}



const vnt_configure: ref;

axiom vnt_configure == $sub.ref(0, 329791);

procedure vnt_configure($p0: ref, $i1: i32, $p2: ref, $i3: i64);
  free requires assertsPassed;
  modifies $M.38, $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.29, $M.50, $CurrAddr;



implementation vnt_configure($p0: ref, $i1: i32, $p2: ref, $i3: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i8;
  var $i44: i32;
  var $i45: i32;
  var $i46: i8;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i56: i8;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i8;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i8;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 672} {:cexpr "vnt_configure:arg:changed_flags"} boogie_si_record_i32($i1);
    call {:si_unique_call 673} {:cexpr "vnt_configure:arg:multicast"} boogie_si_record_i64($i3);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p4, 0);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p2);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 82);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i11);
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i12 := vnt_control_in($p9, 1, 86, 3, 1, $p4);
    call {:si_unique_call 675} {:cexpr "rc"} boogie_si_record_i32($i12);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p14, .str);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p15, .str.79);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p16, .str.59);
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p17, .str.80);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.10, $p19);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 796);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p19, $i22);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p23, 0);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.11, $p24);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 677} {:cexpr "tmp"} boogie_si_record_i64($i28);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i1, 2);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i1, 80);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.38, $p4);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} vnt_control_out_u8($p9, 3, 86, $i66);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p67, .str);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p68, .str.79);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p69, .str.59);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p70, .str.81);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.10, $p72);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 821);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p72, $i75);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p76, 0);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.11, $p77);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 683} {:cexpr "tmp___0"} boogie_si_record_i64($i81);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i82 == 1;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p9, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.38, $p4);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p85, .str.81, $i87);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p2);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 80);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i55 == 1);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.38, $p4);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i60);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, 1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i8($i62);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p4, $i63);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i55 == 1;
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.38, $p4);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i57, 254);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p4, $i59);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p2);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 2);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i39 == 1);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.38, $p4);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i49 := $and.i32($i48, 231);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p4, $i50);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb9:
    assume $i39 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p9, $mul.ref(0, 3248)), $mul.ref(48, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, 2);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} vnt_mac_set_filter($p9, $i3);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.38, $p4);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 24);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p4, $i46);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} vnt_mac_set_filter($p9, $sub.i64(0, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p9, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.38, $p4);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p32, .str.80, $i34);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.38 := $store.i8($M.38, $p4, 24);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_set_key: ref;

axiom vnt_set_key == $sub.ref(0, 330823);

procedure vnt_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_set_key($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $p23: ref;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} {:cexpr "vnt_set_key:arg:cmd"} boogie_si_record_i32($i1);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p7, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i18 := variable_test_bit($i16, $p17);
    call {:si_unique_call 687} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} clear_bit($i22, $p23);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} $i11 := vnt_set_keys($p0, $p3, $p2, $p4);
    call {:si_unique_call 689} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i12 == 1;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 95);
    goto $bb11;
}



const vnt_sw_scan_start: ref;

axiom vnt_sw_scan_start == $sub.ref(0, 331855);

procedure vnt_sw_scan_start($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.40, $M.41, $M.42, $M.43, $M.44, $M.47, $CurrAddr;



implementation vnt_sw_scan_start($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} vnt_set_bss_mode($p5);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} vnt_update_pre_ed_threshold($p5, 1);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    return;
}



const vnt_sw_scan_complete: ref;

axiom vnt_sw_scan_complete == $sub.ref(0, 332887);

procedure vnt_sw_scan_complete($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.29, $CurrAddr;



implementation vnt_sw_scan_complete($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} vnt_update_pre_ed_threshold($p4, 0);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    return;
}



const vnt_get_stats: ref;

axiom vnt_get_stats == $sub.ref(0, 333919);

procedure vnt_get_stats($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_get_stats($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(3232, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 694} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p5, $p7, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vnt_get_tsf: ref;

axiom vnt_get_tsf == $sub.ref(0, 334951);

procedure vnt_get_tsf($p0: ref, $p1: ref) returns ($r: i64);
  free requires assertsPassed;



implementation vnt_get_tsf($p0: ref, $p1: ref) returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2432, 1));
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vnt_set_tsf: ref;

axiom vnt_set_tsf == $sub.ref(0, 335983);

procedure vnt_set_tsf($p0: ref, $p1: ref, $i2: i64);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_set_tsf($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} {:cexpr "vnt_set_tsf:arg:tsf"} boogie_si_record_i64($i2);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 304)), $mul.ref(8, 1)), $mul.ref(20, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vnt_update_next_tbtt($p5, $i2, $i10);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    return;
}



const vnt_reset_tsf: ref;

axiom vnt_reset_tsf == $sub.ref(0, 337015);

procedure vnt_reset_tsf($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.28, $M.20, $M.0, $CurrAddr;



implementation vnt_reset_tsf($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_101: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} vnt_mac_reg_bits_off($p4, 72, 1);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} vslice_dummy_var_101 := vnt_clear_current_tsf($p4);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    return;
}



const vnt_clear_current_tsf: ref;

axiom vnt_clear_current_tsf == $sub.ref(0, 338047);

procedure vnt_clear_current_tsf($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.20, $M.0, $CurrAddr;



implementation vnt_clear_current_tsf($p0: ref) returns ($r: i1)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} vnt_mac_reg_bits_on($p0, 72, 2);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2432, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p1, 0);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const vnt_update_next_tbtt: ref;

axiom vnt_update_next_tbtt == $sub.ref(0, 339079);

procedure vnt_update_next_tbtt($p0: ref, $i1: i64, $i2: i16);
  free requires assertsPassed;
  modifies $M.39, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_update_next_tbtt($p0: ref, $i1: i64, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $i7: i64;
  var $i8: i8;
  var $p9: ref;
  var $i10: i64;
  var $i11: i8;
  var $p12: ref;
  var $i13: i64;
  var $i14: i8;
  var $p15: ref;
  var $i16: i64;
  var $i17: i8;
  var $p18: ref;
  var $i19: i64;
  var $i20: i8;
  var $p21: ref;
  var $i22: i64;
  var $i23: i8;
  var $p24: ref;
  var $i25: i64;
  var $i26: i8;
  var $p27: ref;
  var $i28: i64;
  var $i29: i8;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i24;
  var $i40: i24;
  var $i41: i24;
  var $p42: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 702} {:cexpr "vnt_update_next_tbtt:arg:tsf"} boogie_si_record_i64($i1);
    call {:si_unique_call 703} {:cexpr "vnt_update_next_tbtt:arg:beacon_interval"} boogie_si_record_i16($i2);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} $i7 := vnt_get_next_tbtt($i1, $i6);
    call {:si_unique_call 705} {:cexpr "tsf"} boogie_si_record_i64($i7);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i8($i7);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p9, $i8);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i10 := $lshr.i64($i7, 8);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i8($i10);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p12, $i11);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i64($i7, 16);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i8($i13);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p15, $i14);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i16 := $lshr.i64($i7, 24);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i64.i8($i16);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p18, $i17);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i64($i7, 32);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i64.i8($i19);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p21, $i20);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i22 := $lshr.i64($i7, 40);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i8($i22);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p24, $i23);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i64($i7, 48);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i64.i8($i25);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p27, $i26);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i64($i7, 56);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i64.i8($i28);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $M.39 := $store.i8($M.39, $p30, $i29);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p3);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} vslice_dummy_var_102 := vnt_control_out($p0, 13, 6, 0, 8, $p31);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p33, .str);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p34, .str.1);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p35, .str.2);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p36, .str.3);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i39 := $load.i24($M.10, $p38);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i40 := $and.i24($i39, $sub.i24(0, 262144));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $i41 := $or.i24($i40, 701);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p38, $i41);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p42, 0);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.11, $p43);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i64($i44);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i45, 1);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $i47 := ldv__builtin_expect($i46, 0);
    call {:si_unique_call 708} {:cexpr "tmp"} boogie_si_record_i64($i47);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i48 == 1;
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} __dynamic_dev_dbg.ref.ref.ref.ref.i64($p4, $p51, .str.3, .str.1, $i7);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_get_next_tbtt: ref;

axiom vnt_get_next_tbtt == $sub.ref(0, 340111);

procedure vnt_get_next_tbtt($i0: i64, $i1: i16) returns ($r: i64);
  free requires assertsPassed;



implementation vnt_get_next_tbtt($i0: i64, $i1: i16) returns ($r: i64)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} {:cexpr "vnt_get_next_tbtt:arg:tsf"} boogie_si_record_i64($i0);
    call {:si_unique_call 711} {:cexpr "vnt_get_next_tbtt:arg:beacon_interval"} boogie_si_record_i16($i1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i3 := $mul.i32($i2, 1024);
    call {:si_unique_call 712} {:cexpr "beacon_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i3);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i6 := $udiv.i64($i0, $i5);
    call {:si_unique_call 713} {:cexpr "tsf"} boogie_si_record_i64($i6);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i7 := $add.i64($i6, 1);
    call {:si_unique_call 714} {:cexpr "tsf"} boogie_si_record_i64($i7);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i3);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, $i7);
    call {:si_unique_call 715} {:cexpr "tsf"} boogie_si_record_i64($i9);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const vnt_update_pre_ed_threshold: ref;

axiom vnt_update_pre_ed_threshold == $sub.ref(0, 341143);

procedure vnt_update_pre_ed_threshold($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.29, $CurrAddr;



implementation vnt_update_pre_ed_threshold($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $i79: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $i86: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i1;
  var $p104: ref;
  var $i105: i8;
  var $i106: i32;
  var $i107: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $p122: ref;
  var $i123: i8;
  var $i124: i32;
  var $i125: i1;
  var $p128: ref;
  var $i129: i8;
  var $i130: i32;
  var $i131: i1;
  var $p134: ref;
  var $i135: i8;
  var $i136: i32;
  var $i137: i1;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i1;
  var $p146: ref;
  var $i147: i8;
  var $i148: i32;
  var $i149: i1;
  var $i150: i8;
  var $i151: i8;
  var $i144: i8;
  var $i145: i8;
  var $i138: i8;
  var $i139: i8;
  var $i132: i8;
  var $i133: i8;
  var $i126: i8;
  var $i127: i8;
  var $i120: i8;
  var $i121: i8;
  var $i114: i8;
  var $i115: i8;
  var $i108: i8;
  var $i109: i8;
  var $i101: i8;
  var $i102: i8;
  var $i103: i8;
  var $i94: i8;
  var $i95: i8;
  var $i96: i8;
  var $i87: i8;
  var $i88: i8;
  var $i89: i8;
  var $i80: i8;
  var $i81: i8;
  var $i82: i8;
  var $i73: i8;
  var $i74: i8;
  var $i75: i8;
  var $i66: i8;
  var $i67: i8;
  var $i68: i8;
  var $i59: i8;
  var $i60: i8;
  var $i61: i8;
  var $i52: i8;
  var $i53: i8;
  var $i54: i8;
  var $i45: i8;
  var $i46: i8;
  var $i47: i8;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $i31: i8;
  var $i32: i8;
  var $i33: i8;
  var $i24: i8;
  var $i25: i8;
  var $i26: i8;
  var $i152: i1;
  var $p153: ref;
  var $i154: i8;
  var $i155: i32;
  var $i156: i1;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i1;
  var $p167: ref;
  var $i168: i8;
  var $i169: i32;
  var $i170: i1;
  var $p174: ref;
  var $i175: i8;
  var $i176: i32;
  var $i177: i1;
  var $p181: ref;
  var $i182: i8;
  var $i183: i32;
  var $i184: i1;
  var $p188: ref;
  var $i189: i8;
  var $i190: i32;
  var $i191: i1;
  var $p195: ref;
  var $i196: i8;
  var $i197: i32;
  var $i198: i1;
  var $p202: ref;
  var $i203: i8;
  var $i204: i32;
  var $i205: i1;
  var $p209: ref;
  var $i210: i8;
  var $i211: i32;
  var $i212: i1;
  var $p216: ref;
  var $i217: i8;
  var $i218: i32;
  var $i219: i1;
  var $p223: ref;
  var $i224: i8;
  var $i225: i32;
  var $i226: i1;
  var $p230: ref;
  var $i231: i8;
  var $i232: i32;
  var $i233: i1;
  var $p237: ref;
  var $i238: i8;
  var $i239: i32;
  var $i240: i1;
  var $p244: ref;
  var $i245: i8;
  var $i246: i32;
  var $i247: i1;
  var $p250: ref;
  var $i251: i8;
  var $i252: i32;
  var $i253: i1;
  var $p256: ref;
  var $i257: i8;
  var $i258: i32;
  var $i259: i1;
  var $p262: ref;
  var $i263: i8;
  var $i264: i32;
  var $i265: i1;
  var $p268: ref;
  var $i269: i8;
  var $i270: i32;
  var $i271: i1;
  var $p274: ref;
  var $i275: i8;
  var $i276: i32;
  var $i277: i1;
  var $p280: ref;
  var $i281: i8;
  var $i282: i32;
  var $i283: i1;
  var $p286: ref;
  var $i287: i8;
  var $i288: i32;
  var $i289: i1;
  var $p292: ref;
  var $i293: i8;
  var $i294: i32;
  var $i295: i1;
  var $i296: i8;
  var $i297: i8;
  var $i290: i8;
  var $i291: i8;
  var $i284: i8;
  var $i285: i8;
  var $i278: i8;
  var $i279: i8;
  var $i272: i8;
  var $i273: i8;
  var $i266: i8;
  var $i267: i8;
  var $i260: i8;
  var $i261: i8;
  var $i254: i8;
  var $i255: i8;
  var $i248: i8;
  var $i249: i8;
  var $i241: i8;
  var $i242: i8;
  var $i243: i8;
  var $i234: i8;
  var $i235: i8;
  var $i236: i8;
  var $i227: i8;
  var $i228: i8;
  var $i229: i8;
  var $i220: i8;
  var $i221: i8;
  var $i222: i8;
  var $i213: i8;
  var $i214: i8;
  var $i215: i8;
  var $i206: i8;
  var $i207: i8;
  var $i208: i8;
  var $i199: i8;
  var $i200: i8;
  var $i201: i8;
  var $i192: i8;
  var $i193: i8;
  var $i194: i8;
  var $i185: i8;
  var $i186: i8;
  var $i187: i8;
  var $i178: i8;
  var $i179: i8;
  var $i180: i8;
  var $i171: i8;
  var $i172: i8;
  var $i173: i8;
  var $i164: i8;
  var $i165: i8;
  var $i166: i8;
  var $i157: i8;
  var $i158: i8;
  var $i159: i8;
  var $i298: i1;
  var $p299: ref;
  var $i300: i8;
  var $i301: i32;
  var $i302: i1;
  var $p306: ref;
  var $i307: i8;
  var $i308: i32;
  var $i309: i1;
  var $p313: ref;
  var $i314: i8;
  var $i315: i32;
  var $i316: i1;
  var $p320: ref;
  var $i321: i8;
  var $i322: i32;
  var $i323: i1;
  var $p327: ref;
  var $i328: i8;
  var $i329: i32;
  var $i330: i1;
  var $p334: ref;
  var $i335: i8;
  var $i336: i32;
  var $i337: i1;
  var $p341: ref;
  var $i342: i8;
  var $i343: i32;
  var $i344: i1;
  var $p348: ref;
  var $i349: i8;
  var $i350: i32;
  var $i351: i1;
  var $p355: ref;
  var $i356: i8;
  var $i357: i32;
  var $i358: i1;
  var $p362: ref;
  var $i363: i8;
  var $i364: i32;
  var $i365: i1;
  var $p369: ref;
  var $i370: i8;
  var $i371: i32;
  var $i372: i1;
  var $p376: ref;
  var $i377: i8;
  var $i378: i32;
  var $i379: i1;
  var $p383: ref;
  var $i384: i8;
  var $i385: i32;
  var $i386: i1;
  var $p390: ref;
  var $i391: i8;
  var $i392: i32;
  var $i393: i1;
  var $p396: ref;
  var $i397: i8;
  var $i398: i32;
  var $i399: i1;
  var $p402: ref;
  var $i403: i8;
  var $i404: i32;
  var $i405: i1;
  var $p408: ref;
  var $i409: i8;
  var $i410: i32;
  var $i411: i1;
  var $p414: ref;
  var $i415: i8;
  var $i416: i32;
  var $i417: i1;
  var $p420: ref;
  var $i421: i8;
  var $i422: i32;
  var $i423: i1;
  var $p426: ref;
  var $i427: i8;
  var $i428: i32;
  var $i429: i1;
  var $i430: i8;
  var $i431: i8;
  var $i424: i8;
  var $i425: i8;
  var $i418: i8;
  var $i419: i8;
  var $i412: i8;
  var $i413: i8;
  var $i406: i8;
  var $i407: i8;
  var $i400: i8;
  var $i401: i8;
  var $i394: i8;
  var $i395: i8;
  var $i387: i8;
  var $i388: i8;
  var $i389: i8;
  var $i380: i8;
  var $i381: i8;
  var $i382: i8;
  var $i373: i8;
  var $i374: i8;
  var $i375: i8;
  var $i366: i8;
  var $i367: i8;
  var $i368: i8;
  var $i359: i8;
  var $i360: i8;
  var $i361: i8;
  var $i352: i8;
  var $i353: i8;
  var $i354: i8;
  var $i345: i8;
  var $i346: i8;
  var $i347: i8;
  var $i338: i8;
  var $i339: i8;
  var $i340: i8;
  var $i331: i8;
  var $i332: i8;
  var $i333: i8;
  var $i324: i8;
  var $i325: i8;
  var $i326: i8;
  var $i317: i8;
  var $i318: i8;
  var $i319: i8;
  var $i310: i8;
  var $i311: i8;
  var $i312: i8;
  var $i303: i8;
  var $i304: i8;
  var $i305: i8;
  var $i17: i8;
  var $i18: i8;
  var $i19: i8;
  var $p432: ref;
  var $i433: i8;
  var $i434: i32;
  var $i435: i32;
  var $i436: i1;
  var $i437: i1;
  var $p438: ref;
  var $p439: ref;
  var $p440: ref;
  var $p441: ref;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i24;
  var $i446: i24;
  var $i447: i24;
  var $p448: ref;
  var $p449: ref;
  var $i450: i8;
  var $i451: i64;
  var $i452: i64;
  var $i453: i64;
  var $i454: i1;
  var $p455: ref;
  var $p456: ref;
  var $p457: ref;
  var $p458: ref;
  var $i459: i8;
  var $i460: i32;
  var $i461: i32;
  var $i462: i1;
  var $i463: i32;
  var $i464: i1;
  var $i465: i32;
  var $i466: i8;
  var $i467: i32;
  var $i468: i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 717} {:cexpr "vnt_update_pre_ed_threshold:arg:scanning"} boogie_si_record_i32($i1);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3006, 1));
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    call {:si_unique_call 718} {:cexpr "ed_inx"} boogie_si_record_i8($i4);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i7, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := 0, 0, $i4;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3006, 1));
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i433 := $load.i8($M.0, $p432);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $i434 := $zext.i8.i32($i433);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $i435 := $zext.i8.i32($i19);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i436 := $eq.i32($i434, $i435);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i436} true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i436 == 1);
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3006, 1));
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p438, $i19);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p439, .str);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p440, .str.10);
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p441, .str.8);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p442, .str.11);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $p444 := $bitcast.ref.ref($p443);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i445 := $load.i24($M.10, $p444);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i446 := $and.i24($i445, $sub.i24(0, 262144));
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $i447 := $or.i24($i446, 823);
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p444, $i447);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p448 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p448, 0);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i450 := $load.i8($M.11, $p449);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i451 := $zext.i8.i64($i450);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i452 := $and.i64($i451, 1);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i453 := ldv__builtin_expect($i452, 0);
    call {:si_unique_call 720} {:cexpr "tmp"} boogie_si_record_i64($i453);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i454 := $ne.i64($i453, 0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $i461 := $zext.i8.i32($i17);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $i462 := $eq.i32($i461, 0);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb229, $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    assume !($i462 == 1);
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $i465 := $zext.i8.i32($i17);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $i466 := $trunc.i32.i8($i465);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} vnt_control_out_u8($p0, 2, $sub.i8(0, 55), $i466);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i467 := $zext.i8.i32($i18);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i468 := $trunc.i32.i8($i467);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} vnt_control_out_u8($p0, 2, $sub.i8(0, 50), $i468);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    return;

  $bb229:
    assume $i462 == 1;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i463 := $zext.i8.i32($i18);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i464 := $eq.i32($i463, 0);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i464} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i464 == 1);
    goto $bb231;

  $bb232:
    assume $i464 == 1;
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb226:
    assume $i454 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.0, $p455);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p457 := $add.ref($add.ref($p456, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p458 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i459 := $load.i8($M.0, $p458);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i460 := $zext.i8.i32($i459);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p457, .str.11, .str.10, $i460);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb219:
    assume $i436 == 1;
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i1, 0);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    assume {:branchcond $i437} true;
    goto $bb222, $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    assume !($i437 == 1);
    goto $bb221;

  $bb222:
    assume $i437 == 1;
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i1, 0);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i23 := $ule.i32($i22, 45);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i23 == 1);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i30 := $ule.i32($i29, 46);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i30 == 1);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i37 := $ule.i32($i36, 47);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i37 == 1);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i44 := $ule.i32($i43, 49);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i44 == 1);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i51 := $ule.i32($i50, 51);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i51 == 1);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i58 := $ule.i32($i57, 53);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i58 == 1);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i65 := $ule.i32($i64, 55);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i65 == 1);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i72 := $ule.i32($i71, 56);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i72 == 1);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i79 := $ule.i32($i78, 57);
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i79 == 1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i86 := $ule.i32($i85, 58);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i86 == 1);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $i93 := $ule.i32($i92, 59);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i93 == 1);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i100 := $ule.i32($i99, 60);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i100 == 1);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i105);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    $i107 := $ule.i32($i106, 61);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i107 == 1);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i113 := $ule.i32($i112, 62);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i113 == 1);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i119 := $ule.i32($i118, 63);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i119 == 1);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i123 := $load.i8($M.0, $p122);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i124 := $zext.i8.i32($i123);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i125 := $ule.i32($i124, 64);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    assume {:branchcond $i125} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i125 == 1);
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.0, $p128);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i129);
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i131 := $ule.i32($i130, 65);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    assume {:branchcond $i131} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i131 == 1);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i135 := $load.i8($M.0, $p134);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $i136 := $zext.i8.i32($i135);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i137 := $ule.i32($i136, 66);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i137 == 1);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i143 := $ule.i32($i142, 67);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i143 == 1);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i32($i147);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i149 := $ule.i32($i148, 68);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    $i150, $i151 := 48, 0;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i144, $i145 := $i150, $i151;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i138, $i139 := $i144, $i145;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i132, $i133 := $i138, $i139;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i126, $i127 := $i132, $i133;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i120, $i121 := $i126, $i127;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i114, $i115 := $i120, $i121;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i108, $i109 := $i114, $i115;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i101, $i102, $i103 := 0, $i108, $i109;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i94, $i95, $i96 := $i101, $i102, $i103;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i87, $i88, $i89 := $i94, $i95, $i96;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i80, $i81, $i82 := $i87, $i88, $i89;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := $i80, $i81, $i82;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i66, $i67, $i68 := $i73, $i74, $i75;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i59, $i60, $i61 := $i66, $i67, $i68;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i52, $i53, $i54 := $i59, $i60, $i61;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i45, $i46, $i47 := $i52, $i53, $i54;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i38, $i39, $i40 := $i45, $i46, $i47;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i31, $i32, $i33 := $i38, $i39, $i40;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := $i31, $i32, $i33;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := $i24, $i25, $i26;
    goto $bb24;

  $bb83:
    assume $i149 == 1;
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $i150, $i151 := 54, 1;
    goto $bb85;

  $bb80:
    assume $i143 == 1;
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $i144, $i145 := 67, 2;
    goto $bb82;

  $bb77:
    assume $i137 == 1;
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i138, $i139 := 81, 3;
    goto $bb79;

  $bb74:
    assume $i131 == 1;
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i132, $i133 := 98, 4;
    goto $bb76;

  $bb71:
    assume $i125 == 1;
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i126, $i127 := 121, 5;
    goto $bb73;

  $bb68:
    assume $i119 == 1;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i120, $i121 := $sub.i8(0, 109), 6;
    goto $bb70;

  $bb65:
    assume $i113 == 1;
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i114, $i115 := $sub.i8(0, 71), 7;
    goto $bb67;

  $bb62:
    assume $i107 == 1;
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i108, $i109 := $sub.i8(0, 29), 8;
    goto $bb64;

  $bb59:
    assume $i100 == 1;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i101, $i102, $i103 := 1, 24, 9;
    goto $bb61;

  $bb56:
    assume $i93 == 1;
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $i94, $i95, $i96 := 1, 84, 10;
    goto $bb58;

  $bb53:
    assume $i86 == 1;
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i87, $i88, $i89 := 1, $sub.i8(0, 96), 11;
    goto $bb55;

  $bb50:
    assume $i79 == 1;
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $i80, $i81, $i82 := 2, 32, 12;
    goto $bb52;

  $bb47:
    assume $i72 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := 2, $sub.i8(0, 96), 13;
    goto $bb49;

  $bb44:
    assume $i65 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i66, $i67, $i68 := 3, 0, 14;
    goto $bb46;

  $bb41:
    assume $i58 == 1;
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i59, $i60, $i61 := 6, 0, 15;
    goto $bb43;

  $bb38:
    assume $i51 == 1;
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i52, $i53, $i54 := 9, 0, 16;
    goto $bb40;

  $bb35:
    assume $i44 == 1;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $i45, $i46, $i47 := 14, 0, 17;
    goto $bb37;

  $bb32:
    assume $i37 == 1;
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i38, $i39, $i40 := 21, 0, 18;
    goto $bb34;

  $bb29:
    assume $i30 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $i31, $i32, $i33 := 26, 0, 19;
    goto $bb31;

  $bb26:
    assume $i23 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i24, $i25, $i26 := $sub.i8(0, 1), 0, 20;
    goto $bb28;

  $bb22:
    assume $i16 == 1;
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := 0, 48, 0;
    goto $bb24;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i1, 0);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i300 := $load.i8($M.0, $p299);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i32($i300);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $i302 := $ule.i32($i301, 41);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i302} true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i302 == 1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.0, $p306);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i308 := $zext.i8.i32($i307);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i309 := $ule.i32($i308, 42);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i309} true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i309 == 1);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i314 := $load.i8($M.0, $p313);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i315 := $zext.i8.i32($i314);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i316 := $ule.i32($i315, 43);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i316} true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i316 == 1);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.0, $p320);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i32($i321);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i323 := $ule.i32($i322, 45);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i323} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i323 == 1);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i328 := $load.i8($M.0, $p327);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i328);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i330 := $ule.i32($i329, 47);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i330 == 1);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i335 := $load.i8($M.0, $p334);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i336 := $zext.i8.i32($i335);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i337 := $ule.i32($i336, 49);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i337 == 1);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i342 := $load.i8($M.0, $p341);
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $i343 := $zext.i8.i32($i342);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i344 := $ule.i32($i343, 51);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    assume {:branchcond $i344} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i344 == 1);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $i349 := $load.i8($M.0, $p348);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i350 := $zext.i8.i32($i349);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i351 := $ule.i32($i350, 53);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    assume {:branchcond $i351} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i351 == 1);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.0, $p355);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i358 := $ule.i32($i357, 55);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i358 == 1);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i363 := $load.i8($M.0, $p362);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i364 := $zext.i8.i32($i363);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i365 := $ule.i32($i364, 56);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i365 == 1);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i370 := $load.i8($M.0, $p369);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i371 := $zext.i8.i32($i370);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i372 := $ule.i32($i371, 57);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i372} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i372 == 1);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i377 := $load.i8($M.0, $p376);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $i378 := $zext.i8.i32($i377);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i379 := $ule.i32($i378, 58);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i379 == 1);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i384 := $load.i8($M.0, $p383);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i385 := $zext.i8.i32($i384);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i386 := $ule.i32($i385, 59);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i386} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i386 == 1);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $p390 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i391 := $load.i8($M.0, $p390);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i392 := $zext.i8.i32($i391);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i393 := $ule.i32($i392, 60);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i393 == 1);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i397 := $load.i8($M.0, $p396);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i398 := $zext.i8.i32($i397);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i399 := $ule.i32($i398, 61);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i399 == 1);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i403 := $load.i8($M.0, $p402);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i404 := $zext.i8.i32($i403);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i405 := $ule.i32($i404, 62);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i405 == 1);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $p408 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $i409 := $load.i8($M.0, $p408);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $i410 := $zext.i8.i32($i409);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $i411 := $ule.i32($i410, 63);
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i411} true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i411 == 1);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p414 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i415 := $load.i8($M.0, $p414);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i416 := $zext.i8.i32($i415);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i417 := $ule.i32($i416, 64);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i417 == 1);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i421 := $load.i8($M.0, $p420);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i422 := $zext.i8.i32($i421);
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $i423 := $ule.i32($i422, 65);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i423 == 1);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p426 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i427 := $load.i8($M.0, $p426);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i428 := $zext.i8.i32($i427);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $i429 := $ule.i32($i428, 66);
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    $i430, $i431 := 56, 0;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i424, $i425 := $i430, $i431;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i418, $i419 := $i424, $i425;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i412, $i413 := $i418, $i419;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i406, $i407 := $i412, $i413;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i400, $i401 := $i406, $i407;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i394, $i395 := $i400, $i401;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i387, $i388, $i389 := 0, $i394, $i395;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i380, $i381, $i382 := $i387, $i388, $i389;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i373, $i374, $i375 := $i380, $i381, $i382;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i366, $i367, $i368 := $i373, $i374, $i375;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i359, $i360, $i361 := $i366, $i367, $i368;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i352, $i353, $i354 := $i359, $i360, $i361;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i345, $i346, $i347 := $i352, $i353, $i354;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i338, $i339, $i340 := $i345, $i346, $i347;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i331, $i332, $i333 := $i338, $i339, $i340;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i324, $i325, $i326 := $i331, $i332, $i333;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i317, $i318, $i319 := $i324, $i325, $i326;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i310, $i311, $i312 := $i317, $i318, $i319;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i303, $i304, $i305 := $i310, $i311, $i312;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := $i303, $i304, $i305;
    goto $bb24;

  $bb215:
    assume $i429 == 1;
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i430, $i431 := 67, 1;
    goto $bb217;

  $bb212:
    assume $i423 == 1;
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i424, $i425 := 82, 2;
    goto $bb214;

  $bb209:
    assume $i417 == 1;
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i418, $i419 := 104, 3;
    goto $bb211;

  $bb206:
    assume $i411 == 1;
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i412, $i413 := $sub.i8(0, 128), 4;
    goto $bb208;

  $bb203:
    assume $i405 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i406, $i407 := $sub.i8(0, 100), 5;
    goto $bb205;

  $bb200:
    assume $i399 == 1;
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $i400, $i401 := $sub.i8(0, 64), 6;
    goto $bb202;

  $bb197:
    assume $i393 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i394, $i395 := $sub.i8(0, 22), 7;
    goto $bb199;

  $bb194:
    assume $i386 == 1;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i387, $i388, $i389 := 1, 48, 8;
    goto $bb196;

  $bb191:
    assume $i379 == 1;
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i380, $i381, $i382 := 1, 112, 9;
    goto $bb193;

  $bb188:
    assume $i372 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $i373, $i374, $i375 := 1, $sub.i8(0, 80), 10;
    goto $bb190;

  $bb185:
    assume $i365 == 1;
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i366, $i367, $i368 := 2, 48, 11;
    goto $bb187;

  $bb182:
    assume $i358 == 1;
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i359, $i360, $i361 := 2, $sub.i8(0, 64), 12;
    goto $bb184;

  $bb179:
    assume $i351 == 1;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i352, $i353, $i354 := 4, 0, 13;
    goto $bb181;

  $bb176:
    assume $i344 == 1;
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i345, $i346, $i347 := 7, 0, 14;
    goto $bb178;

  $bb173:
    assume $i337 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $i338, $i339, $i340 := 10, 0, 15;
    goto $bb175;

  $bb170:
    assume $i330 == 1;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i331, $i332, $i333 := 17, 0, 16;
    goto $bb172;

  $bb167:
    assume $i323 == 1;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i324, $i325, $i326 := 24, 0, 17;
    goto $bb169;

  $bb164:
    assume $i316 == 1;
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $i317, $i318, $i319 := 38, 0, 18;
    goto $bb166;

  $bb161:
    assume $i309 == 1;
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i310, $i311, $i312 := 54, 0, 19;
    goto $bb163;

  $bb158:
    assume $i302 == 1;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i303, $i304, $i305 := $sub.i8(0, 1), 0, 20;
    goto $bb160;

  $bb155:
    assume $i298 == 1;
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := 0, 56, 0;
    goto $bb24;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i1, 0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.0, $p153);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i32($i154);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $i156 := $ule.i32($i155, 41);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i156 == 1);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i163 := $ule.i32($i162, 42);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i163 == 1);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i32($i168);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i170 := $ule.i32($i169, 43);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i170} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i170 == 1);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.0, $p174);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i32($i175);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i177 := $ule.i32($i176, 45);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i177 == 1);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i182 := $load.i8($M.0, $p181);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $i184 := $ule.i32($i183, 47);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i184 == 1);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i189 := $load.i8($M.0, $p188);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i190 := $zext.i8.i32($i189);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i191 := $ule.i32($i190, 49);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i191} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i191 == 1);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.0, $p195);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i197 := $zext.i8.i32($i196);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i198 := $ule.i32($i197, 51);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i198 == 1);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $i203 := $load.i8($M.0, $p202);
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i204 := $zext.i8.i32($i203);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i205 := $ule.i32($i204, 53);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i205 == 1);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.0, $p209);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $i212 := $ule.i32($i211, 55);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i212 == 1);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.0, $p216);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i32($i217);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i219 := $ule.i32($i218, 56);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i219 == 1);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i224 := $load.i8($M.0, $p223);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i32($i224);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i226 := $ule.i32($i225, 57);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i226} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i226 == 1);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i231 := $load.i8($M.0, $p230);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i232 := $zext.i8.i32($i231);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i233 := $ule.i32($i232, 58);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i233 == 1);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i238 := $load.i8($M.0, $p237);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i239 := $zext.i8.i32($i238);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $i240 := $ule.i32($i239, 59);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i240 == 1);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.0, $p244);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $i247 := $ule.i32($i246, 60);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i247 == 1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i251 := $load.i8($M.0, $p250);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i252 := $zext.i8.i32($i251);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i253 := $ule.i32($i252, 61);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    assume {:branchcond $i253} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i253 == 1);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i257 := $load.i8($M.0, $p256);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32($i257);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $i259 := $ule.i32($i258, 62);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i259 == 1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.0, $p262);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i263);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i265 := $ule.i32($i264, 63);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i265 == 1);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i269 := $load.i8($M.0, $p268);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i270 := $zext.i8.i32($i269);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $i271 := $ule.i32($i270, 64);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i271 == 1);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.0, $p274);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i32($i275);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i277 := $ule.i32($i276, 65);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i277} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i277 == 1);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.0, $p280);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i32($i281);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i283 := $ule.i32($i282, 66);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume {:branchcond $i283} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i283 == 1);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.0, $p286);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i289 := $ule.i32($i288, 67);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i289 == 1);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3005, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.0, $p292);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i295 := $ule.i32($i294, 68);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    assume {:branchcond $i295} true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    $i296, $i297 := 36, 0;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i290, $i291 := $i296, $i297;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i284, $i285 := $i290, $i291;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i278, $i279 := $i284, $i285;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i272, $i273 := $i278, $i279;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i266, $i267 := $i272, $i273;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i260, $i261 := $i266, $i267;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i254, $i255 := $i260, $i261;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i248, $i249 := $i254, $i255;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i241, $i242, $i243 := 0, $i248, $i249;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i234, $i235, $i236 := $i241, $i242, $i243;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i227, $i228, $i229 := $i234, $i235, $i236;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i220, $i221, $i222 := $i227, $i228, $i229;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i213, $i214, $i215 := $i220, $i221, $i222;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i206, $i207, $i208 := $i213, $i214, $i215;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i199, $i200, $i201 := $i206, $i207, $i208;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i192, $i193, $i194 := $i199, $i200, $i201;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i185, $i186, $i187 := $i192, $i193, $i194;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i178, $i179, $i180 := $i185, $i186, $i187;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i171, $i172, $i173 := $i178, $i179, $i180;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i164, $i165, $i166 := $i171, $i172, $i173;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i157, $i158, $i159 := $i164, $i165, $i166;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := $i157, $i158, $i159;
    goto $bb24;

  $bb152:
    assume $i295 == 1;
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i296, $i297 := 45, 1;
    goto $bb154;

  $bb149:
    assume $i289 == 1;
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $i290, $i291 := 54, 2;
    goto $bb151;

  $bb146:
    assume $i283 == 1;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i284, $i285 := 67, 3;
    goto $bb148;

  $bb143:
    assume $i277 == 1;
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i278, $i279 := 82, 4;
    goto $bb145;

  $bb140:
    assume $i271 == 1;
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i272, $i273 := 104, 5;
    goto $bb142;

  $bb137:
    assume $i265 == 1;
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i266, $i267 := $sub.i8(0, 128), 6;
    goto $bb139;

  $bb134:
    assume $i259 == 1;
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i260, $i261 := $sub.i8(0, 100), 7;
    goto $bb136;

  $bb131:
    assume $i253 == 1;
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i254, $i255 := $sub.i8(0, 64), 8;
    goto $bb133;

  $bb128:
    assume $i247 == 1;
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i248, $i249 := $sub.i8(0, 22), 9;
    goto $bb130;

  $bb125:
    assume $i240 == 1;
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i241, $i242, $i243 := 1, 48, 10;
    goto $bb127;

  $bb122:
    assume $i233 == 1;
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i234, $i235, $i236 := 1, 112, 11;
    goto $bb124;

  $bb119:
    assume $i226 == 1;
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i227, $i228, $i229 := 1, $sub.i8(0, 80), 12;
    goto $bb121;

  $bb116:
    assume $i219 == 1;
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i220, $i221, $i222 := 2, 48, 13;
    goto $bb118;

  $bb113:
    assume $i212 == 1;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i213, $i214, $i215 := 2, $sub.i8(0, 64), 14;
    goto $bb115;

  $bb110:
    assume $i205 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i206, $i207, $i208 := 4, 0, 15;
    goto $bb112;

  $bb107:
    assume $i198 == 1;
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i199, $i200, $i201 := 7, 0, 16;
    goto $bb109;

  $bb104:
    assume $i191 == 1;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i192, $i193, $i194 := 10, 0, 17;
    goto $bb106;

  $bb101:
    assume $i184 == 1;
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i185, $i186, $i187 := 17, 0, 18;
    goto $bb103;

  $bb98:
    assume $i177 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $i178, $i179, $i180 := 24, 0, 19;
    goto $bb100;

  $bb95:
    assume $i170 == 1;
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i171, $i172, $i173 := 38, 0, 20;
    goto $bb97;

  $bb92:
    assume $i163 == 1;
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i164, $i165, $i166 := 54, 0, 21;
    goto $bb94;

  $bb89:
    assume $i156 == 1;
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i157, $i158, $i159 := $sub.i8(0, 1), 0, 22;
    goto $bb91;

  $bb86:
    assume $i152 == 1;
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i17, $i18, $i19 := 0, 36, 0;
    goto $bb24;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i7, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i7, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i7, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb12;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb18;

  $bb15:
    assume $i13 == 1;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb12;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    goto $bb10;
}



const vnt_set_bss_mode: ref;

axiom vnt_set_bss_mode == $sub.ref(0, 342175);

procedure vnt_set_bss_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.40, $M.41, $M.42, $M.43, $M.44, $M.47, $CurrAddr, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11;



implementation vnt_set_bss_mode($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i8;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $p47: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i8;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 10);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i8($i11);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} vnt_mac_set_bb_type($p0, $i12);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i13 := vnt_get_pkt_type($p0);
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2473, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i13);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i18 == 1);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 1);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} vnt_update_ifs($p0);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} vnt_set_rspinf($p0, $i30);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i34 == 1);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 10);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(2, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, 0);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(3, 1));
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p64, 0);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} vnt_set_vga_gain_offset($p0, $i69);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    return;

  $bb22:
    assume $i53 == 1;
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 28);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.0, $p57);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i58);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} vnt_control_out_u8($p0, 2, $sub.i8(0, 25), $i60);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i34 == 1;
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 10);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(2, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 16);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(3, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 16);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i38 == 1;
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p40, 32);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3001, 1)), $mul.ref(0, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} vnt_control_out_u8($p0, 2, $sub.i8(0, 25), $i45);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i26 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} vnt_control_out_u8($p0, 2, $sub.i8(0, 120), 8);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} vnt_control_out_u8($p0, 2, $sub.i8(0, 120), 2);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} vnt_control_out_u8($p0, 2, $sub.i8(0, 120), 3);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vnt_mac_set_bb_type($p0, 2);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const vnt_mac_set_bb_type: ref;

axiom vnt_mac_set_bb_type == $sub.ref(0, 343207);

procedure vnt_mac_set_bb_type($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.40, $CurrAddr;



implementation vnt_mac_set_bb_type($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 736} {:cexpr "vnt_mac_set_bb_type:arg:type"} boogie_si_record_i8($i1);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p3, $i1);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p4, 3);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} vslice_dummy_var_103 := vnt_control_out($p0, 4, 76, 3, 2, $p5);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    return;
}



const vnt_get_pkt_type: ref;

axiom vnt_get_pkt_type == $sub.ref(0, 344239);

procedure vnt_get_pkt_type($p0: ref) returns ($r: i8);
  free requires assertsPassed;



implementation vnt_get_pkt_type($p0: ref) returns ($r: i8)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i8;
  var $i12: i32;
  var $i13: i1;
  var $i11: i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 1);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i12 := vnt_ofdm_min_rate($p0);
    call {:si_unique_call 739} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i11 := 3;
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const vnt_update_ifs: ref;

axiom vnt_update_ifs == $sub.ref(0, 345271);

procedure vnt_update_ifs($p0: ref);
  free requires assertsPassed;
  modifies $M.41, $M.0, $M.42, $CurrAddr;



implementation vnt_update_ifs($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $i79: i32;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $i96: i8;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i8;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i8;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i8;
  var $p109: ref;
  var $p110: ref;
  var $i112: i8;
  var $i113: i32;
  var $i114: i32;
  var $i115: i8;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i122: i32;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $p1 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $M.41 := $store.i8($M.41, $p1, 0);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2473, 1));
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2473, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 1);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 10);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2828, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2468, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 20);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2468, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 5);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 2);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 2048);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 1024);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i120} true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i122 := $load.i32($M.0, $p121);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i123 := $and.i32($i122, 512);
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i124 := $ne.i32($i123, 0);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i124} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i127 := $and.i32($i126, 256);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i131 := $and.i32($i130, 128);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i132 := $ne.i32($i131, 0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 64);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $i136 := $ne.i32($i135, 0);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i139 := $and.i32($i138, 32);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i140 := $ne.i32($i139, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i143 := $and.i32($i142, 16);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $i144 := $ne.i32($i143, 0);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i144} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i33 == 1);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $M.41 := $store.i8($M.41, $p1, 5);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2464, 1));
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 80);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2395, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i37, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i37, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i37, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i37, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.0, $p94);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p97, $i96);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p101, $i100);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2464, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p105, $i104);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2468, 1));
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i8($i107);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(3, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $M.42 := $store.i8($M.42, $p109, $i108);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p2);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} vslice_dummy_var_104 := vnt_control_out($p0, 0, 34, 3, 4, $p110);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.41, $p1);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 160);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i8($i114);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $M.41 := $store.i8($M.41, $p1, $i115);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} vslice_dummy_var_105 := vnt_control_out($p0, 0, 40, 3, 1, $p1);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.0, $p62);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i32($i63);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 1);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i67, 3);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i71, 3);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p73, $i72);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb58:
    assume $i65 == 1;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb28;

  $bb25:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i37, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i42 == 1);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 1);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb54:
    assume $i53 == 1;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i55, 1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p57, $i56);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i59, 1);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb34:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i37, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb33;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb37;

  $bb23:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i37, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i37, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb43;

  $bb41:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i37, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb33;

  $bb44:
    assume $i46 == 1;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2472, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 0);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i77 == 1);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i88 := $sub.i32($i87, 2);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i91, 2);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $i92);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb61:
    assume $i77 == 1;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.0, $p78);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i80 := $sub.i32($i79, 5);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i83, 5);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p85, $i84);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb39:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i37, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb33;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb49;

  $bb46:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i37, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb51, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb33;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb52;

  $bb19:
    assume $i33 == 1;
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $M.41 := $store.i8($M.41, $p1, 4);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i144 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i32 := 1;
    goto $bb15;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb13;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb13;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i132 == 1;
    goto $bb13;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb13;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb13;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i120 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb13;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2468, 1));
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, 9);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2468, 1));
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 20);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 10);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 50);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.41 := $store.i8($M.41, $p1, 5);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2468, 1));
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 9);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 16);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2460, 1));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 34);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $M.41 := $store.i8($M.41, $p1, 4);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_set_rspinf: ref;

axiom vnt_set_rspinf == $sub.ref(0, 346303);

procedure vnt_set_rspinf($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.43, $M.44, $M.0, $M.47, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_set_rspinf($p0: ref, $i1: i8)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i8;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i8;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i8;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i66: i8;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $i73: i16;
  var $i74: i32;
  var $i75: i8;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i16;
  var $i83: i32;
  var $i84: i8;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i16;
  var $i90: i32;
  var $i91: i16;
  var $i92: i32;
  var $i93: i8;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i16;
  var $i99: i32;
  var $i100: i16;
  var $i101: i32;
  var $i102: i8;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $i112: i16;
  var $p114: ref;
  var $i115: i8;
  var $p116: ref;
  var $p118: ref;
  var $i119: i8;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p124: ref;
  var $i125: i16;
  var $i126: i32;
  var $i127: i16;
  var $p129: ref;
  var $i130: i8;
  var $p131: ref;
  var $p133: ref;
  var $i134: i8;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i16;
  var $p144: ref;
  var $i145: i8;
  var $p146: ref;
  var $p148: ref;
  var $i149: i8;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p154: ref;
  var $i155: i16;
  var $i156: i32;
  var $i157: i16;
  var $p159: ref;
  var $i160: i8;
  var $p161: ref;
  var $p163: ref;
  var $i164: i8;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $p171: ref;
  var $p172: ref;
  var $p174: ref;
  var $i175: i8;
  var $p176: ref;
  var $p177: ref;
  var $i178: i8;
  var $p179: ref;
  var $p180: ref;
  var $i181: i8;
  var $p182: ref;
  var $p183: ref;
  var $i184: i8;
  var $p185: ref;
  var $p186: ref;
  var $i187: i8;
  var $p188: ref;
  var $p189: ref;
  var $i190: i8;
  var $p191: ref;
  var $p192: ref;
  var $i193: i8;
  var $p194: ref;
  var $p195: ref;
  var $i196: i8;
  var $p197: ref;
  var $p198: ref;
  var $i199: i8;
  var $p200: ref;
  var $p201: ref;
  var $i202: i8;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $p206: ref;
  var $p207: ref;
  var $i208: i8;
  var $p209: ref;
  var $p210: ref;
  var $i211: i8;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $p215: ref;
  var $p216: ref;
  var $i217: i8;
  var $p218: ref;
  var $p219: ref;
  var $i220: i8;
  var $p221: ref;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p3 := $alloc($mul.ref(9, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p4 := $alloc($mul.ref(9, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p5 := $alloc($mul.ref(34, $zext.i32.i64(1)));
    call {:si_unique_call 748} {:cexpr "vnt_set_rspinf:arg:bb_type"} boogie_si_record_i8($i1);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(0, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p6, 0);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(1, 1));
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p7, 0);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(2, 1));
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p8, 0);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(3, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p9, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(4, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p10, 0);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(5, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p11, 0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(6, 1));
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p12, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(7, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p13, 0);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(8, 1));
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p14, 0);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(0, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p15, 0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(1, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p16, 0);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(2, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p17, 0);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(3, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p18, 0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(4, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p19, 0);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(5, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p20, 0);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(6, 1));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p21, 0);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(7, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p22, 0);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(8, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p23, 0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $i24 := vnt_get_cck_rate($p0, 0);
    call {:si_unique_call 750} {:cexpr "tmp"} boogie_si_record_i16($i24);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} vnt_get_phy_field($p0, 14, $i26, 1, $p27);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $i28 := vnt_get_cck_rate($p0, 1);
    call {:si_unique_call 753} {:cexpr "tmp___0"} boogie_si_record_i16($i28);
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p2);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref(1, 4));
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} vnt_get_phy_field($p0, 14, $i30, 1, $p32);
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i33 := vnt_get_cck_rate($p0, 2);
    call {:si_unique_call 756} {:cexpr "tmp___1"} boogie_si_record_i16($i33);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref(2, 4));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vnt_get_phy_field($p0, 14, $i35, 1, $p37);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i38 := vnt_get_cck_rate($p0, 3);
    call {:si_unique_call 759} {:cexpr "tmp___2"} boogie_si_record_i16($i38);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i16($i39);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p2);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($p41, $mul.ref(3, 4));
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} vnt_get_phy_field($p0, 14, $i40, 1, $p42);
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i1);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p3);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p4);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vnt_calculate_ofdm_rate(4, $i44, $p45, $p46);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i1);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p3);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p49, $mul.ref(1, 1));
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p4);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p51, $mul.ref(1, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} vnt_calculate_ofdm_rate(5, $i48, $p50, $p52);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i1);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(2, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p4);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p57, $mul.ref(2, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} vnt_calculate_ofdm_rate(6, $i54, $p56, $p58);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i1);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i8($i59);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p3);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p61, $mul.ref(3, 1));
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p4);
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p63, $mul.ref(3, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} vnt_calculate_ofdm_rate(7, $i60, $p62, $p64);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i1);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i8($i65);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p3);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p67, $mul.ref(4, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p4);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p69, $mul.ref(4, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vnt_calculate_ofdm_rate(8, $i66, $p68, $p70);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $i71 := vnt_get_ofdm_rate($p0, 9);
    call {:si_unique_call 767} {:cexpr "tmp___3"} boogie_si_record_i16($i71);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i73 := $trunc.i32.i16($i72);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i1);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p3);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(5, 1));
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p4);
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p78, $mul.ref(5, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} vnt_calculate_ofdm_rate($i73, $i75, $p77, $p79);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} $i80 := vnt_get_ofdm_rate($p0, 10);
    call {:si_unique_call 770} {:cexpr "tmp___4"} boogie_si_record_i16($i80);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i1);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p3);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p85, $mul.ref(6, 1));
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p4);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p87, $mul.ref(6, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} vnt_calculate_ofdm_rate($i82, $i84, $p86, $p88);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $i89 := vnt_get_ofdm_rate($p0, 11);
    call {:si_unique_call 773} {:cexpr "tmp___5"} boogie_si_record_i16($i89);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i90 := $zext.i16.i32($i89);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i32.i16($i90);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i1);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p3);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref(7, 1));
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p4);
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p96, $mul.ref(7, 1));
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} vnt_calculate_ofdm_rate($i91, $i93, $p95, $p97);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i98 := vnt_get_ofdm_rate($p0, 11);
    call {:si_unique_call 776} {:cexpr "tmp___6"} boogie_si_record_i16($i98);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i1);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p3);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($p103, $mul.ref(8, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p4);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(8, 1));
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} vnt_calculate_ofdm_rate($i100, $i102, $p104, $p106);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p5);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.45, $p109);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i112 := $trunc.i32.i16($i111);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} put_unaligned_le16($i112, $p107);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.46, $p114);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(2, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p116, $i115);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 4)), $mul.ref(1, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.48, $p118);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(3, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p120, $i119);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p5);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p121, $mul.ref(4, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(2, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $i125 := $load.i16($M.45, $p124);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i126 := $zext.i16.i32($i125);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} put_unaligned_le16($i127, $p122);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.46, $p129);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(6, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p131, $i130);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(1, 4)), $mul.ref(1, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i134 := $load.i8($M.48, $p133);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(7, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p135, $i134);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p5);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($p136, $mul.ref(8, 1));
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(2, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.45, $p139);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i32.i16($i141);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} put_unaligned_le16($i142, $p137);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(0, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $i145 := $load.i8($M.46, $p144);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(10, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p146, $i145);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 4)), $mul.ref(1, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.48, $p148);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(11, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p150, $i149);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p5);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($p151, $mul.ref(12, 1));
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(2, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.45, $p154);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i16($i156);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} put_unaligned_le16($i157, $p152);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(0, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i160 := $load.i8($M.46, $p159);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(14, 1));
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p161, $i160);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(3, 4)), $mul.ref(1, 1));
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.48, $p163);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(15, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p165, $i164);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(0, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.43, $p166);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(16, 1));
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p168, $i167);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(0, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.44, $p169);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(17, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p171, $i170);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(1, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.43, $p174);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(18, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p176, $i175);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(1, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.44, $p177);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(19, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p179, $i178);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(2, 1));
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.43, $p180);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(20, 1));
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p182, $i181);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(2, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.44, $p183);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(21, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p185, $i184);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(3, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.43, $p186);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(22, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p188, $i187);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(3, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.44, $p189);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(23, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p191, $i190);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(4, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.43, $p192);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(24, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p194, $i193);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(4, 1));
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i196 := $load.i8($M.44, $p195);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(25, 1));
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p197, $i196);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(5, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.43, $p198);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(26, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p200, $i199);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(5, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i202 := $load.i8($M.44, $p201);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(27, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p203, $i202);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(6, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.43, $p204);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(28, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p206, $i205);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(6, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $i208 := $load.i8($M.44, $p207);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(29, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p209, $i208);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(7, 1));
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.43, $p210);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(30, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p212, $i211);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(7, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.44, $p213);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(31, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p215, $i214);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p3, $mul.ref(0, 9)), $mul.ref(8, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.43, $p216);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(32, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p218, $i217);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p4, $mul.ref(0, 9)), $mul.ref(8, 1));
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.44, $p219);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p5, $mul.ref(0, 34)), $mul.ref(33, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.47 := $store.i8($M.47, $p221, $i220);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p172 := $bitcast.ref.ref($p5);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} vslice_dummy_var_106 := vnt_control_out($p0, 0, 220, 3, 34, $p172);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    return;
}



const vnt_set_vga_gain_offset: ref;

axiom vnt_set_vga_gain_offset == $sub.ref(0, 347335);

procedure vnt_set_vga_gain_offset($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.29, $M.0, $CurrAddr;



implementation vnt_set_vga_gain_offset($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i8;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} {:cexpr "vnt_set_vga_gain_offset:arg:data"} boogie_si_record_i8($i1);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} vnt_control_out_u8($p0, 2, $sub.i8(0, 25), $i3);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2828, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 32);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i8($i21);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} vnt_control_out_u8($p0, 2, 10, $i22);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 223);
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2396, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $i11);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_get_cck_rate: ref;

axiom vnt_get_cck_rate == $sub.ref(0, 348367);

procedure vnt_get_cck_rate($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;



implementation vnt_get_cck_rate($p0: ref, $i1: i16) returns ($r: i16)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i4: i16;
  var $i12: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} {:cexpr "vnt_get_cck_rate:arg:rate_idx"} boogie_si_record_i16($i1);
    call {:si_unique_call 787} {:cexpr "vnt_get_cck_rate:arg:ui"} boogie_si_record_i16($i1);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i4 := $i1;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i4 := vnt_get_cck_rate_loop_$bb4($p0, $p5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, $i17, $i4);
    goto $bb4_last;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i4);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32(1, $i7);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i6, $i8);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i11 := $i4;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i4);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32($i13, 1);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i14);
    call {:si_unique_call 788} {:cexpr "ui"} boogie_si_record_i16($i15);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i15;
    goto $bb10_dummy;

  $bb6:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;
}



const vnt_calculate_ofdm_rate: ref;

axiom vnt_calculate_ofdm_rate == $sub.ref(0, 349399);

procedure vnt_calculate_ofdm_rate($i0: i16, $i1: i8, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.43, $M.44;



implementation vnt_calculate_ofdm_rate($i0: i16, $i1: i8, $p2: ref, $p3: ref)
{
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} {:cexpr "vnt_calculate_ofdm_rate:arg:rate"} boogie_si_record_i16($i0);
    call {:si_unique_call 790} {:cexpr "vnt_calculate_ofdm_rate:arg:bb_type"} boogie_si_record_i8($i1);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i4, 10);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i4, 11);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i4, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i1);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i29 == 1);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 119));
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 14);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb44:
    assume $i29 == 1;
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 103));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 8);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i1);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 0);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i27 == 1);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 116));
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 10);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb40:
    assume $i27 == 1;
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 100));
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 4);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i1);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i25 == 1);
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 120));
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 10);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb37:
    assume $i25 == 1;
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 104));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 4);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i4, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i23 == 1);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 115));
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 10);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb34:
    assume $i23 == 1;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 99));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 4);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb2:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i4, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i4, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i11 == 1);
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i1);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i21 == 1);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 114));
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 14);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb31:
    assume $i21 == 1;
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 98));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 8);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb15:
    assume $i11 == 1;
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i1);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i19 == 1);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 118));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 18);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28:
    assume $i19 == 1;
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 102));
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 12);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb13:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i4, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i12 == 1);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i17 == 1);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 113));
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 22);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25:
    assume $i17 == 1;
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 97));
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 16);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb19:
    assume $i13 == 1;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i15 == 1);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 117));
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 30);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb21:
    assume $i15 == 1;
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $M.43 := $store.i8($M.43, $p2, $sub.i8(0, 101));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $M.44 := $store.i8($M.44, $p3, 24);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const vnt_get_ofdm_rate: ref;

axiom vnt_get_ofdm_rate == $sub.ref(0, 350431);

procedure vnt_get_ofdm_rate($p0: ref, $i1: i16) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_get_ofdm_rate($p0: ref, $i1: i16) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $i50: i1;
  var $i51: i16;
  var $i53: i32;
  var $i54: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $i62: i16;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i24;
  var $i70: i24;
  var $i71: i24;
  var $p72: ref;
  var $p73: ref;
  var $i74: i8;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $i78: i1;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $i86: i32;
  var $i87: i1;
  var $i55: i16;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i52: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 795} {:cexpr "vnt_get_ofdm_rate:arg:rate_idx"} boogie_si_record_i16($i1);
    call {:si_unique_call 796} {:cexpr "vnt_get_ofdm_rate:arg:ui"} boogie_si_record_i16($i1);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p6, .str);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p7, .str.92);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p8, .str.2);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p9, .str.93);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.10, $p11);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 132);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p11, $i14);
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p15, 0);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.11, $p16);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 798} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i27 := vnt_ofdm_min_rate($p0);
    call {:si_unique_call 801} {:cexpr "tmp___1"} boogie_si_record_i32($i27);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i1);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $i54 := $ugt.i32($i53, 3);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p88, .str);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p89, .str.92);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p90, .str.2);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p91, .str.96);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.10, $p93);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 151);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p93, $i96);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p97, 0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.11, $p98);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 810} {:cexpr "tmp___3"} boogie_si_record_i64($i102);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i103} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i52 := 8;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;

  $bb28:
    assume $i103 == 1;
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p106, .str.96, .str.92);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb14:
    assume $i54 == 1;
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i55 := $i1;
    goto $bb17;

  $bb17:
    call $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i83, $i84, $i85, $i86, $i87, $i55 := vnt_get_ofdm_rate_loop_$bb17($p0, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i83, $i84, $i85, $i86, $i87, $i55);
    goto $bb17_last;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i55);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i59 := $shl.i32(1, $i58);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i57, $i59);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    $i62 := $i55;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i55);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $i84 := $sub.i32($i83, 1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    call {:si_unique_call 808} {:cexpr "ui"} boogie_si_record_i16($i85);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $i86 := $zext.i16.i32($i85);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i87 := $ugt.i32($i86, 3);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i87 == 1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb25:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i55 := $i85;
    goto $bb25_dummy;

  $bb19:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p63, .str);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p64, .str.92);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p65, .str.2);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p66, .str.95);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i69 := $load.i24($M.10, $p68);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i70 := $and.i24($i69, $sub.i24(0, 262144));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i71 := $or.i24($i70, 145);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p68, $i71);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p72, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i74 := $load.i8($M.11, $p73);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i75 := $zext.i8.i64($i74);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 1);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $i77 := ldv__builtin_expect($i76, 0);
    call {:si_unique_call 806} {:cexpr "tmp___2"} boogie_si_record_i64($i77);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i78 := $ne.i64($i77, 0);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i52 := $i62;
    goto $bb12;

  $bb21:
    assume $i78 == 1;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i62);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p81, .str.95, .str.92, $i82);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb4:
    assume $i28 == 1;
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p29, .str);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p30, .str.92);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p31, .str.2);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p32, .str.94);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.10, $p34);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 136);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p34, $i37);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p38, 0);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.11, $p39);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 803} {:cexpr "tmp___0"} boogie_si_record_i64($i43);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i1);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i49, 8);
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $i1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i52 := $i51;
    goto $bb12;

  $bb9:
    assume $i50 == 1;
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $i51 := 8;
    goto $bb11;

  $bb6:
    assume $i44 == 1;
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i1);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p47, .str.94, .str.92, $i48);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p24, .str.93, .str.92, $i26);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb25_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;
}



const put_unaligned_le16: ref;

axiom put_unaligned_le16 == $sub.ref(0, 351463);

procedure put_unaligned_le16($i0: i16, $p1: ref);
  free requires assertsPassed;
  modifies $M.47;



implementation put_unaligned_le16($i0: i16, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} {:cexpr "put_unaligned_le16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $M.47 := $store.i16($M.47, $p2, $i0);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    return;
}



const vnt_ofdm_min_rate: ref;

axiom vnt_ofdm_min_rate == $sub.ref(0, 352495);

procedure vnt_ofdm_min_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation vnt_ofdm_min_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2048);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 1024);
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 512);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 256);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 128);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 64);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 32);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 16);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb6;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb4;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb4;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb4;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb4;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb4;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;
}



const vnt_set_keys: ref;

axiom vnt_set_keys == $sub.ref(0, 353527);

procedure vnt_set_keys($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.49, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_set_keys($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i32;
  var $i40: i8;
  var $p41: ref;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i8;
  var $i42: i8;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i61: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $i22: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p1);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 1027074);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 1027076);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, 1027077);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 1027077);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i53 := 0;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i42 := $i53;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 8);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i58 == 1);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i42);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_109 := vnt_set_keymode($p0, $p12, $p3, 1, $i61, 1);
    $p63 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 304)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i42);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 820} vslice_dummy_var_110 := vnt_set_keymode($p0, $p64, $p3, 2, $i65, 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb35:
    assume $i58 == 1;
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i42);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} vslice_dummy_var_108 := vnt_set_keymode($p0, $p12, $p3, 0, $i59, 1);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} vnt_mac_disable_keyentry($p7, 0);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} vnt_mac_disable_keyentry($p7, 1);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vnt_mac_disable_keyentry($p7, 2);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} vnt_mac_disable_keyentry($p7, 3);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} vnt_mac_disable_keyentry($p7, 4);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} vnt_mac_disable_keyentry($p7, 5);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} vnt_mac_disable_keyentry($p7, 6);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vnt_mac_disable_keyentry($p7, 7);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vnt_mac_disable_keyentry($p7, 8);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} vnt_mac_disable_keyentry($p7, 9);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} vnt_mac_disable_keyentry($p7, 10);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} vslice_dummy_var_107 := vnt_set_keymode($p0, $p12, $p3, 1, 0, 1);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, 2);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i28);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb25;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 3248)), $mul.ref(2394, 1));
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i46 := $ule.i32($i45, 1);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i32($i48);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $i50 := $or.i32($i49, 2);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i51);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i53 := 3;
    goto $bb34;

  $bb31:
    assume $i46 == 1;
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 22);
    goto $bb25;

  $bb7:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i14, 1027074);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb14;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 4);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p35, $i34);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 2);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 24)), $mul.ref(15, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i42 := 2;
    goto $bb30;

  $bb5:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i14, 1027073);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i20 == 1);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb14;

  $bb19:
    assume $i21 == 1;
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} vnt_mac_disable_keyentry($p7, 0);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} vnt_mac_disable_keyentry($p7, 1);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} vnt_mac_disable_keyentry($p7, 2);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} vnt_mac_disable_keyentry($p7, 3);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} vnt_mac_disable_keyentry($p7, 4);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} vnt_mac_disable_keyentry($p7, 5);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} vnt_mac_disable_keyentry($p7, 6);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} vnt_mac_disable_keyentry($p7, 7);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} vnt_mac_disable_keyentry($p7, 8);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} vnt_mac_disable_keyentry($p7, 9);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vnt_mac_disable_keyentry($p7, 10);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb25;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 216)), $mul.ref(12, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $p12 := $p10;
    goto $bb3;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 354559);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 840} $i2 := devirtbounce.1(0, $p1, $i0);
    call {:si_unique_call 841} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const vnt_mac_disable_keyentry: ref;

axiom vnt_mac_disable_keyentry == $sub.ref(0, 355591);

procedure vnt_mac_disable_keyentry($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.49, $CurrAddr;



implementation vnt_mac_disable_keyentry($p0: ref, $i1: i8)
{
  var $p2: ref;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $M.49 := $store.i8($M.49, $p2, $i1);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} vslice_dummy_var_111 := vnt_control_out($p0, 9, 0, 0, 1, $p2);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    return;
}



const vnt_set_keymode: ref;

axiom vnt_set_keymode == $sub.ref(0, 356623);

procedure vnt_set_keymode($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_set_keymode($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i32, $i5: i1) returns ($r: i32)
{
  var $p6: ref;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i8;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i42: i1;
  var $i44: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i8;
  var $p50: ref;
  var $i43: i32;
  var $i51: i32;
  var $i52: i32;
  var $i53: i16;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i16;
  var $i58: i16;
  var $i45: i16;
  var $i46: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i16;
  var $i40: i16;
  var $i41: i32;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $i70: i32;
  var $i71: i32;
  var $i72: i16;
  var $i76: i16;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i16;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i64;
  var $p85: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i8;
  var $i87: i1;
  var $i88: i32;
  var $i89: i32;
  var $i90: i16;
  var $i91: i16;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i1;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i32;
  var $i102: i8;
  var $p104: ref;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $p116: ref;
  var $i117: i32;
  var $i118: i16;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $i86: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p6 := $alloc($mul.ref(6, $zext.i32.i64(1)));
    call {:si_unique_call 845} {:cexpr "vnt_set_keymode:arg:key_type"} boogie_si_record_i32($i3);
    call {:si_unique_call 846} {:cexpr "vnt_set_keymode:arg:mode"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i5);
    call {:si_unique_call 847} {:cexpr "vnt_set_keymode:arg:onfly_latch"} boogie_si_record_i1($i5);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $sub.i8(0, 1));
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(1, 1));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, $sub.i8(0, 1));
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(2, 1));
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $sub.i8(0, 1));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $sub.i8(0, 1));
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $sub.i8(0, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 6)), $mul.ref(5, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, $sub.i8(0, 1));
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    call {:si_unique_call 848} {:cexpr "key_inx"} boogie_si_record_i8($i18);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p21 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i3, 1);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i3, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i3, 64);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i3, 64);
    assume {:verifier.code 0} true;
    $i40, $i41 := 0, $i35;
    assume {:branchcond $i39} true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32(0, 22);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $r := $i86;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i64 := $trunc.i32.i16($i4);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32($i65, 4);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i40);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i68 := $or.i32($i66, $i67);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    call {:si_unique_call 854} {:cexpr "key_mode"} boogie_si_record_i16($i69);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 64);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    call {:si_unique_call 855} {:cexpr "key_mode"} boogie_si_record_i16($i72);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := $i72, $i41, $i18;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i7);
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i91 := $i73;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i4, 0);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i91);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i75);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} vnt_mac_set_keyentry($p10, $i118, $i74, $i119, $p21, $p121);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i86 := 0;
    goto $bb45;

  $bb49:
    assume $i92 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 5);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 13);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb54:
    assume $i108 == 1;
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(15, 1));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 128);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(15, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, $i114);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb51:
    assume $i96 == 1;
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(15, 1));
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 127);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i8($i101);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1)), $mul.ref(15, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p104, $i102);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb46:
    assume $i87 == 1;
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i73);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i89 := $or.i32($i88, 32768);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    call {:si_unique_call 861} {:cexpr "key_mode"} boogie_si_record_i16($i90);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i91 := $i90;
    goto $bb48;

  $bb21:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i3, 4);
    assume {:verifier.code 0} true;
    $i43 := $i35;
    assume {:branchcond $i42} true;
    goto $bb27, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb26;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32(0);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, 4);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    call {:si_unique_call 856} {:cexpr "key_mode"} boogie_si_record_i16($i53);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i8.i1($i7);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i58 := $i53;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i45, $i46 := $i58, $i43;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i16($i4);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i45);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i60, $i61);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    call {:si_unique_call 857} {:cexpr "key_mode"} boogie_si_record_i16($i63);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i40, $i41 := $i63, $i46;
    goto $bb24;

  $bb37:
    assume $i54 == 1;
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i55 := $zext.i16.i32($i53);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i55, 16384);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i16($i56);
    call {:si_unique_call 859} {:cexpr "key_mode"} boogie_si_record_i16($i57);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i58 := $i57;
    goto $bb39;

  $bb19:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    $i45, $i46 := 0, $i35;
    assume {:branchcond $i44} true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb26;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb31;

  $bb17:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i47 == 1);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8(10);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $i43 := 10;
    goto $bb28;

  $bb33:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb26;

  $bb35:
    assume $i48 == 1;
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i32.i16($i4);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32(0);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i77, $i78);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i32.i16($i79);
    call {:si_unique_call 858} {:cexpr "key_mode"} boogie_si_record_i16($i80);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2824, 1));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 2);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i73, $i74, $i75 := $i80, $i35, 4;
    goto $bb40;

  $bb41:
    assume $i83 == 1;
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i84 := $zext.i32.i64($i35);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} clear_bit($i84, $p85);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i25 := variable_test_bit(0, $p24);
    call {:si_unique_call 850} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $i27 := 0;
    assume {:branchcond $i26} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i123 := variable_test_bit(1, $p122);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 0);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $i27 := 1;
    assume {:branchcond $i124} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i126 := variable_test_bit(2, $p125);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i126, 0);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i27 := 2;
    assume {:branchcond $i127} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $i129 := variable_test_bit(3, $p128);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i129, 0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i27 := 3;
    assume {:branchcond $i130} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $i132 := variable_test_bit(4, $p131);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 0);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i27 := 4;
    assume {:branchcond $i133} true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i135 := variable_test_bit(5, $p134);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i27 := 5;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i138 := variable_test_bit(6, $p137);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 0);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i27 := 6;
    assume {:branchcond $i139} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $i141 := variable_test_bit(7, $p140);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 0);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i27 := 7;
    assume {:branchcond $i142} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i144 := variable_test_bit(8, $p143);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i27 := 8;
    assume {:branchcond $i145} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $i147 := variable_test_bit(9, $p146);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i27 := 9;
    assume {:branchcond $i148} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb15;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 3248)), $mul.ref(2992, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} set_bit($i28, $p29);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i27);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(14, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    call {:si_unique_call 852} {:cexpr "entry"} boogie_si_record_i32($i33);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb11;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb9;

  $bb82:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb9;

  $bb78:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb9;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb9;

  $bb70:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb9;

  $bb66:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb9;

  $bb62:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb9;

  $bb58:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb9;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb9;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $p21 := $p1;
    goto $bb3;
}



const vnt_mac_set_keyentry: ref;

axiom vnt_mac_set_keyentry == $sub.ref(0, 357655);

procedure vnt_mac_set_keyentry($p0: ref, $i1: i16, $i2: i32, $i3: i32, $p4: ref, $p5: ref);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr;



implementation vnt_mac_set_keyentry($p0: ref, $i1: i16, $i2: i32, $i3: i32, $p4: ref, $p5: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i16;
  var $i61: i16;
  var $i62: i32;
  var $i63: i16;
  var $p64: ref;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p6 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 873} {:cexpr "vnt_mac_set_keyentry:arg:key_ctl"} boogie_si_record_i16($i1);
    call {:si_unique_call 874} {:cexpr "vnt_mac_set_keyentry:arg:entry_idx"} boogie_si_record_i32($i2);
    call {:si_unique_call 875} {:cexpr "vnt_mac_set_keyentry:arg:key_idx"} boogie_si_record_i32($i3);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i2);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i10 := $mul.i32($i9, 22);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32(32);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i10, $i11);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    call {:si_unique_call 876} {:cexpr "offset"} boogie_si_record_i16($i13);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i1);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} ether_addr_copy($p20, $p4);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 878} {:cexpr "__tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i28);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i24);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p6, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 879} cmdloc_dummy_var_43 := $memcpy.i8(cmdloc_dummy_var_41, cmdloc_dummy_var_42, $p36, $p5, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p37, .str);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p38, .str.4);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p39, .str.5);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p40, .str.6);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.10, $p42);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 139);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p42, $i45);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p46, 0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.11, $p47);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 881} {:cexpr "tmp"} boogie_si_record_i64($i51);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i13);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i3);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p6);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} vslice_dummy_var_112 := vnt_control_out($p0, 8, $i60, $i63, 24, $p64);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i52 == 1;
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i13);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i1);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p6);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref($p7, $p55, .str.6, $i56, $i57, $p58);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_mac_set_filter: ref;

axiom vnt_mac_set_filter == $sub.ref(0, 358687);

procedure vnt_mac_set_filter($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.50, $CurrAddr;



implementation vnt_mac_set_filter($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 885} {:cexpr "vnt_mac_set_filter:arg:mc_filter"} boogie_si_record_i64($i1);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $M.50 := $store.i64($M.50, $p2, $i1);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_113 := vnt_control_out($p0, 0, 212, 3, 8, $p3);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    return;
}



const crc32_le: ref;

axiom crc32_le == $sub.ref(0, 359719);

procedure crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation crc32_le($i0: i32, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 887} {:cexpr "crc32_le:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 888} {:cexpr "crc32_le:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 889} $i3 := __VERIFIER_nondet_uint();
    call {:si_unique_call 890} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i3);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __bitrev32: ref;

axiom __bitrev32 == $sub.ref(0, 360751);

procedure __bitrev32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitrev32($i0: i32) returns ($r: i32)
{
  var $i1: i16;
  var $i2: i32;
  var $i3: i16;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} {:cexpr "__bitrev32:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i32.i16($i0);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i4 := __bitrev16($i3);
    call {:si_unique_call 893} {:cexpr "tmp"} boogie_si_record_i16($i4);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i0, 16);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} $i9 := __bitrev16($i8);
    call {:si_unique_call 895} {:cexpr "tmp___0"} boogie_si_record_i16($i9);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i4);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 16);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i9);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i11, $i12);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;
}



const __bitrev16: ref;

axiom __bitrev16 == $sub.ref(0, 361783);

procedure __bitrev16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __bitrev16($i0: i16) returns ($r: i16)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i8;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $i8: i32;
  var $i9: i8;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i16;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} {:cexpr "__bitrev16:arg:x"} boogie_si_record_i16($i0);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i1 := $trunc.i16.i8($i0);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i2);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i4 := __bitrev8($i3);
    call {:si_unique_call 898} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i32.i8($i8);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i10 := __bitrev8($i9);
    call {:si_unique_call 900} {:cexpr "tmp___0"} boogie_si_record_i8($i10);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i4);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i12 := $shl.i32($i11, 8);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i16($i12);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i14 := $sext.i16.i32($i13);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i16($i10);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i16 := $sext.i16.i32($i15);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, $i16);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;
}



const __bitrev8: ref;

axiom __bitrev8 == $sub.ref(0, 362815);

procedure __bitrev8($i0: i8) returns ($r: i8);
  free requires assertsPassed;



implementation __bitrev8($i0: i8) returns ($r: i8)
{
  var $i1: i32;
  var $i2: i64;
  var $p3: ref;
  var $i4: i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} {:cexpr "__bitrev8:arg:byte"} boogie_si_record_i8($i0);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i1 := $zext.i8.i32($i0);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref(byte_rev_table, $mul.ref(0, 256)), $mul.ref($i2, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vnt_mac_set_bssid_addr: ref;

axiom vnt_mac_set_bssid_addr == $sub.ref(0, 363847);

procedure vnt_mac_set_bssid_addr($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation vnt_mac_set_bssid_addr($p0: ref, $p1: ref)
{
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} vslice_dummy_var_114 := vnt_control_out($p0, 0, 204, 3, 6, $p1);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    return;
}



const vnt_update_top_rates: ref;

axiom vnt_update_top_rates == $sub.ref(0, 364879);

procedure vnt_update_top_rates($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_update_top_rates($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i8;
  var $i6: i8;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i14: i8;
  var $i12: i8;
  var $i13: i8;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i15: i8;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 2048);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i5 := 11;
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 1024);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $i5 := 10;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 512);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i5 := 9;
    assume {:branchcond $i36} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 256);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i5 := 8;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 128);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i5 := 7;
    assume {:branchcond $i44} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i46, 64);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i5 := 6;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 32);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i5 := 5;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i55 := $and.i32($i54, 16);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i5 := 4;
    assume {:branchcond $i56} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i6 := 8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, $i6);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 8);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i12 := 3;
    assume {:branchcond $i11} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i11 == 1);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i13 := 3;
    goto $bb13;

  $bb13:
    call $i14, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27 := vnt_update_top_rates_loop_$bb13($p8, $i14, $i13, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27);
    goto $bb13_last;

  $bb16:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i13);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i13);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i18, 1);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    call {:si_unique_call 903} {:cexpr "i"} boogie_si_record_i8($i20);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p8);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i20);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i23 := $shl.i32(1, $i22);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i21, $i25);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i14 := $i20;
    assume true;
    goto $bb14, $bb20;

  $bb20:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i13 := $i20;
    goto $bb20_dummy;

  $bb14:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i12 := $i14;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i15 := $i12;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p28, $i15);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i17 == 1;
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb15;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb11;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;

  $bb20_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;
}



const vnt_mac_enable_barker_preamble_mode: ref;

axiom vnt_mac_enable_barker_preamble_mode == $sub.ref(0, 365911);

procedure vnt_mac_enable_barker_preamble_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.51, $CurrAddr;



implementation vnt_mac_enable_barker_preamble_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_115: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p2, 2);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $M.51 := $store.i8($M.51, $p3, 2);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} vslice_dummy_var_115 := vnt_control_out($p0, 4, 78, 3, 2, $p4);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    return;
}



const vnt_mac_disable_barker_preamble_mode: ref;

axiom vnt_mac_disable_barker_preamble_mode == $sub.ref(0, 366943);

procedure vnt_mac_disable_barker_preamble_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.52, $CurrAddr;



implementation vnt_mac_disable_barker_preamble_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_116: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $M.52 := $store.i8($M.52, $p2, 0);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $M.52 := $store.i8($M.52, $p3, 2);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} vslice_dummy_var_116 := vnt_control_out($p0, 4, 78, 3, 2, $p4);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    return;
}



const vnt_mac_enable_protect_mode: ref;

axiom vnt_mac_enable_protect_mode == $sub.ref(0, 367975);

procedure vnt_mac_enable_protect_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.53, $CurrAddr;



implementation vnt_mac_enable_protect_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_117: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p2, 32);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $M.53 := $store.i8($M.53, $p3, 32);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} vslice_dummy_var_117 := vnt_control_out($p0, 4, 76, 3, 2, $p4);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    return;
}



const vnt_mac_disable_protect_mode: ref;

axiom vnt_mac_disable_protect_mode == $sub.ref(0, 369007);

procedure vnt_mac_disable_protect_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.54, $CurrAddr;



implementation vnt_mac_disable_protect_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var vslice_dummy_var_118: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $M.54 := $store.i8($M.54, $p2, 0);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $M.54 := $store.i8($M.54, $p3, 32);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} vslice_dummy_var_118 := vnt_control_out($p0, 4, 76, 3, 2, $p4);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    return;
}



const vnt_beacon_enable: ref;

axiom vnt_beacon_enable == $sub.ref(0, 370039);

procedure vnt_beacon_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.20, $M.0, $M.55, $M.56, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, $M.24, assertsPassed;



implementation vnt_beacon_enable($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var vslice_dummy_var_119: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} vnt_mac_reg_bits_off($p0, 87, 1);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vnt_mac_reg_bits_off($p0, 72, 1);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(20, 1));
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} vnt_mac_set_beacon_interval($p0, $i6);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} vslice_dummy_var_119 := vnt_clear_current_tsf($p0);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} vnt_mac_reg_bits_on($p0, 72, 1);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 248)), $mul.ref(20, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} vnt_reset_next_tbtt($p0, $i11);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i12 := vnt_beacon_make($p0, $p1);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 919} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;
}



const vnt_mac_set_beacon_interval: ref;

axiom vnt_mac_set_beacon_interval == $sub.ref(0, 371071);

procedure vnt_mac_set_beacon_interval($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.55, $CurrAddr;



implementation vnt_mac_set_beacon_interval($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $p9: ref;
  var vslice_dummy_var_120: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $p2 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 921} {:cexpr "vnt_mac_set_beacon_interval:arg:interval"} boogie_si_record_i16($i1);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i16.i8($i1);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $M.55 := $store.i8($M.55, $p4, $i3);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i1);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $M.55 := $store.i8($M.55, $p8, $i7);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p2);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} vslice_dummy_var_120 := vnt_control_out($p0, 0, 38, 3, 2, $p9);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    return;
}



const vnt_reset_next_tbtt: ref;

axiom vnt_reset_next_tbtt == $sub.ref(0, 372103);

procedure vnt_reset_next_tbtt($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.20, $M.0, $M.56, $CurrAddr;



implementation vnt_reset_next_tbtt($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $i4: i32;
  var $i5: i16;
  var $i6: i64;
  var $i7: i8;
  var $p8: ref;
  var $i9: i64;
  var $i10: i8;
  var $p11: ref;
  var $i12: i64;
  var $i13: i8;
  var $p14: ref;
  var $i15: i64;
  var $i16: i8;
  var $p17: ref;
  var $i18: i64;
  var $i19: i8;
  var $p20: ref;
  var $i21: i64;
  var $i22: i8;
  var $p23: ref;
  var $i24: i64;
  var $i25: i8;
  var $p26: ref;
  var $i27: i64;
  var $i28: i8;
  var $p29: ref;
  var $p30: ref;
  var vslice_dummy_var_121: i1;
  var vslice_dummy_var_122: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 924} {:cexpr "vnt_reset_next_tbtt:arg:beacon_interval"} boogie_si_record_i16($i1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} vslice_dummy_var_121 := vnt_clear_current_tsf($p0);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i6 := vnt_get_next_tbtt(0, $i5);
    call {:si_unique_call 927} {:cexpr "next_tbtt"} boogie_si_record_i64($i6);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i8($i6);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p8, $i7);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $i9 := $lshr.i64($i6, 8);
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i8($i9);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(1, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p11, $i10);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i64($i6, 16);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i8($i12);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(2, 1));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p14, $i13);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i64($i6, 24);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i8($i15);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(3, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p17, $i16);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i18 := $lshr.i64($i6, 32);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i8($i18);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p20, $i19);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i21 := $lshr.i64($i6, 40);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i8($i21);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p23, $i22);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i6, 48);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i64.i8($i24);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p26, $i25);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i64($i6, 56);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i64.i8($i27);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(7, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.56 := $store.i8($M.56, $p29, $i28);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p2);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} vslice_dummy_var_122 := vnt_control_out($p0, 13, 6, 0, 8, $p30);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    return;
}



const vnt_enable_power_saving: ref;

axiom vnt_enable_power_saving == $sub.ref(0, 373135);

procedure vnt_enable_power_saving($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.20, $M.28, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.57, $CurrAddr;



implementation vnt_enable_power_saving($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 930} {:cexpr "vnt_enable_power_saving:arg:listen_interval"} boogie_si_record_i16($i1);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2832, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 49152);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    call {:si_unique_call 931} {:cexpr "aid"} boogie_si_record_i16($i7);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} vnt_mac_write_word($p0, 102, 1000);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2824, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} vnt_mac_reg_bits_on($p0, 97, 1);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} vnt_mac_reg_bits_on($p0, 96, 1);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vnt_mac_reg_bits_on($p0, 97, 8);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i13, 1);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} vnt_mac_reg_bits_on($p0, 97, 2);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p15, .str);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p16, .str.26);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p17, .str.27);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p18, .str.28);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.10, $p20);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 94);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p20, $i23);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p24, 0);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.11, $p25);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 941} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} __dynamic_dev_dbg.ref.ref.ref($p2, $p33, .str.28);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} vnt_mac_reg_bits_off($p0, 97, 2);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} vnt_mac_reg_bits_on($p0, 97, 4);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i7);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} vnt_mac_write_word($p0, 100, $i12);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_disable_power_saving: ref;

axiom vnt_disable_power_saving == $sub.ref(0, 374167);

procedure vnt_disable_power_saving($p0: ref);
  free requires assertsPassed;
  modifies $M.28, $M.20, $CurrAddr;



implementation vnt_disable_power_saving($p0: ref)
{
  var vslice_dummy_var_123: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} vslice_dummy_var_123 := vnt_control_out($p0, 16, 0, 0, 0, $0.ref);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} vnt_mac_reg_bits_off($p0, 96, 1);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} vnt_mac_reg_bits_on($p0, 97, 2);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    return;
}



const vnt_set_channel: ref;

axiom vnt_set_channel == $sub.ref(0, 375199);

procedure vnt_set_channel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.20, $M.28, $M.29, $CurrAddr;



implementation vnt_set_channel($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i1;
  var $i4: i16;
  var $i5: i32;
  var $i6: i16;
  var $i8: i8;
  var $i9: i32;
  var $i10: i32;
  var $i11: i8;
  var vslice_dummy_var_124: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} {:cexpr "vnt_set_channel:arg:connection_channel"} boogie_si_record_i32($i1);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 56);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} vnt_mac_reg_bits_on($p0, 85, 1);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} vnt_mac_reg_bits_off($p0, 109, $sub.i8(0, 80));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} vslice_dummy_var_124 := vnt_control_out($p0, 12, $i6, 0, 0, $0.ref);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i1);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 128);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i8($i10);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} vnt_control_out_u8($p0, 3, 109, $i11);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const vnt_mac_write_word: ref;

axiom vnt_mac_write_word == $sub.ref(0, 376231);

procedure vnt_mac_write_word($p0: ref, $i1: i8, $i2: i16);
  free requires assertsPassed;
  modifies $M.57, $CurrAddr;



implementation vnt_mac_write_word($p0: ref, $i1: i8, $i2: i16)
{
  var $p3: ref;
  var $i4: i8;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var vslice_dummy_var_125: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p3 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    call {:si_unique_call 952} {:cexpr "vnt_mac_write_word:arg:reg_ofs"} boogie_si_record_i8($i1);
    call {:si_unique_call 953} {:cexpr "vnt_mac_write_word:arg:word"} boogie_si_record_i16($i2);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i16.i8($i2);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(0, 1));
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $M.57 := $store.i8($M.57, $p5, $i4);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i2);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i7 := $ashr.i32($i6, 8);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 2)), $mul.ref(1, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $M.57 := $store.i8($M.57, $p9, $i8);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i1);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} vslice_dummy_var_125 := vnt_control_out($p0, 0, $i11, 3, 2, $p12);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    return;
}



const vnt_mac_shutdown: ref;

axiom vnt_mac_shutdown == $sub.ref(0, 377263);

procedure vnt_mac_shutdown($p0: ref);
  free requires assertsPassed;



implementation vnt_mac_shutdown($p0: ref)
{
  var vslice_dummy_var_126: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} vslice_dummy_var_126 := vnt_control_out($p0, 7, 0, 0, 0, $0.ref);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    return;
}



const ieee80211_stop_queues: ref;

axiom ieee80211_stop_queues == $sub.ref(0, 378295);

procedure ieee80211_stop_queues($p0: ref);
  free requires assertsPassed;



implementation ieee80211_stop_queues($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cancel_delayed_work_sync_45: ref;

axiom ldv_cancel_delayed_work_sync_45 == $sub.ref(0, 379327);

procedure ldv_cancel_delayed_work_sync_45($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation ldv_cancel_delayed_work_sync_45($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $p5: ref;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i1 := cancel_delayed_work_sync($p0);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 957} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 958} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 224)), $mul.ref(0, 1));
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} disable_work_1($p5);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i4);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const vnt_free_tx_bufs: ref;

axiom vnt_free_tx_bufs == $sub.ref(0, 380359);

procedure vnt_free_tx_bufs($p0: ref);
  free requires assertsPassed;



implementation vnt_free_tx_bufs($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2368, 1));
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $i4 := vnt_free_tx_bufs_loop_$bb4($p0, $p1, $i5, $p7, $p8, $p9, $p10, $i11, $i12, $p13, $p14, $p15, $p16, $p17, $i18, $i19, $i20, $i4);
    goto $bb4_last;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref($i5, 8));
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p8);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} kfree($p17);
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i4, 1);
    call {:si_unique_call 963} {:cexpr "ii"} boogie_si_record_i32($i18);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p1);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i18, $i19);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i20 == 1);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i18;
    goto $bb9_dummy;

  $bb6:
    assume $i12 == 1;
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} usb_kill_urb($p14);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} usb_free_urb($p16);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7519;
}



const vnt_free_rx_bufs: ref;

axiom vnt_free_rx_bufs == $sub.ref(0, 381391);

procedure vnt_free_rx_bufs($p0: ref);
  free requires assertsPassed;



implementation vnt_free_rx_bufs($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1336, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i5, $p7, $p8, $i9, $i10, $p11, $p12, $i13, $i14, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $i28, $i4 := vnt_free_rx_bufs_loop_$bb4($p0, $p1, $i5, $p7, $p8, $i9, $i10, $p11, $p12, $i13, $i14, $p15, $p16, $p17, $p18, $p19, $p20, $i21, $i22, $p23, $p24, $p25, $i26, $i27, $i28, $i4);
    goto $bb4_last;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref($i5, 8));
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_7581;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p8);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} kfree($p25);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i4, 1);
    call {:si_unique_call 964} {:cexpr "ii"} boogie_si_record_i32($i26);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i26, $i27);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb16:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i26;
    goto $bb16_dummy;

  $bb13:
    assume $i22 == 1;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} consume_skb($p24);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} usb_kill_urb($p16);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} usb_free_urb($p18);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7552;
}



const vnt_free_int_bufs: ref;

axiom vnt_free_int_bufs == $sub.ref(0, 382423);

procedure vnt_free_int_bufs($p0: ref);
  free requires assertsPassed;



implementation vnt_free_int_bufs($p0: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2376, 1)), $mul.ref(0, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} kfree($p3);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 383455);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 384487);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    return;
}



const consume_skb: ref;

axiom consume_skb == $sub.ref(0, 385519);

procedure consume_skb($p0: ref);
  free requires assertsPassed;



implementation consume_skb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 386551);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 970} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 971} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 387583);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i1 := $M.12;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i3 := $M.12;
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.14;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i11 := $M.14;
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.16;
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i19 := $M.16;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.18;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i27 := $M.18;
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.19;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.17;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 974} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.15;
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 973} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.13;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 972} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const vnt_alloc_bufs: ref;

axiom vnt_alloc_bufs == $sub.ref(0, 388615);

procedure vnt_alloc_bufs($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, assertsPassed, $CurrAddr;



implementation vnt_alloc_bufs($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $p11: ref;
  var $p13: ref;
  var $i14: i8;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i4: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i35: i64;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $p50: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $i32: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2368, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i3 := $ult.i32(0, $i2);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1336, 1));
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $i31 := $ult.i32(0, $i30);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p77 := ldv_usb_alloc_urb_44(0, 32);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p78, $p77);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p86 := kmalloc(32, 208);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2376, 1)), $mul.ref(0, 1));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p88, $p86);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2376, 1)), $mul.ref(0, 1));
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i96 := 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $r := $i96;
    return;

  $bb40:
    assume $i93 == 1;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} usb_free_urb($p95);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} vnt_free_rx_bufs($p0);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} vnt_free_tx_bufs($p0);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i96 := 0;
    goto $bb43;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i82 == 1;
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} dev_err.ref.ref($p85, .str.75);
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $i32 := 0;
    goto $bb19;

  $bb19:
    call $p33, $i35, $p37, $i38, $p40, $p41, $i42, $i43, $i44, $i48, $p50, $p51, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i32 := vnt_alloc_bufs_loop_$bb19($p0, $p29, $p33, $i35, $p37, $i38, $p40, $p41, $i42, $i43, $i44, $i48, $p50, $p51, $p53, $p54, $p55, $p56, $p57, $i58, $i59, $p63, $i64, $p65, $p66, $p67, $p68, $i69, $i70, $p71, $i72, $i73, $i74, $i75, $i76, $i32);
    goto $bb19_last;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p33 := kmalloc(32, 208);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i32);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref($i35, 8));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p37, $p33);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i32);
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref($i38, 8));
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i44 := $i32;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i32);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref($i48, 8));
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p54 := ldv_usb_alloc_urb_43(0, 32);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $p54);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $i59 := $eq.i64($i58, 0);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(44, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $p65 := dev_alloc_skb($i64);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p65);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p51, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, 0);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i72 := vnt_submit_rx_urb($p0, $p51);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 988} {:cexpr "tmp___1"} boogie_si_record_i32($i72);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i32, 1);
    call {:si_unique_call 989} {:cexpr "ii"} boogie_si_record_i32($i74);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p29);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $i76 := $ult.i32($i74, $i75);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i76 == 1);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb34:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i32 := $i74;
    goto $bb34_dummy;

  $bb31:
    assume $i73 == 1;
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i70 == 1;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} dev_err.ref.ref($p62, .str.74);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} dev_err.ref.ref.i32($p47, .str.73, $i44);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $i8, $i9, $p11, $p13, $i14, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $p25, $i26, $i27, $i28, $i4 := vnt_alloc_bufs_loop_$bb4($p0, $p1, $p5, $p6, $i7, $i8, $i9, $p11, $p13, $i14, $p15, $p16, $p17, $p18, $p19, $i20, $i21, $p25, $i26, $i27, $i28, $i4);
    goto $bb4_last;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} $p5 := kmalloc(2952, 208);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i4);
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref($i9, 8));
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p0);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i4);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(45, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i14);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} $p16 := ldv_usb_alloc_urb_42(0, 32);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $p16);
    goto corral_source_split_7698;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p6, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i4, 1);
    call {:si_unique_call 980} {:cexpr "ii"} boogie_si_record_i32($i26);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p1);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i28 := $ult.i32($i26, $i27);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i26;
    goto $bb13_dummy;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} dev_err.ref.ref($p24, .str.72);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    goto $bb8;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7724;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7676;
}



const vnt_int_start_interrupt: ref;

axiom vnt_int_start_interrupt == $sub.ref(0, 389647);

procedure vnt_int_start_interrupt($p0: ref);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.24, $M.0, $CurrAddr, assertsPassed;



implementation vnt_int_start_interrupt($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p2, .str);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p3, .str.53);
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p4, .str.54);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p5, .str.55);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.10, $p7);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 61);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p7, $i10);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p11, 0);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.11, $p12);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 996} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_spin_lock();
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $i21 := vnt_start_interrupt_urb($p0);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 1000} {:cexpr "status"} boogie_si_record_i32($i21);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} spin_unlock_irqrestore($p22, $u0);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __dynamic_dev_dbg.ref.ref.ref($p1, $p20, .str.55);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_start_interrupt_urb: ref;

axiom vnt_start_interrupt_urb == $sub.ref(0, 390679);

procedure vnt_start_interrupt_urb($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, assertsPassed;



implementation vnt_start_interrupt_urb($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p47: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2376, 1)), $mul.ref(8, 1));
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2376, 1)), $mul.ref(8, 1));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, 1);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i11 := __create_pipe($p10, 1);
    call {:si_unique_call 1004} {:cexpr "tmp"} boogie_si_record_i32($i11);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i11, 1073741952);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2376, 1)), $mul.ref(0, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(304, 1));
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} usb_fill_int_urb($p13, $p15, $i16, $p19, 32, vnt_start_interrupt_urb_complete, $p20, $i22);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(296, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i25 := ldv_usb_submit_urb_518($p24, 32);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 1007} {:cexpr "status"} boogie_si_record_i32($i25);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p27, .str);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p28, .str.33);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p29, .str.34);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p30, .str.35);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.10, $p32);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 160);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p32, $i35);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p36, 0);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.11, $p37);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 1009} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2376, 1)), $mul.ref(8, 1));
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 0);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p45, .str.35, $i25);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;
}



const vnt_start_interrupt_urb_complete: ref;

axiom vnt_start_interrupt_urb_complete == $sub.ref(0, 391711);

procedure vnt_start_interrupt_urb_complete($p0: ref);



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 392743);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 1012} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 1013} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 1014} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const ldv_usb_submit_urb_518: ref;

axiom ldv_usb_submit_urb_518 == $sub.ref(0, 393775);

procedure ldv_usb_submit_urb_518($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_518($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} {:cexpr "ldv_usb_submit_urb_518:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} ldv_check_alloc_flags($i1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p2 := ldv_undef_ptr();
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const vnt_int_process_data: ref;

axiom vnt_int_process_data == $sub.ref(0, 394807);

procedure vnt_int_process_data($p0: ref);



const ldv_usb_submit_urb_517: ref;

axiom ldv_usb_submit_urb_517 == $sub.ref(0, 395839);

procedure ldv_usb_submit_urb_517($p0: ref, $i1: i32) returns ($r: i32);



const vnt_int_report_rate: ref;

axiom vnt_int_report_rate == $sub.ref(0, 396871);

procedure vnt_int_report_rate($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);



const ieee80211_get_tx_rate: ref;

axiom ieee80211_get_tx_rate == $sub.ref(0, 397903);

procedure ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ieee80211_get_tx_rate($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $p57: ref;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($add.ref($p5, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i10 := $sext.i8.i32($i9);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i10, 0);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 1018} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i12);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1020} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i12, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1028} {:cexpr "tmp___2"} boogie_si_record_i64($i34);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(56, 1));
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p42, $mul.ref(0, 1776)), $mul.ref(224, 1)), $mul.ref($i40, 8));
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p51, $mul.ref(0, 18)), $mul.ref(0, 1)), $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i64($i55);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p47, $mul.ref($i56, 12));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p36 := $p57;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $r := $p36;
    return;

  $bb10:
    assume $i35 == 1;
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $p36 := $0.ref;
    goto $bb12;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1(1);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i19 := $xor.i1($i18, 1);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i20 := $zext.i1.i32($i19);
    call {:si_unique_call 1021} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i20);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1023} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i20, 0);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1026} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} warn_slowpath_null(.str.97, 2151);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ieee80211_tx_info_clear_status: ref;

axiom ieee80211_tx_info_clear_status == $sub.ref(0, 398935);

procedure ieee80211_tx_info_clear_status($p0: ref);



const ieee80211_tx_status_irqsafe: ref;

axiom ieee80211_tx_status_irqsafe == $sub.ref(0, 399967);

procedure ieee80211_tx_status_irqsafe($p0: ref, $p1: ref);



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 400999);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_42: ref;

axiom ldv_usb_alloc_urb_42 == $sub.ref(0, 402031);

procedure ldv_usb_alloc_urb_42($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_42($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} {:cexpr "ldv_usb_alloc_urb_42:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1031} {:cexpr "ldv_usb_alloc_urb_42:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} ldv_check_alloc_flags($i1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p2 := ldv_undef_ptr();
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_43: ref;

axiom ldv_usb_alloc_urb_43 == $sub.ref(0, 403063);

procedure ldv_usb_alloc_urb_43($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_43($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} {:cexpr "ldv_usb_alloc_urb_43:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1035} {:cexpr "ldv_usb_alloc_urb_43:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_check_alloc_flags($i1);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $p2 := ldv_undef_ptr();
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const dev_alloc_skb: ref;

axiom dev_alloc_skb == $sub.ref(0, 404095);

procedure dev_alloc_skb($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation dev_alloc_skb($i0: i32) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} {:cexpr "dev_alloc_skb:arg:length"} boogie_si_record_i32($i0);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $p1 := netdev_alloc_skb($0.ref, $i0);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;

  SeqInstr_94:
    assume !assertsPassed;
    return;
}



const vnt_submit_rx_urb: ref;

axiom vnt_submit_rx_urb == $sub.ref(0, 405127);

procedure vnt_submit_rx_urb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr, assertsPassed;



implementation vnt_submit_rx_urb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i32 := skb_tailroom($p31);
    call {:si_unique_call 1046} {:cexpr "tmp___0"} boogie_si_record_i32($i32);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p35 := skb_put($p34, $i32);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} $i38 := __create_pipe($p37, 2);
    call {:si_unique_call 1049} {:cexpr "tmp___2"} boogie_si_record_i32($i38);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i38, $sub.i32(0, 1073741696));
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p1);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} usb_fill_bulk_urb($p5, $p40, $i41, $p35, 2900, vnt_submit_rx_urb_complete, $p42);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i43 := ldv_usb_submit_urb_520($p5, 32);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 1052} {:cexpr "status"} boogie_si_record_i32($i43);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i44 := $ne.i32($i43, 0);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, 1);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i29 := $i43;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p45, .str);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p46, .str.36);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p47, .str.34);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p48, .str.38);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.10, $p50);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 238);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p50, $i53);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p54, 0);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.11, $p55);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 1054} {:cexpr "tmp___3"} boogie_si_record_i64($i59);
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb6;

  $bb10:
    assume $i60 == 1;
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p63, .str.38, $i43);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p10, .str);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p11, .str.36);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p12, .str.34);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p13, .str.37);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.10, $p15);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 224);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p15, $i18);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p19, 0);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.11, $p20);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 1043} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} __dynamic_dev_dbg.ref.ref.ref($p2, $p28, .str.37);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv_usb_alloc_urb_44: ref;

axiom ldv_usb_alloc_urb_44 == $sub.ref(0, 406159);

procedure ldv_usb_alloc_urb_44($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_44($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} {:cexpr "ldv_usb_alloc_urb_44:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1057} {:cexpr "ldv_usb_alloc_urb_44:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} ldv_check_alloc_flags($i1);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p2 := ldv_undef_ptr();
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_100:
    assume !assertsPassed;
    return;
}



const skb_tailroom: ref;

axiom skb_tailroom == $sub.ref(0, 407191);

procedure skb_tailroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_tailroom($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i1 := skb_is_nonlinear($p0);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1061} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i6, $i8);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $i4 := $i9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const skb_put: ref;

axiom skb_put == $sub.ref(0, 408223);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation skb_put($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} {:cexpr "skb_put:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} $p2 := external_alloc();
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const vnt_submit_rx_urb_complete: ref;

axiom vnt_submit_rx_urb_complete == $sub.ref(0, 409255);

procedure vnt_submit_rx_urb_complete($p0: ref);



const ldv_usb_submit_urb_520: ref;

axiom ldv_usb_submit_urb_520 == $sub.ref(0, 410287);

procedure ldv_usb_submit_urb_520($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_520($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} {:cexpr "ldv_usb_submit_urb_520:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} ldv_check_alloc_flags($i1);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1066} $p2 := ldv_undef_ptr();
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;
}



const vnt_rx_data: ref;

axiom vnt_rx_data == $sub.ref(0, 411319);

procedure vnt_rx_data($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const dev_alloc_skb___0: ref;

axiom dev_alloc_skb___0 == $sub.ref(0, 412351);

procedure dev_alloc_skb___0($i0: i32) returns ($r: ref);



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 413383);

procedure skb_headroom($p0: ref) returns ($r: i32);



const skb_push: ref;

axiom skb_push == $sub.ref(0, 414415);

procedure skb_push($p0: ref, $i1: i32) returns ($r: ref);



const skb_trim: ref;

axiom skb_trim == $sub.ref(0, 415447);

procedure skb_trim($p0: ref, $i1: i32);



const ldv_usb_submit_urb_519: ref;

axiom ldv_usb_submit_urb_519 == $sub.ref(0, 416479);

procedure ldv_usb_submit_urb_519($p0: ref, $i1: i32) returns ($r: i32);



const netdev_alloc_skb___0: ref;

axiom netdev_alloc_skb___0 == $sub.ref(0, 417511);

procedure netdev_alloc_skb___0($p0: ref, $i1: i32) returns ($r: ref);



const ldv___netdev_alloc_skb_511: ref;

axiom ldv___netdev_alloc_skb_511 == $sub.ref(0, 418543);

procedure ldv___netdev_alloc_skb_511($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);



const vnt_rf_rssi_to_dbm: ref;

axiom vnt_rf_rssi_to_dbm == $sub.ref(0, 419575);

procedure vnt_rf_rssi_to_dbm($p0: ref, $i1: i8, $p2: ref);



const skb_pull: ref;

axiom skb_pull == $sub.ref(0, 420607);

procedure skb_pull($p0: ref, $i1: i32) returns ($r: ref);



const ieee80211_has_protected: ref;

axiom ieee80211_has_protected == $sub.ref(0, 421639);

procedure ieee80211_has_protected($i0: i16) returns ($r: i32);



const IEEE80211_SKB_RXCB: ref;

axiom IEEE80211_SKB_RXCB == $sub.ref(0, 422671);

procedure IEEE80211_SKB_RXCB($p0: ref) returns ($r: ref);



const ieee80211_rx_irqsafe: ref;

axiom ieee80211_rx_irqsafe == $sub.ref(0, 423703);

procedure ieee80211_rx_irqsafe($p0: ref, $p1: ref);



const skb_is_nonlinear: ref;

axiom skb_is_nonlinear == $sub.ref(0, 424735);

procedure skb_is_nonlinear($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_nonlinear($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(132, 1));
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const netdev_alloc_skb: ref;

axiom netdev_alloc_skb == $sub.ref(0, 425767);

procedure netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation netdev_alloc_skb($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} {:cexpr "netdev_alloc_skb:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} $p2 := ldv___netdev_alloc_skb_36($p0, $i1, 32);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;
}



const ldv___netdev_alloc_skb_36: ref;

axiom ldv___netdev_alloc_skb_36 == $sub.ref(0, 426799);

procedure ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv___netdev_alloc_skb_36($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} {:cexpr "ldv___netdev_alloc_skb_36:arg:ldv_func_arg2"} boogie_si_record_i32($i1);
    call {:si_unique_call 1070} {:cexpr "ldv___netdev_alloc_skb_36:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} ldv_check_alloc_flags($i2);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1072} $p3 := ldv_undef_ptr();
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_109:
    assume !assertsPassed;
    return;
}



const vnt_tx_packet: ref;

axiom vnt_tx_packet == $sub.ref(0, 427831);

procedure vnt_tx_packet($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.63, $M.0, $M.24, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $CurrAddr, assertsPassed, $M.13, $M.12, $M.15, $M.14, $M.17, $M.16, $M.19, $M.18;



implementation vnt_tx_packet($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i16;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i16;
  var $i42: i16;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $i46: i8;
  var $i39: i8;
  var $i47: i8;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i24;
  var $i58: i24;
  var $i59: i24;
  var $p60: ref;
  var $p61: ref;
  var $i62: i8;
  var $i63: i64;
  var $i64: i64;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i16;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i16;
  var $i101: i32;
  var $i102: i16;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i32;
  var $i109: i16;
  var $p110: ref;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i114: i32;
  var $i115: i16;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i1;
  var $p123: ref;
  var $i124: i16;
  var $i125: i32;
  var $i126: i32;
  var $i127: i16;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i16;
  var $i132: i32;
  var $i133: i16;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i137: i16;
  var $i138: i32;
  var $i139: i32;
  var $i140: i16;
  var $p141: ref;
  var $p142: ref;
  var $i143: i16;
  var $i144: i16;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i16;
  var $i152: i16;
  var $i153: i32;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i16;
  var $i158: i32;
  var $i159: i32;
  var $i160: i16;
  var $p161: ref;
  var $i162: i8;
  var $p163: ref;
  var $i164: i16;
  var $i165: i32;
  var $i166: i16;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $i172: i32;
  var $i173: i16;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i179: i32;
  var $i180: i16;
  var $i181: i32;
  var $i182: i32;
  var $i183: i16;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i1;
  var $i202: i1;
  var $i203: i1;
  var $i204: i1;
  var $i205: i1;
  var $i206: i1;
  var $p207: ref;
  var $i208: i16;
  var $i209: i32;
  var $i210: i32;
  var $i211: i16;
  var $p212: ref;
  var $p214: ref;
  var $i215: i16;
  var $i216: i32;
  var $i217: i32;
  var $i218: i16;
  var $p219: ref;
  var $p220: ref;
  var $i221: i16;
  var $i222: i32;
  var $i223: i32;
  var $i224: i16;
  var $p225: ref;
  var $i226: i8;
  var $i213: i8;
  var $p227: ref;
  var $i228: i32;
  var $p229: ref;
  var $i230: i8;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $i234: i8;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i239: i16;
  var $i240: i32;
  var $i241: i16;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i8;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i249: i16;
  var $i250: i32;
  var $i251: i32;
  var $i252: i16;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i64;
  var $p257: ref;
  var $i258: i16;
  var $p259: ref;
  var $i260: i32;
  var $i261: i32;
  var $i262: i64;
  var $p263: ref;
  var $i264: i16;
  var $p265: ref;
  var $p267: ref;
  var $i268: i8;
  var $i269: i32;
  var $i270: i1;
  var $p271: ref;
  var $i272: i16;
  var $i273: i32;
  var $i274: i32;
  var $i275: i16;
  var $p276: ref;
  var $i277: i32;
  var $i278: i32;
  var $i279: i64;
  var $p280: ref;
  var $i281: i16;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i64;
  var $p286: ref;
  var $i287: i16;
  var $p288: ref;
  var $i289: i8;
  var $i266: i8;
  var $i290: i8;
  var $i291: i8;
  var $p292: ref;
  var $i293: i1;
  var $i294: i32;
  var $i295: i1;
  var $i296: i16;
  var $p297: ref;
  var $i298: i16;
  var $i299: i32;
  var $i300: i1;
  var $p301: ref;
  var $p302: ref;
  var $i303: i16;
  var $p304: ref;
  var $i305: i32;
  var $i306: i32;
  var $i307: i32;
  var $i308: i16;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i64;
  var $p315: ref;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $i320: i64;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i8;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $p331: ref;
  var $i332: i32;
  var $i333: i16;
  var $p334: ref;
  var $p335: ref;
  var $i336: i16;
  var $i337: i32;
  var $i338: i32;
  var $i339: i16;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $i343: i8;
  var $p344: ref;
  var $p345: ref;
  var $i346: i32;
  var $i347: i32;
  var $i348: i16;
  var $p349: ref;
  var $i350: i32;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $p355: ref;
  var $i71: i32;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var vslice_dummy_var_127: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $p4 := IEEE80211_SKB_CB($p1);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 18)), $mul.ref(0, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.63 := $store.ref($M.63, $p2, $0.ref);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} $p16 := ieee80211_get_tx_rate($p15, $p4);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 12)), $mul.ref(6, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    call {:si_unique_call 1077} {:cexpr "current_rate"} boogie_si_record_i16($i18);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2814, 1));
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i18);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i21, $i22);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i18);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $i34 := $ugt.i32($i33, 3);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i47 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} ldv_spin_lock();
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $p48 := vnt_get_free_context($p0);
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i49, 0);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(8, 1));
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, $p1);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p73, $i47);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p74, 0);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i76, 4);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p78, $i77);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p79, $i18);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} spin_unlock_irqrestore($p80, $u0);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(50, 1));
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(128, 1));
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    call {:si_unique_call 1086} {:cexpr "tx_body_size"} boogie_si_record_i16($i86);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i47);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i88 == 1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i32($i47);
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 1);
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i91 == 1);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i93 := $zext.i8.i32($i47);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i94 == 1);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i47);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 3);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p13, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i100);
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i103 := ieee80211_is_data($i102);
    call {:si_unique_call 1088} {:cexpr "tmp___1"} boogie_si_record_i32($i103);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i104 == 1);
    $p118 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(18, 1));
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p118, 8000);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 4);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i122 := $eq.i32($i121, 0);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i122} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p13, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $i131 := $load.i16($M.0, $p130);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i32.i16($i132);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} $i134 := ieee80211_has_retry($i133);
    call {:si_unique_call 1090} {:cexpr "tmp___2"} boogie_si_record_i32($i134);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i135} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p10, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i143 := $load.i16($M.0, $p142);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i144 := $and.i16($i143, 2047);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $i145 := $zext.i16.i32($i144);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 4);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i147 == 1);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, 0);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p10, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p150);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i152 := $and.i16($i151, 2047);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $i153 := $zext.i16.i32($i152);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $i154 := $and.i32($i153, 1);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $i155 := $ne.i32($i154, 0);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    assume {:branchcond $i155} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i162 := 0;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p13, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i164 := $load.i16($M.0, $p163);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i164);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $i167 := ieee80211_has_a4($i166);
    call {:si_unique_call 1092} {:cexpr "tmp___3"} boogie_si_record_i32($i167);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 131072);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $i178 := $ne.i32($i177, 0);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i179 := ieee80211_get_hdrlen_from_skb($p1);
    call {:si_unique_call 1094} {:cexpr "tmp___4"} boogie_si_record_i32($i179);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    $i180 := $trunc.i32.i16($i179);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $i181 := $zext.i16.i32($i180);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $i182 := $shl.i32($i181, 10);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $i183 := $trunc.i32.i16($i182);
    $p184 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p184, $i183);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $p186 := $bitcast.ref.ref($p185);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $i190 := $ne.i64($i189, 0);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i234 := 0;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(22, 1));
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p235, $i18);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i18);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i237 := $ugt.i32($i236, 6);
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    assume {:branchcond $i237} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    $i291 := 0;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(48, 1));
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p292, $i291);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i293 := $trunc.i8.i1($i234);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i294 := $zext.i1.i32($i293);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $i295 := $trunc.i8.i1($i162);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} $i296 := vnt_generate_tx_parameter($p48, $p82, $p2, $i294, $i295);
    call {:si_unique_call 1098} {:cexpr "duration_id"} boogie_si_record_i16($i296);
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(40, 1));
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i298 := $load.i16($M.0, $p297);
    call {:si_unique_call 1099} {:cexpr "tx_header_size"} boogie_si_record_i16($i298);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i299 := $zext.i16.i32($i298);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i300 := $eq.i32($i299, 0);
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i300} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    $p302 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $i303 := $load.i16($M.0, $p302);
    $p304 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p304, $i303);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i305 := $zext.i16.i32($i298);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i306 := $zext.i16.i32($i86);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i307 := $add.i32($i305, $i306);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i308 := $trunc.i32.i16($i307);
    call {:si_unique_call 1100} {:cexpr "tx_bytes"} boogie_si_record_i16($i308);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(24, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.0, $p309);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p311 := $bitcast.ref.ref($p310);
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $p313 := $load.ref($M.0, $p312);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    $i314 := $zext.i16.i64($i86);
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    cmdloc_dummy_var_45 := $M.0;
    call {:si_unique_call 1101} cmdloc_dummy_var_46 := $memcpy.i8(cmdloc_dummy_var_44, cmdloc_dummy_var_45, $p311, $p313, $i314, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_46;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $p315 := $add.ref($add.ref($p13, $mul.ref(0, 30)), $mul.ref(2, 1));
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p315, $i296);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $p317 := $bitcast.ref.ref($p316);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p317, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $p319 := $load.ref($M.0, $p318);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i320 := $p2i.ref.i64($p319);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i321 := $ne.i64($i320, 0);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($p13, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i336 := $load.i16($M.0, $p335);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i337 := $zext.i16.i32($i336);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i338 := $ashr.i32($i337, 4);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $i339 := $trunc.i32.i16($i338);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2834, 1));
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p340, $i339);
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(2, 1));
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p341, $i308);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(45, 1));
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $i343 := $load.i8($M.0, $p342);
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(1, 1));
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p344, $i343);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(0, 1));
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p345, 0);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i346 := $zext.i16.i32($i308);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i347 := $add.i32($i346, 4);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i348 := $trunc.i32.i16($i347);
    call {:si_unique_call 1103} {:cexpr "tx_bytes"} boogie_si_record_i16($i348);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(44, 1));
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p349, 1);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i350 := $zext.i16.i32($i348);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(32, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p351, $i350);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} ldv_spin_lock();
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $i352 := vnt_tx_context($p0, $p48);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 1106} {:cexpr "tmp___6"} boogie_si_record_i32($i352);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 3);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i353} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} spin_unlock_irqrestore($p355, $u0);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $r := $i71;
    return;

  $bb97:
    assume $i353 == 1;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    $p354 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} spin_unlock_irqrestore($p354, $u0);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 5);
    goto $bb21;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb91:
    assume $i321 == 1;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p323 := $bitcast.ref.ref($p322);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $p324 := $add.ref($add.ref($p323, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p324);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.0, $p326);
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i32($i327);
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i329 := $ne.i32($i328, 0);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i329 == 1;
    $p330 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(0, 1));
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p331 := $bitcast.ref.ref($p330);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i332 := $zext.i16.i32($i86);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i333 := $trunc.i32.i16($i332);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $p334 := $load.ref($M.63, $p2);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} vnt_fill_txkey($p48, $p331, $p325, $p1, $i333, $p334);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb88:
    assume $i300 == 1;
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p301, 0);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 12);
    goto $bb21;

  $bb76:
    assume $i237 == 1;
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p13, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i239 := $load.i16($M.0, $p238);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i239);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i241 := $trunc.i32.i16($i240);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i242 := ieee80211_is_data($i241);
    call {:si_unique_call 1096} {:cexpr "tmp___5"} boogie_si_record_i32($i242);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i243 := $ne.i32($i242, 0);
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    assume {:branchcond $i243} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    $i290 := 0;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i291 := $i290;
    goto $bb87;

  $bb78:
    assume $i243 == 1;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3000, 1));
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.0, $p244);
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 1);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i247} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i247 == 1);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(3000, 1));
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i268 := $load.i8($M.0, $p267);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i269 := $zext.i8.i32($i268);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 2);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    $i289 := 0;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i266 := $i289;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i290 := $i266;
    goto $bb86;

  $bb83:
    assume $i270 == 1;
    $p271 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i272 := $load.i16($M.0, $p271);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i273 := $zext.i16.i32($i272);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i274 := $or.i32($i273, 4096);
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i275 := $trunc.i32.i16($i274);
    $p276 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p276, $i275);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i277 := $zext.i16.i32($i18);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i278 := $add.i32($i277, $sub.i32(0, 7));
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i279 := $sext.i32.i64($i278);
    $p280 := $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref($i279, 2));
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $i281 := $load.i16($M.65, $p280);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2816, 1));
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p282, $i281);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i283 := $zext.i16.i32($i18);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i284 := $add.i32($i283, $sub.i32(0, 7));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $i285 := $sext.i32.i64($i284);
    $p286 := $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref($i285, 2));
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i287 := $load.i16($M.65, $p286);
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2818, 1));
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p288, $i287);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $i289 := 2;
    goto $bb85;

  $bb80:
    assume $i247 == 1;
    $p248 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $i249 := $load.i16($M.0, $p248);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i250 := $zext.i16.i32($i249);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i251 := $or.i32($i250, 2048);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i252 := $trunc.i32.i16($i251);
    $p253 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p253, $i252);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i254 := $zext.i16.i32($i18);
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i255 := $add.i32($i254, $sub.i32(0, 7));
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i256 := $sext.i32.i64($i255);
    $p257 := $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref($i256, 2));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $i258 := $load.i16($M.64, $p257);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2816, 1));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p259, $i258);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i260 := $zext.i16.i32($i18);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i261 := $add.i32($i260, $sub.i32(0, 7));
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i262 := $sext.i32.i64($i261);
    $p263 := $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref($i262, 2));
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i264 := $load.i16($M.64, $p263);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2818, 1));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p265, $i264);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i266 := 1;
    goto $bb82;

  $bb56:
    assume $i190 == 1;
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p192, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p196, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.0, $p197);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p198, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i201 := $slt.i32($i200, 1027076);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i202 := $slt.i32($i200, 1027077);
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    $i203 := $eq.i32($i200, 1027077);
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb63, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i203 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i226 := 0;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i213 := $i226;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i228 := $load.i32($M.0, $p227);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p194, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $i230 := $load.i8($M.0, $p229);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $i231 := $zext.i8.i32($i230);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $i232 := $add.i32($i228, $i231);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, $i232);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    $i234 := $i213;
    goto $bb75;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb64;

  $bb64:
    $p207 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i208 := $load.i16($M.0, $p207);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i208);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i210 := $or.i32($i209, 256);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    $i211 := $trunc.i32.i16($i210);
    $p212 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p212, $i211);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i213 := 0;
    goto $bb73;

  $bb61:
    assume $i202 == 1;
    $p220 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $i221 := $load.i16($M.0, $p220);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $i222 := $zext.i16.i32($i221);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $i223 := $or.i32($i222, 768);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i16($i223);
    $p225 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, $i224);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i226 := 1;
    goto $bb74;

  $bb59:
    assume $i201 == 1;
    assume {:verifier.code 0} true;
    $i204 := $slt.i32($i200, 1027074);
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i200, 1027074);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i205 == 1);
    goto $bb66;

  $bb69:
    assume $i205 == 1;
    $p214 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $i215 := $load.i16($M.0, $p214);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i32($i215);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $i217 := $or.i32($i216, 512);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i32.i16($i217);
    $p219 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(20, 1));
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p219, $i218);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i213 := 0;
    goto $bb73;

  $bb67:
    assume $i204 == 1;
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i200, 1027073);
    assume {:verifier.code 0} true;
    assume {:branchcond $i206} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i206 == 1);
    goto $bb66;

  $bb71:
    assume $i206 == 1;
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb53:
    assume $i178 == 1;
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i168 == 1;
    $p169 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.0, $p169);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i172 := $or.i32($i171, 1);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i32.i16($i172);
    $p174 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p174, $i173);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i155 == 1;
    $p156 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.0, $p156);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i157);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $i159 := $or.i32($i158, 128);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i16($i159);
    $p161 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p161, $i160);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $i162 := 1;
    goto $bb49;

  $bb44:
    assume $i147 == 1;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p148, 1);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb41:
    assume $i135 == 1;
    $p136 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i137 := $load.i16($M.0, $p136);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i138 := $zext.i16.i32($i137);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i139 := $or.i32($i138, 8);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i140 := $trunc.i32.i16($i139);
    $p141 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p141, $i140);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb38:
    assume $i122 == 1;
    $p123 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i124 := $load.i16($M.0, $p123);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    $i125 := $zext.i16.i32($i124);
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $i126 := $or.i32($i125, 2);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i127 := $trunc.i32.i16($i126);
    $p128 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p128, $i127);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p48, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 1);
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb35:
    assume $i104 == 1;
    $p105 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i107, 96);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i32.i16($i108);
    $p110 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p110, $i109);
    $p111 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.0, $p111);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, 16);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    $p116 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p116, $i115);
    $p117 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(18, 1));
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p117, 125);
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume $i97 == 1;
    $p98 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p98, 768);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i94 == 1;
    $p95 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, 512);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i91 == 1;
    $p92 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, 256);
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i88 == 1;
    $p89 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 178)), $mul.ref(4, 1)), $mul.ref(16, 1));
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p89, 0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb16:
    assume $i50 == 1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, $p51, .str);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, $p52, .str.17);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p53, .str.18);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, $p54, .str.19);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    $i57 := $load.i24($M.10, $p56);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i58 := $and.i24($i57, $sub.i24(0, 262144));
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i59 := $or.i24($i58, 825);
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, $p56, $i59);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, $p60, 0);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i62 := $load.i8($M.11, $p61);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    $i63 := $zext.i8.i64($i62);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $i64 := $and.i64($i63, 1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} $i65 := ldv__builtin_expect($i64, 0);
    call {:si_unique_call 1082} {:cexpr "tmp___0"} boogie_si_record_i64($i65);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(56, 1));
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} spin_unlock_irqrestore($p70, $u0);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $i71 := $sub.i32(0, 12);
    goto $bb21;

  $bb18:
    assume $i66 == 1;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(24, 1));
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p69, .str.19, .str.17);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 56)), $mul.ref(4, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 1);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i38 == 1);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref(0, 4)), $mul.ref(2, 1));
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i42 := $and.i16($i41, 2047);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := 3;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i39 := $i46;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i47 := $i39;
    goto $bb15;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i46 := 2;
    goto $bb14;

  $bb9:
    assume $i38 == 1;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb11;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(0, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p25, $mul.ref(0, 160)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 8);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb3;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2814, 1));
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p31, $i18);
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} vslice_dummy_var_127 := vnt_schedule_command($p0, 1);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ieee80211_is_data: ref;

axiom ieee80211_is_data == $sub.ref(0, 428863);

procedure ieee80211_is_data($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_data($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} {:cexpr "ieee80211_is_data:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 12);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 8);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_has_retry: ref;

axiom ieee80211_has_retry == $sub.ref(0, 429895);

procedure ieee80211_has_retry($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_has_retry($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} {:cexpr "ieee80211_has_retry:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 2048);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ieee80211_has_a4: ref;

axiom ieee80211_has_a4 == $sub.ref(0, 430927);

procedure ieee80211_has_a4($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_has_a4($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} {:cexpr "ieee80211_has_a4:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32(768);
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i1, $i2);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32(768);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i3, $i4);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ieee80211_get_hdrlen_from_skb: ref;

axiom ieee80211_get_hdrlen_from_skb == $sub.ref(0, 431959);

procedure ieee80211_get_hdrlen_from_skb($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_get_hdrlen_from_skb($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1112} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1113} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const vnt_generate_tx_parameter: ref;

axiom vnt_generate_tx_parameter == $sub.ref(0, 432991);

procedure vnt_generate_tx_parameter($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.63, $M.0;



implementation vnt_generate_tx_parameter($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i1) returns ($r: i16)
{
  var $i5: i8;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i16;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i16;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $i41: i1;
  var $i42: i1;
  var $i43: i16;
  var $i24: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} {:cexpr "vnt_generate_tx_parameter:arg:need_mic"} boogie_si_record_i32($i3);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i4);
    call {:si_unique_call 1115} {:cexpr "vnt_generate_tx_parameter:arg:need_rts"} boogie_si_record_i1($i4);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 2);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 3);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i3, 0);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 178)), $mul.ref(28, 1));
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i5);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i3, 0);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} $i43 := vnt_rxtx_ab($p0, $p40, $i41, $i42);
    call {:si_unique_call 1121} {:cexpr "tmp___1"} boogie_si_record_i16($i43);
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i24 := $i43;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb17:
    assume $i34 == 1;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 178)), $mul.ref(28, 1));
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 142)), $mul.ref(4, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    $M.63 := $store.ref($M.63, $p2, $p37);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i5);
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i3, 0);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 178)), $mul.ref(28, 1));
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i3, 0);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i33 := vnt_rxtx_cts($p0, $p31, $i32);
    call {:si_unique_call 1119} {:cexpr "tmp___0"} boogie_si_record_i16($i33);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i24 := $i33;
    goto $bb11;

  $bb13:
    assume $i25 == 1;
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 178)), $mul.ref(28, 1));
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 146)), $mul.ref(8, 1));
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $M.63 := $store.ref($M.63, $p2, $p28);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i3, 0);
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 178)), $mul.ref(28, 1));
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i3, 0);
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} $i23 := vnt_rxtx_rts($p0, $p21, $i22);
    call {:si_unique_call 1117} {:cexpr "tmp"} boogie_si_record_i16($i23);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb11;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 178)), $mul.ref(28, 1));
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 150)), $mul.ref(12, 1));
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.63 := $store.ref($M.63, $p2, $p18);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;
}



const vnt_fill_txkey: ref;

axiom vnt_fill_txkey == $sub.ref(0, 434023);

procedure vnt_fill_txkey($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16, $p5: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation vnt_fill_txkey($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i16, $p5: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i16;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i32;
  var $p20: ref;
  var $i21: i8;
  var $i22: i16;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i16;
  var $i69: i32;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i32;
  var $i89: i16;
  var $p90: ref;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $i94: i32;
  var $i95: i16;
  var $p96: ref;
  var $p97: ref;
  var $i98: i16;
  var $i99: i32;
  var $i100: i16;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p6 := $alloc($mul.ref(20, $zext.i32.i64(1)));
    call {:si_unique_call 1123} {:cexpr "vnt_fill_txkey:arg:payload_len"} boogie_si_record_i16($i4);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(24, 1));
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} $i9 := ieee80211_get_hdrlen_from_skb($p3);
    call {:si_unique_call 1125} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p8);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i9);
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i13 := ieee80211_get_hdrlen_from_skb($p3);
    call {:si_unique_call 1127} {:cexpr "tmp___0"} boogie_si_record_i32($i13);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i4);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i16($i13);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i14, $i16);
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    call {:si_unique_call 1128} {:cexpr "payload_len"} boogie_si_record_i16($i18);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(12, 1));
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i16($i21);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i19, $i23);
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    call {:si_unique_call 1129} {:cexpr "payload_len"} boogie_si_record_i16($i25);
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, 1027076);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, 1027077);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i27, 1027077);
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_47 := $M.0;
    cmdloc_dummy_var_48 := $M.0;
    call {:si_unique_call 1130} cmdloc_dummy_var_49 := $memcpy.i8(cmdloc_dummy_var_47, cmdloc_dummy_var_48, $p1, $p12, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_49;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p1, $mul.ref(3, 1));
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 1131} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p34, $p36, $i39, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(17, 1));
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 5);
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i43 == 1;
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p1, $mul.ref(8, 1));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1133} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p44, $p12, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref(11, 1));
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 1134} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p45, $p47, 5, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p5);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 89);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i25);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $i53 := __fswab16($i52);
    call {:si_unique_call 1136} {:cexpr "tmp___1"} boogie_si_record_i16($i53);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(14, 1));
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i53);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(2, 1));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} ether_addr_copy($p56, $p58);
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1138} ieee80211_get_key_tx_seq($p2, $p6);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p6, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 1139} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p60, $p64, 6, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i16($i67);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1140} $i69 := ieee80211_has_a4($i68);
    call {:si_unique_call 1141} {:cexpr "tmp___2"} boogie_si_record_i32($i69);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i69, 0);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i70 == 1);
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, 5632);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(20, 1));
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} ether_addr_copy($p74, $p76);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(26, 1));
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} ether_addr_copy($p78, $p80);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(16, 1));
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} ether_addr_copy($p82, $p84);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 51087);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(18, 1));
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i89);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(22, 1));
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, 15);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(38, 1));
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, $i95);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    $i98 := $load.i16($M.0, $p97);
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i98);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i16($i99);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $i101 := ieee80211_has_a4($i100);
    call {:si_unique_call 1146} {:cexpr "tmp___3"} boogie_si_record_i32($i101);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 1148} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p1, $p108, 16, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb27:
    assume $i102 == 1;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p8, $mul.ref(0, 30)), $mul.ref(24, 1));
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} ether_addr_copy($p104, $p106);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i70 == 1;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p71, 7168);
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb20:
    assume $i49 == 1;
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i27, 1027074);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i27, 1027074);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb9;

  $bb12:
    assume $i32 == 1;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} ieee80211_get_tkip_p2k($p2, $p3, $p1);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb10:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i27, 1027073);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb9;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const ieee80211_get_tkip_p2k: ref;

axiom ieee80211_get_tkip_p2k == $sub.ref(0, 435055);

procedure ieee80211_get_tkip_p2k($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation ieee80211_get_tkip_p2k($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 436087);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const ieee80211_get_key_tx_seq: ref;

axiom ieee80211_get_key_tx_seq == $sub.ref(0, 437119);

procedure ieee80211_get_key_tx_seq($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation ieee80211_get_key_tx_seq($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    return;
}



const vnt_rxtx_rts: ref;

axiom vnt_rxtx_rts == $sub.ref(0, 438151);

procedure vnt_rxtx_rts($p0: ref, $p1: ref, $i2: i1) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_rts($p0: ref, $p1: ref, $i2: i1) returns ($r: i16)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i16;
  var $i24: i16;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i16;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i16;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i32;
  var $i45: i8;
  var $i46: i32;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i16;
  var $i55: i32;
  var $i56: i16;
  var $p57: ref;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i16;
  var $p71: ref;
  var $i72: i16;
  var $i70: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1150} {:cexpr "vnt_rxtx_rts:arg:need_mic"} boogie_si_record_i1($i2);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_8889;

  corral_source_split_8889:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 150)), $mul.ref(12, 1));
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1151} {:cexpr "frame_len"} boogie_si_record_i32($i13);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    call {:si_unique_call 1152} {:cexpr "current_rate"} boogie_si_record_i16($i15);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    call {:si_unique_call 1153} {:cexpr "need_ack"} boogie_si_record_i8($i17);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i15);
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $i24 := vnt_get_rtscts_rsvtime_le($p6, 2, $i21, $i13, $i23);
    $p25 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 150)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i15);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i32 := vnt_get_rtscts_rsvtime_le($p6, 1, $i29, $i13, $i31);
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 150)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $i32);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i15);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i40 := vnt_get_rtscts_rsvtime_le($p6, 0, $i37, $i13, $i39);
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 150)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i40);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i43);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i8($i44);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i15);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i32.i16($i46);
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i17);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i49 := vnt_rxtx_rsvtime_le16($p6, $i45, $i13, $i47, $i48);
    $p50 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 150)), $mul.ref(0, 1)), $mul.ref(10, 1));
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $i49);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i17);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i56 := vnt_rxtx_rsvtime_le16($p6, 1, $i13, $i54, $i55);
    $p57 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 150)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $i56);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i8.i1($i3);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $p63 := $p10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(48, 1));
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.0, $p64);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p63);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} $i72 := vnt_rxtx_rts_g_head($p0, $p71);
    call {:si_unique_call 1162} {:cexpr "tmp___0"} boogie_si_record_i16($i72);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $i70 := $i72;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $r := $i70;
    return;

  $bb4:
    assume $i67 == 1;
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p63);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i69 := vnt_rxtx_rts_g_fb_head($p0, $p68);
    call {:si_unique_call 1160} {:cexpr "tmp"} boogie_si_record_i16($i69);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb6;

  $bb1:
    assume $i58 == 1;
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p1);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 150)), $mul.ref(12, 1));
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 138)), $mul.ref(48, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p63 := $p62;
    goto $bb3;
}



const vnt_rxtx_cts: ref;

axiom vnt_rxtx_cts == $sub.ref(0, 439183);

procedure vnt_rxtx_cts($p0: ref, $p1: ref, $i2: i1) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_cts($p0: ref, $p1: ref, $i2: i1) returns ($r: i16)
{
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i16;
  var $p16: ref;
  var $i17: i8;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i16;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i8;
  var $i38: i32;
  var $i39: i16;
  var $i40: i16;
  var $p41: ref;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $i52: i16;
  var $i54: i16;
  var $i53: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 1163} {:cexpr "vnt_rxtx_cts:arg:need_mic"} boogie_si_record_i1($i2);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p1);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 146)), $mul.ref(8, 1));
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 1164} {:cexpr "frame_len"} boogie_si_record_i32($i13);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    call {:si_unique_call 1165} {:cexpr "current_rate"} boogie_si_record_i16($i15);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    call {:si_unique_call 1166} {:cexpr "need_ack"} boogie_si_record_i8($i17);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i15);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i17);
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $i25 := vnt_rxtx_rsvtime_le16($p6, $i21, $i13, $i23, $i24);
    $p26 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 146)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, $i25);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i17);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $i32 := vnt_rxtx_rsvtime_le16($p6, 1, $i13, $i30, $i31);
    $p33 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 146)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $i32);
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i8($i36);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i15);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i40 := vnt_get_rtscts_rsvtime_le($p6, 3, $i37, $i13, $i39);
    $p41 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 146)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i40);
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i8.i1($i3);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $p47 := $p10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(48, 1));
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $i54 := vnt_fill_cts_head($p0, $p47);
    call {:si_unique_call 1173} {:cexpr "tmp___0"} boogie_si_record_i16($i54);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $i53 := $i54;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;

  $bb4:
    assume $i51 == 1;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $i52 := vnt_fill_cts_fb_head($p0, $p47);
    call {:si_unique_call 1171} {:cexpr "tmp"} boogie_si_record_i16($i52);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb6;

  $bb1:
    assume $i42 == 1;
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p1);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 146)), $mul.ref(8, 1));
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 138)), $mul.ref(48, 1));
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p47 := $p46;
    goto $bb3;
}



const vnt_rxtx_ab: ref;

axiom vnt_rxtx_ab == $sub.ref(0, 440215);

procedure vnt_rxtx_ab($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_ab($p0: ref, $p1: ref, $i2: i1, $i3: i1) returns ($r: i16)
{
  var $i4: i8;
  var $i5: i8;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i16;
  var $p18: ref;
  var $i19: i8;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i16;
  var $p28: ref;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;
  var $i37: i8;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i16;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i16;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $i65: i16;
  var $p67: ref;
  var $i68: i16;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i16;
  var $p75: ref;
  var $i76: i16;
  var $i66: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i2);
    call {:si_unique_call 1174} {:cexpr "vnt_rxtx_ab:arg:need_rts"} boogie_si_record_i1($i2);
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i8($i3);
    call {:si_unique_call 1175} {:cexpr "vnt_rxtx_ab:arg:need_mic"} boogie_si_record_i1($i3);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 142)), $mul.ref(4, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    call {:si_unique_call 1176} {:cexpr "frame_len"} boogie_si_record_i32($i15);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    call {:si_unique_call 1177} {:cexpr "current_rate"} boogie_si_record_i16($i17);
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    call {:si_unique_call 1178} {:cexpr "need_ack"} boogie_si_record_i8($i19);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i8($i22);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i17);
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i19);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $i27 := vnt_rxtx_rsvtime_le16($p8, $i23, $i15, $i25, $i26);
    $p28 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 142)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i5);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $p34 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i8.i1($i4);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 0);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p34);
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i76 := vnt_rxtx_datahead_ab($p0, $p75);
    call {:si_unique_call 1189} {:cexpr "tmp___2"} boogie_si_record_i16($i76);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $i66 := $i76;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $r := $i66;
    return;

  $bb17:
    assume $i72 == 1;
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p34);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i74 := vnt_rxtx_datahead_a_fb($p0, $p73);
    call {:si_unique_call 1187} {:cexpr "tmp___1"} boogie_si_record_i16($i74);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i66 := $i74;
    goto $bb14;

  $bb4:
    assume $i35 == 1;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i37);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i38, 1);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i39 == 1);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i17);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i54 := vnt_get_rtscts_rsvtime_le($p8, 2, $i51, $i15, $i53);
    $p55 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 142)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i54);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(48, 1));
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p34);
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i68 := vnt_rxtx_rts_ab_head($p0, $p67);
    call {:si_unique_call 1185} {:cexpr "tmp___0"} boogie_si_record_i16($i68);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i66 := $i68;
    goto $bb14;

  $bb9:
    assume $i59 == 1;
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb11;

  $bb12:
    assume $i63 == 1;
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p34);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i65 := vnt_rxtx_rts_a_fb_head($p0, $p64);
    call {:si_unique_call 1183} {:cexpr "tmp"} boogie_si_record_i16($i65);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb14;

  $bb6:
    assume $i39 == 1;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i17);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i46 := vnt_get_rtscts_rsvtime_le($p8, 0, $i43, $i15, $i45);
    $p47 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 142)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i46);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 142)), $mul.ref(4, 1));
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 138)), $mul.ref(48, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p34 := $p33;
    goto $bb3;
}



const vnt_rxtx_rsvtime_le16: ref;

axiom vnt_rxtx_rsvtime_le16 == $sub.ref(0, 441247);

procedure vnt_rxtx_rsvtime_le16($p0: ref, $i1: i8, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation vnt_rxtx_rsvtime_le16($p0: ref, $i1: i8, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i32;
  var $i6: i8;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} {:cexpr "vnt_rxtx_rsvtime_le16:arg:pkt_type"} boogie_si_record_i8($i1);
    call {:si_unique_call 1191} {:cexpr "vnt_rxtx_rsvtime_le16:arg:frame_length"} boogie_si_record_i32($i2);
    call {:si_unique_call 1192} {:cexpr "vnt_rxtx_rsvtime_le16:arg:rate"} boogie_si_record_i16($i3);
    call {:si_unique_call 1193} {:cexpr "vnt_rxtx_rsvtime_le16:arg:need_ack"} boogie_si_record_i32($i4);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i1);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i8($i5);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i3);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} $i9 := vnt_get_rsvtime($p0, $i6, $i2, $i8, $i4);
    call {:si_unique_call 1195} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const vnt_get_rtscts_rsvtime_le: ref;

axiom vnt_get_rtscts_rsvtime_le == $sub.ref(0, 442279);

procedure vnt_get_rtscts_rsvtime_le($p0: ref, $i1: i8, $i2: i8, $i3: i32, $i4: i16) returns ($r: i16);
  free requires assertsPassed;



implementation vnt_get_rtscts_rsvtime_le($p0: ref, $i1: i8, $i2: i8, $i3: i32, $i4: i16) returns ($r: i16)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i16;
  var $i37: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i8;
  var $i45: i32;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i8;
  var $i58: i32;
  var $i59: i8;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i8;
  var $i69: i32;
  var $i70: i8;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i16;
  var $i75: i32;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i8;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i8;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $p92: ref;
  var $i93: i8;
  var $i94: i32;
  var $i95: i8;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $i99: i8;
  var $i100: i32;
  var $i101: i16;
  var $i102: i32;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i8;
  var $i110: i32;
  var $i111: i8;
  var $i112: i32;
  var $i113: i8;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i16;
  var $i118: i32;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i8;
  var $i123: i32;
  var $i124: i8;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i16;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i32;
  var $i136: i16;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i138: i32;
  var $i139: i32;
  var $i140: i32;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i16;
  var $i137: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} {:cexpr "vnt_get_rtscts_rsvtime_le:arg:rsv_type"} boogie_si_record_i8($i1);
    call {:si_unique_call 1197} {:cexpr "vnt_get_rtscts_rsvtime_le:arg:pkt_type"} boogie_si_record_i8($i2);
    call {:si_unique_call 1198} {:cexpr "vnt_get_rtscts_rsvtime_le:arg:frame_length"} boogie_si_record_i32($i3);
    call {:si_unique_call 1199} {:cexpr "vnt_get_rtscts_rsvtime_le:arg:current_rate"} boogie_si_record_i16($i4);
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i2);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i4);
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $i13 := vnt_get_frame_time($i8, $i10, $i3, $i12);
    call {:si_unique_call 1201} {:cexpr "data_time"} boogie_si_record_i32($i13);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i1);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i42 == 1);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i1);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 2);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i80 == 1);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i32($i1);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 3);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i103, $i104, $i105 := 0, 0, 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i76, $i77, $i78 := $i103, $i104, $i105;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i38, $i39, $i40 := $i76, $i77, $i78;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i138 := $add.i32($i38, $i39);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i139 := $add.i32($i138, $i40);
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i140 := $add.i32($i139, $i13);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i143 := $mul.i32($i142, 3);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i140, $i143);
    call {:si_unique_call 1206} {:cexpr "rrv_time"} boogie_si_record_i32($i144);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i32.i16($i144);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i137 := $i145;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $r := $i137;
    return;

  $bb10:
    assume $i107 == 1;
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.0, $p108);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i32($i109);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i32.i8($i110);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i2);
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i8($i112);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} $i118 := vnt_get_frame_time($i111, $i113, 14, $i117);
    call {:si_unique_call 1218} {:cexpr "cts_time"} boogie_si_record_i32($i118);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i32.i8($i121);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $i123 := $zext.i8.i32($i2);
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $i124 := $trunc.i32.i8($i123);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $i128 := $trunc.i32.i16($i127);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i129 := vnt_get_frame_time($i122, $i124, 14, $i128);
    call {:si_unique_call 1220} {:cexpr "ack_time"} boogie_si_record_i32($i129);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i118, $i129);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i130, $i13);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $i134 := $mul.i32($i133, 2);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $i135 := $add.i32($i131, $i134);
    call {:si_unique_call 1221} {:cexpr "rrv_time"} boogie_si_record_i32($i135);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i16($i135);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $i137 := $i136;
    goto $bb12;

  $bb7:
    assume $i80 == 1;
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.0, $p81);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i32($i82);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i32.i8($i83);
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i2);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i32($i88);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i91 := vnt_get_frame_time($i84, $i86, 20, $i90);
    call {:si_unique_call 1214} {:cexpr "rts_time"} boogie_si_record_i32($i91);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i32($i93);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i8($i94);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i2);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.0, $p98);
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i32($i99);
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i16($i100);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i102 := vnt_get_frame_time($i95, $i97, 14, $i101);
    call {:si_unique_call 1216} {:cexpr "ack_time"} boogie_si_record_i32($i102);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i103, $i104, $i105 := $i91, $i102, $i102;
    goto $bb9;

  $bb4:
    assume $i42 == 1;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $i44 := $load.i8($M.0, $p43);
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i44);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i8($i45);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i2);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i53 := vnt_get_frame_time($i46, $i48, 20, $i52);
    call {:si_unique_call 1208} {:cexpr "rts_time"} boogie_si_record_i32($i53);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i57 := $trunc.i32.i8($i56);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i2);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i64 := vnt_get_frame_time($i57, $i59, 14, $i63);
    call {:si_unique_call 1210} {:cexpr "cts_time"} boogie_si_record_i32($i64);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i32($i2);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i8($i69);
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i74 := $trunc.i32.i16($i73);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $i75 := vnt_get_frame_time($i68, $i70, 14, $i74);
    call {:si_unique_call 1212} {:cexpr "ack_time"} boogie_si_record_i32($i75);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $i76, $i77, $i78 := $i53, $i64, $i75;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i2);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i26 := vnt_get_frame_time($i19, $i21, 20, $i25);
    call {:si_unique_call 1203} {:cexpr "rts_time"} boogie_si_record_i32($i26);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i8($i29);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i2);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i16($i35);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i37 := vnt_get_frame_time($i30, $i32, 14, $i36);
    call {:si_unique_call 1205} {:cexpr "ack_time"} boogie_si_record_i32($i37);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i38, $i39, $i40 := $i26, $i37, $i37;
    goto $bb3;
}



const vnt_rxtx_rts_a_fb_head: ref;

axiom vnt_rxtx_rts_a_fb_head == $sub.ref(0, 443311);

procedure vnt_rxtx_rts_a_fb_head($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_rts_a_fb_head($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i16;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i16;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $p39: ref;
  var $i40: i16;
  var $i41: i32;
  var $i42: i16;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $p51: ref;
  var $i52: i16;
  var vslice_dummy_var_128: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 1222} {:cexpr "current_rate"} boogie_si_record_i16($i6);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32(20);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 70)), $mul.ref(0, 1));
    goto corral_source_split_9287;

  corral_source_split_9287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} vnt_get_phy_field($p4, $i7, $i11, $i15, $p16);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i6);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i23 := vnt_get_rtscts_duration_le($p0, 2, $i20, $i22);
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 70)), $mul.ref(4, 1));
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i23);
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2816, 1));
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i33 := vnt_get_rtscts_duration_le($p0, 5, $i28, $i32);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 70)), $mul.ref(8, 1));
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, $i33);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2818, 1));
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $i40 := $load.i16($M.0, $p39);
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i40);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $i43 := vnt_get_rtscts_duration_le($p0, 7, $i38, $i42);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 70)), $mul.ref(10, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i43);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 70)), $mul.ref(12, 1));
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 70)), $mul.ref(4, 1));
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} vslice_dummy_var_128 := vnt_fill_ieee80211_rts($p0, $p45, $i49);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 70)), $mul.ref(28, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i52 := vnt_rxtx_datahead_a_fb($p0, $p51);
    call {:si_unique_call 1229} {:cexpr "tmp"} boogie_si_record_i16($i52);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;
}



const vnt_rxtx_rts_ab_head: ref;

axiom vnt_rxtx_rts_ab_head == $sub.ref(0, 444343);

procedure vnt_rxtx_rts_ab_head($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_rts_ab_head($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i8;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i8;
  var $i21: i32;
  var $i22: i16;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i16;
  var $i28: i32;
  var $i29: i16;
  var $p31: ref;
  var $i32: i16;
  var vslice_dummy_var_129: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 1230} {:cexpr "current_rate"} boogie_si_record_i16($i6);
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32(20);
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i32.i8($i14);
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 62)), $mul.ref(0, 1));
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} vnt_get_phy_field($p4, $i7, $i11, $i15, $p16);
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i8($i19);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i6);
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $i23 := vnt_get_rtscts_duration_le($p0, 2, $i20, $i22);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 62)), $mul.ref(4, 1));
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i23);
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 62)), $mul.ref(8, 1));
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 62)), $mul.ref(4, 1));
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $i27 := $load.i16($M.0, $p26);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i27);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_129 := vnt_fill_ieee80211_rts($p0, $p25, $i29);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 62)), $mul.ref(24, 1));
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $i32 := vnt_rxtx_datahead_ab($p0, $p31);
    call {:si_unique_call 1235} {:cexpr "tmp"} boogie_si_record_i16($i32);
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $r := $i32;
    return;
}



const vnt_rxtx_datahead_a_fb: ref;

axiom vnt_rxtx_datahead_a_fb == $sub.ref(0, 445375);

procedure vnt_rxtx_datahead_a_fb($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_datahead_a_fb($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $i10: i8;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i16;
  var $p22: ref;
  var $i23: i32;
  var $i24: i8;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $i28: i32;
  var $i29: i8;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $i33: i32;
  var $i34: i16;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i16;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 1236} {:cexpr "rate"} boogie_si_record_i16($i6);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    call {:si_unique_call 1237} {:cexpr "pkt_type"} boogie_si_record_i8($i8);
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 1238} {:cexpr "need_ack"} boogie_si_record_i8($i10);
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 1239} {:cexpr "frame_len"} boogie_si_record_i32($i12);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i6);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i8);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 42)), $mul.ref(0, 1));
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} vnt_get_phy_field($p4, $i12, $i14, $i16, $p17);
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i8);
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i10);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} $i21 := vnt_get_duration_le($p4, $i19, $i20);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 42)), $mul.ref(4, 1));
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, $i21);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i8);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i10);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} $i26 := vnt_get_duration_le($p4, $i24, $i25);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 42)), $mul.ref(8, 1));
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i26);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i8);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i8($i28);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i10);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} $i31 := vnt_get_duration_le($p4, $i29, $i30);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 42)), $mul.ref(10, 1));
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i31);
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i6);
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i35 := vnt_time_stamp_off($p4, $i34);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 42)), $mul.ref(6, 1));
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i35);
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 42)), $mul.ref(12, 1));
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i38 := vnt_mac_hdr_pos($p0, $p37);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(40, 1));
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 42)), $mul.ref(4, 1));
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;
}



const vnt_rxtx_datahead_ab: ref;

axiom vnt_rxtx_datahead_ab == $sub.ref(0, 446407);

procedure vnt_rxtx_datahead_ab($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_datahead_ab($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i16;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i8;
  var $i39: i32;
  var $i40: i16;
  var $p41: ref;
  var $i42: i32;
  var $i43: i16;
  var $i44: i16;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $p48: ref;
  var $p49: ref;
  var $i50: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(8, 1));
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 1246} {:cexpr "frame_len"} boogie_si_record_i32($i11);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    call {:si_unique_call 1247} {:cexpr "rate"} boogie_si_record_i16($i13);
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 1248} {:cexpr "need_ack"} boogie_si_record_i8($i15);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i13);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 38)), $mul.ref(0, 1));
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} vnt_get_phy_field($p4, $i11, $i17, $i21, $p22);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} $i27 := ieee80211_is_pspoll($i26);
    call {:si_unique_call 1251} {:cexpr "tmp"} boogie_si_record_i32($i27);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i28 == 1);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_9453;

  corral_source_split_9453:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i8($i37);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i15);
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $i40 := vnt_get_duration_le($p4, $i38, $i39);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 38)), $mul.ref(4, 1));
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p41, $i40);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i13);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i44 := vnt_time_stamp_off($p4, $i43);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 38)), $mul.ref(6, 1));
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $i44);
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 38)), $mul.ref(8, 1));
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $i47 := vnt_mac_hdr_pos($p0, $p46);
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(40, 1));
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, $i47);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 38)), $mul.ref(4, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2832, 1));
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i31, 49152);
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i16($i32);
    call {:si_unique_call 1252} {:cexpr "dur"} boogie_si_record_i16($i33);
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 38)), $mul.ref(4, 1));
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, $i33);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ieee80211_is_pspoll: ref;

axiom ieee80211_is_pspoll == $sub.ref(0, 447439);

procedure ieee80211_is_pspoll($i0: i16) returns ($r: i32);
  free requires assertsPassed;



implementation ieee80211_is_pspoll($i0: i16) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} {:cexpr "ieee80211_is_pspoll:arg:fc"} boogie_si_record_i16($i0);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_9473;

  corral_source_split_9473:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i1, 252);
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 164);
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const vnt_mac_hdr_pos: ref;

axiom vnt_mac_hdr_pos == $sub.ref(0, 448471);

procedure vnt_mac_hdr_pos($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_mac_hdr_pos($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i12: i64;
  var $i13: i16;
  var $i14: i32;
  var $i15: i64;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i11: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(50, 1));
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 1));
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(24, 1));
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $p1);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(24, 1));
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p5);
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i16($i12);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p4);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i64.i16($i15);
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $i18 := $sub.i32($i14, $i17);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i11 := $i19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const vnt_get_rtscts_duration_le: ref;

axiom vnt_get_rtscts_duration_le == $sub.ref(0, 449503);

procedure vnt_get_rtscts_duration_le($p0: ref, $i1: i8, $i2: i8, $i3: i16) returns ($r: i16);
  free requires assertsPassed;



implementation vnt_get_rtscts_duration_le($p0: ref, $i1: i8, $i2: i8, $i3: i16) returns ($r: i16)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i8;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i8;
  var $i50: i32;
  var $i51: i8;
  var $p52: ref;
  var $i53: i8;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i8;
  var $i59: i32;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i8;
  var $i70: i32;
  var $i71: i16;
  var $i72: i32;
  var $i73: i32;
  var $p74: ref;
  var $i75: i32;
  var $i76: i32;
  var $i45: i32;
  var $i77: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} {:cexpr "vnt_get_rtscts_duration_le:arg:dur_type"} boogie_si_record_i8($i1);
    call {:si_unique_call 1258} {:cexpr "vnt_get_rtscts_duration_le:arg:pkt_type"} boogie_si_record_i8($i2);
    call {:si_unique_call 1259} {:cexpr "vnt_get_rtscts_duration_le:arg:rate"} boogie_si_record_i16($i3);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1260} {:cexpr "frame_length"} boogie_si_record_i32($i8);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 1261} {:cexpr "need_ack"} boogie_si_record_i8($i10);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i11, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i11, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i11, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i11, 9);
    assume {:verifier.code 0} true;
    assume {:branchcond $i16} true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i45 := 0;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i16($i45);
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $r := $i77;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i2);
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i8($i68);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i3);
    goto corral_source_split_9537;

  corral_source_split_9537:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i10);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $i73 := vnt_get_rsvtime($p6, $i69, $i8, $i71, $i72);
    call {:si_unique_call 1268} {:cexpr "tmp___1"} boogie_si_record_i32($i73);
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i75 := $load.i32($M.0, $p74);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i75, $i73);
    call {:si_unique_call 1269} {:cexpr "dur_time"} boogie_si_record_i32($i76);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i45 := $i76;
    goto $bb32;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i2);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i8($i50);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.0, $p52);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i32($i53);
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $i56 := vnt_get_frame_time($i49, $i51, 14, $i55);
    call {:si_unique_call 1263} {:cexpr "cts_time"} boogie_si_record_i32($i56);
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i2);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i3);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i32($i10);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $i62 := vnt_get_rsvtime($p6, $i58, $i8, $i60, $i61);
    call {:si_unique_call 1265} {:cexpr "tmp___0"} boogie_si_record_i32($i62);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i65 := $mul.i32($i64, 2);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i65, $i56);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $i67 := $add.i32($i66, $i62);
    call {:si_unique_call 1266} {:cexpr "dur_time"} boogie_si_record_i32($i67);
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i45 := $i67;
    goto $bb32;

  $bb4:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i11, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_9547;

  corral_source_split_9547:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i2);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i8($i27);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} $i33 := vnt_get_frame_time($i26, $i28, 14, $i32);
    call {:si_unique_call 1271} {:cexpr "cts_time"} boogie_si_record_i32($i33);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i3);
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i32($i10);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $i39 := vnt_get_rsvtime($p6, $i35, $i8, $i37, $i38);
    call {:si_unique_call 1273} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 2);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $i33);
    goto corral_source_split_9565;

  corral_source_split_9565:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i43, $i39);
    call {:si_unique_call 1274} {:cexpr "dur_time"} boogie_si_record_i32($i44);
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb32;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb2:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i11, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i11, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i11, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb24:
    assume $i20 == 1;
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb22:
    assume $i19 == 1;
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb20:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i11, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb27:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i11, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb15;

  $bb30:
    assume $i22 == 1;
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    goto $bb29;
}



const vnt_fill_ieee80211_rts: ref;

axiom vnt_fill_ieee80211_rts == $sub.ref(0, 450535);

procedure vnt_fill_ieee80211_rts($p0: ref, $p1: ref, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_fill_ieee80211_rts($p0: ref, $p1: ref, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} {:cexpr "vnt_fill_ieee80211_rts:arg:duration"} boogie_si_record_i16($i2);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(8, 1));
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p8, $i2);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, 180);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 30)), $mul.ref(4, 1));
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} ether_addr_copy($p11, $p13);
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(10, 1));
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p7, $mul.ref(0, 30)), $mul.ref(10, 1));
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} ether_addr_copy($p15, $p17);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const vnt_get_rsvtime: ref;

axiom vnt_get_rsvtime == $sub.ref(0, 451567);

procedure vnt_get_rsvtime($p0: ref, $i1: i8, $i2: i32, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation vnt_get_rsvtime($p0: ref, $i1: i8, $i2: i32, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i8;
  var $i9: i32;
  var $i10: i8;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i8;
  var $i32: i32;
  var $i33: i8;
  var $p34: ref;
  var $i35: i8;
  var $i36: i32;
  var $i37: i16;
  var $i38: i32;
  var $i27: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} {:cexpr "vnt_get_rsvtime:arg:pkt_type"} boogie_si_record_i8($i1);
    call {:si_unique_call 1279} {:cexpr "vnt_get_rsvtime:arg:frame_length"} boogie_si_record_i32($i2);
    call {:si_unique_call 1280} {:cexpr "vnt_get_rsvtime:arg:rate"} boogie_si_record_i16($i3);
    call {:si_unique_call 1281} {:cexpr "vnt_get_rsvtime:arg:need_ack"} boogie_si_record_i32($i4);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i7);
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i1);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i8($i9);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i3);
    goto corral_source_split_9605;

  corral_source_split_9605:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $i13 := vnt_get_frame_time($i8, $i10, $i2, $i12);
    call {:si_unique_call 1283} {:cexpr "data_time"} boogie_si_record_i32($i13);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i1);
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i8($i30);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i1);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i32.i8($i32);
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i35);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i32.i16($i36);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $i38 := vnt_get_frame_time($i31, $i33, 14, $i37);
    call {:si_unique_call 1287} {:cexpr "ack_time"} boogie_si_record_i32($i38);
    assume {:verifier.code 0} true;
    $i27 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i4, 0);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i44 := $i13;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb4:
    assume $i39 == 1;
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2456, 1));
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, $i13);
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $i43 := $add.i32($i42, $i27);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2738, 1));
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i1);
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $i26 := vnt_get_frame_time($i19, $i21, 14, $i25);
    call {:si_unique_call 1285} {:cexpr "ack_time"} boogie_si_record_i32($i26);
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb3;
}



const vnt_fill_cts_fb_head: ref;

axiom vnt_fill_cts_fb_head == $sub.ref(0, 452599);

procedure vnt_fill_cts_fb_head($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_fill_cts_fb_head($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i8;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i16;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i8;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i16;
  var $i39: i16;
  var $p40: ref;
  var $p41: ref;
  var $i42: i16;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 1288} {:cexpr "current_rate"} boogie_si_record_i16($i7);
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(0, 1));
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} vnt_get_phy_field($p4, 14, $i11, 1, $p12);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i7);
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $i19 := vnt_get_rtscts_duration_le($p0, 3, $i16, $i18);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(4, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i19);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i23);
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2816, 1));
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $i29 := vnt_get_rtscts_duration_le($p0, 8, $i24, $i28);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(8, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p30, $i29);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i8($i33);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2818, 1));
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $i39 := vnt_get_rtscts_duration_le($p0, 9, $i34, $i38);
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(10, 1));
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $i39);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(4, 1));
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i42 := $load.i16($M.0, $p41);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(12, 1)), $mul.ref(2, 1));
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i42);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(12, 1)), $mul.ref(0, 1));
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, 196);
    goto corral_source_split_9696;

  corral_source_split_9696:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(12, 1)), $mul.ref(4, 1));
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2417, 1));
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} ether_addr_copy($p49, $p51);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 74)), $mul.ref(24, 1));
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $i53 := vnt_rxtx_datahead_g_fb($p0, $p52);
    call {:si_unique_call 1295} {:cexpr "tmp"} boogie_si_record_i16($i53);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    $r := $i53;
    return;
}



const vnt_fill_cts_head: ref;

axiom vnt_fill_cts_head == $sub.ref(0, 453631);

procedure vnt_fill_cts_head($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_fill_cts_head($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    call {:si_unique_call 1296} {:cexpr "current_rate"} boogie_si_record_i16($i7);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 66)), $mul.ref(0, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} vnt_get_phy_field($p4, 14, $i11, 1, $p12);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i7);
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $i19 := vnt_get_rtscts_duration_le($p0, 3, $i16, $i18);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 66)), $mul.ref(4, 1));
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i19);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 66)), $mul.ref(4, 1));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 66)), $mul.ref(8, 1)), $mul.ref(2, 1));
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i22);
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 66)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, 196);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 66)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2417, 1));
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} ether_addr_copy($p29, $p31);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 66)), $mul.ref(20, 1));
    goto corral_source_split_9738;

  corral_source_split_9738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $i33 := vnt_rxtx_datahead_g($p0, $p32);
    call {:si_unique_call 1301} {:cexpr "tmp"} boogie_si_record_i16($i33);
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;
}



const vnt_rxtx_datahead_g: ref;

axiom vnt_rxtx_datahead_g == $sub.ref(0, 454663);

procedure vnt_rxtx_datahead_g($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_datahead_g($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i16;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i8;
  var $i45: i32;
  var $i46: i16;
  var $p47: ref;
  var $i48: i32;
  var $i49: i16;
  var $p50: ref;
  var $i51: i32;
  var $i52: i16;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i16;
  var $i59: i16;
  var $p60: ref;
  var $p61: ref;
  var $i62: i16;
  var $p63: ref;
  var $p64: ref;
  var $i65: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(8, 1));
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 1302} {:cexpr "frame_len"} boogie_si_record_i32($i11);
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    call {:si_unique_call 1303} {:cexpr "rate"} boogie_si_record_i16($i13);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    call {:si_unique_call 1304} {:cexpr "need_ack"} boogie_si_record_i8($i15);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i13);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(4, 1));
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} vnt_get_phy_field($p4, $i11, $i17, $i21, $p22);
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(0, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} vnt_get_phy_field($p4, $i11, $i26, 1, $p27);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p9, $mul.ref(0, 30)), $mul.ref(0, 1));
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $i32 := ieee80211_is_pspoll($i31);
    call {:si_unique_call 1308} {:cexpr "tmp"} boogie_si_record_i32($i32);
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i33 == 1);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i8($i43);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $i45 := $zext.i8.i32($i15);
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $i46 := vnt_get_duration_le($p4, $i44, $i45);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(10, 1));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i46);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i15);
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} $i49 := vnt_get_duration_le($p4, 1, $i48);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(8, 1));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $i49);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i13);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} $i53 := vnt_time_stamp_off($p4, $i52);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(14, 1));
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i53);
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $i59 := vnt_time_stamp_off($p4, $i58);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(12, 1));
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p60, $i59);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(16, 1));
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $i62 := vnt_mac_hdr_pos($p0, $p61);
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(40, 1));
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, $i62);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(10, 1));
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p64);
    goto corral_source_split_9818;

  corral_source_split_9818:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  $bb1:
    assume $i33 == 1;
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2832, 1));
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 49152);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    call {:si_unique_call 1309} {:cexpr "dur"} boogie_si_record_i16($i38);
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(10, 1));
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 46)), $mul.ref(8, 1));
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $i38);
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const vnt_rxtx_datahead_g_fb: ref;

axiom vnt_rxtx_datahead_g_fb == $sub.ref(0, 455695);

procedure vnt_rxtx_datahead_g_fb($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_datahead_g_fb($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $i14: i8;
  var $i15: i32;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i16;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i16;
  var $p29: ref;
  var $i30: i32;
  var $i31: i16;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i8;
  var $i37: i32;
  var $i38: i16;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i8;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $i48: i16;
  var $i49: i16;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i16;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(36, 1));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 1315} {:cexpr "frame_len"} boogie_si_record_i32($i6);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    call {:si_unique_call 1316} {:cexpr "rate"} boogie_si_record_i16($i8);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(47, 1));
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    call {:si_unique_call 1317} {:cexpr "need_ack"} boogie_si_record_i8($i10);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i8);
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i14);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i32.i8($i15);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(4, 1));
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vnt_get_phy_field($p4, $i6, $i12, $i16, $p17);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(0, 1));
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vnt_get_phy_field($p4, $i6, $i21, 1, $p22);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i8($i25);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i10);
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} $i28 := vnt_get_duration_le($p4, $i26, $i27);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(10, 1));
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p29, $i28);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i10);
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $i31 := vnt_get_duration_le($p4, 1, $i30);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(8, 1));
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, $i31);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i32.i8($i35);
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i10);
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i38 := vnt_get_duration_le($p4, $i36, $i37);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(12, 1));
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p39, $i38);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i8($i42);
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i10);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} $i45 := vnt_get_duration_le($p4, $i43, $i44);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(14, 1));
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $i45);
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i8);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $i49 := vnt_time_stamp_off($p4, $i48);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(18, 1));
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p50, $i49);
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i55 := vnt_time_stamp_off($p4, $i54);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(16, 1));
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $i55);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(20, 1));
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} $i58 := vnt_mac_hdr_pos($p0, $p57);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(40, 1));
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i58);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 50)), $mul.ref(10, 1));
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;
}



const vnt_rxtx_rts_g_fb_head: ref;

axiom vnt_rxtx_rts_g_fb_head == $sub.ref(0, 456727);

procedure vnt_rxtx_rts_g_fb_head($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_rts_g_fb_head($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i16;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i16;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i16;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i8;
  var $p49: ref;
  var $i50: i16;
  var $i51: i32;
  var $i52: i16;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i8;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i16;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i16;
  var $i73: i16;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i8;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i16;
  var $i83: i16;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i16;
  var $p91: ref;
  var $i92: i16;
  var vslice_dummy_var_130: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9894;

  corral_source_split_9894:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 1327} {:cexpr "current_rate"} boogie_si_record_i16($i6);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32(20);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(0, 1));
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} vnt_get_phy_field($p4, $i7, $i11, 1, $p12);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32(20);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_9906;

  corral_source_split_9906:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(4, 1));
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vnt_get_phy_field($p4, $i13, $i17, $i21, $p22);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i27 := vnt_get_rtscts_duration_le($p0, 0, 1, $i26);
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(12, 1));
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i6);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i35 := vnt_get_rtscts_duration_le($p0, 2, $i32, $i34);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(10, 1));
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i35);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i6);
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i43 := vnt_get_rtscts_duration_le($p0, 1, $i40, $i42);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(8, 1));
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i43);
    goto corral_source_split_9939;

  corral_source_split_9939:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i8($i47);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2816, 1));
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $i50 := $load.i16($M.0, $p49);
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i51 := $zext.i16.i32($i50);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i53 := vnt_get_rtscts_duration_le($p0, 4, $i48, $i52);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(16, 1));
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p54, $i53);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i8($i57);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2816, 1));
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i16($i61);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i63 := vnt_get_rtscts_duration_le($p0, 5, $i58, $i62);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(18, 1));
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, $i63);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_9963;

  corral_source_split_9963:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2818, 1));
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_9968;

  corral_source_split_9968:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i73 := vnt_get_rtscts_duration_le($p0, 6, $i68, $i72);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(20, 1));
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p74, $i73);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_9973;

  corral_source_split_9973:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i32.i8($i77);
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2818, 1));
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i83 := vnt_get_rtscts_duration_le($p0, 7, $i78, $i82);
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(22, 1));
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $i83);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(24, 1));
    goto corral_source_split_9984;

  corral_source_split_9984:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(10, 1));
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_130 := vnt_fill_ieee80211_rts($p0, $p85, $i89);
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 90)), $mul.ref(40, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i92 := vnt_rxtx_datahead_g_fb($p0, $p91);
    call {:si_unique_call 1339} {:cexpr "tmp"} boogie_si_record_i16($i92);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $r := $i92;
    return;
}



const vnt_rxtx_rts_g_head: ref;

axiom vnt_rxtx_rts_g_head == $sub.ref(0, 457759);

procedure vnt_rxtx_rts_g_head($p0: ref, $p1: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation vnt_rxtx_rts_g_head($p0: ref, $p1: ref) returns ($r: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i16;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i16;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i8;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i16;
  var $i27: i16;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i32;
  var $i32: i8;
  var $i33: i32;
  var $i34: i16;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var $i41: i32;
  var $i42: i16;
  var $i43: i16;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i16;
  var $i48: i32;
  var $i49: i16;
  var $p51: ref;
  var $i52: i16;
  var vslice_dummy_var_131: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(42, 1));
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    call {:si_unique_call 1340} {:cexpr "current_rate"} boogie_si_record_i16($i6);
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32(20);
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(0, 1));
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} vnt_get_phy_field($p4, $i7, $i11, 1, $p12);
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32(20);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2480, 1));
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i8($i20);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(4, 1));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1342} vnt_get_phy_field($p4, $i13, $i17, $i21, $p22);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 3248)), $mul.ref(2481, 1));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} $i27 := vnt_get_rtscts_duration_le($p0, 0, 1, $i26);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(12, 1));
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p28, $i27);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i30);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i8($i31);
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i6);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $i35 := vnt_get_rtscts_duration_le($p0, 2, $i32, $i34);
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(10, 1));
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i35);
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 2952)), $mul.ref(46, 1));
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i6);
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i43 := vnt_get_rtscts_duration_le($p0, 1, $i40, $i42);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(8, 1));
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i43);
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(16, 1));
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(10, 1));
    goto corral_source_split_10043;

  corral_source_split_10043:
    assume {:verifier.code 0} true;
    $i47 := $load.i16($M.0, $p46);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i47);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} vslice_dummy_var_131 := vnt_fill_ieee80211_rts($p0, $p45, $i49);
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 78)), $mul.ref(32, 1));
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i52 := vnt_rxtx_datahead_g($p0, $p51);
    call {:si_unique_call 1348} {:cexpr "tmp"} boogie_si_record_i16($i52);
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $r := $i52;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 458791);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.66;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1350} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_10052;

  corral_source_split_10052:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.66;
    call {:si_unique_call 1351} cmdloc_dummy_var_66 := $memset.i8(cmdloc_dummy_var_65, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.66 := cmdloc_dummy_var_66;
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 459823);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.12, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.14, $M.16, $M.18, $M.3, $M.20, $CurrAddr, $M.23, $M.29, $M.33, $M.34, $M.28, $M.35, $M.24, $M.13, $M.15, $M.17, $M.19, assertsPassed;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10055;

  corral_source_split_10055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1352} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1353} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1354} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} ldv_stop();
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_10061;

  corral_source_split_10061:
    assume {:verifier.code 0} true;
    $i21 := $M.18;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $i23 := $M.18;
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.18 := 4;
    call {:si_unique_call 1364} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p25 := $M.13;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} vnt_run_command($p25);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 1366} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $i16 := $M.16;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    $i18 := $M.16;
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i19} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.16 := 4;
    call {:si_unique_call 1361} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $p20 := $M.13;
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vnt_run_command($p20);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    $M.16 := 1;
    call {:si_unique_call 1363} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    goto $bb31;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $i11 := $M.14;
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $i13 := $M.14;
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.14 := 4;
    call {:si_unique_call 1358} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    $p15 := $M.13;
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} vnt_run_command($p15);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 1360} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $i6 := $M.12;
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $i8 := $M.12;
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.12 := 4;
    call {:si_unique_call 1355} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $p10 := $M.13;
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vnt_run_command($p10);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.12 := 1;
    call {:si_unique_call 1357} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 460855);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_usb_driver_2: ref;

axiom ldv_usb_driver_2 == $sub.ref(0, 461887);

procedure ldv_usb_driver_2();
  free requires assertsPassed;
  modifies $M.67, $M.0, $CurrAddr;



implementation ldv_usb_driver_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $M.67 := $p0;
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 462919);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.12, $M.14, $M.16, $M.18;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $M.12 := 0;
    call {:si_unique_call 1369} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 1370} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $M.16 := 0;
    call {:si_unique_call 1371} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 1372} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 463951);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.66, $M.12, $M.14, $M.16, $M.18, $M.68, $M.69, $M.70, $M.3, $M.71, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.72, $M.28, $M.20, $M.73, $M.34, $M.29, $M.38, $M.35, $M.74, $M.1, $M.75, $M.77, $M.13, $M.15, $M.17, $M.19, $M.67, $M.2, $M.76, $M.24, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.59, $M.58, $M.22, $M.21, $M.25, $M.65, $M.64, $M.26, $M.92, $M.5, $M.4, $M.181, $M.182, $CurrAddr, $M.33, $M.51, $M.52, $M.53, $M.54, $M.49, $M.39, $M.63, $M.50, $M.57, $M.40, $M.41, $M.42, $M.43, $M.44, $M.47, $M.23, $M.55, $M.56, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $i58: i32;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $i86: i1;
  var $i87: i1;
  var $i88: i1;
  var $i89: i1;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i1;
  var $i94: i1;
  var $i95: i1;
  var $i96: i1;
  var $i97: i1;
  var $i98: i1;
  var $i99: i1;
  var $i100: i1;
  var $i101: i1;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i1;
  var $p108: ref;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i1;
  var $i115: i32;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i122: i32;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i138: i32;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i156: i32;
  var $i157: i1;
  var $p158: ref;
  var $i159: i32;
  var $i160: i1;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i64;
  var $i168: i32;
  var $i169: i1;
  var $p170: ref;
  var $i171: i64;
  var $i172: i32;
  var $i173: i1;
  var $p174: ref;
  var $i175: i32;
  var $i176: i1;
  var $p177: ref;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i189: i32;
  var $i190: i64;
  var $i191: i32;
  var $i192: i1;
  var $p193: ref;
  var $i194: i32;
  var $i195: i64;
  var $i196: i32;
  var $i197: i1;
  var $p198: ref;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $i207: i32;
  var $i208: i1;
  var $p209: ref;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i224: i32;
  var $i225: i1;
  var $i226: i32;
  var $i227: i1;
  var $i228: i1;
  var $i229: i1;
  var $i230: i1;
  var $i231: i1;
  var $i232: i1;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $i252: i1;
  var $i253: i32;
  var $i254: i1;
  var $i255: i32;
  var $i256: i1;
  var $p257: ref;
  var $i258: i32;
  var $i259: i32;
  var $i260: i32;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $p264: ref;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var vslice_dummy_var_132: ref;
  var vslice_dummy_var_133: ref;
  var vslice_dummy_var_134: ref;
  var vslice_dummy_var_135: ref;
  var vslice_dummy_var_136: ref;
  var vslice_dummy_var_137: ref;
  var vslice_dummy_var_138: ref;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i64;
  var vslice_dummy_var_142: i64;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i64;
  var vslice_dummy_var_146: i64;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;

  $bb0:
    call {:si_unique_call 1373} $initialize();
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} $p7 := ldv_init_zalloc(296);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $p9 := ldv_init_zalloc(24);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} $p11 := ldv_init_zalloc(296);
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p13 := ldv_init_zalloc(296);
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1386} $p15 := ldv_init_zalloc(296);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} $p17 := ldv_init_zalloc(24);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p19 := ldv_init_zalloc(296);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_10139;

  corral_source_split_10139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $p21 := ldv_init_zalloc(296);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1390} $p23 := ldv_init_zalloc(8);
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p25 := ldv_init_zalloc(232);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p27 := ldv_init_zalloc(296);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} $p29 := ldv_init_zalloc(296);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p31 := ldv_init_zalloc(4);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p33 := ldv_init_zalloc(240);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} $p35 := ldv_init_zalloc(296);
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $p37 := ldv_init_zalloc(216);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} $p39 := ldv_init_zalloc(16);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $p41 := ldv_init_zalloc(1);
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1400} $p42 := ldv_init_zalloc(32);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} ldv_initialize();
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p0);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} vslice_dummy_var_132 := ldv_memset($p44, 0, 8);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p1);
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} vslice_dummy_var_133 := ldv_memset($p46, 0, 4);
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} vslice_dummy_var_134 := ldv_memset($p48, 0, 8);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} vslice_dummy_var_135 := ldv_memset($p50, 0, 4);
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p4);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} vslice_dummy_var_136 := ldv_memset($p52, 0, 4);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p5);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1407} vslice_dummy_var_137 := ldv_memset($p54, 0, 4);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p6);
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_138 := ldv_memset($p56, 0, 4);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} work_init_1();
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    $M.68 := 1;
    call {:si_unique_call 1410} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $M.69 := 0;
    call {:si_unique_call 1411} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $M.70 := 1;
    call {:si_unique_call 1412} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 1414} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $p108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i122, $i123, $p124, $i125, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $i138, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $i159, $i160, $p161, $i162, $i163, $i164, $i165, $p166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $i176, $p177, $i178, $i179, $p180, $i182, $i183, $p184, $i186, $i187, $p188, $i189, $i190, $i191, $i192, $p193, $i194, $i195, $i196, $i197, $p198, $i200, $i201, $p202, $i204, $i205, $p206, $i207, $i208, $p209, $i210, $i211, $p212, $i214, $i215, $p216, $i218, $i219, $p220, $i221, $i222, $p223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $p243, $p244, $i245, $i247, $i248, $p249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p8, $p10, $p12, $p14, $p16, $p18, $p20, $p22, $p24, $p26, $p28, $p30, $p32, $p34, $p36, $p38, $p40, $p41, $p43, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $p105, $i106, $i107, $p108, $i109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $p119, $i120, $i122, $i123, $p124, $i125, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $i138, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i149, $i150, $p151, $i152, $i153, $i154, $p155, $i156, $i157, $p158, $i159, $i160, $p161, $i162, $i163, $i164, $i165, $p166, $i167, $i168, $i169, $p170, $i171, $i172, $i173, $p174, $i175, $i176, $p177, $i178, $i179, $p180, $i182, $i183, $p184, $i186, $i187, $p188, $i189, $i190, $i191, $i192, $p193, $i194, $i195, $i196, $i197, $p198, $i200, $i201, $p202, $i204, $i205, $p206, $i207, $i208, $p209, $i210, $i211, $p212, $i214, $i215, $p216, $i218, $i219, $p220, $i221, $i222, $p223, $i224, $i225, $i226, $i227, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $p235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $p243, $p244, $i245, $i247, $i248, $p249, $i250, $i251, $i252, $i253, $i254, $i255, $i256, $p257, $i258, $i259, $i260, $i261, $i262, $i263, $p264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_stop();
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb7:
    assume $i61 == 1;
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i224 := $M.71;
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    $i225 := $ne.i32($i224, 0);
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb183:
    assume $i225 == 1;
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} $i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i226);
    call {:si_unique_call 1499} {:cexpr "tmp___21"} boogie_si_record_i32($i226);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i227 := $slt.i32($i226, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    $i228 := $slt.i32($i226, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    $i229 := $slt.i32($i226, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i226, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    assume !($i230 == 1);
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_stop();
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb192:
    assume $i230 == 1;
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i267 := $M.71;
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i268 := $eq.i32($i267, 3);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb227:
    assume $i268 == 1;
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $i269 := ldv_reset_resume_2();
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $M.77 := $i269;
    call {:si_unique_call 1516} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i269);
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i270 := $M.77;
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, 0);
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb229:
    assume $i271 == 1;
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb190:
    assume $i229 == 1;
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $i253 := $M.71;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 3);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    assume !($i254 == 1);
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $i260 := $M.71;
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i260, 2);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb221:
    assume $i261 == 1;
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $i262 := $M.76;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 0);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb223;

  $bb224:
    assume $i263 == 1;
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p264 := $M.67;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} vt6656_disconnect($p264);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1513} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $i265 := $M.69;
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $i266 := $sub.i32($i265, 1);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $M.69 := $i266;
    call {:si_unique_call 1514} {:cexpr "ref_cnt"} boogie_si_record_i32($i266);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb215:
    assume $i254 == 1;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i255 := $M.76;
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i256 := $eq.i32($i255, 0);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i256 == 1);
    goto $bb217;

  $bb218:
    assume $i256 == 1;
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    $p257 := $M.67;
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vt6656_disconnect($p257);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1510} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $i258 := $M.69;
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i259 := $sub.i32($i258, 1);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $M.69 := $i259;
    call {:si_unique_call 1511} {:cexpr "ref_cnt"} boogie_si_record_i32($i259);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb188:
    assume $i228 == 1;
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i247 := $M.71;
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 3);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb209:
    assume $i248 == 1;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p249 := $M.67;
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} $i250 := vt6656_resume($p249);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $M.75 := $i250;
    call {:si_unique_call 1507} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i250);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $i251 := $M.75;
    goto corral_source_split_10570;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 0);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb211:
    assume $i252 == 1;
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb186:
    assume $i227 == 1;
    assume {:verifier.code 0} true;
    $i231 := $slt.i32($i226, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i231 == 1);
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i241 := $M.71;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 2);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb206:
    assume $i242 == 1;
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    $p243 := $M.67;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.66, $p244);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_151 := vt6656_suspend($p243, $i245);
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $M.71 := 3;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb195:
    assume $i231 == 1;
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    assume !($i232 == 1);
    goto $bb194;

  $bb197:
    assume $i232 == 1;
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $i233 := $M.71;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 1);
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb199:
    assume $i234 == 1;
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $p235 := $M.67;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} $i236 := vt6656_probe($p235, $p43);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $M.74 := $i236;
    call {:si_unique_call 1501} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i236);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i237 := $M.74;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 0);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb201:
    assume $i238 == 1;
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1502} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    $i239 := $M.69;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i240 := $add.i32($i239, 1);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.69 := $i240;
    call {:si_unique_call 1503} {:cexpr "ref_cnt"} boogie_si_record_i32($i240);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb5:
    assume $i60 == 1;
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i83 := $M.3;
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb48:
    assume $i84 == 1;
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1430} $i85 := __VERIFIER_nondet_int();
    call {:si_unique_call 1431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i85);
    call {:si_unique_call 1432} {:cexpr "tmp___20"} boogie_si_record_i32($i85);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i86 := $slt.i32($i85, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    $i87 := $slt.i32($i85, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := $slt.i32($i85, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    $i89 := $slt.i32($i85, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i85, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i90 == 1);
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_stop();
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb59:
    assume $i90 == 1;
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $i218 := $M.3;
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    $i221 := $M.3;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 2);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb177:
    assume $i222 == 1;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $p223 := $M.2;
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vnt_remove_interface($p223, $p28);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb174:
    assume $i219 == 1;
    goto corral_source_split_10509;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    $p220 := $M.2;
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} vnt_remove_interface($p220, $p28);
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb57:
    assume $i89 == 1;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $i210 := $M.3;
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 1);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i214 := $M.3;
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 2);
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb171:
    assume $i215 == 1;
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $p216 := $M.2;
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} vslice_dummy_var_150 := vnt_add_interface($p216, $p20);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb168:
    assume $i211 == 1;
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $p212 := $M.2;
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} vslice_dummy_var_149 := vnt_add_interface($p212, $p20);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb55:
    assume $i88 == 1;
    assume {:verifier.code 0} true;
    $i91 := $slt.i32($i85, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i91 == 1);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    $i204 := $M.3;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    $i205 := $eq.i32($i204, 1);
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $i207 := $M.3;
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i208 := $eq.i32($i207, 2);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb165:
    assume $i208 == 1;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p209 := $M.2;
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vnt_sw_scan_start($p209, $p14, $p41);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb162:
    assume $i205 == 1;
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $p206 := $M.2;
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} vnt_sw_scan_start($p206, $p14, $p41);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb62:
    assume $i91 == 1;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $i196 := $M.3;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 1);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i200 := $M.3;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 2);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb159:
    assume $i201 == 1;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $p202 := $M.2;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} vslice_dummy_var_148 := vnt_get_stats($p202, $p40);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb156:
    assume $i197 == 1;
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $p198 := $M.2;
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} vslice_dummy_var_147 := vnt_get_stats($p198, $p40);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb53:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i85, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := $slt.i32($i85, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i93 == 1);
    goto corral_source_split_10263;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    $i186 := $M.3;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 1);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i191 := $M.3;
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i191, 2);
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb153:
    assume $i192 == 1;
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $p193 := $M.2;
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.66, $p1);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    $i195 := $load.i64($M.66, $p2);
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} vnt_configure($p193, $i194, $p32, $i195);
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb150:
    assume $i187 == 1;
    goto corral_source_split_10453;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    $p188 := $M.2;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i189 := $load.i32($M.66, $p1);
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i190 := $load.i64($M.66, $p2);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} vnt_configure($p188, $i189, $p32, $i190);
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1477} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb66:
    assume $i93 == 1;
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $i178 := $M.3;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 1);
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i182 := $M.3;
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 2);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb147:
    assume $i183 == 1;
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p184 := $M.2;
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} vslice_dummy_var_146 := vnt_prepare_multicast($p184, $p18);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb144:
    assume $i179 == 1;
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $p180 := $M.2;
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} vslice_dummy_var_145 := vnt_prepare_multicast($p180, $p18);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb64:
    assume $i92 == 1;
    assume {:verifier.code 0} true;
    $i94 := $slt.i32($i85, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i94 == 1);
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i172 := $M.3;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 1);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i175 := $M.3;
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $i176 := $eq.i32($i175, 2);
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb141:
    assume $i176 == 1;
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $p177 := $M.2;
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} vnt_tx_80211($p177, $p24, $p26);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    goto $bb143;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb138:
    assume $i173 == 1;
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $p174 := $M.2;
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} vnt_tx_80211($p174, $p24, $p26);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1469} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    goto $bb140;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i94 == 1;
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $i164 := $M.3;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 1);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $i168 := $M.3;
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 2);
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb135:
    assume $i169 == 1;
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $p170 := $M.2;
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $i171 := $load.i64($M.66, $p0);
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} vnt_set_tsf($p170, $p16, $i171);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1467} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb132:
    assume $i165 == 1;
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $p166 := $M.2;
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    $i167 := $load.i64($M.66, $p0);
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} vnt_set_tsf($p166, $p16, $i167);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb51:
    assume $i86 == 1;
    assume {:verifier.code 0} true;
    $i95 := $slt.i32($i85, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i85, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i85, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i97 == 1);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $i159 := $M.3;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    $i160 := $eq.i32($i159, 2);
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb129:
    assume $i160 == 1;
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $p161 := $M.2;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vnt_stop($p161);
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $i162 := $M.69;
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $i163 := $sub.i32($i162, 1);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $M.69 := $i163;
    call {:si_unique_call 1463} {:cexpr "ref_cnt"} boogie_si_record_i32($i163);
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb74:
    assume $i97 == 1;
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    $i153 := $M.3;
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i156 := $M.3;
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i156, 2);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb126:
    assume $i157 == 1;
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p158 := $M.2;
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vnt_sw_scan_complete($p158, $p22);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb123:
    assume $i154 == 1;
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p155 := $M.2;
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vnt_sw_scan_complete($p155, $p22);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb72:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i98 := $slt.i32($i85, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i98 == 1);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $i145 := $M.3;
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i149 := $M.3;
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 2);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb120:
    assume $i150 == 1;
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p151 := $M.2;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.66, $p3);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vnt_bss_info_changed($p151, $p30, $p34, $i152);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb122;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i146 == 1;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p147 := $M.2;
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.66, $p3);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vnt_bss_info_changed($p147, $p30, $p34, $i148);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb119;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i98 == 1;
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i135 := $M.3;
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 1);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i140 := $M.3;
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb114:
    assume $i141 == 1;
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $p142 := $M.2;
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.66, $p5);
    goto corral_source_split_10372;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_144 := vnt_set_key($p142, $i143, $p8, $p38, $p10);
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb111:
    assume $i136 == 1;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $p137 := $M.2;
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.66, $p5);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_143 := vnt_set_key($p137, $i138, $p8, $p38, $p10);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb70:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i99 := $slt.i32($i85, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    $i100 := $slt.i32($i85, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i100 == 1);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $i127 := $M.3;
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 1);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i131 := $M.3;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 2);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb108:
    assume $i132 == 1;
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p133 := $M.2;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_142 := vnt_get_tsf($p133, $p36);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb105:
    assume $i128 == 1;
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $p129 := $M.2;
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} vslice_dummy_var_141 := vnt_get_tsf($p129, $p36);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb80:
    assume $i100 == 1;
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i117 := $M.3;
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 1);
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i122 := $M.3;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 2);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb102:
    assume $i123 == 1;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $p124 := $M.2;
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.66, $p4);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} vslice_dummy_var_140 := vnt_config($p124, $i125);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb99:
    assume $i118 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $p119 := $M.2;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.66, $p4);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} vslice_dummy_var_139 := vnt_config($p119, $i120);
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb78:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    $i101 := $slt.i32($i85, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i101 == 1);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $i109 := $M.3;
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 1);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb93:
    assume $i110 == 1;
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $p111 := $M.2;
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} $i112 := vnt_start($p111);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $M.73 := $i112;
    call {:si_unique_call 1438} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i112);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i113 := $M.73;
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 0);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb95:
    assume $i114 == 1;
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1439} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    $i115 := $M.69;
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $i116 := $add.i32($i115, 1);
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $M.69 := $i116;
    call {:si_unique_call 1440} {:cexpr "ref_cnt"} boogie_si_record_i32($i116);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i85, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb61;

  $bb84:
    assume $i102 == 1;
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $i103 := $M.3;
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i106 := $M.3;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i106, 2);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb89:
    assume $i107 == 1;
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $p108 := $M.2;
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vnt_reset_tsf($p108, $p12);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i104 == 1;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $p105 := $M.2;
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vnt_reset_tsf($p105, $p12);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb3:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i62 == 1);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    $i66 := $M.70;
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $i67 := $ne.i32($i66, 0);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18:
    assume $i67 == 1;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} $i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i68);
    call {:si_unique_call 1421} {:cexpr "tmp___19"} boogie_si_record_i32($i68);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_stop();
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_10206;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    $i76 := $M.70;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i77 == 1;
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} $i78 := vt6656_driver_init();
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $M.72 := $i78;
    call {:si_unique_call 1426} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i78);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    $i79 := $M.72;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i81 := $M.72;
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i82 == 1;
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1428} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} ldv_check_final_state();
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb38:
    assume $i80 == 1;
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb21:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb25;

  $bb26:
    assume $i71 == 1;
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    $i72 := $M.70;
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 3);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb28:
    assume $i73 == 1;
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i74 := $M.69;
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb30;

  $bb31:
    assume $i75 == 1;
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} vt6656_driver_exit();
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $M.70 := 2;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb10:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb9;

  $bb12:
    assume $i63 == 1;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $i64 := $M.68;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i65 == 1;
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} invoke_work_1();
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1415} $i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 1416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i58);
    call {:si_unique_call 1417} {:cexpr "tmp___18"} boogie_si_record_i32($i58);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 464983);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    return;
}



const vt6656_driver_exit: ref;

axiom vt6656_driver_exit == $sub.ref(0, 466015);

procedure vt6656_driver_exit();
  free requires assertsPassed;
  modifies $M.71;



implementation vt6656_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} ldv_usb_deregister_49(vt6656_driver);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    return;
}



const vt6656_driver_init: ref;

axiom vt6656_driver_init == $sub.ref(0, 467047);

procedure vt6656_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.71, $M.76, $M.67, $M.0, $CurrAddr;



implementation vt6656_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i0 := ldv_usb_register_driver_48(vt6656_driver, __this_module, .str);
    call {:si_unique_call 1522} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_reset_resume_2: ref;

axiom ldv_reset_resume_2 == $sub.ref(0, 468079);

procedure ldv_reset_resume_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_reset_resume_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1523} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1524} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 469111);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_48: ref;

axiom ldv_usb_register_driver_48 == $sub.ref(0, 470143);

procedure ldv_usb_register_driver_48($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.71, $M.76, $M.67, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_48($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1526} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1527} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 1528} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} ldv_usb_driver_2();
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 471175);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1530} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1531} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_deregister_49: ref;

axiom ldv_usb_deregister_49 == $sub.ref(0, 472207);

procedure ldv_usb_deregister_49($p0: ref);
  free requires assertsPassed;
  modifies $M.71;



implementation ldv_usb_deregister_49($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} usb_deregister($p0);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $M.71 := 0;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 473239);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 474271);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1534} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 1} true;
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 475303);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 476335);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 477367);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_145:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 478399);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 479431);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 480463);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 481495);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 482527);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 483559);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 484591);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 485623);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 486655);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 487687);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1535} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1536} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1537} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1538} __VERIFIER_assume($i4);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 488719);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 489751);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 490783);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 491815);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1539} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1540} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1541} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1542} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1543} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1544} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1545} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1546} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1547} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1548} __VERIFIER_assume($i7);
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} __VERIFIER_assume($i11);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 492847);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 493879);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 494911);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 495943);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 496975);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 498007);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1550} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1551} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1552} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1553} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1554} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1555} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1556} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1557} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1558} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1559} __VERIFIER_assume($i7);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1560} __VERIFIER_assume($i11);
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 499039);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 500071);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 501103);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 502135);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 503167);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 504199);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 505231);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 506263);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 507295);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1561} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1562} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1563} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_10711;

  corral_source_split_10711:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1564} __VERIFIER_assume($i10);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 508327);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1565} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1566} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1567} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 509359);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1568} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1569} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1570} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_10727;

  corral_source_split_10727:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 510391);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1571} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1572} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 511423);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 512455);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1573} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1574} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 513487);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 514519);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 515551);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1575} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1576} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1577} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1578} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1579} $p6 := malloc($i5);
    goto corral_source_split_10743;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_67 := $M.0;
    call {:si_unique_call 1580} cmdloc_dummy_var_68 := $memset.i8(cmdloc_dummy_var_67, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_68;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 516583);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 517615);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.67, $M.2, $M.68, $M.69, $M.70, $M.3, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.24, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.59, $M.58, $M.0, $M.22, $M.21, $M.25, $M.65, $M.64, $M.26, $M.92, $M.5, $M.4, $M.181, $M.182;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1581} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.12 := 0;
    call {:si_unique_call 1582} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.13 := $0.ref;
    $M.14 := 0;
    call {:si_unique_call 1583} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.15 := $0.ref;
    $M.16 := 0;
    call {:si_unique_call 1584} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.17 := $0.ref;
    $M.18 := 0;
    call {:si_unique_call 1585} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.67 := $0.ref;
    $M.2 := $0.ref;
    $M.68 := 0;
    call {:si_unique_call 1586} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.69 := 0;
    call {:si_unique_call 1587} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.70 := 0;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.3 := 0;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.71 := 0;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.72 := 0;
    call {:si_unique_call 1591} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.73 := 0;
    call {:si_unique_call 1592} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 1593} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 1594} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1595} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1596} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.24 := 0;
    call {:si_unique_call 1597} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.79 := $store.i16($M.79, __mod_usb__vt6656_table_device_table, 0);
    $M.80 := $store.i16($M.80, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.81 := $store.i16($M.81, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.83 := $store.i16($M.83, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.79 := $store.i16($M.79, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.80 := $store.i16($M.80, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.81 := $store.i16($M.81, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.82 := $store.i16($M.82, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.83 := $store.i16($M.83, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.86 := $store.i8($M.86, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.89 := $store.i8($M.89, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.90 := $store.i8($M.90, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.91 := $store.i64($M.91, $add.ref($add.ref($add.ref(__mod_usb__vt6656_table_device_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.59 := $store.i8($M.59, fallback_rate1, 7);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(1, 1)), 7);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(2, 1)), 6);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(3, 1)), 4);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(4, 1)), 4);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(0, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(1, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(2, 1)), 7);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(3, 1)), 4);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(4, 1)), 4);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(0, 1)), 9);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(1, 1)), 9);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(2, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(3, 1)), 6);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(4, 1)), 6);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(0, 1)), 10);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(1, 1)), 10);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(2, 1)), 8);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(3, 1)), 6);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(4, 1)), 6);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(0, 1)), 11);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(1, 1)), 11);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(2, 1)), 9);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(3, 1)), 7);
    $M.59 := $store.i8($M.59, $add.ref($add.ref($add.ref(fallback_rate1, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(4, 1)), 7);
    $M.58 := $store.i8($M.58, fallback_rate0, 7);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(1, 1)), 7);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(2, 1)), 6);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(3, 1)), 6);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(0, 5)), $mul.ref(4, 1)), 6);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(0, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(1, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(2, 1)), 7);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(3, 1)), 6);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(1, 5)), $mul.ref(4, 1)), 6);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(0, 1)), 9);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(1, 1)), 9);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(2, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(3, 1)), 7);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(2, 5)), $mul.ref(4, 1)), 7);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(0, 1)), 10);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(1, 1)), 10);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(2, 1)), 9);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(3, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(3, 5)), $mul.ref(4, 1)), 8);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(0, 1)), 11);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(1, 1)), 11);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(2, 1)), 10);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(3, 1)), 9);
    $M.58 := $store.i8($M.58, $add.ref($add.ref($add.ref(fallback_rate0, $mul.ref(0, 25)), $mul.ref(4, 5)), $mul.ref(4, 1)), 9);
    $M.0 := $store.i32($M.0, vnt_rates_bg, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(1, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(4, 1)), 55);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(2, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(3, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(5, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(6, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(7, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(8, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(9, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(10, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_bg, $mul.ref(0, 144)), $mul.ref(11, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, vnt_supported_2ghz_band, vnt_channels_2ghz);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(8, 1)), vnt_rates_bg);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(20, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(24, 1)), 12);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_2ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, vnt_channels_2ghz, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(4, 1)), 2412);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(6, 1)), 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(4, 1)), 2417);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(6, 1)), 2);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(4, 1)), 2422);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(6, 1)), 3);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(4, 1)), 2427);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(4, 1)), 2432);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(4, 1)), 2437);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(4, 1)), 2442);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(4, 1)), 2447);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(4, 1)), 2452);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(4, 1)), 2457);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(4, 1)), 2462);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(4, 1)), 2467);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(6, 1)), 12);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(4, 1)), 2472);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(6, 1)), 13);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(4, 1)), 2484);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(6, 1)), 14);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_2ghz, $mul.ref(0, 896)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, vnt_rates_a, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(0, 12)), $mul.ref(4, 1)), 60);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(0, 12)), $mul.ref(6, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(4, 1)), 90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(6, 1)), 5);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(1, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(4, 1)), 120);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(2, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(4, 1)), 180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(6, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(3, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(4, 1)), 240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(6, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(4, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(4, 1)), 360);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(6, 1)), 9);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(5, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(4, 1)), 480);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(6, 1)), 10);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(6, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(4, 1)), 540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(6, 1)), 11);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_rates_a, $mul.ref(0, 96)), $mul.ref(7, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.ref($M.0, vnt_supported_5ghz_band, vnt_channels_5ghz);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(8, 1)), vnt_rates_a);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(20, 1)), 42);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(24, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(28, 1)), $mul.ref(6, 1)), $mul.ref(13, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref($add.ref(vnt_supported_5ghz_band, $mul.ref(0, 72)), $mul.ref(52, 1)), $mul.ref(8, 1)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i32($M.0, vnt_channels_5ghz, 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(4, 1)), 4915);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(6, 1)), 15);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(0, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(4, 1)), 4920);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(6, 1)), 16);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(1, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(4, 1)), 4925);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(6, 1)), 17);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(2, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(4, 1)), 4935);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(6, 1)), 18);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(3, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(4, 1)), 4940);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(6, 1)), 19);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(4, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(4, 1)), 4945);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(6, 1)), 20);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(5, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(4, 1)), 4960);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(6, 1)), 21);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(6, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(4, 1)), 4980);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(6, 1)), 22);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(7, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(4, 1)), 5035);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(6, 1)), 23);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(8, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(4, 1)), 5040);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(6, 1)), 24);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(9, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(4, 1)), 5045);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(6, 1)), 25);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(10, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(4, 1)), 5055);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(6, 1)), 26);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(11, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(4, 1)), 5060);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(6, 1)), 27);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(12, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(4, 1)), 5080);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(6, 1)), 28);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(13, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(4, 1)), 5170);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(6, 1)), 29);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(14, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(4, 1)), 5180);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(6, 1)), 30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(15, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(4, 1)), 5190);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(6, 1)), 31);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(16, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(4, 1)), 5200);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(6, 1)), 32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(17, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(4, 1)), 5210);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(6, 1)), 33);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(18, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(4, 1)), 5220);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(6, 1)), 34);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(19, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(4, 1)), 5230);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(6, 1)), 35);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(20, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(4, 1)), 5240);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(6, 1)), 36);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(21, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(4, 1)), 5260);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(6, 1)), 37);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(22, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(4, 1)), 5280);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(6, 1)), 38);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(23, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(4, 1)), 5300);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(6, 1)), 39);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(24, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(4, 1)), 5320);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(6, 1)), 40);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(25, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(4, 1)), 5500);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(6, 1)), 41);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(26, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(4, 1)), 5520);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(6, 1)), 42);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(27, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(4, 1)), 5540);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(6, 1)), 43);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(28, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(4, 1)), 5560);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(6, 1)), 44);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(29, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(4, 1)), 5580);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(6, 1)), 45);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(30, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(4, 1)), 5600);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(6, 1)), 46);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(31, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(4, 1)), 5620);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(6, 1)), 47);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(32, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(4, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(6, 1)), 48);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(33, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(4, 1)), 5660);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(6, 1)), 49);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(34, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(4, 1)), 5680);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(6, 1)), 50);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(35, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(4, 1)), 5700);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(6, 1)), 51);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(36, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(4, 1)), 5745);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(6, 1)), 52);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(37, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(4, 1)), 5765);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(6, 1)), 53);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(38, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(4, 1)), 5785);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(6, 1)), 54);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(39, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(4, 1)), 5805);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(6, 1)), 55);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(40, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(4, 1)), 5825);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(6, 1)), 56);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(48, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(vnt_channels_5ghz, $mul.ref(0, 2688)), $mul.ref(41, 64)), $mul.ref(56, 1)), 0);
    $M.0 := $store.i8($M.0, al7230_channel_table2, 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table2, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, al7230_init_table_amode, 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(0, 3)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(1, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(1, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(1, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(2, 3)), $mul.ref(0, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(2, 3)), $mul.ref(1, 1)), 31);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 30));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(3, 3)), $mul.ref(0, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 33));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 93));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(4, 3)), $mul.ref(0, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(4, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(5, 3)), $mul.ref(0, 1)), $sub.i8(0, 123));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(5, 3)), $mul.ref(1, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(5, 3)), $mul.ref(2, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(6, 3)), $mul.ref(0, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(6, 3)), $mul.ref(1, 1)), $sub.i8(0, 81));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(6, 3)), $mul.ref(2, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(7, 3)), $mul.ref(0, 1)), $sub.i8(0, 50));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(7, 3)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(7, 3)), $mul.ref(2, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(8, 3)), $mul.ref(0, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 68));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 104));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(9, 3)), $mul.ref(0, 1)), 34);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(9, 3)), $mul.ref(1, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 71));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(10, 3)), $mul.ref(0, 1)), $sub.i8(0, 32));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(10, 3)), $mul.ref(1, 1)), 96);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(10, 3)), $mul.ref(2, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(11, 3)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(11, 3)), $mul.ref(1, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(11, 3)), $mul.ref(2, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(12, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(12, 3)), $mul.ref(1, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(12, 3)), $mul.ref(2, 1)), 124);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(13, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(13, 3)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(13, 3)), $mul.ref(2, 1)), $sub.i8(0, 3));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(14, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(14, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(14, 3)), $mul.ref(2, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(15, 3)), $mul.ref(0, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(15, 3)), $mul.ref(1, 1)), $sub.i8(0, 70));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table_amode, $mul.ref(0, 48)), $mul.ref(15, 3)), $mul.ref(2, 1)), $sub.i8(0, 49));
    $M.0 := $store.i8($M.0, vt3342_channel_table1, 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 103));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 108));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 18));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 103));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 108));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(1, 1)), $sub.i8(0, 18));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(1, 1)), $sub.i8(0, 103));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 108));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 18));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(1, 1)), $sub.i8(0, 103));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 108));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(1, 1)), $sub.i8(0, 18));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(2, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(1, 1)), $sub.i8(0, 103));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(2, 1)), $sub.i8(0, 108));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(2, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(1, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(2, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(2, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table1, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(2, 1)), 4);
    $M.0 := $store.i8($M.0, vt3342_channel_table0, 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(1, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(2, 1)), 35);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(1, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(2, 1)), 35);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(2, 1)), 35);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(1, 1)), $sub.i8(0, 43));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(2, 1)), 35);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(2, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(2, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(1, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(2, 1)), $sub.i8(0, 13));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(1, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(1, 1)), $sub.i8(0, 90));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(1, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(1, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342_channel_table0, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(2, 1)), 3);
    $M.0 := $store.i8($M.0, vt3342a0_init_table, 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(1, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(1, 3)), $mul.ref(1, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(1, 3)), $mul.ref(2, 1)), $sub.i8(0, 127));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(2, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 58));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(2, 3)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(3, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(3, 3)), $mul.ref(2, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(4, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(4, 3)), $mul.ref(1, 1)), $sub.i8(0, 18));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(5, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(5, 3)), $mul.ref(1, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(6, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(6, 3)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(6, 3)), $mul.ref(2, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(7, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(7, 3)), $mul.ref(1, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(7, 3)), $mul.ref(2, 1)), 39);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(8, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(8, 3)), $mul.ref(1, 1)), 84);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(8, 3)), $mul.ref(2, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(9, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(9, 3)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(9, 3)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(10, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(10, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(10, 3)), $mul.ref(2, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(11, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(11, 3)), $mul.ref(1, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(11, 3)), $mul.ref(2, 1)), $sub.i8(0, 53));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(12, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(12, 3)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3342a0_init_table, $mul.ref(0, 39)), $mul.ref(12, 3)), $mul.ref(2, 1)), 12);
    $M.0 := $store.i8($M.0, vt3226d0_init_table, 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(1, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(1, 3)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(1, 3)), $mul.ref(2, 1)), 33);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(2, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 58));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 94));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(3, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 109));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(4, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(4, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(4, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(5, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(5, 3)), $mul.ref(1, 1)), 113);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(6, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(6, 3)), $mul.ref(1, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 58));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(7, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(7, 3)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(7, 3)), $mul.ref(2, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(8, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(8, 3)), $mul.ref(1, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(8, 3)), $mul.ref(2, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(9, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(9, 3)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(9, 3)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(10, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(10, 3)), $mul.ref(1, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226d0_init_table, $mul.ref(0, 33)), $mul.ref(10, 3)), $mul.ref(2, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, vt3226_channel_table1, 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(1, 1)), $sub.i8(0, 52));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table1, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(2, 1)), $sub.i8(0, 60));
    $M.0 := $store.i8($M.0, vt3226_channel_table0, 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(2, 1)), $sub.i8(0, 125));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 109));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 109));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 109));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 109));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 93));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(2, 1)), $sub.i8(0, 93));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 93));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 93));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(2, 1)), $sub.i8(0, 77));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(2, 1)), $sub.i8(0, 77));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(2, 1)), $sub.i8(0, 77));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_channel_table0, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(2, 1)), $sub.i8(0, 61));
    $M.0 := $store.i8($M.0, vt3226_init_table, 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(1, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(1, 3)), $mul.ref(1, 1)), $sub.i8(0, 126));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(1, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(2, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 58));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 94));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(3, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 105));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 109));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(4, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(4, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(4, 3)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(5, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(5, 3)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 91));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(6, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(6, 3)), $mul.ref(1, 1)), 123);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 42));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(7, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(7, 3)), $mul.ref(1, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(7, 3)), $mul.ref(2, 1)), 23);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(8, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 8));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(8, 3)), $mul.ref(2, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(9, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(9, 3)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(9, 3)), $mul.ref(2, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(10, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(10, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(vt3226_init_table, $mul.ref(0, 33)), $mul.ref(10, 3)), $mul.ref(2, 1)), 42);
    $M.0 := $store.i8($M.0, al7230_channel_table1, 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(0, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(0, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(0, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(0, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(0, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(0, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(0, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(0, 1)), 29);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(0, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(0, 1)), 29);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(0, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(0, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(0, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(0, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(0, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(0, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(0, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(2, 1)), $sub.i8(0, 95));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(0, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(1, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(2, 1)), 81);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(0, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(2, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(0, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(1, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table1, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(2, 1)), $sub.i8(0, 79));
    $M.0 := $store.i8($M.0, al7230_channel_table0, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(1, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(7, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(10, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(11, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(12, 3)), $mul.ref(2, 1)), $sub.i8(0, 64));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(0, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(13, 3)), $mul.ref(2, 1)), $sub.i8(0, 64));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(14, 3)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(15, 3)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(16, 3)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(17, 3)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(18, 3)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(19, 3)), $mul.ref(2, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(20, 3)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(21, 3)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(22, 3)), $mul.ref(2, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(23, 3)), $mul.ref(2, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(24, 3)), $mul.ref(2, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(25, 3)), $mul.ref(2, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(26, 3)), $mul.ref(2, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(27, 3)), $mul.ref(2, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(28, 3)), $mul.ref(2, 1)), 96);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(29, 3)), $mul.ref(2, 1)), 96);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(30, 3)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(31, 3)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(32, 3)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(33, 3)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(34, 3)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(35, 3)), $mul.ref(2, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(36, 3)), $mul.ref(2, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(37, 3)), $mul.ref(2, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(38, 3)), $mul.ref(2, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(39, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(40, 3)), $mul.ref(2, 1)), $sub.i8(0, 64));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(41, 3)), $mul.ref(2, 1)), $sub.i8(0, 64));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(42, 3)), $mul.ref(2, 1)), $sub.i8(0, 64));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(43, 3)), $mul.ref(2, 1)), $sub.i8(0, 48));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(44, 3)), $mul.ref(2, 1)), $sub.i8(0, 48));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(45, 3)), $mul.ref(2, 1)), $sub.i8(0, 48));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(46, 3)), $mul.ref(2, 1)), $sub.i8(0, 32));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(47, 3)), $mul.ref(2, 1)), $sub.i8(0, 32));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(48, 3)), $mul.ref(2, 1)), $sub.i8(0, 32));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(49, 3)), $mul.ref(2, 1)), $sub.i8(0, 16));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(1, 1)), $sub.i8(0, 11));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(50, 3)), $mul.ref(2, 1)), $sub.i8(0, 16));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(1, 1)), $sub.i8(0, 10));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(51, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(1, 1)), $sub.i8(0, 10));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(52, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(1, 1)), $sub.i8(0, 10));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(53, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(1, 1)), $sub.i8(0, 10));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(54, 3)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(0, 1)), 47);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(1, 1)), $sub.i8(0, 10));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_channel_table0, $mul.ref(0, 168)), $mul.ref(55, 3)), $mul.ref(2, 1)), 16);
    $M.0 := $store.i8($M.0, al7230_init_table, 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(0, 3)), $mul.ref(1, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(1, 3)), $mul.ref(0, 1)), 19);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(1, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(1, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(2, 3)), $mul.ref(0, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(2, 3)), $mul.ref(1, 1)), 31);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 14));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(3, 3)), $mul.ref(0, 1)), 63);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 33));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 93));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(4, 3)), $mul.ref(0, 1)), 127);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(4, 3)), $mul.ref(1, 1)), $sub.i8(0, 41));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(5, 3)), $mul.ref(0, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(5, 3)), $mul.ref(1, 1)), 43);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(5, 3)), $mul.ref(2, 1)), 85);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(6, 3)), $mul.ref(0, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(6, 3)), $mul.ref(1, 1)), $sub.i8(0, 81));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(6, 3)), $mul.ref(2, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(7, 3)), $mul.ref(0, 1)), $sub.i8(0, 50));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(7, 3)), $mul.ref(1, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(7, 3)), $mul.ref(2, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(8, 3)), $mul.ref(0, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 68));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 104));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(9, 3)), $mul.ref(0, 1)), 34);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(9, 3)), $mul.ref(1, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 71));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(10, 3)), $mul.ref(0, 1)), $sub.i8(0, 32));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(10, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(10, 3)), $mul.ref(2, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(11, 3)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(11, 3)), $mul.ref(1, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(11, 3)), $mul.ref(2, 1)), 27);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(12, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(12, 3)), $mul.ref(1, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(12, 3)), $mul.ref(2, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(13, 3)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(13, 3)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(13, 3)), $mul.ref(2, 1)), $sub.i8(0, 3));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(14, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(14, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(14, 3)), $mul.ref(2, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(15, 3)), $mul.ref(0, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(15, 3)), $mul.ref(1, 1)), $sub.i8(0, 70));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al7230_init_table, $mul.ref(0, 48)), $mul.ref(15, 3)), $mul.ref(2, 1)), $sub.i8(0, 113));
    $M.0 := $store.i8($M.0, al2230_channel_table1, 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(0, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(1, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table1, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, al2230_channel_table0, 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(1, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(2, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(7, 3)), $mul.ref(2, 1)), $sub.i8(0, 96));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(10, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(11, 3)), $mul.ref(2, 1)), $sub.i8(0, 80));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(12, 3)), $mul.ref(2, 1)), $sub.i8(0, 64));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(1, 1)), $sub.i8(0, 25));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_channel_table0, $mul.ref(0, 42)), $mul.ref(13, 3)), $mul.ref(2, 1)), $sub.i8(0, 64));
    $M.0 := $store.i8($M.0, al2230_init_table, 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(0, 3)), $mul.ref(1, 1)), $sub.i8(0, 9));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(0, 3)), $mul.ref(2, 1)), $sub.i8(0, 112));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(1, 3)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(1, 3)), $mul.ref(1, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(1, 3)), $mul.ref(2, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(2, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(2, 3)), $mul.ref(1, 1)), $sub.i8(0, 72));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(2, 3)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(3, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(3, 3)), $mul.ref(1, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(3, 3)), $mul.ref(2, 1)), $sub.i8(0, 13));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(4, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(4, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(4, 3)), $mul.ref(2, 1)), $sub.i8(0, 92));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(5, 3)), $mul.ref(0, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(5, 3)), $mul.ref(1, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(5, 3)), $mul.ref(2, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(6, 3)), $mul.ref(0, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(6, 3)), $mul.ref(1, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(6, 3)), $mul.ref(2, 1)), $sub.i8(0, 74));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(7, 3)), $mul.ref(0, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(7, 3)), $mul.ref(1, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(7, 3)), $mul.ref(2, 1)), $sub.i8(0, 57));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(8, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(8, 3)), $mul.ref(1, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(8, 3)), $mul.ref(2, 1)), $sub.i8(0, 120));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(9, 3)), $mul.ref(0, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(9, 3)), $mul.ref(1, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(9, 3)), $mul.ref(2, 1)), $sub.i8(0, 71));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(10, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(10, 3)), $mul.ref(1, 1)), $sub.i8(0, 37));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(10, 3)), $mul.ref(2, 1)), $sub.i8(0, 70));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(11, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(11, 3)), $mul.ref(1, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(11, 3)), $mul.ref(2, 1)), $sub.i8(0, 101));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(12, 3)), $mul.ref(0, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(12, 3)), $mul.ref(1, 1)), $sub.i8(0, 33));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(12, 3)), $mul.ref(2, 1)), $sub.i8(0, 4));
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(13, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(13, 3)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(13, 3)), $mul.ref(2, 1)), 13);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(14, 3)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(14, 3)), $mul.ref(1, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(al2230_init_table, $mul.ref(0, 45)), $mul.ref(14, 3)), $mul.ref(2, 1)), 15);
    $M.22 := $store.i32($M.22, vt3226d0_lo_current_table, 20301312);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(1, 4)), 20301312);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(2, 4)), 37078528);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(3, 4)), 37078528);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(4, 4)), 37078528);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(5, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(6, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(7, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(8, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(9, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(10, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(11, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(12, 4)), 53855744);
    $M.22 := $store.i32($M.22, $add.ref($add.ref(vt3226d0_lo_current_table, $mul.ref(0, 56)), $mul.ref(13, 4)), 20301312);
    $M.21 := $store.i32($M.21, al2230_power_table, 67373312);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(1, 4)), 67377408);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(2, 4)), 67381504);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(3, 4)), 67385600);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(4, 4)), 67389696);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(5, 4)), 67393792);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(6, 4)), 67397888);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(7, 4)), 67401984);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(8, 4)), 67406080);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(9, 4)), 67410176);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(10, 4)), 67414272);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(11, 4)), 67418368);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(12, 4)), 67422464);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(13, 4)), 67426560);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(14, 4)), 67430656);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(15, 4)), 67434752);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(16, 4)), 67438848);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(17, 4)), 67442944);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(18, 4)), 67447040);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(19, 4)), 67451136);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(20, 4)), 67455232);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(21, 4)), 67459328);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(22, 4)), 67463424);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(23, 4)), 67467520);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(24, 4)), 67471616);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(25, 4)), 67475712);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(26, 4)), 67479808);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(27, 4)), 67483904);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(28, 4)), 67488000);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(29, 4)), 67492096);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(30, 4)), 67496192);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(31, 4)), 67500288);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(32, 4)), 67504384);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(33, 4)), 67508480);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(34, 4)), 67512576);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(35, 4)), 67516672);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(36, 4)), 67520768);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(37, 4)), 67524864);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(38, 4)), 67528960);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(39, 4)), 67533056);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(40, 4)), 67537152);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(41, 4)), 67541248);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(42, 4)), 67545344);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(43, 4)), 67549440);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(44, 4)), 67553536);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(45, 4)), 67557632);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(46, 4)), 67561728);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(47, 4)), 67565824);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(48, 4)), 67569920);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(49, 4)), 67574016);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(50, 4)), 67578112);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(51, 4)), 67582208);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(52, 4)), 67586304);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(53, 4)), 67590400);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(54, 4)), 67594496);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(55, 4)), 67598592);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(56, 4)), 67602688);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(57, 4)), 67606784);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(58, 4)), 67610880);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(59, 4)), 67614976);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(60, 4)), 67619072);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(61, 4)), 67623168);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(62, 4)), 67627264);
    $M.21 := $store.i32($M.21, $add.ref($add.ref(al2230_power_table, $mul.ref(0, 256)), $mul.ref(63, 4)), 67631360);
    $M.25 := $store.i16($M.25, vnt_time_stampoff, 384);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(1, 2)), 288);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(2, 2)), 226);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(3, 2)), 209);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(4, 2)), 54);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(5, 2)), 43);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(6, 2)), 37);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(7, 2)), 31);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(8, 2)), 28);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(9, 2)), 25);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(10, 2)), 24);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(0, 24)), $mul.ref(11, 2)), 23);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(0, 2)), 384);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(1, 2)), 192);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(2, 2)), 130);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(3, 2)), 113);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(4, 2)), 54);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(5, 2)), 43);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(6, 2)), 37);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(7, 2)), 31);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(8, 2)), 28);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(9, 2)), 25);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(10, 2)), 24);
    $M.25 := $store.i16($M.25, $add.ref($add.ref($add.ref(vnt_time_stampoff, $mul.ref(0, 48)), $mul.ref(1, 24)), $mul.ref(11, 2)), 23);
    $M.65 := $store.i16($M.65, vnt_fb_opt1, 6);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(1, 2)), 7);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(2, 2)), 8);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(3, 2)), 8);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(4, 2)), 9);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(0, 2)), 4);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(1, 2)), 4);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(2, 2)), 6);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(3, 2)), 6);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(vnt_fb_opt1, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(4, 2)), 7);
    $M.64 := $store.i16($M.64, vnt_fb_opt0, 6);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(1, 2)), 7);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(2, 2)), 8);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(3, 2)), 9);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(0, 10)), $mul.ref(4, 2)), 10);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(0, 2)), 6);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(1, 2)), 6);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(2, 2)), 7);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(3, 2)), 8);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(vnt_fb_opt0, $mul.ref(0, 20)), $mul.ref(1, 10)), $mul.ref(4, 2)), 9);
    $M.0 := $store.i8($M.0, vnt_vt3184_vt3226d0, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(5, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(10, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(14, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(27, 1)), $sub.i8(0, 114));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(28, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(37, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(45, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(47, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(48, 1)), 38);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(49, 1)), 91);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(54, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(55, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(56, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(57, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(58, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(61, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(62, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(63, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(65, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(67, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(68, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(69, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(70, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(71, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(76, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(77, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(79, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(81, 1)), 25);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(89, 1)), $sub.i8(0, 48));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(96, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(97, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(102, 1)), $sub.i8(0, 104));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(103, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(109, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(110, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(128, 1)), $sub.i8(0, 116));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(129, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(130, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(131, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(132, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(133, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(134, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(135, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(136, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(137, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(138, 1)), 31);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(139, 1)), $sub.i8(0, 73));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(140, 1)), $sub.i8(0, 120));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(141, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(142, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(143, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(144, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(145, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(146, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(147, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(148, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(149, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(150, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(151, 1)), $sub.i8(0, 21));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(153, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(154, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(155, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(157, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(158, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(159, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(161, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(162, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(163, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(164, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(165, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(166, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(167, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(168, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(169, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(170, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(171, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(172, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(173, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(174, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(175, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(176, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(177, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(178, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(179, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(180, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(181, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(182, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(183, 1)), $sub.i8(0, 30));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(184, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(185, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(186, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(187, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(188, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(189, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(190, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(191, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(192, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(193, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(194, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(195, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(196, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(197, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(198, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(199, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(200, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(201, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(202, 1)), $sub.i8(0, 124));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(203, 1)), $sub.i8(0, 89));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(204, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(205, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(206, 1)), 36);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(207, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(208, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(209, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(210, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(211, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(212, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(213, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(214, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(215, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(217, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(218, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(219, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(220, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(221, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(222, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(223, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(224, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(225, 1)), $sub.i8(0, 13));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(226, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(227, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(228, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(229, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(230, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(231, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(232, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(233, 1)), $sub.i8(0, 12));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(234, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(235, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(236, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(237, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(238, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(239, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(240, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(241, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(242, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(243, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(244, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(245, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(246, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(247, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(248, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(249, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(250, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(251, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(252, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(253, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(254, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_vt3226d0, $mul.ref(0, 256)), $mul.ref(255, 1)), 0);
    $M.0 := $store.i8($M.0, vnt_vt3184_agc, 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(2, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(3, 1)), 2);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(5, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(6, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(7, 1)), 6);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(8, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(9, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(10, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(11, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(12, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(13, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(14, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(15, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(16, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(17, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(18, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(19, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(20, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(21, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(22, 1)), 22);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(23, 1)), 22);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(24, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(25, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(26, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(27, 1)), 26);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(28, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(29, 1)), 28);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(30, 1)), 30);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(31, 1)), 30);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(32, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(33, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(34, 1)), 34);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(35, 1)), 34);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(36, 1)), 36);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(37, 1)), 36);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(38, 1)), 38);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(39, 1)), 38);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(40, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(41, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(42, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(43, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(44, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(45, 1)), 44);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(46, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(47, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(48, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(49, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(50, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(51, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(52, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(53, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(54, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(55, 1)), 54);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(56, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(57, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(58, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(59, 1)), 58);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(60, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(61, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(62, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_agc, $mul.ref(0, 64)), $mul.ref(63, 1)), 62);
    $M.0 := $store.i8($M.0, vnt_vt3184_al2230, 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(1, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(5, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(7, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(8, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(9, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(10, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(11, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(14, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(27, 1)), $sub.i8(0, 114));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(28, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(35, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(36, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(37, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(38, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(41, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(42, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(45, 1)), 74);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(46, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(47, 1)), 12);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(48, 1)), 38);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(49, 1)), 91);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(50, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(52, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(53, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(54, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(55, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(56, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(57, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(58, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(59, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(60, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(61, 1)), 11);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(62, 1)), 72);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(63, 1)), 4);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(64, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(65, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(66, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(67, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(68, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(69, 1)), 20);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(70, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(71, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(72, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(73, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(74, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(75, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(76, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(77, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(78, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(79, 1)), $sub.i8(0, 59));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(80, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(81, 1)), 25);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(82, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(83, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(84, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(85, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(86, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(87, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(88, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(89, 1)), $sub.i8(0, 48));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(90, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(91, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(92, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(93, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(94, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(95, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(96, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(97, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(98, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(99, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(100, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(101, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(102, 1)), $sub.i8(0, 104));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(103, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(104, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(105, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(106, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(107, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(108, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(109, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(110, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(111, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(112, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(113, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(114, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(115, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(116, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(117, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(118, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(119, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(120, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(121, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(122, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(123, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(124, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(125, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(126, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(127, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(128, 1)), $sub.i8(0, 116));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(129, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(130, 1)), 9);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(131, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(132, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(133, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(134, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(135, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(136, 1)), 8);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(137, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(138, 1)), 31);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(139, 1)), $sub.i8(0, 73));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(140, 1)), $sub.i8(0, 120));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(141, 1)), 71);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(142, 1)), $sub.i8(0, 86));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(143, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(144, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(145, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(146, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(147, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(148, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(149, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(150, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(151, 1)), $sub.i8(0, 21));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(152, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(153, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(154, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(155, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(156, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(157, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(158, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(159, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(160, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(161, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(162, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(163, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(164, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(165, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(166, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(167, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(168, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(169, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(170, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(171, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(172, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(173, 1)), 21);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(174, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(175, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(176, 1)), 56);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(177, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(178, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(179, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(180, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(181, 1)), 15);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(182, 1)), $sub.i8(0, 28));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(183, 1)), $sub.i8(0, 30));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(184, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(185, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(186, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(187, 1)), 3);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(188, 1)), 1);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(189, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(190, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(191, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(192, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(193, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(194, 1)), 7);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(195, 1)), 24);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(196, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(197, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(198, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(199, 1)), 10);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(200, 1)), 14);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(201, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(202, 1)), $sub.i8(0, 126));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(203, 1)), $sub.i8(0, 89));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(204, 1)), 60);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(205, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(206, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(207, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(208, 1)), 64);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(209, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(210, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(211, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(212, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(213, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(214, 1)), $sub.i8(0, 128));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(215, 1)), 42);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(216, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(217, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(218, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(219, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(220, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(221, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(222, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(223, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(224, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(225, 1)), $sub.i8(0, 13));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(226, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(227, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(228, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(229, 1)), 16);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(230, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(231, 1)), 18);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(232, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(233, 1)), $sub.i8(0, 12));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(234, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(235, 1)), $sub.i8(0, 1));
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(236, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(237, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(238, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(239, 1)), 5);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(240, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(241, 1)), 62);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(242, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(243, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(244, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(245, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(246, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(247, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(248, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(249, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(250, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(251, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(252, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(253, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(254, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(vnt_vt3184_al2230, $mul.ref(0, 256)), $mul.ref(255, 1)), 0);
    $M.26 := $store.i16($M.26, vnt_frame_time, 10);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(1, 2)), 20);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(2, 2)), 55);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(3, 2)), 110);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(4, 2)), 24);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(5, 2)), 36);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(6, 2)), 48);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(7, 2)), 72);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(8, 2)), 96);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(9, 2)), 144);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(10, 2)), 192);
    $M.26 := $store.i16($M.26, $add.ref($add.ref(vnt_frame_time, $mul.ref(0, 24)), $mul.ref(11, 2)), 216);
    $M.92 := $store.i16($M.92, cwRXBCNTSFOff, 192);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(1, 2)), 96);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(2, 2)), 34);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(3, 2)), 17);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(4, 2)), 34);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(5, 2)), 23);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(6, 2)), 17);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(7, 2)), 11);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(8, 2)), 8);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(9, 2)), 5);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(10, 2)), 4);
    $M.92 := $store.i16($M.92, $add.ref($add.ref(cwRXBCNTSFOff, $mul.ref(0, 24)), $mul.ref(11, 2)), 3);
    $M.5 := 64;
    call {:si_unique_call 1598} {:cexpr "vnt_rx_buffers"} boogie_si_record_i32(64);
    $M.4 := 64;
    call {:si_unique_call 1599} {:cexpr "vnt_tx_buffers"} boogie_si_record_i32(64);
    $M.181 := $store.i16($M.181, vt6656_table, 3);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(2, 1)), 5642);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 12676);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.181 := $store.i64($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.181 := $store.i16($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.181 := $store.i8($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.181 := $store.i64($M.181, $add.ref($add.ref($add.ref(vt6656_table, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.182 := $store.ref($M.182, vt6656_driver, .str.68);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), vt6656_probe);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), vt6656_disconnect);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), vt6656_suspend);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), vt6656_resume);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), vt6656_table);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.182 := $store.i64($M.182, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.182 := $store.i8($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.182 := $store.ref($M.182, $add.ref($add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.182 := $store.i32($M.182, $add.ref($add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.182 := $store.i8($M.182, $add.ref($add.ref(vt6656_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 0);
    call {:si_unique_call 1600} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 518647);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 519679);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.67, $M.2, $M.68, $M.69, $M.70, $M.3, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.24, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.59, $M.58, $M.0, $M.22, $M.21, $M.25, $M.65, $M.64, $M.26, $M.92, $M.5, $M.4, $M.181, $M.182, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1601} __SMACK_static_init();
    call {:si_unique_call 1602} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.66, $M.12, $M.14, $M.16, $M.18, $M.68, $M.69, $M.70, $M.3, $M.71, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.72, $M.28, $M.20, $M.73, $M.34, $M.29, $M.38, $M.35, $M.74, $M.1, $M.75, $M.77, $M.13, $M.15, $M.17, $M.19, $M.67, $M.2, $M.76, $M.24, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.59, $M.58, $M.22, $M.21, $M.25, $M.65, $M.64, $M.26, $M.92, $M.5, $M.4, $M.181, $M.182, $CurrAddr, $M.33, $M.51, $M.52, $M.53, $M.54, $M.49, $M.39, $M.63, $M.50, $M.57, $M.40, $M.41, $M.42, $M.43, $M.44, $M.47, $M.23, $M.55, $M.56;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation vnt_get_free_context_loop_$bb7(in_$p0: ref, in_$p22: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$p41: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i26: i32, in_$i49: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$p41: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i26: i32, out_$i49: i32)
{

  entry:
    out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i46, out_$i47, out_$i48, out_$i26, out_$i49 := in_$i27, in_$p29, in_$p30, in_$i31, in_$i32, in_$i34, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$i46, in_$i47, in_$i48, in_$i26, in_$i49;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1342;

  $bb16:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := out_$i46;
    goto $bb16_dummy;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    out_$i49 := out_$i46;
    assume true;
    goto $bb16;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i46, out_$i47);
    goto corral_source_split_1372;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, in_$p22);
    goto corral_source_split_1371;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i26, 1);
    call {:si_unique_call 291} {:cexpr "ii"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_1370;

  $bb13:
    assume out_$i40 == 1;
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    out_$p41 := out_$p37;
    assume true;
    goto $bb13;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    out_$i40 := $trunc.i8.i1(out_$i39);
    goto corral_source_split_1359;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i8($M.0, out_$p38);
    goto corral_source_split_1358;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_1357;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1356;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref(out_$i34, 8));
    goto corral_source_split_1355;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1354;

  $bb10:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i31, 0);
    goto corral_source_split_1348;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_1347;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_1346;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref(out_$i27, 8));
    goto corral_source_split_1345;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i27 := $sext.i32.i64(out_$i26);
    goto corral_source_split_1344;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i46, out_$i47, out_$i48, out_$i26, out_$i49 := vnt_get_free_context_loop_$bb7(in_$p0, in_$p22, out_$i27, out_$p29, out_$p30, out_$i31, out_$i32, out_$i34, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$i46, out_$i47, out_$i48, out_$i26, out_$i49);
    return;

  exit:
    return;
}



procedure vnt_get_free_context_loop_$bb7(in_$p0: ref, in_$p22: ref, in_$i27: i64, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$i34: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i8, in_$i40: i1, in_$p41: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i26: i32, in_$i49: i32) returns (out_$i27: i64, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$i34: i64, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i8, out_$i40: i1, out_$p41: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i26: i32, out_$i49: i32);



implementation vnt_download_firmware_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$p27: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i16, in_$i51: i32, in_$i52: i32, in_$i53: i16, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i24, in_$i64: i24, in_$i65: i24, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i64, in_$i70: i64, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i77: i32, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i35: i32, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i16, out_$i51: i32, out_$i52: i32, out_$i53: i16, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i24, out_$i64: i24, out_$i65: i24, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i64, out_$i70: i64, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i77: i32, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i35: i32, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8)
{

  entry:
    out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i35, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16 := in_$p36, in_$p37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$p73, in_$p74, in_$i75, in_$i76, in_$i77, in_$i78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i35, in_cmdloc_dummy_var_14, in_cmdloc_dummy_var_15, in_cmdloc_dummy_var_16;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;

  $bb26:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i35 := out_$i77;
    goto $bb26_dummy;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$i82 := $ult.i64(out_$i78, out_$i81);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.31, out_$p80);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p79, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.30, in_$p1);
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$i78 := $sext.i32.i64(out_$i77);
    goto corral_source_split_3928;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i35, 1024);
    call {:si_unique_call 483} {:cexpr "ii"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_3927;

  $bb24:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i32(out_$i56, 0);
    goto corral_source_split_3923;

  $bb21:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __dynamic_dev_dbg.ref.ref.ref.i32.i64(in_$p3, in_$p6, .str.46, out_$i35, out_$i75);
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i64($M.31, out_$p74);
    goto corral_source_split_3920;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3919;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.30, in_$p1);
    goto corral_source_split_3918;

  $bb20:
    assume out_$i72 == 1;
    goto corral_source_split_3917;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i64(out_$i71, 0);
    goto corral_source_split_3915;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} out_$i71 := ldv__builtin_expect(out_$i70, 0);
    call {:si_unique_call 481} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_3914;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    out_$i70 := $and.i64(out_$i69, 1);
    goto corral_source_split_3913;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i8.i64(out_$i68);
    goto corral_source_split_3912;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i8($M.11, out_$p67);
    goto corral_source_split_3911;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3910;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    $M.11 := $store.i8($M.11, out_$p66, 0);
    goto corral_source_split_3909;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3908;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $M.10 := $store.i24($M.10, out_$p62, out_$i65);
    goto corral_source_split_3907;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    out_$i65 := $or.i24(out_$i64, 77);
    goto corral_source_split_3906;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i24(out_$i63, $sub.i24(0, 262144));
    goto corral_source_split_3905;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i24($M.10, out_$p62);
    goto corral_source_split_3904;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_3903;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3902;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $M.9 := $store.ref($M.9, out_$p60, .str.46);
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, out_$p59, .str.42);
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $M.7 := $store.ref($M.7, out_$p58, .str.41);
    goto corral_source_split_3897;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3896;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.6 := $store.ref($M.6, out_$p57, .str);
    goto corral_source_split_3895;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} out_$i56 := vnt_control_out(in_$p0, 0, out_$i53, 0, out_$i55, in_$p27);
    call {:si_unique_call 479} {:cexpr "status"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i32.i16(out_$i54);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i43);
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i52);
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i51, 4608);
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(out_$i50);
    goto corral_source_split_3888;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_3887;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_14 := $M.0;
    out_cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 477} out_cmdloc_dummy_var_16 := $memcpy.i8(out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, in_$p27, out_$p48, out_$i49, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_16;
    goto corral_source_split_3886;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i64(out_$i43);
    goto corral_source_split_3885;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref(out_$p46, $mul.ref(out_$i47, 1));
    goto corral_source_split_3884;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i32.i64(out_$i35);
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.32, out_$p45);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p44, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.30, in_$p1);
    goto corral_source_split_3880;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$i43 := $trunc.i32.i16(out_$i42);
    call {:si_unique_call 476} {:cexpr "length"} boogie_si_record_i16(out_$i43);
    goto corral_source_split_3879;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3878;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$i42 := 1024;
    goto $bb19;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i40;
    goto $bb19;

  $bb17:
    assume out_$i41 == 1;
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 1024);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$i40 := $sub.i32(out_$i39, out_$i35);
    call {:si_unique_call 475} {:cexpr "__min1"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i64.i32(out_$i38);
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.31, out_$p37);
    goto corral_source_split_3869;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3868;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.30, in_$p1);
    goto corral_source_split_3867;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb18:
    assume !(out_$i41 == 1);
    goto corral_source_split_3876;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i35, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16 := vnt_download_firmware_loop_$bb15(in_$p0, in_$p1, in_$p3, in_$p6, in_$p27, out_$p36, out_$p37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$i78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i35, out_cmdloc_dummy_var_14, out_cmdloc_dummy_var_15, out_cmdloc_dummy_var_16);
    return;

  exit:
    return;
}



procedure vnt_download_firmware_loop_$bb15(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p6: ref, in_$p27: ref, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i32, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$i43: i16, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p48: ref, in_$i49: i64, in_$i50: i16, in_$i51: i32, in_$i52: i32, in_$i53: i16, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i24, in_$i64: i24, in_$i65: i24, in_$p66: ref, in_$p67: ref, in_$i68: i8, in_$i69: i64, in_$i70: i64, in_$i71: i64, in_$i72: i1, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$i77: i32, in_$i78: i64, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$i35: i32, in_cmdloc_dummy_var_14: [ref]i8, in_cmdloc_dummy_var_15: [ref]i8, in_cmdloc_dummy_var_16: [ref]i8) returns (out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i32, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$i43: i16, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p48: ref, out_$i49: i64, out_$i50: i16, out_$i51: i32, out_$i52: i32, out_$i53: i16, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i24, out_$i64: i24, out_$i65: i24, out_$p66: ref, out_$p67: ref, out_$i68: i8, out_$i69: i64, out_$i70: i64, out_$i71: i64, out_$i72: i1, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$i77: i32, out_$i78: i64, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$i35: i32, out_cmdloc_dummy_var_14: [ref]i8, out_cmdloc_dummy_var_15: [ref]i8, out_cmdloc_dummy_var_16: [ref]i8);
  modifies $M.11, $M.10, $M.9, $M.8, $M.7, $M.6, $M.0;



implementation {:SIextraRecBound 3} vnt_rf_table_download_loop_$bb46(in_$p0: ref, in_$p1: ref, in_$i94: i32, in_$i95: i1, in_$i96: i16, in_$p97: ref, in_$i98: i64, in_$i99: i32, in_$i100: i16, in_$i101: i32, in_$i102: i16, in_$p103: ref, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i16, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i16, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i91: i16, in_$i92: i16, in_$p93: ref, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_vslice_dummy_var_95: i32) returns (out_$i94: i32, out_$i95: i1, out_$i96: i16, out_$p97: ref, out_$i98: i64, out_$i99: i32, out_$i100: i16, out_$i101: i32, out_$i102: i16, out_$p103: ref, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i16, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i16, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i91: i16, out_$i92: i16, out_$p93: ref, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_vslice_dummy_var_95: i32)
{

  entry:
    out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i91, out_$i92, out_$p93, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_vslice_dummy_var_95 := in_$i94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$p103, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$p114, in_$i115, in_$i116, in_$i91, in_$i92, in_$p93, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37, in_vslice_dummy_var_95;
    goto $bb46, exit;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4388;

  $bb51:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i91, out_$i92, out_$p93 := out_$i112, out_$i108, out_$p114;
    goto $bb51_dummy;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    out_$i116 := $ne.i32(out_$i115, 0);
    goto corral_source_split_4416;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    out_$i115 := $zext.i16.i32(out_$i108);
    goto corral_source_split_4415;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref(out_$p93, $mul.ref(out_$i113, 1));
    goto corral_source_split_4414;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i16.i64(out_$i96);
    goto corral_source_split_4413;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    out_$i112 := $trunc.i32.i16(out_$i111);
    call {:si_unique_call 557} {:cexpr "value"} boogie_si_record_i16(out_$i112);
    goto corral_source_split_4412;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    out_$i111 := $add.i32(out_$i109, out_$i110);
    goto corral_source_split_4411;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i16.i32(out_$i96);
    goto corral_source_split_4410;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i91);
    goto corral_source_split_4409;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i32.i16(out_$i107);
    call {:si_unique_call 556} {:cexpr "length2"} boogie_si_record_i16(out_$i108);
    goto corral_source_split_4408;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    out_$i107 := $sub.i32(out_$i105, out_$i106);
    goto corral_source_split_4407;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i16.i32(out_$i96);
    goto corral_source_split_4406;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i16.i32(out_$i92);
    goto corral_source_split_4405;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} out_vslice_dummy_var_95 := vnt_control_out(in_$p0, 0, out_$i100, 13, out_$i102, out_$p103);
    goto corral_source_split_4404;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    out_$p103 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4403;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    out_$i102 := $trunc.i32.i16(out_$i101);
    goto corral_source_split_4402;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i16.i32(out_$i96);
    goto corral_source_split_4401;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    out_$i100 := $trunc.i32.i16(out_$i99);
    goto corral_source_split_4400;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i16.i32(out_$i91);
    goto corral_source_split_4399;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_35 := $M.0;
    out_cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 554} out_cmdloc_dummy_var_37 := $memcpy.i8(out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_$p97, out_$p93, out_$i98, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_37;
    goto corral_source_split_4398;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i64(out_$i96);
    goto corral_source_split_4397;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4396;

  $bb50:
    assume {:verifier.code 0} true;
    goto corral_source_split_4395;

  $bb49:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := out_$i92;
    goto $bb50;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    out_$i96 := 64;
    goto $bb50;

  $bb48:
    assume out_$i95 == 1;
    goto corral_source_split_4393;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    out_$i95 := $ugt.i32(out_$i94, 63);
    goto corral_source_split_4391;

  $bb47:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i16.i32(out_$i92);
    goto corral_source_split_4390;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb51_dummy:
    call {:si_unique_call 1} out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i91, out_$i92, out_$p93, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_vslice_dummy_var_95 := vnt_rf_table_download_loop_$bb46(in_$p0, in_$p1, out_$i94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$p103, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$p114, out_$i115, out_$i116, out_$i91, out_$i92, out_$p93, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure vnt_rf_table_download_loop_$bb46(in_$p0: ref, in_$p1: ref, in_$i94: i32, in_$i95: i1, in_$i96: i16, in_$p97: ref, in_$i98: i64, in_$i99: i32, in_$i100: i16, in_$i101: i32, in_$i102: i16, in_$p103: ref, in_$i105: i32, in_$i106: i32, in_$i107: i32, in_$i108: i16, in_$i109: i32, in_$i110: i32, in_$i111: i32, in_$i112: i16, in_$i113: i64, in_$p114: ref, in_$i115: i32, in_$i116: i1, in_$i91: i16, in_$i92: i16, in_$p93: ref, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8, in_vslice_dummy_var_95: i32) returns (out_$i94: i32, out_$i95: i1, out_$i96: i16, out_$p97: ref, out_$i98: i64, out_$i99: i32, out_$i100: i16, out_$i101: i32, out_$i102: i16, out_$p103: ref, out_$i105: i32, out_$i106: i32, out_$i107: i32, out_$i108: i16, out_$i109: i32, out_$i110: i32, out_$i111: i32, out_$i112: i16, out_$i113: i64, out_$p114: ref, out_$i115: i32, out_$i116: i1, out_$i91: i16, out_$i92: i16, out_$p93: ref, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8, out_vslice_dummy_var_95: i32);
  modifies $M.0;



implementation vnt_rf_table_download_loop_$bb36(in_$p0: ref, in_$p1: ref, in_$i58: i32, in_$i59: i1, in_$i60: i16, in_$p61: ref, in_$i62: i64, in_$i63: i32, in_$i64: i16, in_$i65: i32, in_$i66: i16, in_$p67: ref, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i16, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i16, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i55: i16, in_$i56: i16, in_$p57: ref, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_vslice_dummy_var_93: i32) returns (out_$i58: i32, out_$i59: i1, out_$i60: i16, out_$p61: ref, out_$i62: i64, out_$i63: i32, out_$i64: i16, out_$i65: i32, out_$i66: i16, out_$p67: ref, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i16, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i16, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i55: i16, out_$i56: i16, out_$p57: ref, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_vslice_dummy_var_93: i32)
{

  entry:
    out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i55, out_$i56, out_$p57, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_vslice_dummy_var_93 := in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i55, in_$i56, in_$p57, in_cmdloc_dummy_var_29, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31, in_vslice_dummy_var_93;
    goto $bb36, exit;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4342;

  $bb41:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$i55, out_$i56, out_$p57 := out_$i76, out_$i72, out_$p78;
    goto $bb41_dummy;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_4370;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i16.i32(out_$i72);
    goto corral_source_split_4369;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p57, $mul.ref(out_$i77, 1));
    goto corral_source_split_4368;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i64(out_$i60);
    goto corral_source_split_4367;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    out_$i76 := $trunc.i32.i16(out_$i75);
    call {:si_unique_call 551} {:cexpr "value"} boogie_si_record_i16(out_$i76);
    goto corral_source_split_4366;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i73, out_$i74);
    goto corral_source_split_4365;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i16.i32(out_$i60);
    goto corral_source_split_4364;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    out_$i73 := $zext.i16.i32(out_$i55);
    goto corral_source_split_4363;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i16(out_$i71);
    call {:si_unique_call 550} {:cexpr "length3"} boogie_si_record_i16(out_$i72);
    goto corral_source_split_4362;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    out_$i71 := $sub.i32(out_$i69, out_$i70);
    goto corral_source_split_4361;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i16.i32(out_$i60);
    goto corral_source_split_4360;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i56);
    goto corral_source_split_4359;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} out_vslice_dummy_var_93 := vnt_control_out(in_$p0, 0, out_$i64, 12, out_$i66, out_$p67);
    goto corral_source_split_4358;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    out_$p67 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4357;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    goto corral_source_split_4356;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i16.i32(out_$i60);
    goto corral_source_split_4355;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    out_$i64 := $trunc.i32.i16(out_$i63);
    goto corral_source_split_4354;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i55);
    goto corral_source_split_4353;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_29 := $M.0;
    out_cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 548} out_cmdloc_dummy_var_31 := $memcpy.i8(out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_$p61, out_$p57, out_$i62, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_31;
    goto corral_source_split_4352;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i64(out_$i60);
    goto corral_source_split_4351;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4350;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_4349;

  $bb39:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := out_$i56;
    goto $bb40;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    out_$i60 := 64;
    goto $bb40;

  $bb38:
    assume out_$i59 == 1;
    goto corral_source_split_4347;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    out_$i59 := $ugt.i32(out_$i58, 63);
    goto corral_source_split_4345;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i56);
    goto corral_source_split_4344;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb41_dummy:
    call {:si_unique_call 1} out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i55, out_$i56, out_$p57, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_vslice_dummy_var_93 := vnt_rf_table_download_loop_$bb36(in_$p0, in_$p1, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i55, out_$i56, out_$p57, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_vslice_dummy_var_93);
    return;

  exit:
    return;
}



procedure vnt_rf_table_download_loop_$bb36(in_$p0: ref, in_$p1: ref, in_$i58: i32, in_$i59: i1, in_$i60: i16, in_$p61: ref, in_$i62: i64, in_$i63: i32, in_$i64: i16, in_$i65: i32, in_$i66: i16, in_$p67: ref, in_$i69: i32, in_$i70: i32, in_$i71: i32, in_$i72: i16, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i16, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i55: i16, in_$i56: i16, in_$p57: ref, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_vslice_dummy_var_93: i32) returns (out_$i58: i32, out_$i59: i1, out_$i60: i16, out_$p61: ref, out_$i62: i64, out_$i63: i32, out_$i64: i16, out_$i65: i32, out_$i66: i16, out_$p67: ref, out_$i69: i32, out_$i70: i32, out_$i71: i32, out_$i72: i16, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i16, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i55: i16, out_$i56: i16, out_$p57: ref, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_vslice_dummy_var_93: i32);
  modifies $M.0;



implementation vnt_rf_table_download_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i30: i32, in_$i31: i1, in_$i32: i16, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$p39: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i27: i16, in_$i28: i16, in_$p29: ref, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_vslice_dummy_var_92: i32) returns (out_$i30: i32, out_$i31: i1, out_$i32: i16, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i16, out_$i37: i32, out_$i38: i16, out_$p39: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i27: i16, out_$i28: i16, out_$p29: ref, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_vslice_dummy_var_92: i32)
{

  entry:
    out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_vslice_dummy_var_92 := in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$p39, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$p50, in_$i51, in_$i52, in_$i27, in_$i28, in_$p29, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_vslice_dummy_var_92;
    goto $bb25, exit;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4305;

  $bb30:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$i27, out_$i28, out_$p29 := out_$i48, out_$i44, out_$p50;
    goto $bb30_dummy;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_4333;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    out_$i51 := $zext.i16.i32(out_$i44);
    goto corral_source_split_4332;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p29, $mul.ref(out_$i49, 1));
    goto corral_source_split_4331;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i64(out_$i32);
    goto corral_source_split_4330;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    out_$i48 := $trunc.i32.i16(out_$i47);
    call {:si_unique_call 547} {:cexpr "value"} boogie_si_record_i16(out_$i48);
    goto corral_source_split_4329;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i45, out_$i46);
    goto corral_source_split_4328;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i32);
    goto corral_source_split_4327;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4326;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    out_$i44 := $trunc.i32.i16(out_$i43);
    call {:si_unique_call 546} {:cexpr "length2"} boogie_si_record_i16(out_$i44);
    goto corral_source_split_4325;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i32(out_$i41, out_$i42);
    goto corral_source_split_4324;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i32);
    goto corral_source_split_4323;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i32(out_$i28);
    goto corral_source_split_4322;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} out_vslice_dummy_var_92 := vnt_control_out(in_$p0, 0, out_$i36, 11, out_$i38, out_$p39);
    goto corral_source_split_4321;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4320;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    goto corral_source_split_4319;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i32);
    goto corral_source_split_4318;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i32.i16(out_$i35);
    goto corral_source_split_4317;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i27);
    goto corral_source_split_4316;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_26 := $M.0;
    out_cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 544} out_cmdloc_dummy_var_28 := $memcpy.i8(out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_$p33, out_$p29, out_$i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_28;
    goto corral_source_split_4315;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i64(out_$i32);
    goto corral_source_split_4314;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_4313;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_4312;

  $bb28:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$i32 := out_$i28;
    goto $bb29;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    out_$i32 := 64;
    goto $bb29;

  $bb27:
    assume out_$i31 == 1;
    goto corral_source_split_4310;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    out_$i31 := $ugt.i32(out_$i30, 63);
    goto corral_source_split_4308;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i28);
    goto corral_source_split_4307;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb30_dummy:
    call {:si_unique_call 1} out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_vslice_dummy_var_92 := vnt_rf_table_download_loop_$bb25(in_$p0, in_$p1, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$p39, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$p50, out_$i51, out_$i52, out_$i27, out_$i28, out_$p29, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_vslice_dummy_var_92);
    return;

  exit:
    return;
}



procedure vnt_rf_table_download_loop_$bb25(in_$p0: ref, in_$p1: ref, in_$i30: i32, in_$i31: i1, in_$i32: i16, in_$p33: ref, in_$i34: i64, in_$i35: i32, in_$i36: i16, in_$i37: i32, in_$i38: i16, in_$p39: ref, in_$i41: i32, in_$i42: i32, in_$i43: i32, in_$i44: i16, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$i48: i16, in_$i49: i64, in_$p50: ref, in_$i51: i32, in_$i52: i1, in_$i27: i16, in_$i28: i16, in_$p29: ref, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_vslice_dummy_var_92: i32) returns (out_$i30: i32, out_$i31: i1, out_$i32: i16, out_$p33: ref, out_$i34: i64, out_$i35: i32, out_$i36: i16, out_$i37: i32, out_$i38: i16, out_$p39: ref, out_$i41: i32, out_$i42: i32, out_$i43: i32, out_$i44: i16, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$i48: i16, out_$i49: i64, out_$p50: ref, out_$i51: i32, out_$i52: i1, out_$i27: i16, out_$i28: i16, out_$p29: ref, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_vslice_dummy_var_92: i32);
  modifies $M.0;



implementation vnt_prepare_multicast_loop_$bb4(in_$i10: i64, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i13: i64, in_$p14: ref, in_$i30: i64) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i13: i64, out_$p14: ref, out_$i30: i64)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i13, out_$p14, out_$i30 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$i13, in_$p14, in_$i30;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4925;

  $bb6:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i13, out_$p14 := out_$i23, out_$p26;
    goto $bb6_dummy;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i23;
    assume true;
    goto $bb6;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, in_$i10);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.37, out_$p25);
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i23 := $or.i64(out_$i22, out_$i13);
    call {:si_unique_call 668} {:cexpr "mc_filter"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$i22 := $shl.i64(1, out_$i21);
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i20);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i32(out_$i19, 63);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    out_$i19 := $lshr.i32(out_$i18, 26);
    call {:si_unique_call 667} {:cexpr "bit_nr"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} out_$i18 := __bitrev32(out_$i17);
    call {:si_unique_call 666} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} out_$i17 := crc32_le($sub.i32(0, 1), out_$p16, 6);
    call {:si_unique_call 664} {:cexpr "tmp"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_4928;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i13, out_$p14, out_$i30 := vnt_prepare_multicast_loop_$bb4(in_$i10, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$i13, out_$p14, out_$i30);
    return;

  exit:
    return;
}



procedure vnt_prepare_multicast_loop_$bb4(in_$i10: i64, in_$p15: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i13: i64, in_$p14: ref, in_$i30: i64) returns (out_$p15: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i13: i64, out_$p14: ref, out_$i30: i64);



implementation vnt_get_cck_rate_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i11: i16, in_$i13: i32, in_$i14: i32, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$i4: i16) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i11: i16, out_$i13: i32, out_$i14: i32, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$i4: i16)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6474;

  $bb10:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i15;
    goto $bb10_dummy;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_6491;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_6490;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i32.i16(out_$i14);
    call {:si_unique_call 788} {:cexpr "ui"} boogie_si_record_i16(out_$i15);
    goto corral_source_split_6489;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    out_$i14 := $sub.i32(out_$i13, 1);
    goto corral_source_split_6488;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i16.i32(out_$i4);
    goto corral_source_split_6487;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i4;
    assume true;
    goto $bb7;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_6481;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    out_$i9 := $and.i32(out_$i6, out_$i8);
    goto corral_source_split_6480;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    out_$i8 := $shl.i32(1, out_$i7);
    goto corral_source_split_6479;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    out_$i7 := $zext.i16.i32(out_$i4);
    goto corral_source_split_6478;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    out_$i6 := $load.i32($M.0, out_$p5);
    goto corral_source_split_6477;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6476;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i4 := vnt_get_cck_rate_loop_$bb4(in_$p0, out_$p5, out_$i6, out_$i7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i4);
    return;

  exit:
    return;
}



procedure vnt_get_cck_rate_loop_$bb4(in_$p0: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$i11: i16, in_$i13: i32, in_$i14: i32, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$i4: i16) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$i11: i16, out_$i13: i32, out_$i14: i32, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$i4: i16);



implementation vnt_get_ofdm_rate_loop_$bb17(in_$p0: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i16, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$i86: i32, in_$i87: i1, in_$i55: i16) returns (out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i16, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$i86: i32, out_$i87: i1, out_$i55: i16)
{

  entry:
    out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i55 := in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i55;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  $bb25:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i55 := out_$i85;
    goto $bb25_dummy;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    out_$i87 := $ugt.i32(out_$i86, 3);
    goto corral_source_split_6710;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i16.i32(out_$i85);
    goto corral_source_split_6709;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i16(out_$i84);
    call {:si_unique_call 808} {:cexpr "ui"} boogie_si_record_i16(out_$i85);
    goto corral_source_split_6708;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    out_$i84 := $sub.i32(out_$i83, 1);
    goto corral_source_split_6707;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i55);
    goto corral_source_split_6706;

  $bb20:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    out_$i62 := out_$i55;
    assume true;
    goto $bb20;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i32(out_$i60, 0);
    goto corral_source_split_6673;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i57, out_$i59);
    goto corral_source_split_6672;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    out_$i59 := $shl.i32(1, out_$i58);
    goto corral_source_split_6671;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i55);
    goto corral_source_split_6670;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_6669;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(2476, 1));
    goto corral_source_split_6668;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i55 := vnt_get_ofdm_rate_loop_$bb17(in_$p0, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i55);
    return;

  exit:
    return;
}



procedure vnt_get_ofdm_rate_loop_$bb17(in_$p0: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i1, in_$i62: i16, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$i86: i32, in_$i87: i1, in_$i55: i16) returns (out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i1, out_$i62: i16, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$i86: i32, out_$i87: i1, out_$i55: i16);



implementation vnt_update_top_rates_loop_$bb13(in_$p8: ref, in_$i14: i8, in_$i13: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$i14: i8, out_$i13: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i1)
{

  entry:
    out_$i14, out_$i13, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := in_$i14, in_$i13, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i13 := out_$i20;
    goto $bb20_dummy;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    out_$i14 := out_$i20;
    assume true;
    goto $bb20;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_7272;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    out_$i26 := $and.i32(out_$i21, out_$i25);
    goto corral_source_split_7271;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i24);
    goto corral_source_split_7270;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    out_$i24 := $trunc.i32.i16(out_$i23);
    goto corral_source_split_7269;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    out_$i23 := $shl.i32(1, out_$i22);
    goto corral_source_split_7268;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i8.i32(out_$i20);
    goto corral_source_split_7267;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, in_$p8);
    goto corral_source_split_7266;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    out_$i20 := $trunc.i32.i8(out_$i19);
    call {:si_unique_call 903} {:cexpr "i"} boogie_si_record_i8(out_$i20);
    goto corral_source_split_7265;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    out_$i19 := $sub.i32(out_$i18, 1);
    goto corral_source_split_7264;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i8.i32(out_$i13);
    goto corral_source_split_7263;

  $bb18:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i32(out_$i16, 0);
    goto corral_source_split_7259;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i8.i32(out_$i13);
    goto corral_source_split_7258;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i14, out_$i13, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27 := vnt_update_top_rates_loop_$bb13(in_$p8, out_$i14, out_$i13, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27);
    return;

  exit:
    return;
}



procedure vnt_update_top_rates_loop_$bb13(in_$p8: ref, in_$i14: i8, in_$i13: i8, in_$i16: i32, in_$i17: i1, in_$i18: i32, in_$i19: i32, in_$i20: i8, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i16, in_$i25: i32, in_$i26: i32, in_$i27: i1) returns (out_$i14: i8, out_$i13: i8, out_$i16: i32, out_$i17: i1, out_$i18: i32, out_$i19: i32, out_$i20: i8, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i16, out_$i25: i32, out_$i26: i32, out_$i27: i1);



implementation vnt_free_tx_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i4: i32) returns (out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i4: i32)
{

  entry:
    out_$i5, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i4 := in_$i5, in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7519;

  $bb9:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i18;
    goto $bb9_dummy;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i18, out_$i19);
    goto corral_source_split_7541;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p1);
    goto corral_source_split_7540;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i4, 1);
    call {:si_unique_call 963} {:cexpr "ii"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_7539;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} kfree(out_$p17);
    goto corral_source_split_7538;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p17 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_7537;

  $bb7:
    assume !(out_$i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} usb_free_urb(out_$p16);
    goto corral_source_split_7535;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_7534;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p8, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7533;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} usb_kill_urb(out_$p14);
    goto corral_source_split_7532;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_7531;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p8, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7530;

  $bb6:
    assume out_$i12 == 1;
    goto corral_source_split_7529;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    out_$i12 := $ne.i64(out_$i11, 0);
    goto corral_source_split_7527;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_7526;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_7525;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7524;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_7523;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref(out_$i5, 8));
    goto corral_source_split_7522;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_7521;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i5, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i4 := vnt_free_tx_bufs_loop_$bb4(in_$p0, in_$p1, out_$i5, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$p14, out_$p15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i4);
    return;

  exit:
    return;
}



procedure vnt_free_tx_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i1, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i4: i32) returns (out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i1, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i4: i32);



implementation vnt_free_rx_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32)
{

  entry:
    out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4 := in_$i5, in_$p7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$i21, in_$i22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i28, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7552;

  $bb16:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i26;
    goto $bb16_dummy;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i26, out_$i27);
    goto corral_source_split_7564;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p1);
    goto corral_source_split_7563;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i4, 1);
    call {:si_unique_call 964} {:cexpr "ii"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_7562;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i10 == 1;
    goto corral_source_split_7560;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    out_$i10 := $eq.i64(out_$i9, 0);
    goto corral_source_split_7558;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_7557;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_7556;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref(out_$i5, 8));
    goto corral_source_split_7555;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i5 := $sext.i32.i64(out_$i4);
    goto corral_source_split_7554;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} kfree(out_$p25);
    goto corral_source_split_7590;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p8);
    goto corral_source_split_7589;

  $bb14:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} consume_skb(out_$p24);
    goto corral_source_split_7587;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_7586;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7585;

  $bb13:
    assume out_$i22 == 1;
    goto corral_source_split_7584;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7581:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_7582;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_7581;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_7580;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7579;

  $bb11:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} usb_free_urb(out_$p18);
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_7576;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} usb_kill_urb(out_$p16);
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7572;

  $bb10:
    assume out_$i14 == 1;
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_7569;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_7568;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_7567;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p8, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7566;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4 := vnt_free_rx_bufs_loop_$bb4(in_$p0, in_$p1, out_$i5, out_$p7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$p20, out_$i21, out_$i22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4);
    return;

  exit:
    return;
}



procedure vnt_free_rx_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i5: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$i5: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32);



implementation vnt_alloc_bufs_loop_$bb19(in_$p0: ref, in_$p29: ref, in_$p33: ref, in_$i35: i64, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i48: i64, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p63: ref, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i32: i32) returns (out_$p33: ref, out_$i35: i64, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i48: i64, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p63: ref, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i32: i32)
{

  entry:
    out_$p33, out_$i35, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i48, out_$p50, out_$p51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i32 := in_$p33, in_$i35, in_$p37, in_$i38, in_$p40, in_$p41, in_$i42, in_$i43, in_$i44, in_$i48, in_$p50, in_$p51, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p63, in_$i64, in_$p65, in_$p66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i32;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7724;

  $bb34:
    assume out_$i76 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := out_$i74;
    goto $bb34_dummy;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    out_$i76 := $ult.i32(out_$i74, out_$i75);
    goto corral_source_split_7786;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    out_$i75 := $load.i32($M.0, in_$p29);
    goto corral_source_split_7785;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i32, 1);
    call {:si_unique_call 989} {:cexpr "ii"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_7784;

  $bb32:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_7780;

  SeqInstr_72:
    call {:si_unique_call 988} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_7779;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} out_$i72 := vnt_submit_rx_urb(in_$p0, out_$p51);
    goto SeqInstr_71;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p71, 0);
    goto corral_source_split_7778;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p51, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_7777;

  $bb29:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i64(out_$i69, 0);
    goto corral_source_split_7773;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$i69 := $p2i.ref.i64(out_$p68);
    goto corral_source_split_7772;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_7771;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7770;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p66, out_$p65);
    goto corral_source_split_7769;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p51, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7768;

  SeqInstr_69:
    goto corral_source_split_7767;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_$p65 := dev_alloc_skb(out_$i64);
    goto SeqInstr_68;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_7766;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(44, 1));
    goto corral_source_split_7765;

  $bb26:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    out_$i59 := $eq.i64(out_$i58, 0);
    goto corral_source_split_7757;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_7756;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_7755;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p51, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7754;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p55, out_$p54);
    goto corral_source_split_7753;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p51, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7752;

  SeqInstr_66:
    goto corral_source_split_7751;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_$p54 := ldv_usb_alloc_urb_43(0, 32);
    goto SeqInstr_65;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p53, in_$p0);
    goto corral_source_split_7750;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p51, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7749;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    goto corral_source_split_7748;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    out_$p51 := $load.ref($M.0, out_$p50);
    goto corral_source_split_7747;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref(out_$i48, 8));
    goto corral_source_split_7746;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i32);
    goto corral_source_split_7745;

  $bb22:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i32;
    assume true;
    goto $bb22;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_7735;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_7734;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_7733;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref(out_$i38, 8));
    goto corral_source_split_7732;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i32);
    goto corral_source_split_7731;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p37, out_$p33);
    goto corral_source_split_7730;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(312, 1)), $mul.ref(out_$i35, 8));
    goto corral_source_split_7729;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    out_$i35 := $sext.i32.i64(out_$i32);
    goto corral_source_split_7728;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    goto corral_source_split_7727;

  SeqInstr_63:
    goto corral_source_split_7726;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} out_$p33 := kmalloc(32, 208);
    goto SeqInstr_62;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p33, out_$i35, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i48, out_$p50, out_$p51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i32 := vnt_alloc_bufs_loop_$bb19(in_$p0, in_$p29, out_$p33, out_$i35, out_$p37, out_$i38, out_$p40, out_$p41, out_$i42, out_$i43, out_$i44, out_$i48, out_$p50, out_$p51, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p63, out_$i64, out_$p65, out_$p66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i32);
    return;

  exit:
    return;
}



procedure vnt_alloc_bufs_loop_$bb19(in_$p0: ref, in_$p29: ref, in_$p33: ref, in_$i35: i64, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i48: i64, in_$p50: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p63: ref, in_$i64: i32, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$i70: i1, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i1, in_$i32: i32) returns (out_$p33: ref, out_$i35: i64, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i48: i64, out_$p50: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p63: ref, out_$i64: i32, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$i70: i1, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i1, out_$i32: i32);
  modifies $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $CurrAddr, assertsPassed;



implementation vnt_alloc_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i64, in_$p11: ref, in_$p13: ref, in_$i14: i8, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i64, out_$p11: ref, out_$p13: ref, out_$i14: i8, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p11, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4 := in_$p5, in_$p6, in_$i7, in_$i8, in_$i9, in_$p11, in_$p13, in_$i14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p25, in_$i26, in_$i27, in_$i28, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7676;

  $bb13:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i26;
    goto $bb13_dummy;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    out_$i28 := $ult.i32(out_$i26, out_$i27);
    goto corral_source_split_7714;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, in_$p1);
    goto corral_source_split_7713;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i4, 1);
    call {:si_unique_call 980} {:cexpr "ii"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_7712;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p25, 0);
    goto corral_source_split_7711;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p6, $mul.ref(0, 2952)), $mul.ref(49, 1));
    goto corral_source_split_7710;

  $bb11:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_7702;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_7701;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_7700;

  corral_source_split_7698:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p6, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7699;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p17, out_$p16);
    goto corral_source_split_7698;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p6, $mul.ref(0, 2952)), $mul.ref(16, 1));
    goto corral_source_split_7697;

  SeqInstr_60:
    goto corral_source_split_7696;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} out_$p16 := ldv_usb_alloc_urb_42(0, 32);
    goto SeqInstr_59;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p15, out_$i14);
    goto corral_source_split_7695;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(0, 2952)), $mul.ref(45, 1));
    goto corral_source_split_7694;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    out_$i14 := $trunc.i32.i8(out_$i4);
    goto corral_source_split_7693;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p13, in_$p0);
    goto corral_source_split_7692;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p6, $mul.ref(0, 2952)), $mul.ref(0, 1));
    goto corral_source_split_7691;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    goto corral_source_split_7690;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p11, out_$p5);
    goto corral_source_split_7689;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3248)), $mul.ref(1344, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_7688;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i4);
    goto corral_source_split_7687;

  $bb7:
    assume !(out_$i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    out_$i8 := $eq.i64(out_$i7, 0);
    goto corral_source_split_7681;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_7680;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    out_$p6 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_7679;

  SeqInstr_57:
    goto corral_source_split_7678;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} out_$p5 := kmalloc(2952, 208);
    goto SeqInstr_56;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p11, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4 := vnt_alloc_bufs_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$i8, out_$i9, out_$p11, out_$p13, out_$i14, out_$p15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p25, out_$i26, out_$i27, out_$i28, out_$i4);
    return;

  exit:
    return;
}



procedure vnt_alloc_bufs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$i9: i64, in_$p11: ref, in_$p13: ref, in_$i14: i8, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p25: ref, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$i9: i64, out_$p11: ref, out_$p13: ref, out_$i14: i8, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p25: ref, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$i4: i32);
  modifies $M.0, assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i64, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i64, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i189: i32, in_$i190: i64, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i32, in_$i195: i64, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i1, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$p244: ref, in_$i245: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32) returns (out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i64, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i64, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i189: i32, out_$i190: i64, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i32, out_$i195: i64, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i1, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$p244: ref, out_$i245: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32)
{

  entry:
    out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$p244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151 := in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$p108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$p119, in_$i120, in_$i122, in_$i123, in_$p124, in_$i125, in_$i127, in_$i128, in_$p129, in_$i131, in_$i132, in_$p133, in_$i135, in_$i136, in_$p137, in_$i138, in_$i140, in_$i141, in_$p142, in_$i143, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$i154, in_$p155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$p161, in_$i162, in_$i163, in_$i164, in_$i165, in_$p166, in_$i167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i172, in_$i173, in_$p174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$p180, in_$i182, in_$i183, in_$p184, in_$i186, in_$i187, in_$p188, in_$i189, in_$i190, in_$i191, in_$i192, in_$p193, in_$i194, in_$i195, in_$i196, in_$i197, in_$p198, in_$i200, in_$i201, in_$p202, in_$i204, in_$i205, in_$p206, in_$i207, in_$i208, in_$p209, in_$i210, in_$i211, in_$p212, in_$i214, in_$i215, in_$p216, in_$i218, in_$i219, in_$p220, in_$i221, in_$i222, in_$p223, in_$i224, in_$i225, in_$i226, in_$i227, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$p235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$p243, in_$p244, in_$i245, in_$i247, in_$i248, in_$p249, in_$i250, in_$i251, in_$i252, in_$i253, in_$i254, in_$i255, in_$i256, in_$p257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$p264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1415} out_$i58 := __VERIFIER_nondet_int();
    call {:si_unique_call 1416} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i58);
    call {:si_unique_call 1417} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i58);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb17_dummy;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb235:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_129:
    goto corral_source_split_10202;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} invoke_work_1();
    goto SeqInstr_128;

  $bb14:
    assume out_$i65 == 1;
    goto corral_source_split_10201;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_10199;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    out_$i64 := $M.68;
    goto corral_source_split_10198;

  $bb12:
    assume out_$i63 == 1;
    goto corral_source_split_10197;

  $bb10:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i58, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb3:
    assume out_$i59 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i58, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i58, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb19:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb30;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_10216;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    out_$i74 := $M.69;
    goto corral_source_split_10215;

  $bb28:
    assume out_$i73 == 1;
    goto corral_source_split_10214;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 3);
    goto corral_source_split_10212;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    out_$i72 := $M.70;
    goto corral_source_split_10211;

  $bb26:
    assume out_$i71 == 1;
    goto corral_source_split_10210;

  $bb21:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i68, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_10204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1419} out_$i68 := __VERIFIER_nondet_int();
    call {:si_unique_call 1420} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i68);
    call {:si_unique_call 1421} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i68);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb18:
    assume out_$i67 == 1;
    goto corral_source_split_10204;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i32(out_$i66, 0);
    goto corral_source_split_10195;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    out_$i66 := $M.70;
    goto corral_source_split_10194;

  $bb11:
    assume !(out_$i62 == 1);
    goto corral_source_split_10193;

  $bb37:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb42:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i32(out_$i81, 0);
    goto corral_source_split_10234;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i81 := $M.72;
    goto corral_source_split_10233;

  $bb39:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $M.70 := 3;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_10231;

  $bb38:
    assume out_$i80 == 1;
    goto corral_source_split_10230;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 0);
    goto corral_source_split_10228;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    out_$i79 := $M.72;
    goto corral_source_split_10227;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $M.72 := out_$i78;
    call {:si_unique_call 1426} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_10226;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} out_$i78 := vt6656_driver_init();
    goto corral_source_split_10225;

  $bb36:
    assume out_$i77 == 1;
    goto corral_source_split_10224;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 1);
    goto corral_source_split_10208;

  corral_source_split_10206:
    assume {:verifier.code 0} true;
    out_$i76 := $M.70;
    goto corral_source_split_10207;

  $bb23:
    assume out_$i70 == 1;
    goto corral_source_split_10206;

  $bb22:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $eq.i32(out_$i68, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} ldv_stop();
    goto corral_source_split_10239;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i70 == 1);
    goto $bb25;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb25;

  $bb49:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb167:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb116:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb90:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1436} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10318;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1435} vnt_reset_tsf(out_$p108, in_$p12);
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    out_$p108 := $M.2;
    goto corral_source_split_10316;

  $bb89:
    assume out_$i107 == 1;
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i106, 2);
    goto corral_source_split_10313;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i106 := $M.3;
    goto corral_source_split_10312;

  $bb87:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1434} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10310;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} vnt_reset_tsf(out_$p105, in_$p12);
    goto corral_source_split_10309;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    out_$p105 := $M.2;
    goto corral_source_split_10308;

  $bb86:
    assume out_$i104 == 1;
    goto corral_source_split_10307;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_10305;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    out_$i103 := $M.3;
    goto corral_source_split_10304;

  $bb84:
    assume out_$i102 == 1;
    goto corral_source_split_10303;

  $bb82:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i85, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb78:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    out_$i101 := $slt.i32(out_$i85, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb70:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i99 := $slt.i32(out_$i85, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb51:
    assume out_$i86 == 1;
    assume {:verifier.code 0} true;
    out_$i95 := $slt.i32(out_$i85, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb50:
    assume {:verifier.code 0} true;
    out_$i86 := $slt.i32(out_$i85, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_10241:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1430} out_$i85 := __VERIFIER_nondet_int();
    call {:si_unique_call 1431} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i85);
    call {:si_unique_call 1432} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i85);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb48:
    assume out_$i84 == 1;
    goto corral_source_split_10241;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i83, 0);
    goto corral_source_split_10187;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    out_$i83 := $M.3;
    goto corral_source_split_10186;

  $bb5:
    assume out_$i60 == 1;
    goto corral_source_split_10185;

  $bb4:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb94:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb96:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $M.69 := out_$i116;
    call {:si_unique_call 1440} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_10331;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    out_$i116 := $add.i32(out_$i115, 1);
    goto corral_source_split_10330;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    out_$i115 := $M.69;
    goto corral_source_split_10329;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1439} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10328;

  $bb95:
    assume out_$i114 == 1;
    goto corral_source_split_10327;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 0);
    goto corral_source_split_10325;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    out_$i113 := $M.73;
    goto corral_source_split_10324;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $M.73 := out_$i112;
    call {:si_unique_call 1438} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i112);
    goto corral_source_split_10323;

  SeqInstr_132:
    goto corral_source_split_10322;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1437} out_$i112 := vnt_start(out_$p111);
    goto SeqInstr_131;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    out_$p111 := $M.2;
    goto corral_source_split_10321;

  $bb93:
    assume out_$i110 == 1;
    goto corral_source_split_10320;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 1);
    goto corral_source_split_10301;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    out_$i109 := $M.3;
    goto corral_source_split_10300;

  $bb83:
    assume !(out_$i101 == 1);
    goto corral_source_split_10299;

  $bb103:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10346;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} out_vslice_dummy_var_140 := vnt_config(out_$p124, out_$i125);
    goto corral_source_split_10345;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i32($M.66, in_$p4);
    goto corral_source_split_10344;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    out_$p124 := $M.2;
    goto corral_source_split_10343;

  $bb102:
    assume out_$i123 == 1;
    goto corral_source_split_10342;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    out_$i123 := $eq.i32(out_$i122, 2);
    goto corral_source_split_10340;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i122 := $M.3;
    goto corral_source_split_10339;

  $bb100:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10337;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1441} out_vslice_dummy_var_139 := vnt_config(out_$p119, out_$i120);
    goto corral_source_split_10336;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i32($M.66, in_$p4);
    goto corral_source_split_10335;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    out_$p119 := $M.2;
    goto corral_source_split_10334;

  $bb99:
    assume out_$i118 == 1;
    goto corral_source_split_10333;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    out_$i118 := $eq.i32(out_$i117, 1);
    goto corral_source_split_10293;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    out_$i117 := $M.3;
    goto corral_source_split_10292;

  $bb80:
    assume out_$i100 == 1;
    goto corral_source_split_10291;

  $bb79:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    out_$i100 := $slt.i32(out_$i85, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb109:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    goto $bb110;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10359;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} out_vslice_dummy_var_142 := vnt_get_tsf(out_$p133, in_$p36);
    goto corral_source_split_10358;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    out_$p133 := $M.2;
    goto corral_source_split_10357;

  $bb108:
    assume out_$i132 == 1;
    goto corral_source_split_10356;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 2);
    goto corral_source_split_10354;

  $bb107:
    assume {:verifier.code 0} true;
    out_$i131 := $M.3;
    goto corral_source_split_10353;

  $bb106:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    goto $bb107;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10351;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} out_vslice_dummy_var_141 := vnt_get_tsf(out_$p129, in_$p36);
    goto corral_source_split_10350;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    out_$p129 := $M.2;
    goto corral_source_split_10349;

  $bb105:
    assume out_$i128 == 1;
    goto corral_source_split_10348;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 1);
    goto corral_source_split_10297;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    out_$i127 := $M.3;
    goto corral_source_split_10296;

  $bb81:
    assume !(out_$i100 == 1);
    goto corral_source_split_10295;

  $bb115:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10374;

  corral_source_split_10372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} out_vslice_dummy_var_144 := vnt_set_key(out_$p142, out_$i143, in_$p8, in_$p38, in_$p10);
    goto corral_source_split_10373;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.66, in_$p5);
    goto corral_source_split_10372;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    out_$p142 := $M.2;
    goto corral_source_split_10371;

  $bb114:
    assume out_$i141 == 1;
    goto corral_source_split_10370;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_10368;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i140 := $M.3;
    goto corral_source_split_10367;

  $bb112:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10365;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} out_vslice_dummy_var_143 := vnt_set_key(out_$p137, out_$i138, in_$p8, in_$p38, in_$p10);
    goto corral_source_split_10364;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    out_$i138 := $load.i32($M.66, in_$p5);
    goto corral_source_split_10363;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    out_$p137 := $M.2;
    goto corral_source_split_10362;

  $bb111:
    assume out_$i136 == 1;
    goto corral_source_split_10361;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 1);
    goto corral_source_split_10285;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    out_$i135 := $M.3;
    goto corral_source_split_10284;

  $bb76:
    assume out_$i98 == 1;
    goto corral_source_split_10283;

  $bb72:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i98 := $slt.i32(out_$i85, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb71:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i85, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb121:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10389;

  SeqInstr_138:
    goto corral_source_split_10388;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} vnt_bss_info_changed(out_$p151, in_$p30, in_$p34, out_$i152);
    goto SeqInstr_137;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i32($M.66, in_$p3);
    goto corral_source_split_10387;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    out_$p151 := $M.2;
    goto corral_source_split_10386;

  $bb120:
    assume out_$i150 == 1;
    goto corral_source_split_10385;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 2);
    goto corral_source_split_10383;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i149 := $M.3;
    goto corral_source_split_10382;

  $bb118:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10380;

  SeqInstr_135:
    goto corral_source_split_10379;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vnt_bss_info_changed(out_$p147, in_$p30, in_$p34, out_$i148);
    goto SeqInstr_134;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i32($M.66, in_$p3);
    goto corral_source_split_10378;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    out_$p147 := $M.2;
    goto corral_source_split_10377;

  $bb117:
    assume out_$i146 == 1;
    goto corral_source_split_10376;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_10289;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    out_$i145 := $M.3;
    goto corral_source_split_10288;

  $bb77:
    assume !(out_$i98 == 1);
    goto corral_source_split_10287;

  $bb127:
    assume !(out_$i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10402;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} vnt_sw_scan_complete(out_$p158, in_$p22);
    goto corral_source_split_10401;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    out_$p158 := $M.2;
    goto corral_source_split_10400;

  $bb126:
    assume out_$i157 == 1;
    goto corral_source_split_10399;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    out_$i157 := $eq.i32(out_$i156, 2);
    goto corral_source_split_10397;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i156 := $M.3;
    goto corral_source_split_10396;

  $bb124:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10394;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} vnt_sw_scan_complete(out_$p155, in_$p22);
    goto corral_source_split_10393;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    out_$p155 := $M.2;
    goto corral_source_split_10392;

  $bb123:
    assume out_$i154 == 1;
    goto corral_source_split_10391;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 1);
    goto corral_source_split_10277;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    out_$i153 := $M.3;
    goto corral_source_split_10276;

  $bb74:
    assume out_$i97 == 1;
    goto corral_source_split_10275;

  $bb73:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := $slt.i32(out_$i85, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb130:
    assume !(out_$i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $M.69 := out_$i163;
    call {:si_unique_call 1463} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i163);
    goto corral_source_split_10410;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    out_$i163 := $sub.i32(out_$i162, 1);
    goto corral_source_split_10409;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    out_$i162 := $M.69;
    goto corral_source_split_10408;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10407;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vnt_stop(out_$p161);
    goto corral_source_split_10406;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    out_$p161 := $M.2;
    goto corral_source_split_10405;

  $bb129:
    assume out_$i160 == 1;
    goto corral_source_split_10404;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    out_$i160 := $eq.i32(out_$i159, 2);
    goto corral_source_split_10281;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    out_$i159 := $M.3;
    goto corral_source_split_10280;

  $bb75:
    assume !(out_$i97 == 1);
    goto corral_source_split_10279;

  $bb136:
    assume !(out_$i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1467} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10425;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} vnt_set_tsf(out_$p170, in_$p16, out_$i171);
    goto corral_source_split_10424;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i64($M.66, in_$p0);
    goto corral_source_split_10423;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    out_$p170 := $M.2;
    goto corral_source_split_10422;

  $bb135:
    assume out_$i169 == 1;
    goto corral_source_split_10421;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    out_$i169 := $eq.i32(out_$i168, 2);
    goto corral_source_split_10419;

  $bb134:
    assume {:verifier.code 0} true;
    out_$i168 := $M.3;
    goto corral_source_split_10418;

  $bb133:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10416;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} vnt_set_tsf(out_$p166, in_$p16, out_$i167);
    goto corral_source_split_10415;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    out_$i167 := $load.i64($M.66, in_$p0);
    goto corral_source_split_10414;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    out_$p166 := $M.2;
    goto corral_source_split_10413;

  $bb132:
    assume out_$i165 == 1;
    goto corral_source_split_10412;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 1);
    goto corral_source_split_10269;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    out_$i164 := $M.3;
    goto corral_source_split_10268;

  $bb68:
    assume out_$i94 == 1;
    goto corral_source_split_10267;

  $bb64:
    assume out_$i92 == 1;
    assume {:verifier.code 0} true;
    out_$i94 := $slt.i32(out_$i85, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb53:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i85, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb52:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    out_$i87 := $slt.i32(out_$i85, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb142:
    assume !(out_$i176 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10438;

  SeqInstr_144:
    goto corral_source_split_10437;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} vnt_tx_80211(out_$p177, in_$p24, in_$p26);
    goto SeqInstr_143;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    out_$p177 := $M.2;
    goto corral_source_split_10436;

  $bb141:
    assume out_$i176 == 1;
    goto corral_source_split_10435;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    out_$i176 := $eq.i32(out_$i175, 2);
    goto corral_source_split_10433;

  $bb140:
    assume {:verifier.code 0} true;
    out_$i175 := $M.3;
    goto corral_source_split_10432;

  $bb139:
    assume !(out_$i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1469} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10430;

  SeqInstr_141:
    goto corral_source_split_10429;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} vnt_tx_80211(out_$p174, in_$p24, in_$p26);
    goto SeqInstr_140;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    out_$p174 := $M.2;
    goto corral_source_split_10428;

  $bb138:
    assume out_$i173 == 1;
    goto corral_source_split_10427;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    out_$i173 := $eq.i32(out_$i172, 1);
    goto corral_source_split_10273;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    out_$i172 := $M.3;
    goto corral_source_split_10272;

  $bb69:
    assume !(out_$i94 == 1);
    goto corral_source_split_10271;

  $bb148:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1475} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10451;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} out_vslice_dummy_var_146 := vnt_prepare_multicast(out_$p184, in_$p18);
    goto corral_source_split_10450;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    out_$p184 := $M.2;
    goto corral_source_split_10449;

  $bb147:
    assume out_$i183 == 1;
    goto corral_source_split_10448;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 2);
    goto corral_source_split_10446;

  $bb146:
    assume {:verifier.code 0} true;
    out_$i182 := $M.3;
    goto corral_source_split_10445;

  $bb145:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1473} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} out_vslice_dummy_var_145 := vnt_prepare_multicast(out_$p180, in_$p18);
    goto corral_source_split_10442;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    out_$p180 := $M.2;
    goto corral_source_split_10441;

  $bb144:
    assume out_$i179 == 1;
    goto corral_source_split_10440;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 1);
    goto corral_source_split_10261;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    out_$i178 := $M.3;
    goto corral_source_split_10260;

  $bb66:
    assume out_$i93 == 1;
    goto corral_source_split_10259;

  $bb65:
    assume !(out_$i92 == 1);
    assume {:verifier.code 0} true;
    out_$i93 := $slt.i32(out_$i85, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb154:
    assume !(out_$i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10468;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} vnt_configure(out_$p193, out_$i194, in_$p32, out_$i195);
    goto corral_source_split_10467;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    out_$i195 := $load.i64($M.66, in_$p2);
    goto corral_source_split_10466;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i32($M.66, in_$p1);
    goto corral_source_split_10465;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    out_$p193 := $M.2;
    goto corral_source_split_10464;

  $bb153:
    assume out_$i192 == 1;
    goto corral_source_split_10463;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    out_$i192 := $eq.i32(out_$i191, 2);
    goto corral_source_split_10461;

  $bb152:
    assume {:verifier.code 0} true;
    out_$i191 := $M.3;
    goto corral_source_split_10460;

  $bb151:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1477} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10458;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} vnt_configure(out_$p188, out_$i189, in_$p32, out_$i190);
    goto corral_source_split_10457;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    out_$i190 := $load.i64($M.66, in_$p2);
    goto corral_source_split_10456;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$i189 := $load.i32($M.66, in_$p1);
    goto corral_source_split_10455;

  corral_source_split_10453:
    assume {:verifier.code 0} true;
    out_$p188 := $M.2;
    goto corral_source_split_10454;

  $bb150:
    assume out_$i187 == 1;
    goto corral_source_split_10453;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 1);
    goto corral_source_split_10265;

  corral_source_split_10263:
    assume {:verifier.code 0} true;
    out_$i186 := $M.3;
    goto corral_source_split_10264;

  $bb67:
    assume !(out_$i93 == 1);
    goto corral_source_split_10263;

  $bb160:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10481;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} out_vslice_dummy_var_148 := vnt_get_stats(out_$p202, in_$p40);
    goto corral_source_split_10480;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    out_$p202 := $M.2;
    goto corral_source_split_10479;

  $bb159:
    assume out_$i201 == 1;
    goto corral_source_split_10478;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 2);
    goto corral_source_split_10476;

  $bb158:
    assume {:verifier.code 0} true;
    out_$i200 := $M.3;
    goto corral_source_split_10475;

  $bb157:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10473;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} out_vslice_dummy_var_147 := vnt_get_stats(out_$p198, in_$p40);
    goto corral_source_split_10472;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    out_$p198 := $M.2;
    goto corral_source_split_10471;

  $bb156:
    assume out_$i197 == 1;
    goto corral_source_split_10470;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 1);
    goto corral_source_split_10253;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    out_$i196 := $M.3;
    goto corral_source_split_10252;

  $bb62:
    assume out_$i91 == 1;
    goto corral_source_split_10251;

  $bb55:
    assume out_$i88 == 1;
    assume {:verifier.code 0} true;
    out_$i91 := $slt.i32(out_$i85, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb54:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := $slt.i32(out_$i85, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb166:
    assume !(out_$i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10494;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vnt_sw_scan_start(out_$p209, in_$p14, in_$p41);
    goto corral_source_split_10493;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    out_$p209 := $M.2;
    goto corral_source_split_10492;

  $bb165:
    assume out_$i208 == 1;
    goto corral_source_split_10491;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    out_$i208 := $eq.i32(out_$i207, 2);
    goto corral_source_split_10489;

  $bb164:
    assume {:verifier.code 0} true;
    out_$i207 := $M.3;
    goto corral_source_split_10488;

  $bb163:
    assume !(out_$i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10486;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} vnt_sw_scan_start(out_$p206, in_$p14, in_$p41);
    goto corral_source_split_10485;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    out_$p206 := $M.2;
    goto corral_source_split_10484;

  $bb162:
    assume out_$i205 == 1;
    goto corral_source_split_10483;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    out_$i205 := $eq.i32(out_$i204, 1);
    goto corral_source_split_10257;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    out_$i204 := $M.3;
    goto corral_source_split_10256;

  $bb63:
    assume !(out_$i91 == 1);
    goto corral_source_split_10255;

  $bb172:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10507;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} out_vslice_dummy_var_150 := vnt_add_interface(out_$p216, in_$p20);
    goto corral_source_split_10506;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    out_$p216 := $M.2;
    goto corral_source_split_10505;

  $bb171:
    assume out_$i215 == 1;
    goto corral_source_split_10504;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i214, 2);
    goto corral_source_split_10502;

  $bb170:
    assume {:verifier.code 0} true;
    out_$i214 := $M.3;
    goto corral_source_split_10501;

  $bb169:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10499;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} out_vslice_dummy_var_149 := vnt_add_interface(out_$p212, in_$p20);
    goto corral_source_split_10498;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    out_$p212 := $M.2;
    goto corral_source_split_10497;

  $bb168:
    assume out_$i211 == 1;
    goto corral_source_split_10496;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 1);
    goto corral_source_split_10245;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    out_$i210 := $M.3;
    goto corral_source_split_10244;

  $bb57:
    assume out_$i89 == 1;
    goto corral_source_split_10243;

  $bb56:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    out_$i89 := $slt.i32(out_$i85, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb178:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $M.3 := 2;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10520;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vnt_remove_interface(out_$p223, in_$p28);
    goto corral_source_split_10519;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    out_$p223 := $M.2;
    goto corral_source_split_10518;

  $bb177:
    assume out_$i222 == 1;
    goto corral_source_split_10517;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 2);
    goto corral_source_split_10515;

  $bb176:
    assume {:verifier.code 0} true;
    out_$i221 := $M.3;
    goto corral_source_split_10514;

  $bb175:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $M.3 := 1;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10512;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} vnt_remove_interface(out_$p220, in_$p28);
    goto corral_source_split_10511;

  corral_source_split_10509:
    assume {:verifier.code 0} true;
    out_$p220 := $M.2;
    goto corral_source_split_10510;

  $bb174:
    assume out_$i219 == 1;
    goto corral_source_split_10509;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_10249;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    out_$i218 := $M.3;
    goto corral_source_split_10248;

  $bb59:
    assume out_$i90 == 1;
    goto corral_source_split_10247;

  $bb58:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i85, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} ldv_stop();
    goto corral_source_split_10522;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i90 == 1);
    goto $bb61;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i102 == 1);
    goto $bb61;

  $bb184:
    assume !(out_$i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb200:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb203:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb202:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $M.69 := out_$i240;
    call {:si_unique_call 1503} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_10557;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    out_$i240 := $add.i32(out_$i239, 1);
    goto corral_source_split_10556;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    out_$i239 := $M.69;
    goto corral_source_split_10555;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1502} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10554;

  $bb201:
    assume out_$i238 == 1;
    goto corral_source_split_10553;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 0);
    goto corral_source_split_10551;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    out_$i237 := $M.74;
    goto corral_source_split_10550;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $M.74 := out_$i236;
    call {:si_unique_call 1501} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i236);
    goto corral_source_split_10549;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} out_$i236 := vt6656_probe(out_$p235, in_$p43);
    goto corral_source_split_10548;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    out_$p235 := $M.67;
    goto corral_source_split_10547;

  $bb199:
    assume out_$i234 == 1;
    goto corral_source_split_10546;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 1);
    goto corral_source_split_10544;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    out_$i233 := $M.71;
    goto corral_source_split_10543;

  $bb197:
    assume out_$i232 == 1;
    goto corral_source_split_10542;

  $bb195:
    assume out_$i231 == 1;
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i226, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb186:
    assume out_$i227 == 1;
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(out_$i226, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i227 := $slt.i32(out_$i226, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_10524:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1497} out_$i226 := __VERIFIER_nondet_int();
    call {:si_unique_call 1498} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i226);
    call {:si_unique_call 1499} {:cexpr "tmp___21"} boogie_si_record_i32(out_$i226);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb183:
    assume out_$i225 == 1;
    goto corral_source_split_10524;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    out_$i225 := $ne.i32(out_$i224, 0);
    goto corral_source_split_10191;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    out_$i224 := $M.71;
    goto corral_source_split_10190;

  $bb7:
    assume out_$i61 == 1;
    goto corral_source_split_10189;

  $bb6:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i58, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb207:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $M.71 := 3;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10564;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} out_vslice_dummy_var_151 := vt6656_suspend(out_$p243, out_$i245);
    goto corral_source_split_10563;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.66, out_$p244);
    goto corral_source_split_10562;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    out_$p244 := $add.ref($add.ref(in_$p6, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10561;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    out_$p243 := $M.67;
    goto corral_source_split_10560;

  $bb206:
    assume out_$i242 == 1;
    goto corral_source_split_10559;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 2);
    goto corral_source_split_10540;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    out_$i241 := $M.71;
    goto corral_source_split_10539;

  $bb196:
    assume !(out_$i231 == 1);
    goto corral_source_split_10538;

  $bb210:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb212:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1508} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10574;

  $bb211:
    assume out_$i252 == 1;
    goto corral_source_split_10573;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_10570:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 0);
    goto corral_source_split_10571;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    out_$i251 := $M.75;
    goto corral_source_split_10570;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $M.75 := out_$i250;
    call {:si_unique_call 1507} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i250);
    goto corral_source_split_10569;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} out_$i250 := vt6656_resume(out_$p249);
    goto corral_source_split_10568;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    out_$p249 := $M.67;
    goto corral_source_split_10567;

  $bb209:
    assume out_$i248 == 1;
    goto corral_source_split_10566;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 3);
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    out_$i247 := $M.71;
    goto corral_source_split_10527;

  $bb188:
    assume out_$i228 == 1;
    goto corral_source_split_10526;

  $bb187:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    out_$i228 := $slt.i32(out_$i226, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $M.69 := out_$i266;
    call {:si_unique_call 1514} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i266);
    goto corral_source_split_10601;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    out_$i266 := $sub.i32(out_$i265, 1);
    goto corral_source_split_10600;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    out_$i265 := $M.69;
    goto corral_source_split_10599;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1513} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10598;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} vt6656_disconnect(out_$p264);
    goto corral_source_split_10597;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    out_$p264 := $M.67;
    goto corral_source_split_10596;

  $bb224:
    assume out_$i263 == 1;
    goto corral_source_split_10595;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 0);
    goto corral_source_split_10593;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    out_$i262 := $M.76;
    goto corral_source_split_10592;

  $bb221:
    assume out_$i261 == 1;
    goto corral_source_split_10591;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i260, 2);
    goto corral_source_split_10589;

  $bb220:
    assume {:verifier.code 0} true;
    out_$i260 := $M.71;
    goto corral_source_split_10588;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $M.69 := out_$i259;
    call {:si_unique_call 1511} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i259);
    goto corral_source_split_10586;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    out_$i259 := $sub.i32(out_$i258, 1);
    goto corral_source_split_10585;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    out_$i258 := $M.69;
    goto corral_source_split_10584;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    $M.71 := 1;
    call {:si_unique_call 1510} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10583;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} vt6656_disconnect(out_$p257);
    goto corral_source_split_10582;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    out_$p257 := $M.67;
    goto corral_source_split_10581;

  $bb218:
    assume out_$i256 == 1;
    goto corral_source_split_10580;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    out_$i256 := $eq.i32(out_$i255, 0);
    goto corral_source_split_10578;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    out_$i255 := $M.76;
    goto corral_source_split_10577;

  $bb215:
    assume out_$i254 == 1;
    goto corral_source_split_10576;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 3);
    goto corral_source_split_10532;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    out_$i253 := $M.71;
    goto corral_source_split_10531;

  $bb190:
    assume out_$i229 == 1;
    goto corral_source_split_10530;

  $bb189:
    assume !(out_$i228 == 1);
    assume {:verifier.code 0} true;
    out_$i229 := $slt.i32(out_$i226, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb190, $bb191;

  $bb216:
    assume {:verifier.code 0} true;
    assume !(out_$i254 == 1);
    goto $bb217;

  $bb219:
    assume {:verifier.code 0} true;
    assume !(out_$i256 == 1);
    goto $bb217;

  $bb222:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb223;

  $bb225:
    assume {:verifier.code 0} true;
    assume !(out_$i263 == 1);
    goto $bb223;

  $bb228:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb231:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb230:
    assume !(out_$i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    goto $bb231;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $M.71 := 2;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10610;

  $bb229:
    assume out_$i271 == 1;
    goto corral_source_split_10609;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb229, $bb230;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    out_$i271 := $eq.i32(out_$i270, 0);
    goto corral_source_split_10607;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    out_$i270 := $M.77;
    goto corral_source_split_10606;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $M.77 := out_$i269;
    call {:si_unique_call 1516} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i269);
    goto corral_source_split_10605;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} out_$i269 := ldv_reset_resume_2();
    goto corral_source_split_10604;

  $bb227:
    assume out_$i268 == 1;
    goto corral_source_split_10603;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    out_$i268 := $eq.i32(out_$i267, 3);
    goto corral_source_split_10536;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    out_$i267 := $M.71;
    goto corral_source_split_10535;

  $bb192:
    assume out_$i230 == 1;
    goto corral_source_split_10534;

  $bb191:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i226, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} ldv_stop();
    goto corral_source_split_10612;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb193:
    assume {:verifier.code 0} true;
    assume !(out_$i230 == 1);
    goto $bb194;

  $bb198:
    assume {:verifier.code 0} true;
    assume !(out_$i232 == 1);
    goto $bb194;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} ldv_stop();
    goto corral_source_split_10614;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb8:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb9;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i63 == 1);
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$p244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p8, in_$p10, in_$p12, in_$p14, in_$p16, in_$p18, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p30, in_$p32, in_$p34, in_$p36, in_$p38, in_$p40, in_$p41, in_$p43, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$p108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$p119, out_$i120, out_$i122, out_$i123, out_$p124, out_$i125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i138, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$i154, out_$p155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$p161, out_$i162, out_$i163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i172, out_$i173, out_$p174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$p180, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i189, out_$i190, out_$i191, out_$i192, out_$p193, out_$i194, out_$i195, out_$i196, out_$i197, out_$p198, out_$i200, out_$i201, out_$p202, out_$i204, out_$i205, out_$p206, out_$i207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p212, out_$i214, out_$i215, out_$p216, out_$i218, out_$i219, out_$p220, out_$i221, out_$i222, out_$p223, out_$i224, out_$i225, out_$i226, out_$i227, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$p244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i252, out_$i253, out_$i254, out_$i255, out_$i256, out_$p257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$p264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p36: ref, in_$p38: ref, in_$p40: ref, in_$p41: ref, in_$p43: ref, in_$i58: i32, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$i78: i32, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i1, in_$i83: i32, in_$i84: i1, in_$i85: i32, in_$i86: i1, in_$i87: i1, in_$i88: i1, in_$i89: i1, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i1, in_$i94: i1, in_$i95: i1, in_$i96: i1, in_$i97: i1, in_$i98: i1, in_$i99: i1, in_$i100: i1, in_$i101: i1, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i1, in_$p108: ref, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i1, in_$i115: i32, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$p119: ref, in_$i120: i32, in_$i122: i32, in_$i123: i1, in_$p124: ref, in_$i125: i32, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i138: i32, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i32, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i156: i32, in_$i157: i1, in_$p158: ref, in_$i159: i32, in_$i160: i1, in_$p161: ref, in_$i162: i32, in_$i163: i32, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i64, in_$i168: i32, in_$i169: i1, in_$p170: ref, in_$i171: i64, in_$i172: i32, in_$i173: i1, in_$p174: ref, in_$i175: i32, in_$i176: i1, in_$p177: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i189: i32, in_$i190: i64, in_$i191: i32, in_$i192: i1, in_$p193: ref, in_$i194: i32, in_$i195: i64, in_$i196: i32, in_$i197: i1, in_$p198: ref, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i204: i32, in_$i205: i1, in_$p206: ref, in_$i207: i32, in_$i208: i1, in_$p209: ref, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i214: i32, in_$i215: i1, in_$p216: ref, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i224: i32, in_$i225: i1, in_$i226: i32, in_$i227: i1, in_$i228: i1, in_$i229: i1, in_$i230: i1, in_$i231: i1, in_$i232: i1, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$p244: ref, in_$i245: i32, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i251: i32, in_$i252: i1, in_$i253: i32, in_$i254: i1, in_$i255: i32, in_$i256: i1, in_$p257: ref, in_$i258: i32, in_$i259: i32, in_$i260: i32, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$p264: ref, in_$i265: i32, in_$i266: i32, in_$i267: i32, in_$i268: i1, in_$i269: i32, in_$i270: i32, in_$i271: i1, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i64, in_vslice_dummy_var_142: i64, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i64, in_vslice_dummy_var_146: i64, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32) returns (out_$i58: i32, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$i78: i32, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i1, out_$i83: i32, out_$i84: i1, out_$i85: i32, out_$i86: i1, out_$i87: i1, out_$i88: i1, out_$i89: i1, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i1, out_$i94: i1, out_$i95: i1, out_$i96: i1, out_$i97: i1, out_$i98: i1, out_$i99: i1, out_$i100: i1, out_$i101: i1, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i1, out_$p108: ref, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i1, out_$i115: i32, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$p119: ref, out_$i120: i32, out_$i122: i32, out_$i123: i1, out_$p124: ref, out_$i125: i32, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i138: i32, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i32, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i156: i32, out_$i157: i1, out_$p158: ref, out_$i159: i32, out_$i160: i1, out_$p161: ref, out_$i162: i32, out_$i163: i32, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i64, out_$i168: i32, out_$i169: i1, out_$p170: ref, out_$i171: i64, out_$i172: i32, out_$i173: i1, out_$p174: ref, out_$i175: i32, out_$i176: i1, out_$p177: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i189: i32, out_$i190: i64, out_$i191: i32, out_$i192: i1, out_$p193: ref, out_$i194: i32, out_$i195: i64, out_$i196: i32, out_$i197: i1, out_$p198: ref, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i204: i32, out_$i205: i1, out_$p206: ref, out_$i207: i32, out_$i208: i1, out_$p209: ref, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i214: i32, out_$i215: i1, out_$p216: ref, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i224: i32, out_$i225: i1, out_$i226: i32, out_$i227: i1, out_$i228: i1, out_$i229: i1, out_$i230: i1, out_$i231: i1, out_$i232: i1, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$p244: ref, out_$i245: i32, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i251: i32, out_$i252: i1, out_$i253: i32, out_$i254: i1, out_$i255: i32, out_$i256: i1, out_$p257: ref, out_$i258: i32, out_$i259: i32, out_$i260: i32, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$p264: ref, out_$i265: i32, out_$i266: i32, out_$i267: i32, out_$i268: i1, out_$i269: i32, out_$i270: i32, out_$i271: i1, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i64, out_vslice_dummy_var_142: i64, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i64, out_vslice_dummy_var_146: i64, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32);
  modifies $M.12, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.0, $M.14, $M.16, $M.18, $M.3, $M.20, $CurrAddr, $M.23, $M.29, $M.33, $M.34, $M.28, $M.35, $M.24, $M.13, $M.15, $M.17, $M.19, assertsPassed, $M.70, $M.72, $M.71, $M.76, $M.67, $M.69, $M.73, $M.57, $M.40, $M.41, $M.42, $M.43, $M.44, $M.47, $M.49, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.39, $M.63, $M.38, $M.50, $M.74, $M.2, $M.1, $M.75, $M.77;


