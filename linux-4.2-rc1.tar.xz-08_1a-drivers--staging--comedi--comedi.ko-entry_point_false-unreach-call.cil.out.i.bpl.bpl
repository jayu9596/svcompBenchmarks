var $M.0: [ref]i8;

var $M.1: [ref]i8;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.21: i32;

var $M.22: ref;

var $M.23: i32;

var $M.24: [ref]i64;

var $M.25: [ref]i64;

var $M.26: i32;

var $M.27: i32;

var $M.28: ref;

var $M.29: [ref]i8;

var $M.30: [ref]i32;

var $M.31: [ref]ref;

var $M.32: [ref]ref;

var $M.33: [ref]ref;

var $M.34: [ref]ref;

var $M.35: [ref]ref;

var $M.36: [ref]ref;

var $M.37: [ref]ref;

var $M.38: [ref]ref;

var $M.39: [ref]i24;

var $M.40: [ref]i8;

var $M.41: [ref]i64;

var $M.42: [ref]i64;

var $M.43: [ref]i64;

var $M.44: [ref]i64;

var $M.45: [ref]i32;

var $M.46: [ref]i64;

var $M.47: [ref]ref;

var $M.48: [ref]ref;

var $M.49: [ref]ref;

var $M.50: [ref]ref;

var $M.51: [ref]i24;

var $M.52: [ref]i8;

var $M.53: [ref]ref;

var $M.54: [ref]i64;

var $M.55: [ref]i32;

var $M.56: [ref]i32;

var $M.57: [ref]i32;

var $M.58: [ref]i32;

var $M.59: [ref]i64;

var $M.60: [ref]i64;

var $M.61: [ref]i32;

var $M.62: [ref]i8;

var $M.63: ref;

var $M.64: ref;

var $M.65: ref;

var $M.66: ref;

var $M.67: ref;

var $M.68: ref;

var $M.69: ref;

var $M.70: ref;

var $M.71: ref;

var $M.72: ref;

var $M.73: ref;

var $M.74: i32;

var $M.75: i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: i32;

var $M.79: i32;

var $M.80: i32;

var $M.81: i32;

var $M.82: i32;

var $M.83: i32;

var $M.84: i32;

var $M.85: ref;

var $M.86: ref;

var $M.87: i32;

var $M.88: [ref]i8;

var $M.92: [ref]i8;

var $M.121: [ref]i8;

var $M.122: [ref]i8;

var $M.123: [ref]i8;

var $M.124: [ref]i8;

var $M.125: [ref]i8;

var $M.126: [ref]i8;

var $M.127: [ref]i8;

var $M.128: [ref]i8;

var $M.129: [ref]i8;

var $M.130: [ref]i8;

var $M.131: [ref]i8;

var $M.132: [ref]i8;

var $M.133: [ref]i8;

var $M.134: [ref]i8;

var $M.135: [ref]i8;

var $M.136: [ref]i8;

var $M.137: [ref]i8;

var $M.138: [ref]i8;

var $M.139: [ref]i8;

var $M.140: [ref]i8;

var $M.141: [ref]i8;

var $M.142: [ref]i8;

var $M.143: [ref]i8;

var $M.144: [ref]i8;

var $M.145: [ref]i8;

var $M.146: [ref]i8;

var $M.147: [ref]i8;

var $M.148: [ref]i8;

var $M.149: [ref]i8;

var $M.150: [ref]i8;

var $M.151: [ref]i8;

var $M.152: [ref]i8;

var $M.153: [ref]i8;

var $M.154: [ref]i8;

var $M.155: [ref]i8;

var $M.156: [ref]i8;

var $M.157: [ref]i8;

var $M.158: [ref]i8;

var $M.159: [ref]i8;

var $M.188: [ref]i8;

var $M.189: [ref]i8;

var $M.190: [ref]i8;

var $M.191: [ref]i8;

var $M.192: [ref]i8;

var $M.255: [ref]i32;

var $M.258: [ref]i32;

var $M.261: [ref]i32;

var $M.264: [ref]i32;

var $M.267: [ref]i32;

var $M.270: [ref]i32;

var $M.273: [ref]i32;

var $M.276: [ref]i32;

var $M.279: [ref]i32;

var $M.290: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 686140);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const comedi_default_buf_size_kb: ref;

axiom comedi_default_buf_size_kb == $sub.ref(0, 2056);

const comedi_default_buf_maxsize_kb: ref;

axiom comedi_default_buf_maxsize_kb == $sub.ref(0, 3084);

const __ksymtab_comedi_dev_put: ref;

axiom __ksymtab_comedi_dev_put == $sub.ref(0, 4124);

const {:count 15} __kstrtab_comedi_dev_put: ref;

axiom __kstrtab_comedi_dev_put == $sub.ref(0, 5163);

const comedi_proc_fops: ref;

axiom comedi_proc_fops == $sub.ref(0, 6411);

const {:count 24} __kstrtab_comedi_buf_read_samples: ref;

axiom __kstrtab_comedi_buf_read_samples == $sub.ref(0, 7459);

const {:count 25} __kstrtab_comedi_buf_write_samples: ref;

axiom __kstrtab_comedi_buf_write_samples == $sub.ref(0, 8508);

const {:count 21} __kstrtab_comedi_buf_read_free: ref;

axiom __kstrtab_comedi_buf_read_free == $sub.ref(0, 9553);

const {:count 22} __kstrtab_comedi_buf_read_alloc: ref;

axiom __kstrtab_comedi_buf_read_alloc == $sub.ref(0, 10599);

const {:count 28} __kstrtab_comedi_buf_read_n_available: ref;

axiom __kstrtab_comedi_buf_read_n_available == $sub.ref(0, 11651);

const {:count 22} __kstrtab_comedi_buf_write_free: ref;

axiom __kstrtab_comedi_buf_write_free == $sub.ref(0, 12697);

const {:count 23} __kstrtab_comedi_buf_write_alloc: ref;

axiom __kstrtab_comedi_buf_write_alloc == $sub.ref(0, 13744);

const {:count 25} __kstrtab_comedi_driver_unregister: ref;

axiom __kstrtab_comedi_driver_unregister == $sub.ref(0, 14793);

const {:count 23} __kstrtab_comedi_driver_register: ref;

axiom __kstrtab_comedi_driver_register == $sub.ref(0, 15840);

const {:count 21} __kstrtab_comedi_auto_unconfig: ref;

axiom __kstrtab_comedi_auto_unconfig == $sub.ref(0, 16885);

const {:count 19} __kstrtab_comedi_auto_config: ref;

axiom __kstrtab_comedi_auto_config == $sub.ref(0, 17928);

const {:count 21} __kstrtab_comedi_legacy_detach: ref;

axiom __kstrtab_comedi_legacy_detach == $sub.ref(0, 18973);

const {:count 22} __kstrtab_comedi_request_region: ref;

axiom __kstrtab_comedi_request_region == $sub.ref(0, 20019);

const {:count 24} __kstrtab___comedi_request_region: ref;

axiom __kstrtab___comedi_request_region == $sub.ref(0, 21067);

const {:count 21} __kstrtab_comedi_load_firmware: ref;

axiom __kstrtab_comedi_load_firmware == $sub.ref(0, 22112);

const {:count 21} __kstrtab_comedi_handle_events: ref;

axiom __kstrtab_comedi_handle_events == $sub.ref(0, 23157);

const {:count 25} __kstrtab_comedi_inc_scan_progress: ref;

axiom __kstrtab_comedi_inc_scan_progress == $sub.ref(0, 24206);

const {:count 21} __kstrtab_comedi_nsamples_left: ref;

axiom __kstrtab_comedi_nsamples_left == $sub.ref(0, 25251);

const {:count 19} __kstrtab_comedi_nscans_left: ref;

axiom __kstrtab_comedi_nscans_left == $sub.ref(0, 26294);

const {:count 22} __kstrtab_comedi_bytes_per_scan: ref;

axiom __kstrtab_comedi_bytes_per_scan == $sub.ref(0, 27340);

const {:count 24} __kstrtab_comedi_dio_update_state: ref;

axiom __kstrtab_comedi_dio_update_state == $sub.ref(0, 28388);

const {:count 23} __kstrtab_comedi_dio_insn_config: ref;

axiom __kstrtab_comedi_dio_insn_config == $sub.ref(0, 29435);

const {:count 15} __kstrtab_comedi_timeout: ref;

axiom __kstrtab_comedi_timeout == $sub.ref(0, 30474);

const {:count 26} __kstrtab_comedi_readback_insn_read: ref;

axiom __kstrtab_comedi_readback_insn_read == $sub.ref(0, 31524);

const {:count 29} __kstrtab_comedi_alloc_subdev_readback: ref;

axiom __kstrtab_comedi_alloc_subdev_readback == $sub.ref(0, 32577);

const {:count 24} __kstrtab_comedi_alloc_subdevices: ref;

axiom __kstrtab_comedi_alloc_subdevices == $sub.ref(0, 33625);

const {:count 21} __kstrtab_comedi_alloc_devpriv: ref;

axiom __kstrtab_comedi_alloc_devpriv == $sub.ref(0, 34670);

const {:count 18} __kstrtab_comedi_set_hw_dev: ref;

axiom __kstrtab_comedi_set_hw_dev == $sub.ref(0, 35712);

const {:count 22} __kstrtab_comedi_check_chanlist: ref;

axiom __kstrtab_comedi_check_chanlist == $sub.ref(0, 36758);

const {:count 14} __kstrtab_range_unknown: ref;

axiom __kstrtab_range_unknown == $sub.ref(0, 37796);

const {:count 13} __kstrtab_range_0_32mA: ref;

axiom __kstrtab_range_0_32mA == $sub.ref(0, 38833);

const {:count 13} __kstrtab_range_4_20mA: ref;

axiom __kstrtab_range_4_20mA == $sub.ref(0, 39870);

const {:count 13} __kstrtab_range_0_20mA: ref;

axiom __kstrtab_range_0_20mA == $sub.ref(0, 40907);

const {:count 18} __kstrtab_range_unipolar2_5: ref;

axiom __kstrtab_range_unipolar2_5 == $sub.ref(0, 41949);

const {:count 16} __kstrtab_range_unipolar5: ref;

axiom __kstrtab_range_unipolar5 == $sub.ref(0, 42989);

const {:count 17} __kstrtab_range_unipolar10: ref;

axiom __kstrtab_range_unipolar10 == $sub.ref(0, 44030);

const {:count 17} __kstrtab_range_bipolar2_5: ref;

axiom __kstrtab_range_bipolar2_5 == $sub.ref(0, 45071);

const {:count 15} __kstrtab_range_bipolar5: ref;

axiom __kstrtab_range_bipolar5 == $sub.ref(0, 46110);

const {:count 16} __kstrtab_range_bipolar10: ref;

axiom __kstrtab_range_bipolar10 == $sub.ref(0, 47150);

const dev_attr_write_buffer_kb: ref;

axiom dev_attr_write_buffer_kb == $sub.ref(0, 48222);

const dev_attr_max_write_buffer_kb: ref;

axiom dev_attr_max_write_buffer_kb == $sub.ref(0, 49294);

const dev_attr_read_buffer_kb: ref;

axiom dev_attr_read_buffer_kb == $sub.ref(0, 50366);

const dev_attr_max_read_buffer_kb: ref;

axiom dev_attr_max_read_buffer_kb == $sub.ref(0, 51438);

const {:count 5} comedi_dev_attrs: ref;

axiom comedi_dev_attrs == $sub.ref(0, 52502);

const comedi_dev_group: ref;

axiom comedi_dev_group == $sub.ref(0, 53558);

const {:count 2} comedi_dev_groups: ref;

axiom comedi_dev_groups == $sub.ref(0, 54598);

const comedi_fops: ref;

axiom comedi_fops == $sub.ref(0, 55846);

const comedi_cdev: ref;

axiom comedi_cdev == $sub.ref(0, 57206);

const comedi_vm_ops: ref;

axiom comedi_vm_ops == $sub.ref(0, 58318);

const comedi_subdevice_minor_table_lock: ref;

axiom comedi_subdevice_minor_table_lock == $sub.ref(0, 59502);

const comedi_board_minor_table_lock: ref;

axiom comedi_board_minor_table_lock == $sub.ref(0, 60686);

const {:count 13} __kstrtab_comedi_event: ref;

axiom __kstrtab_comedi_event == $sub.ref(0, 61723);

const {:count 19} __kstrtab_comedi_alloc_spriv: ref;

axiom __kstrtab_comedi_alloc_spriv == $sub.ref(0, 62766);

const {:count 27} __kstrtab_comedi_set_spriv_auto_free: ref;

axiom __kstrtab_comedi_set_spriv_auto_free == $sub.ref(0, 63817);

const {:count 28} __kstrtab_comedi_is_subdevice_running: ref;

axiom __kstrtab_comedi_is_subdevice_running == $sub.ref(0, 64869);

const {:count 26} __kstrtab_comedi_dev_get_from_minor: ref;

axiom __kstrtab_comedi_dev_get_from_minor == $sub.ref(0, 65919);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 66947);

const comedi_drivers: ref;

axiom comedi_drivers == $sub.ref(0, 67979);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 69007);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 70035);

const comedi_class: ref;

axiom comedi_class == $sub.ref(0, 71067);

const {:count 208} comedi_subdevice_minor_table: ref;

axiom comedi_subdevice_minor_table == $sub.ref(0, 73755);

const {:count 48} comedi_board_minor_table: ref;

axiom comedi_board_minor_table == $sub.ref(0, 75163);

const comedi_num_legacy_minors: ref;

axiom comedi_num_legacy_minors == $sub.ref(0, 76191);

const comedi_proc_fops_group1: ref;

axiom comedi_proc_fops_group1 == $sub.ref(0, 77223);

const comedi_fops_group2: ref;

axiom comedi_fops_group2 == $sub.ref(0, 78255);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 79283);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 80311);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 81339);

const dev_attr_max_write_buffer_kb_group0: ref;

axiom dev_attr_max_write_buffer_kb_group0 == $sub.ref(0, 82371);

const dev_attr_read_buffer_kb_group1: ref;

axiom dev_attr_read_buffer_kb_group1 == $sub.ref(0, 83403);

const dev_attr_max_read_buffer_kb_group1: ref;

axiom dev_attr_max_read_buffer_kb_group1 == $sub.ref(0, 84435);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 85463);

const comedi_proc_fops_group2: ref;

axiom comedi_proc_fops_group2 == $sub.ref(0, 86495);

const comedi_fops_group1: ref;

axiom comedi_fops_group1 == $sub.ref(0, 87527);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 88555);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 89583);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 90611);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 91639);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 92667);

const dev_attr_read_buffer_kb_group0: ref;

axiom dev_attr_read_buffer_kb_group0 == $sub.ref(0, 93699);

const dev_attr_max_read_buffer_kb_group0: ref;

axiom dev_attr_max_read_buffer_kb_group0 == $sub.ref(0, 94731);

const dev_attr_max_write_buffer_kb_group1: ref;

axiom dev_attr_max_write_buffer_kb_group1 == $sub.ref(0, 95763);

const comedi_vm_ops_group0: ref;

axiom comedi_vm_ops_group0 == $sub.ref(0, 96795);

const dev_attr_write_buffer_kb_group0: ref;

axiom dev_attr_write_buffer_kb_group0 == $sub.ref(0, 97827);

const dev_attr_write_buffer_kb_group1: ref;

axiom dev_attr_write_buffer_kb_group1 == $sub.ref(0, 98859);

const ldv_module_refcounter: ref;

axiom ldv_module_refcounter == $sub.ref(0, 99887);

const __ksymtab_comedi_buf_read_samples: ref;

axiom __ksymtab_comedi_buf_read_samples == $sub.ref(0, 100927);

const __ksymtab_comedi_buf_write_samples: ref;

axiom __ksymtab_comedi_buf_write_samples == $sub.ref(0, 101967);

const __ksymtab_comedi_buf_read_free: ref;

axiom __ksymtab_comedi_buf_read_free == $sub.ref(0, 103007);

const __ksymtab_comedi_buf_read_alloc: ref;

axiom __ksymtab_comedi_buf_read_alloc == $sub.ref(0, 104047);

const __ksymtab_comedi_buf_read_n_available: ref;

axiom __ksymtab_comedi_buf_read_n_available == $sub.ref(0, 105087);

const __ksymtab_comedi_buf_write_free: ref;

axiom __ksymtab_comedi_buf_write_free == $sub.ref(0, 106127);

const __ksymtab_comedi_buf_write_alloc: ref;

axiom __ksymtab_comedi_buf_write_alloc == $sub.ref(0, 107167);

const __ksymtab_comedi_driver_unregister: ref;

axiom __ksymtab_comedi_driver_unregister == $sub.ref(0, 108207);

const __ksymtab_comedi_driver_register: ref;

axiom __ksymtab_comedi_driver_register == $sub.ref(0, 109247);

const __ksymtab_comedi_auto_unconfig: ref;

axiom __ksymtab_comedi_auto_unconfig == $sub.ref(0, 110287);

const __ksymtab_comedi_auto_config: ref;

axiom __ksymtab_comedi_auto_config == $sub.ref(0, 111327);

const __ksymtab_comedi_legacy_detach: ref;

axiom __ksymtab_comedi_legacy_detach == $sub.ref(0, 112367);

const __ksymtab_comedi_request_region: ref;

axiom __ksymtab_comedi_request_region == $sub.ref(0, 113407);

const __ksymtab___comedi_request_region: ref;

axiom __ksymtab___comedi_request_region == $sub.ref(0, 114447);

const __ksymtab_comedi_load_firmware: ref;

axiom __ksymtab_comedi_load_firmware == $sub.ref(0, 115487);

const __ksymtab_comedi_handle_events: ref;

axiom __ksymtab_comedi_handle_events == $sub.ref(0, 116527);

const __ksymtab_comedi_inc_scan_progress: ref;

axiom __ksymtab_comedi_inc_scan_progress == $sub.ref(0, 117567);

const __ksymtab_comedi_nsamples_left: ref;

axiom __ksymtab_comedi_nsamples_left == $sub.ref(0, 118607);

const __ksymtab_comedi_nscans_left: ref;

axiom __ksymtab_comedi_nscans_left == $sub.ref(0, 119647);

const __ksymtab_comedi_bytes_per_scan: ref;

axiom __ksymtab_comedi_bytes_per_scan == $sub.ref(0, 120687);

const __ksymtab_comedi_dio_update_state: ref;

axiom __ksymtab_comedi_dio_update_state == $sub.ref(0, 121727);

const __ksymtab_comedi_dio_insn_config: ref;

axiom __ksymtab_comedi_dio_insn_config == $sub.ref(0, 122767);

const __ksymtab_comedi_timeout: ref;

axiom __ksymtab_comedi_timeout == $sub.ref(0, 123807);

const __ksymtab_comedi_readback_insn_read: ref;

axiom __ksymtab_comedi_readback_insn_read == $sub.ref(0, 124847);

const __ksymtab_comedi_alloc_subdev_readback: ref;

axiom __ksymtab_comedi_alloc_subdev_readback == $sub.ref(0, 125887);

const __ksymtab_comedi_alloc_subdevices: ref;

axiom __ksymtab_comedi_alloc_subdevices == $sub.ref(0, 126927);

const __ksymtab_comedi_alloc_devpriv: ref;

axiom __ksymtab_comedi_alloc_devpriv == $sub.ref(0, 127967);

const __ksymtab_comedi_set_hw_dev: ref;

axiom __ksymtab_comedi_set_hw_dev == $sub.ref(0, 129007);

const comedi_drivers_list_lock: ref;

axiom comedi_drivers_list_lock == $sub.ref(0, 130191);

const __ksymtab_comedi_check_chanlist: ref;

axiom __ksymtab_comedi_check_chanlist == $sub.ref(0, 131231);

const __ksymtab_range_unknown: ref;

axiom __ksymtab_range_unknown == $sub.ref(0, 132271);

const range_unknown: ref;

axiom range_unknown == $sub.ref(0, 133311);

const __ksymtab_range_0_32mA: ref;

axiom __ksymtab_range_0_32mA == $sub.ref(0, 134351);

const range_0_32mA: ref;

axiom range_0_32mA == $sub.ref(0, 135391);

const __ksymtab_range_4_20mA: ref;

axiom __ksymtab_range_4_20mA == $sub.ref(0, 136431);

const range_4_20mA: ref;

axiom range_4_20mA == $sub.ref(0, 137471);

const __ksymtab_range_0_20mA: ref;

axiom __ksymtab_range_0_20mA == $sub.ref(0, 138511);

const range_0_20mA: ref;

axiom range_0_20mA == $sub.ref(0, 139551);

const __ksymtab_range_unipolar2_5: ref;

axiom __ksymtab_range_unipolar2_5 == $sub.ref(0, 140591);

const range_unipolar2_5: ref;

axiom range_unipolar2_5 == $sub.ref(0, 141631);

const __ksymtab_range_unipolar5: ref;

axiom __ksymtab_range_unipolar5 == $sub.ref(0, 142671);

const range_unipolar5: ref;

axiom range_unipolar5 == $sub.ref(0, 143711);

const __ksymtab_range_unipolar10: ref;

axiom __ksymtab_range_unipolar10 == $sub.ref(0, 144751);

const range_unipolar10: ref;

axiom range_unipolar10 == $sub.ref(0, 145791);

const __ksymtab_range_bipolar2_5: ref;

axiom __ksymtab_range_bipolar2_5 == $sub.ref(0, 146831);

const range_bipolar2_5: ref;

axiom range_bipolar2_5 == $sub.ref(0, 147871);

const __ksymtab_range_bipolar5: ref;

axiom __ksymtab_range_bipolar5 == $sub.ref(0, 148911);

const range_bipolar5: ref;

axiom range_bipolar5 == $sub.ref(0, 149951);

const __ksymtab_range_bipolar10: ref;

axiom __ksymtab_range_bipolar10 == $sub.ref(0, 150991);

const range_bipolar10: ref;

axiom range_bipolar10 == $sub.ref(0, 152031);

const __ksymtab_comedi_event: ref;

axiom __ksymtab_comedi_event == $sub.ref(0, 153071);

const __ksymtab_comedi_alloc_spriv: ref;

axiom __ksymtab_comedi_alloc_spriv == $sub.ref(0, 154111);

const __ksymtab_comedi_set_spriv_auto_free: ref;

axiom __ksymtab_comedi_set_spriv_auto_free == $sub.ref(0, 155151);

const __ksymtab_comedi_is_subdevice_running: ref;

axiom __ksymtab_comedi_is_subdevice_running == $sub.ref(0, 156191);

const __ksymtab_comedi_dev_get_from_minor: ref;

axiom __ksymtab_comedi_dev_get_from_minor == $sub.ref(0, 157231);

const {:count 21} .str.24: ref;

axiom .str.24 == $sub.ref(0, 158276);

const {:count 215} .str.4: ref;

axiom .str.4 == $sub.ref(0, 159515);

const {:count 49} .str.9: ref;

axiom .str.9 == $sub.ref(0, 160588);

const {:count 35} .str.10: ref;

axiom .str.10 == $sub.ref(0, 161647);

const {:count 25} .str.11: ref;

axiom .str.11 == $sub.ref(0, 162696);

const {:count 24} .str.12: ref;

axiom .str.12 == $sub.ref(0, 163744);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 42} .str.13: ref;

axiom .str.13 == $sub.ref(0, 164810);

const ioport_resource: ref;

axiom ioport_resource == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 34} .str.14: ref;

axiom .str.14 == $sub.ref(0, 165868);

const {:count 59} .str.16: ref;

axiom .str.16 == $sub.ref(0, 166951);

const {:count 56} .str.17: ref;

axiom .str.17 == $sub.ref(0, 168031);

const {:count 52} .str.18: ref;

axiom .str.18 == $sub.ref(0, 169107);

const {:count 38} .str.19: ref;

axiom .str.19 == $sub.ref(0, 170169);

const {:count 46} .str.20: ref;

axiom .str.20 == $sub.ref(0, 171239);

const {:count 52} .str.21: ref;

axiom .str.21 == $sub.ref(0, 172315);

const __cachemode2pte_tbl: ref;

axiom __cachemode2pte_tbl == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 51} .str.25: ref;

axiom .str.25 == $sub.ref(0, 173390);

const {:count 61} .str.96: ref;

axiom .str.96 == $sub.ref(0, 174475);

const {:count 52} .str.97: ref;

axiom .str.97 == $sub.ref(0, 175551);

const {:count 18} .str.98: ref;

axiom .str.98 == $sub.ref(0, 176593);

const {:count 26} .str.99: ref;

axiom .str.99 == $sub.ref(0, 177643);

const {:count 46} .str.2: ref;

axiom .str.2 == $sub.ref(0, 178713);

const {:count 16} .str.3: ref;

axiom .str.3 == $sub.ref(0, 179753);

const .str: ref;

axiom .str == $sub.ref(0, 180826);

const {:count 9} .str.1: ref;

axiom .str.1 == $sub.ref(0, 181859);

const {:count 25} .str.26: ref;

axiom .str.26 == $sub.ref(0, 182908);

const {:count 12} .str.27: ref;

axiom .str.27 == $sub.ref(0, 183944);

const {:count 18} .str.28: ref;

axiom .str.28 == $sub.ref(0, 184986);

const {:count 41} .str.22: ref;

axiom .str.22 == $sub.ref(0, 186051);

const {:count 16} .str.23: ref;

axiom .str.23 == $sub.ref(0, 187091);

const {:count 40} .str.29: ref;

axiom .str.29 == $sub.ref(0, 188155);

const {:count 30} .str.30: ref;

axiom .str.30 == $sub.ref(0, 189209);

const {:count 44} .str.31: ref;

axiom .str.31 == $sub.ref(0, 190277);

const {:count 34} .str.32: ref;

axiom .str.32 == $sub.ref(0, 191335);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 7} .str.5: ref;

axiom .str.5 == $sub.ref(0, 192366);

const {:count 12} .str.42: ref;

axiom .str.42 == $sub.ref(0, 193402);

const {:count 22} .str.43: ref;

axiom .str.43 == $sub.ref(0, 194448);

const {:count 30} .str.44: ref;

axiom .str.44 == $sub.ref(0, 195502);

const {:count 36} .str.45: ref;

axiom .str.45 == $sub.ref(0, 196562);

const {:count 12} .str.46: ref;

axiom .str.46 == $sub.ref(0, 197598);

const {:count 20} .str.39: ref;

axiom .str.39 == $sub.ref(0, 198642);

const {:count 26} .str.47: ref;

axiom .str.47 == $sub.ref(0, 199692);

const cpu_tss: ref;

axiom cpu_tss == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 22} .str.48: ref;

axiom .str.48 == $sub.ref(0, 200738);

const {:count 33} .str.93: ref;

axiom .str.93 == $sub.ref(0, 201795);

const {:count 11} .str.71: ref;

axiom .str.71 == $sub.ref(0, 202830);

const {:count 25} .str.72: ref;

axiom .str.72 == $sub.ref(0, 203879);

const {:count 10} .str.73: ref;

axiom .str.73 == $sub.ref(0, 204913);

const {:count 12} .str.74: ref;

axiom .str.74 == $sub.ref(0, 205949);

const {:count 14} .str.75: ref;

axiom .str.75 == $sub.ref(0, 206987);

const {:count 27} .str.76: ref;

axiom .str.76 == $sub.ref(0, 208038);

const {:count 15} .str.77: ref;

axiom .str.77 == $sub.ref(0, 209077);

const {:count 14} .str.78: ref;

axiom .str.78 == $sub.ref(0, 210115);

const {:count 41} .str.79: ref;

axiom .str.79 == $sub.ref(0, 211180);

const {:count 19} .str.80: ref;

axiom .str.80 == $sub.ref(0, 212223);

const {:count 42} .str.81: ref;

axiom .str.81 == $sub.ref(0, 213289);

const {:count 71} .str.82: ref;

axiom .str.82 == $sub.ref(0, 214384);

const {:count 34} .str.83: ref;

axiom .str.83 == $sub.ref(0, 215442);

const {:count 25} .str.84: ref;

axiom .str.84 == $sub.ref(0, 216491);

const {:count 35} .str.85: ref;

axiom .str.85 == $sub.ref(0, 217550);

const {:count 18} .str.67: ref;

axiom .str.67 == $sub.ref(0, 218592);

const {:count 23} .str.68: ref;

axiom .str.68 == $sub.ref(0, 219639);

const {:count 29} .str.69: ref;

axiom .str.69 == $sub.ref(0, 220692);

const {:count 21} .str.70: ref;

axiom .str.70 == $sub.ref(0, 221737);

const {:count 17} .str.66: ref;

axiom .str.66 == $sub.ref(0, 222778);

const {:count 17} .str.61: ref;

axiom .str.61 == $sub.ref(0, 223819);

const {:count 22} .str.60: ref;

axiom .str.60 == $sub.ref(0, 224865);

const {:count 22} .str.62: ref;

axiom .str.62 == $sub.ref(0, 225911);

const {:count 24} .str.63: ref;

axiom .str.63 == $sub.ref(0, 226959);

const {:count 40} .str.64: ref;

axiom .str.64 == $sub.ref(0, 228023);

const {:count 36} .str.65: ref;

axiom .str.65 == $sub.ref(0, 229083);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 230120);

const {:count 18} .str.54: ref;

axiom .str.54 == $sub.ref(0, 231162);

const {:count 16} .str.55: ref;

axiom .str.55 == $sub.ref(0, 232202);

const {:count 36} .str.56: ref;

axiom .str.56 == $sub.ref(0, 233262);

const {:count 18} .str.57: ref;

axiom .str.57 == $sub.ref(0, 234304);

const {:count 19} .str.58: ref;

axiom .str.58 == $sub.ref(0, 235347);

const {:count 15} .str.59: ref;

axiom .str.59 == $sub.ref(0, 236386);

const {:count 17} .str.52: ref;

axiom .str.52 == $sub.ref(0, 237427);

const {:count 42} .str.51: ref;

axiom .str.51 == $sub.ref(0, 238493);

const {:count 19} .str.6: ref;

axiom .str.6 == $sub.ref(0, 239536);

const {:count 209} .str.7: ref;

axiom .str.7 == $sub.ref(0, 240769);

const {:count 39} .str.8: ref;

axiom .str.8 == $sub.ref(0, 241832);

const {:count 19} .str.50: ref;

axiom .str.50 == $sub.ref(0, 242875);

const {:count 20} .str.33: ref;

axiom .str.33 == $sub.ref(0, 243919);

const {:count 41} .str.34: ref;

axiom .str.34 == $sub.ref(0, 244984);

const {:count 44} .str.35: ref;

axiom .str.35 == $sub.ref(0, 246052);

const {:count 36} .str.36: ref;

axiom .str.36 == $sub.ref(0, 247112);

const {:count 41} .str.49: ref;

axiom .str.49 == $sub.ref(0, 248177);

const {:count 57} .str.15: ref;

axiom .str.15 == $sub.ref(0, 249258);

const {:count 47} .str.94: ref;

axiom .str.94 == $sub.ref(0, 250329);

const {:count 6} .str.95: ref;

axiom .str.95 == $sub.ref(0, 251359);

const {:count 12} .str.41: ref;

axiom .str.41 == $sub.ref(0, 252395);

const {:count 13} .str.38: ref;

axiom .str.38 == $sub.ref(0, 253432);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 12} .str.40: ref;

axiom .str.40 == $sub.ref(0, 254468);

const {:count 19} .str.89: ref;

axiom .str.89 == $sub.ref(0, 255511);

const {:count 4} .str.37: ref;

axiom .str.37 == $sub.ref(0, 256539);

const {:count 15} .str.90: ref;

axiom .str.90 == $sub.ref(0, 257578);

const {:count 20} .str.91: ref;

axiom .str.91 == $sub.ref(0, 258622);

const {:count 16} .str.92: ref;

axiom .str.92 == $sub.ref(0, 259662);

const {:count 41} .str.100: ref;

axiom .str.100 == $sub.ref(0, 260727);

const {:count 65} .str.101: ref;

axiom .str.101 == $sub.ref(0, 261816);

const {:count 22} .str.102: ref;

axiom .str.102 == $sub.ref(0, 262862);

const {:count 12} .str.103: ref;

axiom .str.103 == $sub.ref(0, 263898);

const {:count 5} .str.104: ref;

axiom .str.104 == $sub.ref(0, 264927);

const {:count 5} .str.105: ref;

axiom .str.105 == $sub.ref(0, 265956);

const {:count 49} .str.86: ref;

axiom .str.86 == $sub.ref(0, 267029);

const {:count 105} .str.87: ref;

axiom .str.87 == $sub.ref(0, 268158);

const {:count 33} .str.88: ref;

axiom .str.88 == $sub.ref(0, 269215);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 270247);

const {:count 3} .str.1.224: ref;

axiom .str.1.224 == $sub.ref(0, 271274);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 272312);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 273340);

const comedi_dev_put: ref;

axiom comedi_dev_put == $sub.ref(0, 274372);

procedure comedi_dev_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation comedi_dev_put($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(472, 1));
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} $i4 := kref_put($p3, comedi_dev_kref_release);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 1} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 275404);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const comedi_dev_kref_release: ref;

axiom comedi_dev_kref_release == $sub.ref(0, 276436);

procedure comedi_dev_kref_release($p0: ref);
  free requires assertsPassed;



implementation comedi_dev_kref_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 472), 560));
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 472), 560)), $mul.ref(152, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} mutex_destroy($p3);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 472), 560)), $mul.ref(32, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} put_device($p5);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} kfree($p6);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    return;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 277468);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 6} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 278500);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_22: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 8} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 10} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} vslice_dummy_var_22 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 14} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 15} devirtbounce($p2, $p0);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} warn_slowpath_null(.str.24, 71);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 279532);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 17} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 280564);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 281596);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 20} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 21} devirtbounce.1(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.1, $p2);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const mutex_destroy: ref;

axiom mutex_destroy == $sub.ref(0, 282628);

procedure mutex_destroy($p0: ref);
  free requires assertsPassed;



implementation mutex_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    return;
}



const put_device: ref;

axiom put_device == $sub.ref(0, 283660);

procedure put_device($p0: ref);
  free requires assertsPassed;



implementation put_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 284692);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} free_($p0);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 285724);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 23} $free($p0);
    return;
}



const comedi_dev_get_from_minor: ref;

axiom comedi_dev_get_from_minor == $sub.ref(0, 286756);

procedure comedi_dev_get_from_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_dev_get_from_minor($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $p2: ref;
  var $p4: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} {:cexpr "comedi_dev_get_from_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i1 := $ule.i32($i0, 47);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $p4 := comedi_dev_get_from_subdevice_minor($i0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} $p2 := comedi_dev_get_from_board_minor($i0);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p3 := $p2;
    goto $bb3;
}



const comedi_dev_get_from_board_minor: ref;

axiom comedi_dev_get_from_board_minor == $sub.ref(0, 287788);

procedure comedi_dev_get_from_board_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_dev_get_from_board_minor($i0: i32) returns ($r: ref)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} {:cexpr "comedi_dev_get_from_board_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i32($i0, 47);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 29} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i0);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i6, 8));
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.2, $p7);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p9 := comedi_dev_get($p8);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $r := $p9;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 30} devirtbounce.2(0, .str.4, 231, 12);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call comedi_dev_get_from_board_minor_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const comedi_dev_get_from_subdevice_minor: ref;

axiom comedi_dev_get_from_subdevice_minor == $sub.ref(0, 288820);

procedure comedi_dev_get_from_subdevice_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_dev_get_from_subdevice_minor($i0: i32) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} {:cexpr "comedi_dev_get_from_subdevice_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $i1 := $sub.i32($i0, 48);
    call {:si_unique_call 35} {:cexpr "i"} boogie_si_record_i32($i1);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 207);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 37} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} mutex_lock_nested(comedi_subdevice_minor_table_lock, 0);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i1);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i7, 8));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.3, $p8);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p15 := comedi_dev_get($p14);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} mutex_unlock(comedi_subdevice_minor_table_lock);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p14 := $p13;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 38} devirtbounce.2(0, .str.4, 244, 12);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call comedi_dev_get_from_subdevice_minor_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 289852);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    return;
}



const comedi_dev_get: ref;

axiom comedi_dev_get == $sub.ref(0, 290884);

procedure comedi_dev_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_dev_get($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(472, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} kref_get($p3);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 291916);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 292948);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_23: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 45} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 46} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 48} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} vslice_dummy_var_23 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 49} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 51} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 54} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} warn_slowpath_null(.str.24, 47);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 293980);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 57} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 58} $i3 := devirtbounce.3(0, $p2, $i0, $p2);
    call {:si_unique_call 59} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_is_subdevice_running: ref;

axiom comedi_is_subdevice_running == $sub.ref(0, 295012);

procedure comedi_is_subdevice_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_is_subdevice_running($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $i1 := comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 61} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $i2 := comedi_is_runflags_running($i1);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 63} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_get_subdevice_runflags: ref;

axiom comedi_get_subdevice_runflags == $sub.ref(0, 296044);

procedure comedi_get_subdevice_runflags($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_get_subdevice_runflags($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} $p2 := spinlock_check($p1);
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i3 := _raw_spin_lock_irqsave($p2);
    call {:si_unique_call 66} {:cexpr "flags"} boogie_si_record_i64($i3);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $i4 := __comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 68} {:cexpr "runflags"} boogie_si_record_i32($i4);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} spin_unlock_irqrestore($p5, $i3);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_is_runflags_running: ref;

axiom comedi_is_runflags_running == $sub.ref(0, 297076);

procedure comedi_is_runflags_running($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_is_runflags_running($i0: i32) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} {:cexpr "comedi_is_runflags_running:arg:runflags"} boogie_si_record_i32($i0);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 134217728);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 298108);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const _raw_spin_lock_irqsave: ref;

axiom _raw_spin_lock_irqsave == $sub.ref(0, 299140);

procedure _raw_spin_lock_irqsave($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation _raw_spin_lock_irqsave($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 1} true;
    call {:si_unique_call 71} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 72} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __comedi_get_subdevice_runflags: ref;

axiom __comedi_get_subdevice_runflags == $sub.ref(0, 300172);

procedure __comedi_get_subdevice_runflags($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __comedi_get_subdevice_runflags($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 301204);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 302236);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    return;
}



const comedi_set_spriv_auto_free: ref;

axiom comedi_set_spriv_auto_free == $sub.ref(0, 303268);

procedure comedi_set_spriv_auto_free($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_set_spriv_auto_free($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} __comedi_set_subdevice_runflags($p0, $sub.i32(0, 2147483648));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    return;
}



const __comedi_set_subdevice_runflags: ref;

axiom __comedi_set_subdevice_runflags == $sub.ref(0, 304300);

procedure __comedi_set_subdevice_runflags($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __comedi_set_subdevice_runflags($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} {:cexpr "__comedi_set_subdevice_runflags:arg:bits"} boogie_si_record_i32($i1);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i3, $i1);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    return;
}



const comedi_alloc_spriv: ref;

axiom comedi_alloc_spriv == $sub.ref(0, 305332);

procedure comedi_alloc_spriv($p0: ref, $i1: i64) returns ($r: ref);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 306364);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 79} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 307396);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 82} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 308428);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} {:cexpr "__kmalloc:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 85} {:cexpr "__kmalloc:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} $p2 := external_alloc();
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 309460);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 1} true;
    call {:si_unique_call 87} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 88} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const comedi_event: ref;

axiom comedi_event == $sub.ref(0, 310492);

procedure comedi_event($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_event($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i1;
  var $p36: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} $p5 := spinlock_check($p4);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $i6 := _raw_spin_lock_irqsave($p5);
    call {:si_unique_call 91} {:cexpr "flags"} boogie_si_record_i64($i6);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 92} {:cexpr "events"} boogie_si_record_i32($i8);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} $i10 := __comedi_is_subdevice_running($p1);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 94} {:cexpr "tmp___0"} boogie_si_record_i8($i11);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i8);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 50);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i8);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 48);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(248, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, $i8);
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} spin_unlock_irqrestore($p34, $i6);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i33, 0);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(536, 1));
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} kill_fasync($p36, 29, $i33);
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} __wake_up($p26, 1, 1, $0.ref);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 64);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 131074 else 131073);
    call {:si_unique_call 99} {:cexpr "si_code"} boogie_si_record_i32($i32);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb16;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} __comedi_set_subdevice_runflags($p1, 4);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __comedi_clear_subdevice_runflags($p1, 134217728);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} spin_unlock_irqrestore($p15, $i6);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;
}



const __comedi_is_subdevice_running: ref;

axiom __comedi_is_subdevice_running == $sub.ref(0, 311524);

procedure __comedi_is_subdevice_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation __comedi_is_subdevice_running($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i1 := __comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 103} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $i2 := comedi_is_runflags_running($i1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 105} {:cexpr "tmp___0"} boogie_si_record_i8($i3);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __comedi_clear_subdevice_runflags: ref;

axiom __comedi_clear_subdevice_runflags == $sub.ref(0, 312556);

procedure __comedi_clear_subdevice_runflags($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __comedi_clear_subdevice_runflags($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} {:cexpr "__comedi_clear_subdevice_runflags:arg:bits"} boogie_si_record_i32($i1);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i3, $i4);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(64, 1));
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 313588);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 108} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    return;
}



const kill_fasync: ref;

axiom kill_fasync == $sub.ref(0, 314620);

procedure kill_fasync($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation kill_fasync($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} {:cexpr "kill_fasync:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 110} {:cexpr "kill_fasync:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    return;
}



const comedi_check_chanlist: ref;

axiom comedi_check_chanlist == $sub.ref(0, 315652);

procedure comedi_check_chanlist($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_check_chanlist($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i19: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $p45: ref;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $i6: i32;
  var $i47: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} {:cexpr "comedi_check_chanlist:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i1);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $r := $i47;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p8, $i9, $i10, $p11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $i19, $p35, $i36, $i37, $i42, $i43, $i44, $i38, $i39, $i40, $i41, $i48, $i49, $i6 := comedi_check_chanlist_loop_$bb4($p0, $i1, $p2, $i7, $p8, $i9, $i10, $p11, $p12, $i13, $i14, $p15, $p16, $p17, $i18, $p20, $p21, $i22, $i23, $p24, $i25, $i26, $p27, $p28, $i29, $p30, $p31, $p32, $i33, $i34, $i19, $p35, $i36, $i37, $i42, $i43, $i44, $i38, $i39, $i40, $i41, $i48, $i49, $i6);
    goto $bb4_last;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref($i7, 4));
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 112} {:cexpr "chanspec"} boogie_si_record_i32($i9);
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 65535);
    call {:si_unique_call 113} {:cexpr "chan"} boogie_si_record_i32($i10);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i19 := $i34;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i36, $i10);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i38, $i39, $i40, $i41 := $i6, $i9, $i10, $i19;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i37 == 1);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i32($i9, 16);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 255);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i44 := $uge.i32($i43, $i19);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $i38, $i39, $i40, $i41 := $i6, $i9, $i10, $i19;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i6, 1);
    call {:si_unique_call 117} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, $i1);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i49 == 1);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i48;
    goto $bb22_dummy;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} dev_warn.ref.ref.i32.i32.i32.i32($p46, .str.9, $i38, $i39, $i40, $i41);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32(0, 22);
    goto $bb20;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb16;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, $i10);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb11;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i10);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p28, $mul.ref($i29, 8));
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    call {:si_unique_call 115} {:cexpr "range_len"} boogie_si_record_i32($i33);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb14;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    call {:si_unique_call 114} {:cexpr "range_len"} boogie_si_record_i32($i18);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb8;

  $bb22_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_320;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 316684);

procedure dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_warn.ref.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: ref, p.3: i64, p.4: i64);



procedure dev_warn.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    return;
}



const comedi_set_hw_dev: ref;

axiom comedi_set_hw_dev == $sub.ref(0, 317716);

procedure comedi_set_hw_dev($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_set_hw_dev($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p12 := get_device($p1);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p12);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 17);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const get_device: ref;

axiom get_device == $sub.ref(0, 318748);

procedure get_device($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_device($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p1 := external_alloc();
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const comedi_alloc_devpriv: ref;

axiom comedi_alloc_devpriv == $sub.ref(0, 319780);

procedure comedi_alloc_devpriv($p0: ref, $i1: i64) returns ($r: ref);



const comedi_alloc_subdevices: ref;

axiom comedi_alloc_subdevices == $sub.ref(0, 320812);

procedure comedi_alloc_subdevices($p0: ref, $i1: i32) returns ($r: i32);



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 321844);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 121} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 122} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 322876);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 323908);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 125} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 126} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const comedi_alloc_subdev_readback: ref;

axiom comedi_alloc_subdev_readback == $sub.ref(0, 324940);

procedure comedi_alloc_subdev_readback($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_alloc_subdev_readback($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} $p8 := kcalloc($i7, 4, 208);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p8);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(184, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(184, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, comedi_readback_insn_read);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 22);
    goto $bb3;
}



const comedi_readback_insn_read: ref;

axiom comedi_readback_insn_read == $sub.ref(0, 325972);

procedure comedi_readback_insn_read($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_readback_insn_read($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i15: i32;
  var $p26: ref;
  var $i27: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 65535);
    call {:si_unique_call 129} {:cexpr "chan"} boogie_si_record_i32($i6);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32(0, $i13);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $i11 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb8;

  $bb8:
    call $p16, $p17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i15 := comedi_readback_insn_read_loop_$bb8($p1, $p3, $i6, $p12, $p16, $p17, $i18, $p19, $i20, $i21, $p22, $i23, $i24, $i25, $i15);
    goto $bb8_last;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i6);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 4));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i15);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p3, $mul.ref($i21, 4));
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i20);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i15, 1);
    call {:si_unique_call 130} {:cexpr "i"} boogie_si_record_i32($i23);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p12);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $i25 := $ult.i32($i23, $i24);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i23;
    goto $bb10_dummy;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 22);
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_484;
}



const comedi_timeout: ref;

axiom comedi_timeout == $sub.ref(0, 327004);

procedure comedi_timeout($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i32);



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 328036);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);



const cpu_relax: ref;

axiom cpu_relax == $sub.ref(0, 329068);

procedure cpu_relax();



const rep_nop: ref;

axiom rep_nop == $sub.ref(0, 330100);

procedure rep_nop();



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 331132);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);



const comedi_dio_insn_config: ref;

axiom comedi_dio_insn_config == $sub.ref(0, 332164);

procedure comedi_dio_insn_config($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i32) returns ($r: i32);



const comedi_dio_update_state: ref;

axiom comedi_dio_update_state == $sub.ref(0, 333196);

procedure comedi_dio_update_state($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_dio_update_state($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 31);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p1);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, $i9);
    call {:si_unique_call 131} {:cexpr "mask"} boogie_si_record_i32($i11);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    call {:si_unique_call 132} {:cexpr "bits"} boogie_si_record_i32($i13);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i11, 0);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(268, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $i17 := $xor.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i16, $i17);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(268, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(268, 1));
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i13, $i11);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i21, $i22);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(268, 1));
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $i7 := $shl.i32(1, $i6);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i8 := $add.i32($i7, $sub.i32(0, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;
}



const comedi_bytes_per_scan: ref;

axiom comedi_bytes_per_scan == $sub.ref(0, 334228);

procedure comedi_bytes_per_scan($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_bytes_per_scan($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p18: ref;
  var $i19: i32;
  var $i17: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(12, 1));
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p18 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(36, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    call {:si_unique_call 139} {:cexpr "num_samples"} boogie_si_record_i32($i19);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i17 := $i19;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $i20 := comedi_samples_to_bytes($p0, $i17);
    call {:si_unique_call 138} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i10 := comedi_bytes_per_sample($p0);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 8);
    call {:si_unique_call 135} {:cexpr "bits_per_sample"} boogie_si_record_i32($i11);
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(36, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i13, $i11);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i14, 1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i16 := $udiv.i32($i15, $i11);
    call {:si_unique_call 136} {:cexpr "num_samples"} boogie_si_record_i32($i16);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i17 := $i16;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const comedi_bytes_per_sample: ref;

axiom comedi_bytes_per_sample == $sub.ref(0, 335260);

procedure comedi_bytes_per_sample($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_bytes_per_sample($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 268435456);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 4 else 2);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const comedi_samples_to_bytes: ref;

axiom comedi_samples_to_bytes == $sub.ref(0, 336292);

procedure comedi_samples_to_bytes($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_samples_to_bytes($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "comedi_samples_to_bytes:arg:nsamples"} boogie_si_record_i32($i1);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i2 := comedi_sample_shift($p0);
    call {:si_unique_call 142} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i3 := $shl.i32($i1, $i2);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const comedi_sample_shift: ref;

axiom comedi_sample_shift == $sub.ref(0, 337324);

procedure comedi_sample_shift($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_sample_shift($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 268435456);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i5 := (if $i4 == 1 then 2 else 1);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const comedi_nscans_left: ref;

axiom comedi_nscans_left == $sub.ref(0, 338356);

procedure comedi_nscans_left($p0: ref, $i1: i32) returns ($r: i32);



const comedi_buf_read_n_available: ref;

axiom comedi_buf_read_n_available == $sub.ref(0, 339388);

procedure comedi_buf_read_n_available($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_read_n_available($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i7, $i9);
    call {:si_unique_call 143} {:cexpr "num_bytes"} boogie_si_record_i32($i10);
    call {:si_unique_call 144} devirtbounce.5(0);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;
}



const comedi_nsamples_left: ref;

axiom comedi_nsamples_left == $sub.ref(0, 340420);

procedure comedi_nsamples_left($p0: ref, $i1: i32) returns ($r: i32);



const comedi_bytes_to_samples: ref;

axiom comedi_bytes_to_samples == $sub.ref(0, 341452);

procedure comedi_bytes_to_samples($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_bytes_to_samples($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} {:cexpr "comedi_bytes_to_samples:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $i2 := comedi_sample_shift($p0);
    call {:si_unique_call 147} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i3 := $lshr.i32($i1, $i2);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const comedi_inc_scan_progress: ref;

axiom comedi_inc_scan_progress == $sub.ref(0, 342484);

procedure comedi_inc_scan_progress($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_inc_scan_progress($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} {:cexpr "comedi_inc_scan_progress:arg:num_bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i5 := comedi_bytes_per_scan($p0);
    call {:si_unique_call 150} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 536870912);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(60, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i22, $i1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(60, 1));
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(60, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i27 := $uge.i32($i26, $i5);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(60, 1));
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i30 := $udiv.i32($i29, $i5);
    call {:si_unique_call 153} {:cexpr "nscans"} boogie_si_record_i32($i30);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i33 := $xor.i32($i30, $sub.i32(0, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i34 := $ult.i32($i32, $i33);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i34 == 1);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(60, 1));
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $i42 := $urem.i32($i41, $i5);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(60, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 1);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, $i46);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i34 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, $i30);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} $i10 := comedi_bytes_to_samples($p0, $i1);
    call {:si_unique_call 152} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(52, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i10);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(52, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(52, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(56, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i19 := $urem.i32($i16, $i18);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(52, 1));
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const comedi_handle_events: ref;

axiom comedi_handle_events == $sub.ref(0, 343516);

procedure comedi_handle_events($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation comedi_handle_events($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var vslice_dummy_var_24: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    call {:si_unique_call 154} {:cexpr "events"} boogie_si_record_i32($i5);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i5);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i8 := $and.i64($i7, 50);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} comedi_event($p0, $p1);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(240, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    call {:si_unique_call 155} vslice_dummy_var_24 := devirtbounce.6($p11, $p0, $p1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const comedi_load_firmware: ref;

axiom comedi_load_firmware == $sub.ref(0, 344548);

procedure comedi_load_firmware($p0: ref, $p1: ref, $p2: ref, $p3: ref, $i4: i64) returns ($r: i32);



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 345580);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 346612);

procedure release_firmware($p0: ref);



const __comedi_request_region: ref;

axiom __comedi_request_region == $sub.ref(0, 347644);

procedure __comedi_request_region($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);



const __request_region: ref;

axiom __request_region == $sub.ref(0, 348676);

procedure __request_region($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: ref);



const comedi_request_region: ref;

axiom comedi_request_region == $sub.ref(0, 349708);

procedure comedi_request_region($p0: ref, $i1: i64, $i2: i64) returns ($r: i32);



const comedi_legacy_detach: ref;

axiom comedi_legacy_detach == $sub.ref(0, 350740);

procedure comedi_legacy_detach($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_legacy_detach($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(512, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(496, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(504, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb7:
    assume $i13 == 1;
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(496, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(504, 1));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} __release_region(ioport_resource, $i15, $i17);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(496, 1));
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 0);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(504, 1));
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, 0);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(512, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} free_irq($i5, $p6);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(512, 1));
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 351772);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    return;
}



const __release_region: ref;

axiom __release_region == $sub.ref(0, 352804);

procedure __release_region($p0: ref, $i1: i64, $i2: i64);
  free requires assertsPassed;



implementation __release_region($p0: ref, $i1: i64, $i2: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} {:cexpr "__release_region:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 161} {:cexpr "__release_region:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    return;
}



const comedi_auto_config: ref;

axiom comedi_auto_config == $sub.ref(0, 353836);

procedure comedi_auto_config($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.28, $M.23, $M.24, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation comedi_auto_config($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i6: i32;
  var vslice_dummy_var_25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} {:cexpr "comedi_auto_config:arg:context"} boogie_si_record_i64($i2);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p15 := comedi_alloc_board_minor($p0);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $i17 := IS_ERR($p16);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 168} {:cexpr "tmp___0"} boogie_si_record_i8($i18);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p15, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p1);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p15, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p29);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    call {:si_unique_call 172} $i33 := devirtbounce.8($p32, $p15, $i2);
    call {:si_unique_call 173} {:cexpr "ret"} boogie_si_record_i32($i33);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i34 := $sge.i32($i33, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i36 := $i33;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p15, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} mutex_unlock($p37);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i36, 0);
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p15, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p15, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} _dev_info.ref.ref.ref.ref($p42, .str.21, $p44, $p46);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i6 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb17:
    assume $i38 == 1;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} dev_warn.ref.ref.ref($p0, .str.20, $p40);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} comedi_release_hardware_device($p0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i35 := comedi_device_postconfig($p15);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 175} {:cexpr "ret"} boogie_si_record_i32($i35);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb16;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} dev_warn.ref.ref.ref($p0, .str.19, $p21);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p15);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $i23 := PTR_ERR($p22);
    call {:si_unique_call 171} {:cexpr "tmp"} boogie_si_record_i64($i23);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i6 := $i24;
    goto $bb3;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i12 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} dev_warn.ref.ref.ref($p0, .str.18, $p14);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} dev_warn.ref.ref($p0, .str.17);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} vslice_dummy_var_25 := printk.ref(.str.16);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 22);
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 354868);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 1} true;
    call {:si_unique_call 180} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 181} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.i32($p0: ref, p.1: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 1} true;
    call {:si_unique_call 182} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 183} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 1} true;
    call {:si_unique_call 184} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 185} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 1} true;
    call {:si_unique_call 186} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 187} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const comedi_alloc_board_minor: ref;

axiom comedi_alloc_board_minor == $sub.ref(0, 355900);

procedure comedi_alloc_board_minor($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $M.54, $M.25;



implementation comedi_alloc_board_minor($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $i26: i32;
  var $i27: i1;
  var $i16: i32;
  var $i28: i32;
  var $i15: i32;
  var $i25: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i1;
  var $i40: i8;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p7: ref;
  var vslice_dummy_var_26: i32;
  var vslice_dummy_var_27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p1 := kzalloc(560, 208);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} comedi_device_init($p2);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} vslice_dummy_var_26 := comedi_set_hw_dev($p2, $p0);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} mutex_lock_nested($p9, 0);
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p0);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i14 := $ule.i32($i13, 47);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i25 := $i15;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i25, 48);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i25);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $p35 := $M.22;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i36 := $or.i32($i25, 102760448);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p37 := device_create.ref.ref.i32.ref.ref.i32($p35, $p0, $i36, $0.ref, .str.1, $i25);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $i39 := IS_ERR($p38);
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i8($i39);
    call {:si_unique_call 203} {:cexpr "tmp___2"} boogie_si_record_i8($i40);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i8.i1($i40);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p7 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb26:
    assume $i43 == 1;
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} $p44 := get_device($p37);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p44);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i41 == 1;
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $i42 := 0;
    goto $bb25;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} mutex_unlock($p30);
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} comedi_device_cleanup($p2);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_27 := comedi_dev_put($p2);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} dev_err.ref.ref($p0, .str);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p32 := ERR_PTR($sub.i64(0, 16));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p7 := $p32;
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i16 := $i13;
    goto $bb11;

  $bb11:
    call $i17, $p18, $p19, $i20, $i21, $i22, $i26, $i27, $i16, $i28 := comedi_alloc_board_minor_loop_$bb11($i17, $p18, $p19, $i20, $i21, $i22, $i26, $i27, $i16, $i28);
    goto $bb11_last;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i17, 8));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.2, $p18);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i22 := $i16;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i16, 1);
    call {:si_unique_call 195} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i27 := $ule.i32($i26, 47);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i28 := $i26;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i15 := $i28;
    goto $bb10;

  $bb17:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i26;
    goto $bb17_dummy;

  $bb13:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i23, 8));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p24, $p1);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i25 := $i22;
    goto $bb15;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i12 := $M.21;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p5 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p7 := $p5;
    goto $bb3;

  $bb17_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_830;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 356932);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} $i1 := ldv_is_err($p0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 206} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 357964);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 208} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const comedi_device_postconfig: ref;

axiom comedi_device_postconfig == $sub.ref(0, 358996);

procedure comedi_device_postconfig($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, assertsPassed;



implementation comedi_device_postconfig($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i1 := __comedi_device_postconfig($p0);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 210} {:cexpr "ret"} boogie_si_record_i32($i1);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i1, 0);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} down_write($p4);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 1);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} up_write($p6);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb3;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const comedi_release_hardware_device: ref;

axiom comedi_release_hardware_device == $sub.ref(0, 360028);

procedure comedi_release_hardware_device($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $CurrAddr, $M.54, $M.25;



implementation comedi_release_hardware_device($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i4: i64;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i1 := $M.21;
    call {:si_unique_call 213} {:cexpr "minor"} boogie_si_record_i32($i1);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i2 := $sle.i32($i1, 47);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $i3 := $i1;
    goto $bb4;

  $bb4:
    call $i4, $p5, $p6, $i7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $p15, $i18, $i19, $i3 := comedi_release_hardware_device_loop_$bb4($p0, $i4, $p5, $p6, $i7, $i8, $p9, $p10, $i11, $i12, $i13, $i14, $p15, $i18, $i19, $i3);
    goto $bb4_last;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i4, 8));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.2, $p5);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i3, 1);
    call {:si_unique_call 218} {:cexpr "minor"} boogie_si_record_i32($i18);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i19 := $sle.i32($i18, 47);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i3 := $i18;
    goto $bb13_dummy;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i11, $i12);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i14, $p15 := $i3, $p6;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb8;

  $bb9:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i14);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i16, 8));
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p17, $0.ref);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} comedi_free_board_dev($p15);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_910;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 361060);

procedure _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.ref($p0: ref, $p1: ref, p.2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    return;
}



const comedi_free_board_dev: ref;

axiom comedi_free_board_dev == $sub.ref(0, 362092);

procedure comedi_free_board_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $CurrAddr, $M.54, $M.25;



implementation comedi_free_board_dev($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var vslice_dummy_var_28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} comedi_device_cleanup($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} vslice_dummy_var_28 := comedi_dev_put($p0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i6 == 1;
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p7 := $M.22;
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 102760448);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} device_destroy($p7, $i10);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_34:
    assume !assertsPassed;
    return;
}



const comedi_device_cleanup: ref;

axiom comedi_device_cleanup == $sub.ref(0, 363124);

procedure comedi_device_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $M.54, $M.25, $CurrAddr;



implementation comedi_device_cleanup($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} mutex_lock_nested($p3, 0);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} comedi_device_detach($p0);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} mutex_unlock($p17);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb10;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} ldv_module_put_5($p11);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb7;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const device_destroy: ref;

axiom device_destroy == $sub.ref(0, 364156);

procedure device_destroy($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation device_destroy($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} {:cexpr "device_destroy:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    return;
}



const comedi_device_detach: ref;

axiom comedi_device_detach == $sub.ref(0, 365188);

procedure comedi_device_detach($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.54, $M.23, $M.25, $CurrAddr, assertsPassed;



implementation comedi_device_detach($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} comedi_device_cancel_all($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} down_write($p1);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, 0);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} comedi_device_detach_cleanup($p0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} up_write($p15);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    call {:si_unique_call 229} devirtbounce.9($p14, $p0);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;
}



const ldv_module_put_5: ref;

axiom ldv_module_put_5 == $sub.ref(0, 366220);

procedure ldv_module_put_5($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_5($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} ldv_module_put($p0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_55:
    assume !assertsPassed;
    return;
}



const ldv_module_put: ref;

axiom ldv_module_put == $sub.ref(0, 367252);

procedure ldv_module_put($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i3 := $M.23;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i3, 1);
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i5 := $M.23;
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $M.23 := $i6;
    call {:si_unique_call 234} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} ldv_error();
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_58:
    assume !assertsPassed;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 368284);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 235} __VERIFIER_error();
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const comedi_device_cancel_all: ref;

axiom comedi_device_cancel_all == $sub.ref(0, 369316);

procedure comedi_device_cancel_all($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation comedi_device_cancel_all($p0: ref)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i7: i32;
  var vslice_dummy_var_29: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb8;

  $bb8:
    call $p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $i17, $i18, $i19, $i7, vslice_dummy_var_29 := comedi_device_cancel_all_loop_$bb8($p0, $p4, $p8, $p9, $i10, $p11, $p12, $p13, $i14, $i15, $i17, $i18, $i19, $i7, vslice_dummy_var_29);
    goto $bb8_last;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i7);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 296));
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref($i10, 296)), $mul.ref(40, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i7, 1);
    call {:si_unique_call 237} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p4);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i17);
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i17;
    goto $bb13_dummy;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} vslice_dummy_var_29 := do_cancel($p0, $p11);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;
}



const down_write: ref;

axiom down_write == $sub.ref(0, 370348);

procedure down_write($p0: ref);
  free requires assertsPassed;



implementation down_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    return;
}



const comedi_device_detach_cleanup: ref;

axiom comedi_device_detach_cleanup == $sub.ref(0, 371380);

procedure comedi_device_detach_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.3, $M.24, $M.25, $CurrAddr, $M.2, $M.28, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.23, $M.54, assertsPassed;



implementation comedi_device_detach_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i8: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var vslice_dummy_var_30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(24, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} kfree($p38);
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(16, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} kfree($p41);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(24, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $0.ref);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(16, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $0.ref);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $0.ref);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $0.ref);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(64, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $0.ref);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(488, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(496, 1));
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, 0);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(504, 1));
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p49, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(73, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(512, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 0);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(520, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p52, $0.ref);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $0.ref);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(544, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p55, $0.ref);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(552, 1));
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} comedi_clear_hw_dev($p0);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} kfree($p34);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $0.ref);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 0);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb3:
    assume $i7 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb6:
    call $p9, $p10, $i11, $p12, $i13, $i14, $i15, $p16, $p17, $p18, $p19, $i20, $i21, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $i8, vslice_dummy_var_30 := comedi_device_detach_cleanup_loop_$bb6($p0, $p5, $p9, $p10, $i11, $p12, $i13, $i14, $i15, $p16, $p17, $p18, $p19, $i20, $i21, $p23, $p24, $p25, $p26, $p27, $p28, $i29, $i30, $i31, $i8, vslice_dummy_var_30);
    goto $bb6_last;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 296));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $i13 := comedi_can_auto_free_spriv($p12);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} comedi_free_subdevice_minor($p12);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p10, $mul.ref($i11, 296)), $mul.ref(40, 1));
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref($i11, 296)), $mul.ref(288, 1));
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} kfree($p28);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i8, 1);
    call {:si_unique_call 245} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p5);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i31 := $sgt.i32($i30, $i29);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i29;
    goto $bb14_dummy;

  $bb11:
    assume $i21 == 1;
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} vslice_dummy_var_30 := comedi_buf_alloc($p0, $p12, 0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p10, $mul.ref($i11, 296)), $mul.ref(40, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} kfree($p25);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p10, $mul.ref($i11, 296)), $mul.ref(32, 1));
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} kfree($p17);
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb14_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1093;
}



const up_write: ref;

axiom up_write == $sub.ref(0, 372412);

procedure up_write($p0: ref);
  free requires assertsPassed;



implementation up_write($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    return;
}



const comedi_can_auto_free_spriv: ref;

axiom comedi_can_auto_free_spriv == $sub.ref(0, 373444);

procedure comedi_can_auto_free_spriv($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_can_auto_free_spriv($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i1 := __comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 251} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 2147483648);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_free_subdevice_minor: ref;

axiom comedi_free_subdevice_minor == $sub.ref(0, 374476);

procedure comedi_free_subdevice_minor($p0: ref);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation comedi_free_subdevice_minor($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i4, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 255);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 253} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i15 := $sle.i32($i14, 47);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 256} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i21, $sub.i32(0, 48));
    call {:si_unique_call 258} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} mutex_lock_nested(comedi_subdevice_minor_table_lock, 0);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i23, 8));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.3, $p24);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p0);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i26, $i27);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} mutex_unlock(comedi_subdevice_minor_table_lock);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i34 == 1;
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    $p35 := $M.22;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 102760448);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} device_destroy($p35, $i38);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $0.ref);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i28 == 1;
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i22);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i29, 8));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p30, $0.ref);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i19 == 1;
    call {:si_unique_call 257} devirtbounce.2(0, .str.4, 2845, 12);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    call comedi_free_subdevice_minor_loop_$bb14();
    goto $bb14_last;

  $bb8:
    assume $i12 == 1;
    call {:si_unique_call 254} devirtbounce.2(0, .str.4, 2844, 12);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call comedi_free_subdevice_minor_loop_$bb10();
    goto $bb10_last;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb10_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;
}



const comedi_buf_alloc: ref;

axiom comedi_buf_alloc == $sub.ref(0, 375508);

procedure comedi_buf_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.23, $M.54, assertsPassed;



implementation comedi_buf_alloc($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i64;
  var $i14: i1;
  var $i16: i1;
  var $i17: i64;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} {:cexpr "comedi_buf_alloc:arg:new_size"} boogie_si_record_i64($i2);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i2, 4095);
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i6 := $and.i64($i5, $sub.i64(0, 4096));
    call {:si_unique_call 263} {:cexpr "new_size"} boogie_si_record_i64($i6);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} __comedi_buf_free($p0, $p1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i6, 0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i6);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i6, 12);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    call {:si_unique_call 265} {:cexpr "n_pages"} boogie_si_record_i32($i18);
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} __comedi_buf_alloc($p0, $p1, $i18);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i22 == 1;
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} __comedi_buf_free($p0, $p1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i12);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, $i6);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;
}



const comedi_clear_hw_dev: ref;

axiom comedi_clear_hw_dev == $sub.ref(0, 376540);

procedure comedi_clear_hw_dev($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_clear_hw_dev($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} put_device($p2);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p3, $0.ref);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    return;
}



const __comedi_buf_free: ref;

axiom __comedi_buf_free == $sub.ref(0, 377572);

procedure __comedi_buf_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation __comedi_buf_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p13 := spinlock_check($p12);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $i14 := _raw_spin_lock_irqsave($p13);
    call {:si_unique_call 272} {:cexpr "flags"} boogie_si_record_i64($i14);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} spin_unlock_irqrestore($p18, $i14);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_31 := comedi_buf_map_put($p16);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} vunmap($p9);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $0.ref);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __comedi_buf_alloc: ref;

axiom __comedi_buf_alloc == $sub.ref(0, 378604);

procedure __comedi_buf_alloc($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.25, $CurrAddr;



implementation __comedi_buf_alloc($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $i42: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $i64: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $i44: i32;
  var $i83: i32;
  var $i43: i32;
  var $i65: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $p88: ref;
  var $i89: i1;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 276} {:cexpr "__comedi_buf_alloc:arg:n_pages"} boogie_si_record_i32($i2);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $p6 := kzalloc(32, 208);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} kref_init($p10);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $p12 := spinlock_check($p11);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $i13 := _raw_spin_lock_irqsave($p12);
    call {:si_unique_call 281} {:cexpr "flags"} boogie_si_record_i64($i13);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p6);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} spin_unlock_irqrestore($p15, $i13);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(264, 1));
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 3);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i26 := $zext.i32.i64($i2);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $i27 := $mul.i64($i26, 16);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p28 := vzalloc($i27);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p28);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $p39 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i42 := $ult.i32(0, $i2);
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $i43 := 0;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i65 := $i43;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p85 := spinlock_check($p84);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i86 := _raw_spin_lock_irqsave($p85);
    call {:si_unique_call 291} {:cexpr "flags"} boogie_si_record_i64($i86);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p87, $i65);
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} spin_unlock_irqrestore($p88, $i86);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i65, $i2);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p39);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} vfree($p97);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i89 == 1;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i90 := cachemode2protval(3);
    call {:si_unique_call 300} {:cexpr "tmp___7"} boogie_si_record_i64($i90);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i91 := $or.i64($i90, $sub.i64(0, 9223372036854775453));
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $M.24 := $store.i64($M.24, $p92, $i91);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i94 := $load.i64($M.24, $p93);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $p95 := vmap($p39, $i2, 4, $i94);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p96, $p95);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb14:
    assume $i42 == 1;
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb17;

  $bb17:
    call $p45, $p46, $i47, $p49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $p66, $p67, $i68, $i69, $i70, $p72, $p73, $p74, $i75, $i76, $i77, $p78, $i79, $p80, $i81, $i82, $i44, $i83 := __comedi_buf_alloc_loop_$bb17($i2, $p7, $p39, $p45, $p46, $i47, $p49, $i50, $i51, $p52, $p53, $p54, $p55, $p56, $i57, $p58, $p59, $p60, $p61, $i62, $i63, $i64, $p66, $p67, $i68, $i69, $i70, $p72, $p73, $p74, $i75, $i76, $i77, $p78, $i79, $p80, $i81, $i82, $i44, $i83);
    goto $bb17_last;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i47 := $zext.i32.i64($i44);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 3);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i57 := get_zeroed_page(208);
    call {:si_unique_call 288} {:cexpr "tmp___3"} boogie_si_record_i64($i57);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p58 := $i2p.i64.ref($i57);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p46, $mul.ref($i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p58);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p46, $mul.ref($i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i64 := $i44;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p46, $mul.ref($i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} $i69 := __phys_addr($i68);
    call {:si_unique_call 294} {:cexpr "tmp___4"} boogie_si_record_i64($i69);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i64($i69, 12);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i70, 64)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} set_bit(10, $p72);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p46, $mul.ref($i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} $i76 := __phys_addr($i75);
    call {:si_unique_call 297} {:cexpr "tmp___5"} boogie_si_record_i64($i76);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i77 := $lshr.i64($i76, 12);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i77, 64));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i44);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p39, $mul.ref($i79, 8));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p80, $p78);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i44, 1);
    call {:si_unique_call 298} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i82 := $ult.i32($i81, $i2);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i83 := $i81;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i43 := $i83;
    goto $bb16;

  $bb26:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i44 := $i81;
    goto $bb26_dummy;

  $bb22:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i65 := $i64;
    goto $bb24;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p46, $mul.ref($i47, 16)), $mul.ref(8, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $p55 := dma_alloc_attrs($p53, 4096, $p54, 16592, $0.ref);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p46, $mul.ref($i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p55);
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb11:
    assume $i41 == 1;
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i34 == 1;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i2);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i36 := $mul.i64($i35, 8);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p37 := vmalloc($i36);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $p39 := $p37;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p24 := get_device($p23);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 379636);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} atomic_set($p1, 1);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    return;
}



const vzalloc: ref;

axiom vzalloc == $sub.ref(0, 380668);

procedure vzalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vzalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} {:cexpr "vzalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} $p1 := external_alloc();
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const vmalloc: ref;

axiom vmalloc == $sub.ref(0, 381700);

procedure vmalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation vmalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} {:cexpr "vmalloc:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $p1 := external_alloc();
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 382732);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} {:cexpr "dma_alloc_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 309} {:cexpr "dma_alloc_attrs:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p5 := external_alloc();
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const get_zeroed_page: ref;

axiom get_zeroed_page == $sub.ref(0, 383764);

procedure get_zeroed_page($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation get_zeroed_page($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} {:cexpr "get_zeroed_page:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 1} true;
    call {:si_unique_call 312} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 313} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 384796);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 314} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 385828);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 318} devirtbounce.10(0, $p1, $i0, $p1);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    return;
}



const cachemode2protval: ref;

axiom cachemode2protval == $sub.ref(0, 386860);

procedure cachemode2protval($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation cachemode2protval($i0: i32) returns ($r: i64)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} {:cexpr "cachemode2protval:arg:pcm"} boogie_si_record_i32($i0);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} $i4 := ldv__builtin_expect($i3, 1);
    call {:si_unique_call 321} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i0);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(__cachemode2pte_tbl, $mul.ref(0, 16)), $mul.ref($i7, 2));
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i9);
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i6 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const vmap: ref;

axiom vmap == $sub.ref(0, 387892);

procedure vmap($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.25, $CurrAddr;



implementation vmap($p0: ref, $i1: i32, $i2: i64, $i3: i64) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.25 := $store.i64($M.25, $p5, $i3);
    call {:si_unique_call 323} {:cexpr "vmap:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 324} {:cexpr "vmap:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $p6 := external_alloc();
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const vfree: ref;

axiom vfree == $sub.ref(0, 388924);

procedure vfree($p0: ref);
  free requires assertsPassed;



implementation vfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 389956);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    return;
}



const vunmap: ref;

axiom vunmap == $sub.ref(0, 390988);

procedure vunmap($p0: ref);
  free requires assertsPassed;



implementation vunmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    return;
}



const comedi_buf_map_put: ref;

axiom comedi_buf_map_put == $sub.ref(0, 392020);

procedure comedi_buf_map_put($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation comedi_buf_map_put($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i4 := kref_put___0($p3, comedi_buf_map_kref_release);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 328} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const comedi_buf_map_kref_release: ref;

axiom comedi_buf_map_kref_release == $sub.ref(0, 393052);

procedure comedi_buf_map_kref_release($p0: ref);
  free requires assertsPassed;



implementation comedi_buf_map_kref_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i10: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref($sub.ref(0, 24), 32));
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(8, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(20, 1));
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 3);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p2);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} kfree($p45);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    return;

  $bb15:
    assume $i42 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(0, 1));
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} put_device($p44);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(16, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i8, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(8, 1));
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} vfree($p39);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb3:
    assume $i9 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    call $p11, $p12, $i13, $p15, $p16, $i17, $i18, $i19, $p21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $p29, $i30, $p31, $p32, $i33, $i34, $i35, $i36, $i10 := comedi_buf_map_kref_release_loop_$bb6($p1, $p7, $p11, $p12, $i13, $p15, $p16, $i17, $i18, $i19, $p21, $p22, $i23, $i24, $p25, $p26, $p27, $p28, $p29, $i30, $p31, $p32, $i33, $i34, $i35, $i36, $i10);
    goto $bb6_last;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(8, 1));
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i10);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i18 := __phys_addr($i17);
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $i19 := $lshr.i64($i18, 12);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i19, 64)), $mul.ref(0, 1));
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} clear_bit(10, $p21);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(20, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 3);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} free_pages($i33, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i10, 1);
    call {:si_unique_call 334} {:cexpr "i"} boogie_si_record_i32($i34);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p7);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    $i36 := $ugt.i32($i35, $i34);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i34;
    goto $bb11_dummy;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(0, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i30 := $load.i64($M.0, $p29);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} dma_free_attrs($p26, 4096, $p28, $i30, $0.ref);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1533;
}



const kref_put___0: ref;

axiom kref_put___0 == $sub.ref(0, 394084);

procedure kref_put___0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation kref_put___0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i2 := kref_sub___0($p0, 1, $p1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    call {:si_unique_call 339} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const kref_sub___0: ref;

axiom kref_sub___0 == $sub.ref(0, 395116);

procedure kref_sub___0($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation kref_sub___0($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_32: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} {:cexpr "kref_sub___0:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 341} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 343} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} vslice_dummy_var_32 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 347} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 348} devirtbounce($p2, $p0);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} warn_slowpath_null(.str.24, 71);
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 396148);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 350} devirtbounce.10(0, $p1, $i0, $p1);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 397180);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} {:cexpr "dma_free_attrs:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 352} {:cexpr "dma_free_attrs:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    return;
}



const free_pages: ref;

axiom free_pages == $sub.ref(0, 398212);

procedure free_pages($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation free_pages($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} {:cexpr "free_pages:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 354} {:cexpr "free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    return;
}



const do_cancel: ref;

axiom do_cancel == $sub.ref(0, 399244);

procedure do_cancel($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation do_cancel($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} $i2 := comedi_is_subdevice_running($p1);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 356} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} do_become_nonbusy($p0, $p1);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(240, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(240, 1));
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    call {:si_unique_call 357} $i11 := devirtbounce.6($p10, $p0, $p1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 358} {:cexpr "ret"} boogie_si_record_i32($i11);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const do_become_nonbusy: ref;

axiom do_become_nonbusy == $sub.ref(0, 400276);

procedure do_become_nonbusy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation do_become_nonbusy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} comedi_update_subdevice_runflags($p1, 134217728, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} dev_err.ref.ref($p16, .str.25);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p17, $0.ref);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} comedi_buf_reset($p1);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(48, 1));
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} kfree($p10);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(48, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} __wake_up($p14, 1, 0, $0.ref);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const comedi_update_subdevice_runflags: ref;

axiom comedi_update_subdevice_runflags == $sub.ref(0, 401308);

procedure comedi_update_subdevice_runflags($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_update_subdevice_runflags($p0: ref, $i1: i32, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} {:cexpr "comedi_update_subdevice_runflags:arg:mask"} boogie_si_record_i32($i1);
    call {:si_unique_call 366} {:cexpr "comedi_update_subdevice_runflags:arg:bits"} boogie_si_record_i32($i2);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $p4 := spinlock_check($p3);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 368} $i5 := _raw_spin_lock_irqsave($p4);
    call {:si_unique_call 369} {:cexpr "flags"} boogie_si_record_i64($i5);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} __comedi_clear_subdevice_runflags($p0, $i1);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i2, $i1);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} __comedi_set_subdevice_runflags($p0, $i6);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} spin_unlock_irqrestore($p7, $i5);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    return;
}



const comedi_buf_reset: ref;

axiom comedi_buf_reset == $sub.ref(0, 402340);

procedure comedi_buf_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(28, 1));
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 0);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 0);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(52, 1));
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(56, 1));
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 0);
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(60, 1));
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 0);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 0);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 403372);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    return;
}



const __comedi_device_postconfig: ref;

axiom __comedi_device_postconfig == $sub.ref(0, 404404);

procedure __comedi_device_postconfig($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, assertsPassed;



implementation __comedi_device_postconfig($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i4: i32;
  var $i35: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $r := $i35;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $p6, $i7, $p8, $p9, $i10, $i11, $p12, $i13, $i14, $p15, $i16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $i80, $i81, $p82, $p83, $p84, $i85, $i86, $p87, $i88, $i89, $i90, $i4 := __comedi_device_postconfig_loop_$bb4($p0, $p1, $p5, $p6, $i7, $p8, $p9, $i10, $i11, $p12, $i13, $i14, $p15, $i16, $i17, $p18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $p27, $p28, $p29, $i30, $i31, $i32, $i33, $i34, $p36, $p37, $i38, $i39, $p40, $p41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $p49, $p50, $i51, $i52, $p53, $p54, $p55, $i56, $i57, $p58, $p59, $i60, $i61, $p62, $p63, $p64, $i65, $i66, $p67, $p68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p77, $p78, $p79, $i80, $i81, $p82, $p83, $p84, $i85, $i86, $p87, $i88, $i89, $i90, $i4);
    goto $bb4_last;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i4);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p6, $mul.ref($i7, 296));
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(12, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(12, 1));
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 4);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(24, 1));
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(216, 1));
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(160, 1));
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $i66 := $eq.i64($i65, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $i71 := $eq.i64($i70, 0);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(208, 1));
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(232, 1));
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i86 := $eq.i64($i85, 0);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i4, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32($i88);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p1);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i90 := $sgt.i32($i89, $i88);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i90 == 1);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb59:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i88;
    goto $bb59_dummy;

  $bb56:
    assume $i86 == 1;
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(232, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p87, poll_invalid);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i81 == 1;
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(208, 1));
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, insn_inval);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i76 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, insn_inval);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb47:
    assume $i71 == 1;
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p72, insn_inval);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume $i66 == 1;
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, insn_inval);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb38:
    assume $i57 == 1;
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb40;

  $bb41:
    assume $i61 == 1;
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, insn_rw_emulate_bits);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb32:
    assume $i48 == 1;
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb34;

  $bb35:
    assume $i52 == 1;
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, insn_rw_emulate_bits);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i39 == 1;
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(168, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb28;

  $bb29:
    assume $i43 == 1;
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(160, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, range_unknown);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $i32 := __comedi_device_postconfig_async($p0, $p8);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 375} {:cexpr "ret"} boogie_si_record_i32($i32);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i34 := $i32;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb23;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i26 == 1;
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(24, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, 1);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(16, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i17 := $sle.i32($i16, 31);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i17 == 1);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(144, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i17 == 1;
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(16, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i20 := $shl.i32(1, $i19);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p6, $mul.ref($i7, 296)), $mul.ref(144, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, $i21);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb59_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;
}



const __comedi_device_postconfig_async: ref;

axiom __comedi_device_postconfig_async == $sub.ref(0, 405436);

procedure __comedi_device_postconfig_async($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.24, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, assertsPassed;



implementation __comedi_device_postconfig_async($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i64;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i9: i32;
  var vslice_dummy_var_33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 49152);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(224, 1));
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} $p16 := kzalloc(264, 208);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} __init_waitqueue_head($p20, .str.98, $p2);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p16);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i22 := $M.26;
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i22, 1024);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p17, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i25 := $M.27;
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i26 := $mul.i32($i25, 1024);
    call {:si_unique_call 381} {:cexpr "buf_size"} boogie_si_record_i32($i26);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i29 := $ult.i32($i28, $i26);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i32 := $i26;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} $i34 := comedi_buf_alloc($p0, $p1, $i33);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 384} {:cexpr "tmp___0"} boogie_si_record_i32($i34);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 0);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(248, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} vslice_dummy_var_33 := comedi_alloc_subdevice_minor($p1);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(248, 1));
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    call {:si_unique_call 386} $i44 := devirtbounce.6($p43, $p0, $p1);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 387} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i9 := $i44;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} dev_warn.ref.ref($p37, .str.99);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i29 == 1;
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p17, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    call {:si_unique_call 382} {:cexpr "buf_size"} boogie_si_record_i32($i31);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i32 := $i31;
    goto $bb13;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} dev_warn.ref.ref($p15, .str.97);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} dev_warn.ref.ref($p8, .str.96);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;
}



const insn_rw_emulate_bits: ref;

axiom insn_rw_emulate_bits == $sub.ref(0, 406468);

procedure insn_rw_emulate_bits($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.2, $M.28, $M.23, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation insn_rw_emulate_bits($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i26: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 65535);
    call {:si_unique_call 391} {:cexpr "chan"} boogie_si_record_i32($i8);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i9 := $uge.i32($i8, 32);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p5);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    call {:si_unique_call 392} cmdloc_dummy_var_1 := $memset.i8(cmdloc_dummy_var_0, $p11, 0, 8, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_1;
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p4);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_2 := $M.0;
    call {:si_unique_call 393} cmdloc_dummy_var_3 := $memset.i8(cmdloc_dummy_var_2, $p12, 0, 40, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_3;
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 201326594);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i10);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 2);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 134217729);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(200, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p5);
    call {:si_unique_call 394} $i39 := devirtbounce.11($p37, $p0, $p1, $p4, $p38);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 395} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 0);
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 67108864);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb17:
    assume $i43 == 1;
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i46 := $sub.i32($i8, $i10);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i47 := $lshr.i32($i45, $i46);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 1);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i48);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i26 := $i39;
    goto $bb8;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 131072);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i24, 0);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i8, $i10);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i28 := $shl.i32(1, $i27);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 4));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p3);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i31 == 1);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(1, 4));
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i31 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i8, $i10);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32(1, $i32);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb12;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const insn_inval: ref;

axiom insn_inval == $sub.ref(0, 407500);

procedure insn_inval($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation insn_inval($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const poll_invalid: ref;

axiom poll_invalid == $sub.ref(0, 408532);

procedure poll_invalid($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation poll_invalid($p0: ref, $p1: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 22);
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 409564);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 410596);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    return;
}



const comedi_alloc_subdevice_minor: ref;

axiom comedi_alloc_subdevice_minor == $sub.ref(0, 411628);

procedure comedi_alloc_subdevice_minor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.3, $M.0;



implementation comedi_alloc_subdevice_minor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i13: i32;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i64;
  var $i79: i1;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p131: ref;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $i138: i64;
  var $i139: i1;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $p143: ref;
  var $i144: i64;
  var $i145: i1;
  var $p146: ref;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p152: ref;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $p161: ref;
  var $i162: i64;
  var $i163: i1;
  var $p164: ref;
  var $i165: i64;
  var $i166: i1;
  var $p167: ref;
  var $i168: i64;
  var $i169: i1;
  var $p170: ref;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $i183: i64;
  var $i184: i1;
  var $p185: ref;
  var $i186: i64;
  var $i187: i1;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $p191: ref;
  var $i192: i64;
  var $i193: i1;
  var $p194: ref;
  var $i195: i64;
  var $i196: i1;
  var $p197: ref;
  var $i198: i64;
  var $i199: i1;
  var $p200: ref;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $i207: i64;
  var $i208: i1;
  var $p209: ref;
  var $i210: i64;
  var $i211: i1;
  var $p212: ref;
  var $i213: i64;
  var $i214: i1;
  var $p215: ref;
  var $i216: i64;
  var $i217: i1;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $p221: ref;
  var $i222: i64;
  var $i223: i1;
  var $p224: ref;
  var $i225: i64;
  var $i226: i1;
  var $p227: ref;
  var $i228: i64;
  var $i229: i1;
  var $p230: ref;
  var $i231: i64;
  var $i232: i1;
  var $p233: ref;
  var $i234: i64;
  var $i235: i1;
  var $p236: ref;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;
  var $p242: ref;
  var $i243: i64;
  var $i244: i1;
  var $p245: ref;
  var $i246: i64;
  var $i247: i1;
  var $p248: ref;
  var $i249: i64;
  var $i250: i1;
  var $p251: ref;
  var $i252: i64;
  var $i253: i1;
  var $p254: ref;
  var $i255: i64;
  var $i256: i1;
  var $p257: ref;
  var $i258: i64;
  var $i259: i1;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $p263: ref;
  var $i264: i64;
  var $i265: i1;
  var $p266: ref;
  var $i267: i64;
  var $i268: i1;
  var $p269: ref;
  var $i270: i64;
  var $i271: i1;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $p275: ref;
  var $i276: i64;
  var $i277: i1;
  var $p278: ref;
  var $i279: i64;
  var $i280: i1;
  var $p281: ref;
  var $i282: i64;
  var $i283: i1;
  var $p284: ref;
  var $i285: i64;
  var $i286: i1;
  var $p287: ref;
  var $i288: i64;
  var $i289: i1;
  var $p290: ref;
  var $i291: i64;
  var $i292: i1;
  var $p293: ref;
  var $i294: i64;
  var $i295: i1;
  var $p296: ref;
  var $i297: i64;
  var $i298: i1;
  var $p299: ref;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $i303: i64;
  var $i304: i1;
  var $p305: ref;
  var $i306: i64;
  var $i307: i1;
  var $p308: ref;
  var $i309: i64;
  var $i310: i1;
  var $p311: ref;
  var $i312: i64;
  var $i313: i1;
  var $p314: ref;
  var $i315: i64;
  var $i316: i1;
  var $p317: ref;
  var $i318: i64;
  var $i319: i1;
  var $p320: ref;
  var $i321: i64;
  var $i322: i1;
  var $p323: ref;
  var $i324: i64;
  var $i325: i1;
  var $p326: ref;
  var $i327: i64;
  var $i328: i1;
  var $p329: ref;
  var $i330: i64;
  var $i331: i1;
  var $p332: ref;
  var $i333: i64;
  var $i334: i1;
  var $p335: ref;
  var $i336: i64;
  var $i337: i1;
  var $p338: ref;
  var $i339: i64;
  var $i340: i1;
  var $p341: ref;
  var $i342: i64;
  var $i343: i1;
  var $p344: ref;
  var $i345: i64;
  var $i346: i1;
  var $p347: ref;
  var $i348: i64;
  var $i349: i1;
  var $p350: ref;
  var $i351: i64;
  var $i352: i1;
  var $p353: ref;
  var $i354: i64;
  var $i355: i1;
  var $p356: ref;
  var $i357: i64;
  var $i358: i1;
  var $p359: ref;
  var $i360: i64;
  var $i361: i1;
  var $p362: ref;
  var $i363: i64;
  var $i364: i1;
  var $p365: ref;
  var $i366: i64;
  var $i367: i1;
  var $p368: ref;
  var $i369: i64;
  var $i370: i1;
  var $p371: ref;
  var $i372: i64;
  var $i373: i1;
  var $p374: ref;
  var $i375: i64;
  var $i376: i1;
  var $p377: ref;
  var $i378: i64;
  var $i379: i1;
  var $p380: ref;
  var $i381: i64;
  var $i382: i1;
  var $p383: ref;
  var $i384: i64;
  var $i385: i1;
  var $p386: ref;
  var $i387: i64;
  var $i388: i1;
  var $p389: ref;
  var $i390: i64;
  var $i391: i1;
  var $p392: ref;
  var $i393: i64;
  var $i394: i1;
  var $p395: ref;
  var $i396: i64;
  var $i397: i1;
  var $p398: ref;
  var $i399: i64;
  var $i400: i1;
  var $p401: ref;
  var $i402: i64;
  var $i403: i1;
  var $p404: ref;
  var $i405: i64;
  var $i406: i1;
  var $p407: ref;
  var $i408: i64;
  var $i409: i1;
  var $p410: ref;
  var $i411: i64;
  var $i412: i1;
  var $p413: ref;
  var $i414: i64;
  var $i415: i1;
  var $p416: ref;
  var $i417: i64;
  var $i418: i1;
  var $p419: ref;
  var $i420: i64;
  var $i421: i1;
  var $p422: ref;
  var $i423: i64;
  var $i424: i1;
  var $p425: ref;
  var $i426: i64;
  var $i427: i1;
  var $p428: ref;
  var $i429: i64;
  var $i430: i1;
  var $p431: ref;
  var $i432: i64;
  var $i433: i1;
  var $p434: ref;
  var $i435: i64;
  var $i436: i1;
  var $p437: ref;
  var $i438: i64;
  var $i439: i1;
  var $p440: ref;
  var $i441: i64;
  var $i442: i1;
  var $p443: ref;
  var $i444: i64;
  var $i445: i1;
  var $p446: ref;
  var $i447: i64;
  var $i448: i1;
  var $p449: ref;
  var $i450: i64;
  var $i451: i1;
  var $p452: ref;
  var $i453: i64;
  var $i454: i1;
  var $p455: ref;
  var $i456: i64;
  var $i457: i1;
  var $p458: ref;
  var $i459: i64;
  var $i460: i1;
  var $p461: ref;
  var $i462: i64;
  var $i463: i1;
  var $p464: ref;
  var $i465: i64;
  var $i466: i1;
  var $p467: ref;
  var $i468: i64;
  var $i469: i1;
  var $p470: ref;
  var $i471: i64;
  var $i472: i1;
  var $p473: ref;
  var $i474: i64;
  var $i475: i1;
  var $p476: ref;
  var $i477: i64;
  var $i478: i1;
  var $p479: ref;
  var $i480: i64;
  var $i481: i1;
  var $p482: ref;
  var $i483: i64;
  var $i484: i1;
  var $p485: ref;
  var $i486: i64;
  var $i487: i1;
  var $p488: ref;
  var $i489: i64;
  var $i490: i1;
  var $p491: ref;
  var $i492: i64;
  var $i493: i1;
  var $p494: ref;
  var $i495: i64;
  var $i496: i1;
  var $p497: ref;
  var $i498: i64;
  var $i499: i1;
  var $p500: ref;
  var $i501: i64;
  var $i502: i1;
  var $p503: ref;
  var $i504: i64;
  var $i505: i1;
  var $p506: ref;
  var $i507: i64;
  var $i508: i1;
  var $p509: ref;
  var $i510: i64;
  var $i511: i1;
  var $p512: ref;
  var $i513: i64;
  var $i514: i1;
  var $p515: ref;
  var $i516: i64;
  var $i517: i1;
  var $p518: ref;
  var $i519: i64;
  var $i520: i1;
  var $p521: ref;
  var $i522: i64;
  var $i523: i1;
  var $p524: ref;
  var $i525: i64;
  var $i526: i1;
  var $p527: ref;
  var $i528: i64;
  var $i529: i1;
  var $p530: ref;
  var $i531: i64;
  var $i532: i1;
  var $p533: ref;
  var $i534: i64;
  var $i535: i1;
  var $p536: ref;
  var $i537: i64;
  var $i538: i1;
  var $p539: ref;
  var $i540: i64;
  var $i541: i1;
  var $p542: ref;
  var $i543: i64;
  var $i544: i1;
  var $p545: ref;
  var $i546: i64;
  var $i547: i1;
  var $p548: ref;
  var $i549: i64;
  var $i550: i1;
  var $p551: ref;
  var $i552: i64;
  var $i553: i1;
  var $p554: ref;
  var $i555: i64;
  var $i556: i1;
  var $p557: ref;
  var $i558: i64;
  var $i559: i1;
  var $p560: ref;
  var $i561: i64;
  var $i562: i1;
  var $p563: ref;
  var $i564: i64;
  var $i565: i1;
  var $p566: ref;
  var $i567: i64;
  var $i568: i1;
  var $p569: ref;
  var $i570: i64;
  var $i571: i1;
  var $p572: ref;
  var $i573: i64;
  var $i574: i1;
  var $p575: ref;
  var $i576: i64;
  var $i577: i1;
  var $p578: ref;
  var $i579: i64;
  var $i580: i1;
  var $p581: ref;
  var $i582: i64;
  var $i583: i1;
  var $p584: ref;
  var $i585: i64;
  var $i586: i1;
  var $p587: ref;
  var $i588: i64;
  var $i589: i1;
  var $p590: ref;
  var $i591: i64;
  var $i592: i1;
  var $p593: ref;
  var $i594: i64;
  var $i595: i1;
  var $p596: ref;
  var $i597: i64;
  var $i598: i1;
  var $p599: ref;
  var $i600: i64;
  var $i601: i1;
  var $p602: ref;
  var $i603: i64;
  var $i604: i1;
  var $p605: ref;
  var $i606: i64;
  var $i607: i1;
  var $p608: ref;
  var $i609: i64;
  var $i610: i1;
  var $p611: ref;
  var $i612: i64;
  var $i613: i1;
  var $p614: ref;
  var $i615: i64;
  var $i616: i1;
  var $p617: ref;
  var $i618: i64;
  var $i619: i1;
  var $p620: ref;
  var $i621: i64;
  var $i622: i1;
  var $p623: ref;
  var $i624: i64;
  var $i625: i1;
  var $p626: ref;
  var $i627: i64;
  var $i628: i1;
  var $p629: ref;
  var $i630: i64;
  var $i631: i1;
  var $p632: ref;
  var $i633: i64;
  var $i634: i1;
  var $p635: ref;
  var $i636: i64;
  var $i637: i1;
  var $p638: ref;
  var $i639: i64;
  var $i640: i1;
  var $p641: ref;
  var $i642: i64;
  var $i643: i1;
  var $p644: ref;
  var $i645: i64;
  var $i646: i1;
  var $p647: ref;
  var $i648: i64;
  var $i649: i1;
  var $p650: ref;
  var $i651: i64;
  var $i652: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} mutex_lock_nested(comedi_subdevice_minor_table_lock, 0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.3, comedi_subdevice_minor_table);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(1, 8)));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i34 := $eq.i64($i33, 0);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(2, 8)));
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i6 := 2;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(3, 8)));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $i6 := 3;
    assume {:branchcond $i40} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(4, 8)));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i6 := 4;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(5, 8)));
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i46 := $eq.i64($i45, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $i6 := 5;
    assume {:branchcond $i46} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(6, 8)));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i49 := $eq.i64($i48, 0);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i6 := 6;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(7, 8)));
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i6 := 7;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(8, 8)));
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i6 := 8;
    assume {:branchcond $i55} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(9, 8)));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i6 := 9;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(10, 8)));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i6 := 10;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(11, 8)));
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i6 := 11;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(12, 8)));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i6 := 12;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(13, 8)));
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i69, 0);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i6 := 13;
    assume {:branchcond $i70} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(14, 8)));
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $i73 := $eq.i64($i72, 0);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $i6 := 14;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(15, 8)));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i76 := $eq.i64($i75, 0);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i6 := 15;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(16, 8)));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i78, 0);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i6 := 16;
    assume {:branchcond $i79} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(17, 8)));
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i6 := 17;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(18, 8)));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p83);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i84, 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i6 := 18;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(19, 8)));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $i6 := 19;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(20, 8)));
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $i6 := 20;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(21, 8)));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $i94 := $eq.i64($i93, 0);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i6 := 21;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(22, 8)));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i6 := 22;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(23, 8)));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i100 := $eq.i64($i99, 0);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i6 := 23;
    assume {:branchcond $i100} true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(24, 8)));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i103 := $eq.i64($i102, 0);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i6 := 24;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(25, 8)));
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i6 := 25;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(26, 8)));
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $i108 := $p2i.ref.i64($p107);
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i6 := 26;
    assume {:branchcond $i109} true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(27, 8)));
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64($i111, 0);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $i6 := 27;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(28, 8)));
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i115 := $eq.i64($i114, 0);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i6 := 28;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(29, 8)));
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p116);
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i118 := $eq.i64($i117, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i6 := 29;
    assume {:branchcond $i118} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(30, 8)));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i121 := $eq.i64($i120, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    $i6 := 30;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(31, 8)));
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $i124 := $eq.i64($i123, 0);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    $i6 := 31;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(32, 8)));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i127 := $eq.i64($i126, 0);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $i6 := 32;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(33, 8)));
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i130 := $eq.i64($i129, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    $i6 := 33;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(34, 8)));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i132 := $p2i.ref.i64($p131);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i133 := $eq.i64($i132, 0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i6 := 34;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(35, 8)));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $i136 := $eq.i64($i135, 0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i6 := 35;
    assume {:branchcond $i136} true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(36, 8)));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i138 := $p2i.ref.i64($p137);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $i139 := $eq.i64($i138, 0);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $i6 := 36;
    assume true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $p140 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(37, 8)));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i142 := $eq.i64($i141, 0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $i6 := 37;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(38, 8)));
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i144 := $p2i.ref.i64($p143);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i145 := $eq.i64($i144, 0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i6 := 38;
    assume {:branchcond $i145} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(39, 8)));
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $i147 := $p2i.ref.i64($p146);
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i148 := $eq.i64($i147, 0);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i6 := 39;
    assume true;
    goto $bb172, $bb173;

  $bb173:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(40, 8)));
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $i151 := $eq.i64($i150, 0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i6 := 40;
    assume {:branchcond $i151} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(41, 8)));
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i153 := $p2i.ref.i64($p152);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i154 := $eq.i64($i153, 0);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i6 := 41;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(42, 8)));
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i157 := $eq.i64($i156, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $i6 := 42;
    assume {:branchcond $i157} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(43, 8)));
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i160 := $eq.i64($i159, 0);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i6 := 43;
    assume {:branchcond $i160} true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i160 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(44, 8)));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $i162 := $p2i.ref.i64($p161);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i163 := $eq.i64($i162, 0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i6 := 44;
    assume {:branchcond $i163} true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p164 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(45, 8)));
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p164);
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i166 := $eq.i64($i165, 0);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $i6 := 45;
    assume {:branchcond $i166} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(46, 8)));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i168 := $p2i.ref.i64($p167);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i169 := $eq.i64($i168, 0);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i6 := 46;
    assume {:branchcond $i169} true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i169 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(47, 8)));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i172 := $eq.i64($i171, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $i6 := 47;
    assume {:branchcond $i172} true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(48, 8)));
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p173);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $i175 := $eq.i64($i174, 0);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i6 := 48;
    assume {:branchcond $i175} true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(49, 8)));
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i178 := $eq.i64($i177, 0);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i6 := 49;
    assume {:branchcond $i178} true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(50, 8)));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i181 := $eq.i64($i180, 0);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i6 := 50;
    assume {:branchcond $i181} true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $p182 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(51, 8)));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i183 := $p2i.ref.i64($p182);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i184 := $eq.i64($i183, 0);
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i6 := 51;
    assume {:branchcond $i184} true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p185 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(52, 8)));
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $i186 := $p2i.ref.i64($p185);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $i187 := $eq.i64($i186, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i6 := 52;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(53, 8)));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i190 := $eq.i64($i189, 0);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $i6 := 53;
    assume {:branchcond $i190} true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(54, 8)));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p191);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i193 := $eq.i64($i192, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $i6 := 54;
    assume {:branchcond $i193} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(55, 8)));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i195 := $p2i.ref.i64($p194);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $i196 := $eq.i64($i195, 0);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $i6 := 55;
    assume {:branchcond $i196} true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(56, 8)));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i199 := $eq.i64($i198, 0);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i6 := 56;
    assume {:branchcond $i199} true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    $p200 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(57, 8)));
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $i201 := $p2i.ref.i64($p200);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $i202 := $eq.i64($i201, 0);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i6 := 57;
    assume {:branchcond $i202} true;
    goto $bb244, $bb245;

  $bb245:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(58, 8)));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $i204 := $p2i.ref.i64($p203);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $i205 := $eq.i64($i204, 0);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i6 := 58;
    assume {:branchcond $i205} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p206 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(59, 8)));
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p206);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $i208 := $eq.i64($i207, 0);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i6 := 59;
    assume {:branchcond $i208} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i208 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    $p209 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(60, 8)));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p209);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $i211 := $eq.i64($i210, 0);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i6 := 60;
    assume {:branchcond $i211} true;
    goto $bb256, $bb257;

  $bb257:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(61, 8)));
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i214 := $eq.i64($i213, 0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $i6 := 61;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $p215 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(62, 8)));
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i216 := $p2i.ref.i64($p215);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i217 := $eq.i64($i216, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $i6 := 62;
    assume {:branchcond $i217} true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(63, 8)));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i220 := $eq.i64($i219, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i6 := 63;
    assume {:branchcond $i220} true;
    goto $bb268, $bb269;

  $bb269:
    assume !($i220 == 1);
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(64, 8)));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i222 := $p2i.ref.i64($p221);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $i223 := $eq.i64($i222, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $i6 := 64;
    assume {:branchcond $i223} true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(65, 8)));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i225 := $p2i.ref.i64($p224);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i226 := $eq.i64($i225, 0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i6 := 65;
    assume {:branchcond $i226} true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(66, 8)));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p227);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i229 := $eq.i64($i228, 0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i6 := 66;
    assume true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(67, 8)));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i231 := $p2i.ref.i64($p230);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i232 := $eq.i64($i231, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i6 := 67;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(68, 8)));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i234 := $p2i.ref.i64($p233);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i235 := $eq.i64($i234, 0);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i6 := 68;
    assume true;
    goto $bb288, $bb289;

  $bb289:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    $p236 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(69, 8)));
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $i237 := $p2i.ref.i64($p236);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i238 := $eq.i64($i237, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i6 := 69;
    assume {:branchcond $i238} true;
    goto $bb292, $bb293;

  $bb293:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(70, 8)));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $i241 := $eq.i64($i240, 0);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i6 := 70;
    assume {:branchcond $i241} true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    goto $bb299;

  $bb299:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(71, 8)));
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $i243 := $p2i.ref.i64($p242);
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $i244 := $eq.i64($i243, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $i6 := 71;
    assume true;
    goto $bb300, $bb301;

  $bb301:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    $p245 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(72, 8)));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i246 := $p2i.ref.i64($p245);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i247 := $eq.i64($i246, 0);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i6 := 72;
    assume {:branchcond $i247} true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(73, 8)));
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $i249 := $p2i.ref.i64($p248);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i250 := $eq.i64($i249, 0);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i6 := 73;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(74, 8)));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $i252 := $p2i.ref.i64($p251);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i253 := $eq.i64($i252, 0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i6 := 74;
    assume {:branchcond $i253} true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i253 == 1);
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(75, 8)));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i255 := $p2i.ref.i64($p254);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $i256 := $eq.i64($i255, 0);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i6 := 75;
    assume {:branchcond $i256} true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    $p257 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(76, 8)));
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i258 := $p2i.ref.i64($p257);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i259 := $eq.i64($i258, 0);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i6 := 76;
    assume {:branchcond $i259} true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    goto $bb323;

  $bb323:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(77, 8)));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $i262 := $eq.i64($i261, 0);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i6 := 77;
    assume {:branchcond $i262} true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    $p263 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(78, 8)));
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i264 := $p2i.ref.i64($p263);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i265 := $eq.i64($i264, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i6 := 78;
    assume {:branchcond $i265} true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    $p266 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(79, 8)));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i267 := $p2i.ref.i64($p266);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i268 := $eq.i64($i267, 0);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $i6 := 79;
    assume {:branchcond $i268} true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(80, 8)));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $i270 := $p2i.ref.i64($p269);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $i271 := $eq.i64($i270, 0);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    $i6 := 80;
    assume {:branchcond $i271} true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(81, 8)));
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i274 := $eq.i64($i273, 0);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i6 := 81;
    assume {:branchcond $i274} true;
    goto $bb340, $bb341;

  $bb341:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(82, 8)));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $i276 := $p2i.ref.i64($p275);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $i277 := $eq.i64($i276, 0);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $i6 := 82;
    assume {:branchcond $i277} true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    $p278 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(83, 8)));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i279 := $p2i.ref.i64($p278);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i280 := $eq.i64($i279, 0);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i6 := 83;
    assume {:branchcond $i280} true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(84, 8)));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p281);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $i283 := $eq.i64($i282, 0);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i6 := 84;
    assume {:branchcond $i283} true;
    goto $bb352, $bb353;

  $bb353:
    assume !($i283 == 1);
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb355;

  $bb355:
    assume {:verifier.code 0} true;
    $p284 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(85, 8)));
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i285 := $p2i.ref.i64($p284);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i286 := $eq.i64($i285, 0);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i6 := 85;
    assume {:branchcond $i286} true;
    goto $bb356, $bb357;

  $bb357:
    assume !($i286 == 1);
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $p287 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(86, 8)));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i288 := $p2i.ref.i64($p287);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $i289 := $eq.i64($i288, 0);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i6 := 86;
    assume {:branchcond $i289} true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(87, 8)));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $i291 := $p2i.ref.i64($p290);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i292 := $eq.i64($i291, 0);
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i6 := 87;
    assume {:branchcond $i292} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i292 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(88, 8)));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i294 := $p2i.ref.i64($p293);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i295 := $eq.i64($i294, 0);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $i6 := 88;
    assume {:branchcond $i295} true;
    goto $bb368, $bb369;

  $bb369:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(89, 8)));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i297 := $p2i.ref.i64($p296);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i298 := $eq.i64($i297, 0);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i6 := 89;
    assume {:branchcond $i298} true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    $p299 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(90, 8)));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p299);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $i301 := $eq.i64($i300, 0);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i6 := 90;
    assume {:branchcond $i301} true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(91, 8)));
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p302);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i304 := $eq.i64($i303, 0);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i6 := 91;
    assume {:branchcond $i304} true;
    goto $bb380, $bb381;

  $bb381:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(92, 8)));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i306 := $p2i.ref.i64($p305);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i307 := $eq.i64($i306, 0);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i6 := 92;
    assume {:branchcond $i307} true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(93, 8)));
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i309 := $p2i.ref.i64($p308);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $i310 := $eq.i64($i309, 0);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i6 := 93;
    assume {:branchcond $i310} true;
    goto $bb388, $bb389;

  $bb389:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p311 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(94, 8)));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i312 := $p2i.ref.i64($p311);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i313 := $eq.i64($i312, 0);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i6 := 94;
    assume {:branchcond $i313} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i313 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $p314 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(95, 8)));
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i315 := $p2i.ref.i64($p314);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i316 := $eq.i64($i315, 0);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i6 := 95;
    assume {:branchcond $i316} true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i316 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(96, 8)));
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i318 := $p2i.ref.i64($p317);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $i319 := $eq.i64($i318, 0);
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i6 := 96;
    assume {:branchcond $i319} true;
    goto $bb400, $bb401;

  $bb401:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb403;

  $bb403:
    assume {:verifier.code 0} true;
    $p320 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(97, 8)));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i321 := $p2i.ref.i64($p320);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $i322 := $eq.i64($i321, 0);
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i6 := 97;
    assume {:branchcond $i322} true;
    goto $bb404, $bb405;

  $bb405:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(98, 8)));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p323);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i325 := $eq.i64($i324, 0);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i6 := 98;
    assume {:branchcond $i325} true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    goto $bb411;

  $bb411:
    assume {:verifier.code 0} true;
    $p326 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(99, 8)));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i328 := $eq.i64($i327, 0);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i6 := 99;
    assume {:branchcond $i328} true;
    goto $bb412, $bb413;

  $bb413:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    goto $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    $p329 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(100, 8)));
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $i330 := $p2i.ref.i64($p329);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $i331 := $eq.i64($i330, 0);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i6 := 100;
    assume {:branchcond $i331} true;
    goto $bb416, $bb417;

  $bb417:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(101, 8)));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i333 := $p2i.ref.i64($p332);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i334 := $eq.i64($i333, 0);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i6 := 101;
    assume {:branchcond $i334} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    $p335 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(102, 8)));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i336 := $p2i.ref.i64($p335);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i337 := $eq.i64($i336, 0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    $i6 := 102;
    assume true;
    goto $bb424, $bb425;

  $bb425:
    assume !($i337 == 1);
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(103, 8)));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $i339 := $p2i.ref.i64($p338);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    $i340 := $eq.i64($i339, 0);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i6 := 103;
    assume {:branchcond $i340} true;
    goto $bb428, $bb429;

  $bb429:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $p341 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(104, 8)));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i342 := $p2i.ref.i64($p341);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i343 := $eq.i64($i342, 0);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    $i6 := 104;
    assume {:branchcond $i343} true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb435;

  $bb435:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(105, 8)));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    $i346 := $eq.i64($i345, 0);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $i6 := 105;
    assume {:branchcond $i346} true;
    goto $bb436, $bb437;

  $bb437:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    goto $bb439;

  $bb439:
    assume {:verifier.code 0} true;
    $p347 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(106, 8)));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $i348 := $p2i.ref.i64($p347);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    $i349 := $eq.i64($i348, 0);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $i6 := 106;
    assume {:branchcond $i349} true;
    goto $bb440, $bb441;

  $bb441:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(107, 8)));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i351 := $p2i.ref.i64($p350);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i352 := $eq.i64($i351, 0);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i6 := 107;
    assume {:branchcond $i352} true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i352 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p353 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(108, 8)));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $i354 := $p2i.ref.i64($p353);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $i355 := $eq.i64($i354, 0);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i6 := 108;
    assume {:branchcond $i355} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i355 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    $p356 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(109, 8)));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $i357 := $p2i.ref.i64($p356);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $i358 := $eq.i64($i357, 0);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $i6 := 109;
    assume {:branchcond $i358} true;
    goto $bb452, $bb453;

  $bb453:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(110, 8)));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $i360 := $p2i.ref.i64($p359);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $i361 := $eq.i64($i360, 0);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i6 := 110;
    assume {:branchcond $i361} true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb459;

  $bb459:
    assume {:verifier.code 0} true;
    $p362 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(111, 8)));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $i363 := $p2i.ref.i64($p362);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $i364 := $eq.i64($i363, 0);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $i6 := 111;
    assume {:branchcond $i364} true;
    goto $bb460, $bb461;

  $bb461:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    goto $bb463;

  $bb463:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(112, 8)));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p365);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i367 := $eq.i64($i366, 0);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i6 := 112;
    assume {:branchcond $i367} true;
    goto $bb464, $bb465;

  $bb465:
    assume !($i367 == 1);
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(113, 8)));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $i369 := $p2i.ref.i64($p368);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $i370 := $eq.i64($i369, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $i6 := 113;
    assume {:branchcond $i370} true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    $p371 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(114, 8)));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i372 := $p2i.ref.i64($p371);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i373 := $eq.i64($i372, 0);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $i6 := 114;
    assume {:branchcond $i373} true;
    goto $bb472, $bb473;

  $bb473:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p374 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(115, 8)));
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i375 := $p2i.ref.i64($p374);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i376 := $eq.i64($i375, 0);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i6 := 115;
    assume {:branchcond $i376} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i376 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    $p377 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(116, 8)));
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i378 := $p2i.ref.i64($p377);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $i379 := $eq.i64($i378, 0);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    $i6 := 116;
    assume {:branchcond $i379} true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(117, 8)));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i381 := $p2i.ref.i64($p380);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i382 := $eq.i64($i381, 0);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i6 := 117;
    assume {:branchcond $i382} true;
    goto $bb484, $bb485;

  $bb485:
    assume !($i382 == 1);
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb487;

  $bb487:
    assume {:verifier.code 0} true;
    $p383 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(118, 8)));
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i384 := $p2i.ref.i64($p383);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $i385 := $eq.i64($i384, 0);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i6 := 118;
    assume {:branchcond $i385} true;
    goto $bb488, $bb489;

  $bb489:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $p386 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(119, 8)));
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p386);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $i388 := $eq.i64($i387, 0);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $i6 := 119;
    assume {:branchcond $i388} true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb495;

  $bb495:
    assume {:verifier.code 0} true;
    $p389 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(120, 8)));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i390 := $p2i.ref.i64($p389);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $i391 := $eq.i64($i390, 0);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i6 := 120;
    assume {:branchcond $i391} true;
    goto $bb496, $bb497;

  $bb497:
    assume !($i391 == 1);
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    goto $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    $p392 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(121, 8)));
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $i393 := $p2i.ref.i64($p392);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $i394 := $eq.i64($i393, 0);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i6 := 121;
    assume {:branchcond $i394} true;
    goto $bb500, $bb501;

  $bb501:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(122, 8)));
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $i396 := $p2i.ref.i64($p395);
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i397 := $eq.i64($i396, 0);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i6 := 122;
    assume {:branchcond $i397} true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    $p398 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(123, 8)));
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i399 := $p2i.ref.i64($p398);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i400 := $eq.i64($i399, 0);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i6 := 123;
    assume {:branchcond $i400} true;
    goto $bb508, $bb509;

  $bb509:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(124, 8)));
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i402 := $p2i.ref.i64($p401);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $i403 := $eq.i64($i402, 0);
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i6 := 124;
    assume {:branchcond $i403} true;
    goto $bb512, $bb513;

  $bb513:
    assume !($i403 == 1);
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $p404 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(125, 8)));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i405 := $p2i.ref.i64($p404);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i406 := $eq.i64($i405, 0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    $i6 := 125;
    assume {:branchcond $i406} true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    goto $bb519;

  $bb519:
    assume {:verifier.code 0} true;
    $p407 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(126, 8)));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i408 := $p2i.ref.i64($p407);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i409 := $eq.i64($i408, 0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i6 := 126;
    assume {:branchcond $i409} true;
    goto $bb520, $bb521;

  $bb521:
    assume !($i409 == 1);
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    goto $bb523;

  $bb523:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(127, 8)));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $i411 := $p2i.ref.i64($p410);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i412 := $eq.i64($i411, 0);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i6 := 127;
    assume {:branchcond $i412} true;
    goto $bb524, $bb525;

  $bb525:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    $p413 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(128, 8)));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $i414 := $p2i.ref.i64($p413);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $i415 := $eq.i64($i414, 0);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $i6 := 128;
    assume {:branchcond $i415} true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i415 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(129, 8)));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i417 := $p2i.ref.i64($p416);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i418 := $eq.i64($i417, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i6 := 129;
    assume {:branchcond $i418} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(130, 8)));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i420 := $p2i.ref.i64($p419);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i421 := $eq.i64($i420, 0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i6 := 130;
    assume {:branchcond $i421} true;
    goto $bb536, $bb537;

  $bb537:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(131, 8)));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i423 := $p2i.ref.i64($p422);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i424 := $eq.i64($i423, 0);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $i6 := 131;
    assume {:branchcond $i424} true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i424 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb543;

  $bb543:
    assume {:verifier.code 0} true;
    $p425 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(132, 8)));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $i426 := $p2i.ref.i64($p425);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i427 := $eq.i64($i426, 0);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i6 := 132;
    assume {:branchcond $i427} true;
    goto $bb544, $bb545;

  $bb545:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    goto $bb547;

  $bb547:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(133, 8)));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p428);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $i430 := $eq.i64($i429, 0);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i6 := 133;
    assume {:branchcond $i430} true;
    goto $bb548, $bb549;

  $bb549:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    $p431 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(134, 8)));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i432 := $p2i.ref.i64($p431);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i433 := $eq.i64($i432, 0);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i6 := 134;
    assume {:branchcond $i433} true;
    goto $bb552, $bb553;

  $bb553:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    $p434 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(135, 8)));
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $i435 := $p2i.ref.i64($p434);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $i436 := $eq.i64($i435, 0);
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i6 := 135;
    assume {:branchcond $i436} true;
    goto $bb556, $bb557;

  $bb557:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    $p437 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(136, 8)));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i438 := $p2i.ref.i64($p437);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i439 := $eq.i64($i438, 0);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i6 := 136;
    assume {:branchcond $i439} true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    $p440 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(137, 8)));
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i441 := $p2i.ref.i64($p440);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i442 := $eq.i64($i441, 0);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i6 := 137;
    assume {:branchcond $i442} true;
    goto $bb564, $bb565;

  $bb565:
    assume !($i442 == 1);
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(138, 8)));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i444 := $p2i.ref.i64($p443);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i445 := $eq.i64($i444, 0);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i6 := 138;
    assume {:branchcond $i445} true;
    goto $bb568, $bb569;

  $bb569:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    $p446 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(139, 8)));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i447 := $p2i.ref.i64($p446);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i448 := $eq.i64($i447, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $i6 := 139;
    assume {:branchcond $i448} true;
    goto $bb572, $bb573;

  $bb573:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    goto $bb575;

  $bb575:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(140, 8)));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i450 := $p2i.ref.i64($p449);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i451 := $eq.i64($i450, 0);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i6 := 140;
    assume {:branchcond $i451} true;
    goto $bb576, $bb577;

  $bb577:
    assume !($i451 == 1);
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    goto $bb579;

  $bb579:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(141, 8)));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i453 := $p2i.ref.i64($p452);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i454 := $eq.i64($i453, 0);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i6 := 141;
    assume {:branchcond $i454} true;
    goto $bb580, $bb581;

  $bb581:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    $p455 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(142, 8)));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i456 := $p2i.ref.i64($p455);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i457 := $eq.i64($i456, 0);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i6 := 142;
    assume {:branchcond $i457} true;
    goto $bb584, $bb585;

  $bb585:
    assume !($i457 == 1);
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p458 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(143, 8)));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i459 := $p2i.ref.i64($p458);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i460 := $eq.i64($i459, 0);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i6 := 143;
    assume {:branchcond $i460} true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    $p461 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(144, 8)));
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i462 := $p2i.ref.i64($p461);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i463 := $eq.i64($i462, 0);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i6 := 144;
    assume {:branchcond $i463} true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    $p464 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(145, 8)));
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i465 := $p2i.ref.i64($p464);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i466 := $eq.i64($i465, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i6 := 145;
    assume {:branchcond $i466} true;
    goto $bb596, $bb597;

  $bb597:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    $p467 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(146, 8)));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i468 := $p2i.ref.i64($p467);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i469 := $eq.i64($i468, 0);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i6 := 146;
    assume {:branchcond $i469} true;
    goto $bb600, $bb601;

  $bb601:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    goto $bb603;

  $bb603:
    assume {:verifier.code 0} true;
    $p470 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(147, 8)));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i471 := $p2i.ref.i64($p470);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i472 := $eq.i64($i471, 0);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i6 := 147;
    assume {:branchcond $i472} true;
    goto $bb604, $bb605;

  $bb605:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    goto $bb607;

  $bb607:
    assume {:verifier.code 0} true;
    $p473 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(148, 8)));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i474 := $p2i.ref.i64($p473);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i475 := $eq.i64($i474, 0);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i6 := 148;
    assume {:branchcond $i475} true;
    goto $bb608, $bb609;

  $bb609:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    goto $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    $p476 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(149, 8)));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $i477 := $p2i.ref.i64($p476);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i478 := $eq.i64($i477, 0);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i6 := 149;
    assume {:branchcond $i478} true;
    goto $bb612, $bb613;

  $bb613:
    assume !($i478 == 1);
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    $p479 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(150, 8)));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i480 := $p2i.ref.i64($p479);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i481 := $eq.i64($i480, 0);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i6 := 150;
    assume {:branchcond $i481} true;
    goto $bb616, $bb617;

  $bb617:
    assume !($i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    $p482 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(151, 8)));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i483 := $p2i.ref.i64($p482);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i484 := $eq.i64($i483, 0);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i6 := 151;
    assume {:branchcond $i484} true;
    goto $bb620, $bb621;

  $bb621:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(152, 8)));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i486 := $p2i.ref.i64($p485);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i487 := $eq.i64($i486, 0);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i6 := 152;
    assume {:branchcond $i487} true;
    goto $bb624, $bb625;

  $bb625:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    goto $bb627;

  $bb627:
    assume {:verifier.code 0} true;
    $p488 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(153, 8)));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i489 := $p2i.ref.i64($p488);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i490 := $eq.i64($i489, 0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i6 := 153;
    assume {:branchcond $i490} true;
    goto $bb628, $bb629;

  $bb629:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    goto $bb631;

  $bb631:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(154, 8)));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i492 := $p2i.ref.i64($p491);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i493 := $eq.i64($i492, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $i6 := 154;
    assume {:branchcond $i493} true;
    goto $bb632, $bb633;

  $bb633:
    assume !($i493 == 1);
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    goto $bb635;

  $bb635:
    assume {:verifier.code 0} true;
    $p494 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(155, 8)));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i495 := $p2i.ref.i64($p494);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $i496 := $eq.i64($i495, 0);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $i6 := 155;
    assume {:branchcond $i496} true;
    goto $bb636, $bb637;

  $bb637:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $p497 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(156, 8)));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i498 := $p2i.ref.i64($p497);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i499 := $eq.i64($i498, 0);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i6 := 156;
    assume {:branchcond $i499} true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i499 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $p500 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(157, 8)));
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i501 := $p2i.ref.i64($p500);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i502 := $eq.i64($i501, 0);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i6 := 157;
    assume {:branchcond $i502} true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i502 == 1);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    $p503 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(158, 8)));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i504 := $p2i.ref.i64($p503);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i505 := $eq.i64($i504, 0);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i6 := 158;
    assume {:branchcond $i505} true;
    goto $bb648, $bb649;

  $bb649:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(159, 8)));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i507 := $p2i.ref.i64($p506);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $i508 := $eq.i64($i507, 0);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i6 := 159;
    assume {:branchcond $i508} true;
    goto $bb652, $bb653;

  $bb653:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    $p509 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(160, 8)));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i510 := $p2i.ref.i64($p509);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i511 := $eq.i64($i510, 0);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i6 := 160;
    assume {:branchcond $i511} true;
    goto $bb656, $bb657;

  $bb657:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    goto $bb659;

  $bb659:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(161, 8)));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i513 := $p2i.ref.i64($p512);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i514 := $eq.i64($i513, 0);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i6 := 161;
    assume {:branchcond $i514} true;
    goto $bb660, $bb661;

  $bb661:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    goto $bb663;

  $bb663:
    assume {:verifier.code 0} true;
    $p515 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(162, 8)));
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i516 := $p2i.ref.i64($p515);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i517 := $eq.i64($i516, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $i6 := 162;
    assume {:branchcond $i517} true;
    goto $bb664, $bb665;

  $bb665:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    $p518 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(163, 8)));
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $i519 := $p2i.ref.i64($p518);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i520 := $eq.i64($i519, 0);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i6 := 163;
    assume {:branchcond $i520} true;
    goto $bb668, $bb669;

  $bb669:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    $p521 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(164, 8)));
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i522 := $p2i.ref.i64($p521);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i523 := $eq.i64($i522, 0);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i6 := 164;
    assume {:branchcond $i523} true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    $p524 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(165, 8)));
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i525 := $p2i.ref.i64($p524);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    $i526 := $eq.i64($i525, 0);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i6 := 165;
    assume {:branchcond $i526} true;
    goto $bb676, $bb677;

  $bb677:
    assume !($i526 == 1);
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(166, 8)));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i528 := $p2i.ref.i64($p527);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i529 := $eq.i64($i528, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i6 := 166;
    assume {:branchcond $i529} true;
    goto $bb680, $bb681;

  $bb681:
    assume !($i529 == 1);
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    goto $bb683;

  $bb683:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(167, 8)));
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i531 := $p2i.ref.i64($p530);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i532 := $eq.i64($i531, 0);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    $i6 := 167;
    assume {:branchcond $i532} true;
    goto $bb684, $bb685;

  $bb685:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    goto $bb687;

  $bb687:
    assume {:verifier.code 0} true;
    $p533 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(168, 8)));
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i534 := $p2i.ref.i64($p533);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i535 := $eq.i64($i534, 0);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i6 := 168;
    assume {:branchcond $i535} true;
    goto $bb688, $bb689;

  $bb689:
    assume !($i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    $p536 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(169, 8)));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i537 := $p2i.ref.i64($p536);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i538 := $eq.i64($i537, 0);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i6 := 169;
    assume {:branchcond $i538} true;
    goto $bb692, $bb693;

  $bb693:
    assume !($i538 == 1);
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    goto $bb695;

  $bb695:
    assume {:verifier.code 0} true;
    $p539 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(170, 8)));
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i540 := $p2i.ref.i64($p539);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i541 := $eq.i64($i540, 0);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i6 := 170;
    assume {:branchcond $i541} true;
    goto $bb696, $bb697;

  $bb697:
    assume !($i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    goto $bb699;

  $bb699:
    assume {:verifier.code 0} true;
    $p542 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(171, 8)));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i543 := $p2i.ref.i64($p542);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i544 := $eq.i64($i543, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i6 := 171;
    assume {:branchcond $i544} true;
    goto $bb700, $bb701;

  $bb701:
    assume !($i544 == 1);
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    $p545 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(172, 8)));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i546 := $p2i.ref.i64($p545);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i547 := $eq.i64($i546, 0);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i6 := 172;
    assume {:branchcond $i547} true;
    goto $bb704, $bb705;

  $bb705:
    assume !($i547 == 1);
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb707;

  $bb707:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(173, 8)));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i549 := $p2i.ref.i64($p548);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i550 := $eq.i64($i549, 0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i6 := 173;
    assume {:branchcond $i550} true;
    goto $bb708, $bb709;

  $bb709:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    goto $bb711;

  $bb711:
    assume {:verifier.code 0} true;
    $p551 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(174, 8)));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i552 := $p2i.ref.i64($p551);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i553 := $eq.i64($i552, 0);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i6 := 174;
    assume {:branchcond $i553} true;
    goto $bb712, $bb713;

  $bb713:
    assume !($i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(175, 8)));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i555 := $p2i.ref.i64($p554);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i556 := $eq.i64($i555, 0);
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i6 := 175;
    assume {:branchcond $i556} true;
    goto $bb716, $bb717;

  $bb717:
    assume !($i556 == 1);
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    goto $bb719;

  $bb719:
    assume {:verifier.code 0} true;
    $p557 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(176, 8)));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i558 := $p2i.ref.i64($p557);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i559 := $eq.i64($i558, 0);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $i6 := 176;
    assume {:branchcond $i559} true;
    goto $bb720, $bb721;

  $bb721:
    assume !($i559 == 1);
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    goto $bb723;

  $bb723:
    assume {:verifier.code 0} true;
    $p560 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(177, 8)));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i561 := $p2i.ref.i64($p560);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i562 := $eq.i64($i561, 0);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i6 := 177;
    assume {:branchcond $i562} true;
    goto $bb724, $bb725;

  $bb725:
    assume !($i562 == 1);
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    $p563 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(178, 8)));
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    $i564 := $p2i.ref.i64($p563);
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i565 := $eq.i64($i564, 0);
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i6 := 178;
    assume {:branchcond $i565} true;
    goto $bb728, $bb729;

  $bb729:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    goto $bb731;

  $bb731:
    assume {:verifier.code 0} true;
    $p566 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(179, 8)));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $i567 := $p2i.ref.i64($p566);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $i568 := $eq.i64($i567, 0);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i6 := 179;
    assume {:branchcond $i568} true;
    goto $bb732, $bb733;

  $bb733:
    assume !($i568 == 1);
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    goto $bb735;

  $bb735:
    assume {:verifier.code 0} true;
    $p569 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(180, 8)));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $i570 := $p2i.ref.i64($p569);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i571 := $eq.i64($i570, 0);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $i6 := 180;
    assume {:branchcond $i571} true;
    goto $bb736, $bb737;

  $bb737:
    assume !($i571 == 1);
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    $p572 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(181, 8)));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i573 := $p2i.ref.i64($p572);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i574 := $eq.i64($i573, 0);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i6 := 181;
    assume {:branchcond $i574} true;
    goto $bb740, $bb741;

  $bb741:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    goto $bb743;

  $bb743:
    assume {:verifier.code 0} true;
    $p575 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(182, 8)));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i576 := $p2i.ref.i64($p575);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i577 := $eq.i64($i576, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i6 := 182;
    assume {:branchcond $i577} true;
    goto $bb744, $bb745;

  $bb745:
    assume !($i577 == 1);
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    goto $bb747;

  $bb747:
    assume {:verifier.code 0} true;
    $p578 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(183, 8)));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i579 := $p2i.ref.i64($p578);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i580 := $eq.i64($i579, 0);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i6 := 183;
    assume {:branchcond $i580} true;
    goto $bb748, $bb749;

  $bb749:
    assume !($i580 == 1);
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    $p581 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(184, 8)));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i582 := $p2i.ref.i64($p581);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i583 := $eq.i64($i582, 0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i6 := 184;
    assume {:branchcond $i583} true;
    goto $bb752, $bb753;

  $bb753:
    assume !($i583 == 1);
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    goto $bb755;

  $bb755:
    assume {:verifier.code 0} true;
    $p584 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(185, 8)));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i585 := $p2i.ref.i64($p584);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i586 := $eq.i64($i585, 0);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i6 := 185;
    assume {:branchcond $i586} true;
    goto $bb756, $bb757;

  $bb757:
    assume !($i586 == 1);
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    goto $bb759;

  $bb759:
    assume {:verifier.code 0} true;
    $p587 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(186, 8)));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $i588 := $p2i.ref.i64($p587);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i589 := $eq.i64($i588, 0);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i6 := 186;
    assume {:branchcond $i589} true;
    goto $bb760, $bb761;

  $bb761:
    assume !($i589 == 1);
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    $p590 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(187, 8)));
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i591 := $p2i.ref.i64($p590);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $i592 := $eq.i64($i591, 0);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $i6 := 187;
    assume {:branchcond $i592} true;
    goto $bb764, $bb765;

  $bb765:
    assume !($i592 == 1);
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    goto $bb767;

  $bb767:
    assume {:verifier.code 0} true;
    $p593 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(188, 8)));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $i594 := $p2i.ref.i64($p593);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i595 := $eq.i64($i594, 0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $i6 := 188;
    assume {:branchcond $i595} true;
    goto $bb768, $bb769;

  $bb769:
    assume !($i595 == 1);
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    goto $bb771;

  $bb771:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(189, 8)));
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i597 := $p2i.ref.i64($p596);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i598 := $eq.i64($i597, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i6 := 189;
    assume {:branchcond $i598} true;
    goto $bb772, $bb773;

  $bb773:
    assume !($i598 == 1);
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    $p599 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(190, 8)));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    $i600 := $p2i.ref.i64($p599);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $i601 := $eq.i64($i600, 0);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $i6 := 190;
    assume {:branchcond $i601} true;
    goto $bb776, $bb777;

  $bb777:
    assume !($i601 == 1);
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    goto $bb779;

  $bb779:
    assume {:verifier.code 0} true;
    $p602 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(191, 8)));
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i603 := $p2i.ref.i64($p602);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i604 := $eq.i64($i603, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $i6 := 191;
    assume {:branchcond $i604} true;
    goto $bb780, $bb781;

  $bb781:
    assume !($i604 == 1);
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    goto $bb783;

  $bb783:
    assume {:verifier.code 0} true;
    $p605 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(192, 8)));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i606 := $p2i.ref.i64($p605);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i607 := $eq.i64($i606, 0);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i6 := 192;
    assume {:branchcond $i607} true;
    goto $bb784, $bb785;

  $bb785:
    assume !($i607 == 1);
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(193, 8)));
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i609 := $p2i.ref.i64($p608);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i610 := $eq.i64($i609, 0);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i6 := 193;
    assume {:branchcond $i610} true;
    goto $bb788, $bb789;

  $bb789:
    assume !($i610 == 1);
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    goto $bb791;

  $bb791:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(194, 8)));
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i612 := $p2i.ref.i64($p611);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $i613 := $eq.i64($i612, 0);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $i6 := 194;
    assume {:branchcond $i613} true;
    goto $bb792, $bb793;

  $bb793:
    assume !($i613 == 1);
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    goto $bb795;

  $bb795:
    assume {:verifier.code 0} true;
    $p614 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(195, 8)));
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i615 := $p2i.ref.i64($p614);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i616 := $eq.i64($i615, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $i6 := 195;
    assume {:branchcond $i616} true;
    goto $bb796, $bb797;

  $bb797:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(196, 8)));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $i618 := $p2i.ref.i64($p617);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i619 := $eq.i64($i618, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $i6 := 196;
    assume {:branchcond $i619} true;
    goto $bb800, $bb801;

  $bb801:
    assume !($i619 == 1);
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    goto $bb803;

  $bb803:
    assume {:verifier.code 0} true;
    $p620 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(197, 8)));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i621 := $p2i.ref.i64($p620);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $i622 := $eq.i64($i621, 0);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i6 := 197;
    assume {:branchcond $i622} true;
    goto $bb804, $bb805;

  $bb805:
    assume !($i622 == 1);
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    goto $bb807;

  $bb807:
    assume {:verifier.code 0} true;
    $p623 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(198, 8)));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $i624 := $p2i.ref.i64($p623);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $i625 := $eq.i64($i624, 0);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i6 := 198;
    assume {:branchcond $i625} true;
    goto $bb808, $bb809;

  $bb809:
    assume !($i625 == 1);
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    $p626 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(199, 8)));
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i627 := $p2i.ref.i64($p626);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i628 := $eq.i64($i627, 0);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i6 := 199;
    assume {:branchcond $i628} true;
    goto $bb812, $bb813;

  $bb813:
    assume !($i628 == 1);
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    goto $bb815;

  $bb815:
    assume {:verifier.code 0} true;
    $p629 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(200, 8)));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $i630 := $p2i.ref.i64($p629);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i631 := $eq.i64($i630, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i6 := 200;
    assume {:branchcond $i631} true;
    goto $bb816, $bb817;

  $bb817:
    assume !($i631 == 1);
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    goto $bb819;

  $bb819:
    assume {:verifier.code 0} true;
    $p632 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(201, 8)));
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i633 := $p2i.ref.i64($p632);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i634 := $eq.i64($i633, 0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i6 := 201;
    assume {:branchcond $i634} true;
    goto $bb820, $bb821;

  $bb821:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    $p635 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(202, 8)));
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i636 := $p2i.ref.i64($p635);
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $i637 := $eq.i64($i636, 0);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i6 := 202;
    assume {:branchcond $i637} true;
    goto $bb824, $bb825;

  $bb825:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    goto $bb827;

  $bb827:
    assume {:verifier.code 0} true;
    $p638 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(203, 8)));
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i639 := $p2i.ref.i64($p638);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i640 := $eq.i64($i639, 0);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i6 := 203;
    assume {:branchcond $i640} true;
    goto $bb828, $bb829;

  $bb829:
    assume !($i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    goto $bb831;

  $bb831:
    assume {:verifier.code 0} true;
    $p641 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(204, 8)));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i642 := $p2i.ref.i64($p641);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i643 := $eq.i64($i642, 0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i6 := 204;
    assume {:branchcond $i643} true;
    goto $bb832, $bb833;

  $bb833:
    assume !($i643 == 1);
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    $p644 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(205, 8)));
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $i645 := $p2i.ref.i64($p644);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i646 := $eq.i64($i645, 0);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i6 := 205;
    assume {:branchcond $i646} true;
    goto $bb836, $bb837;

  $bb837:
    assume !($i646 == 1);
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    goto $bb839;

  $bb839:
    assume {:verifier.code 0} true;
    $p647 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(206, 8)));
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i648 := $p2i.ref.i64($p647);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $i649 := $eq.i64($i648, 0);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $i6 := 206;
    assume {:branchcond $i649} true;
    goto $bb840, $bb841;

  $bb841:
    assume !($i649 == 1);
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    goto $bb843;

  $bb843:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(207, 8)));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $i651 := $p2i.ref.i64($p650);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $i652 := $eq.i64($i651, 0);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $i6 := 207;
    assume {:branchcond $i652} true;
    goto $bb844, $bb845;

  $bb845:
    assume !($i652 == 1);
    assume {:verifier.code 0} true;
    goto $bb846;

  $bb846:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := 208;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} mutex_unlock(comedi_subdevice_minor_table_lock);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 208);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i9, 48);
    call {:si_unique_call 399} {:cexpr "i"} boogie_si_record_i32($i14);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(280, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p16 := $M.22;
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i14, 102760448);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} $p24 := device_create.ref.ref.i32.ref.ref.i32.i32($p16, $p18, $i19, $0.ref, .str.3, $i21, $i23);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} $i26 := IS_ERR($p25);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 402} {:cexpr "tmp"} boogie_si_record_i8($i27);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb17:
    assume $i30 == 1;
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(272, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p24);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb16;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} dev_err.ref.ref($p12, .str.2);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 16);
    goto $bb12;

  $bb844:
    assume {:verifier.code 0} true;
    assume $i652 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i7, 8));
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, $p0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $i9 := $i6;
    goto $bb6;

  $bb840:
    assume {:verifier.code 0} true;
    assume $i649 == 1;
    goto $bb4;

  $bb836:
    assume {:verifier.code 0} true;
    assume $i646 == 1;
    goto $bb4;

  $bb832:
    assume {:verifier.code 0} true;
    assume $i643 == 1;
    goto $bb4;

  $bb828:
    assume {:verifier.code 0} true;
    assume $i640 == 1;
    goto $bb4;

  $bb824:
    assume {:verifier.code 0} true;
    assume $i637 == 1;
    goto $bb4;

  $bb820:
    assume {:verifier.code 0} true;
    assume $i634 == 1;
    goto $bb4;

  $bb816:
    assume {:verifier.code 0} true;
    assume $i631 == 1;
    goto $bb4;

  $bb812:
    assume {:verifier.code 0} true;
    assume $i628 == 1;
    goto $bb4;

  $bb808:
    assume {:verifier.code 0} true;
    assume $i625 == 1;
    goto $bb4;

  $bb804:
    assume {:verifier.code 0} true;
    assume $i622 == 1;
    goto $bb4;

  $bb800:
    assume {:verifier.code 0} true;
    assume $i619 == 1;
    goto $bb4;

  $bb796:
    assume {:verifier.code 0} true;
    assume $i616 == 1;
    goto $bb4;

  $bb792:
    assume {:verifier.code 0} true;
    assume $i613 == 1;
    goto $bb4;

  $bb788:
    assume {:verifier.code 0} true;
    assume $i610 == 1;
    goto $bb4;

  $bb784:
    assume {:verifier.code 0} true;
    assume $i607 == 1;
    goto $bb4;

  $bb780:
    assume {:verifier.code 0} true;
    assume $i604 == 1;
    goto $bb4;

  $bb776:
    assume {:verifier.code 0} true;
    assume $i601 == 1;
    goto $bb4;

  $bb772:
    assume {:verifier.code 0} true;
    assume $i598 == 1;
    goto $bb4;

  $bb768:
    assume {:verifier.code 0} true;
    assume $i595 == 1;
    goto $bb4;

  $bb764:
    assume {:verifier.code 0} true;
    assume $i592 == 1;
    goto $bb4;

  $bb760:
    assume {:verifier.code 0} true;
    assume $i589 == 1;
    goto $bb4;

  $bb756:
    assume {:verifier.code 0} true;
    assume $i586 == 1;
    goto $bb4;

  $bb752:
    assume {:verifier.code 0} true;
    assume $i583 == 1;
    goto $bb4;

  $bb748:
    assume {:verifier.code 0} true;
    assume $i580 == 1;
    goto $bb4;

  $bb744:
    assume {:verifier.code 0} true;
    assume $i577 == 1;
    goto $bb4;

  $bb740:
    assume {:verifier.code 0} true;
    assume $i574 == 1;
    goto $bb4;

  $bb736:
    assume {:verifier.code 0} true;
    assume $i571 == 1;
    goto $bb4;

  $bb732:
    assume {:verifier.code 0} true;
    assume $i568 == 1;
    goto $bb4;

  $bb728:
    assume {:verifier.code 0} true;
    assume $i565 == 1;
    goto $bb4;

  $bb724:
    assume {:verifier.code 0} true;
    assume $i562 == 1;
    goto $bb4;

  $bb720:
    assume {:verifier.code 0} true;
    assume $i559 == 1;
    goto $bb4;

  $bb716:
    assume {:verifier.code 0} true;
    assume $i556 == 1;
    goto $bb4;

  $bb712:
    assume {:verifier.code 0} true;
    assume $i553 == 1;
    goto $bb4;

  $bb708:
    assume {:verifier.code 0} true;
    assume $i550 == 1;
    goto $bb4;

  $bb704:
    assume {:verifier.code 0} true;
    assume $i547 == 1;
    goto $bb4;

  $bb700:
    assume {:verifier.code 0} true;
    assume $i544 == 1;
    goto $bb4;

  $bb696:
    assume {:verifier.code 0} true;
    assume $i541 == 1;
    goto $bb4;

  $bb692:
    assume {:verifier.code 0} true;
    assume $i538 == 1;
    goto $bb4;

  $bb688:
    assume {:verifier.code 0} true;
    assume $i535 == 1;
    goto $bb4;

  $bb684:
    assume {:verifier.code 0} true;
    assume $i532 == 1;
    goto $bb4;

  $bb680:
    assume {:verifier.code 0} true;
    assume $i529 == 1;
    goto $bb4;

  $bb676:
    assume {:verifier.code 0} true;
    assume $i526 == 1;
    goto $bb4;

  $bb672:
    assume {:verifier.code 0} true;
    assume $i523 == 1;
    goto $bb4;

  $bb668:
    assume {:verifier.code 0} true;
    assume $i520 == 1;
    goto $bb4;

  $bb664:
    assume {:verifier.code 0} true;
    assume $i517 == 1;
    goto $bb4;

  $bb660:
    assume {:verifier.code 0} true;
    assume $i514 == 1;
    goto $bb4;

  $bb656:
    assume {:verifier.code 0} true;
    assume $i511 == 1;
    goto $bb4;

  $bb652:
    assume {:verifier.code 0} true;
    assume $i508 == 1;
    goto $bb4;

  $bb648:
    assume {:verifier.code 0} true;
    assume $i505 == 1;
    goto $bb4;

  $bb644:
    assume {:verifier.code 0} true;
    assume $i502 == 1;
    goto $bb4;

  $bb640:
    assume {:verifier.code 0} true;
    assume $i499 == 1;
    goto $bb4;

  $bb636:
    assume {:verifier.code 0} true;
    assume $i496 == 1;
    goto $bb4;

  $bb632:
    assume {:verifier.code 0} true;
    assume $i493 == 1;
    goto $bb4;

  $bb628:
    assume {:verifier.code 0} true;
    assume $i490 == 1;
    goto $bb4;

  $bb624:
    assume {:verifier.code 0} true;
    assume $i487 == 1;
    goto $bb4;

  $bb620:
    assume {:verifier.code 0} true;
    assume $i484 == 1;
    goto $bb4;

  $bb616:
    assume {:verifier.code 0} true;
    assume $i481 == 1;
    goto $bb4;

  $bb612:
    assume {:verifier.code 0} true;
    assume $i478 == 1;
    goto $bb4;

  $bb608:
    assume {:verifier.code 0} true;
    assume $i475 == 1;
    goto $bb4;

  $bb604:
    assume {:verifier.code 0} true;
    assume $i472 == 1;
    goto $bb4;

  $bb600:
    assume {:verifier.code 0} true;
    assume $i469 == 1;
    goto $bb4;

  $bb596:
    assume {:verifier.code 0} true;
    assume $i466 == 1;
    goto $bb4;

  $bb592:
    assume {:verifier.code 0} true;
    assume $i463 == 1;
    goto $bb4;

  $bb588:
    assume {:verifier.code 0} true;
    assume $i460 == 1;
    goto $bb4;

  $bb584:
    assume {:verifier.code 0} true;
    assume $i457 == 1;
    goto $bb4;

  $bb580:
    assume {:verifier.code 0} true;
    assume $i454 == 1;
    goto $bb4;

  $bb576:
    assume {:verifier.code 0} true;
    assume $i451 == 1;
    goto $bb4;

  $bb572:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb4;

  $bb568:
    assume {:verifier.code 0} true;
    assume $i445 == 1;
    goto $bb4;

  $bb564:
    assume {:verifier.code 0} true;
    assume $i442 == 1;
    goto $bb4;

  $bb560:
    assume {:verifier.code 0} true;
    assume $i439 == 1;
    goto $bb4;

  $bb556:
    assume {:verifier.code 0} true;
    assume $i436 == 1;
    goto $bb4;

  $bb552:
    assume {:verifier.code 0} true;
    assume $i433 == 1;
    goto $bb4;

  $bb548:
    assume {:verifier.code 0} true;
    assume $i430 == 1;
    goto $bb4;

  $bb544:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb4;

  $bb540:
    assume {:verifier.code 0} true;
    assume $i424 == 1;
    goto $bb4;

  $bb536:
    assume {:verifier.code 0} true;
    assume $i421 == 1;
    goto $bb4;

  $bb532:
    assume {:verifier.code 0} true;
    assume $i418 == 1;
    goto $bb4;

  $bb528:
    assume {:verifier.code 0} true;
    assume $i415 == 1;
    goto $bb4;

  $bb524:
    assume {:verifier.code 0} true;
    assume $i412 == 1;
    goto $bb4;

  $bb520:
    assume {:verifier.code 0} true;
    assume $i409 == 1;
    goto $bb4;

  $bb516:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb4;

  $bb512:
    assume {:verifier.code 0} true;
    assume $i403 == 1;
    goto $bb4;

  $bb508:
    assume {:verifier.code 0} true;
    assume $i400 == 1;
    goto $bb4;

  $bb504:
    assume {:verifier.code 0} true;
    assume $i397 == 1;
    goto $bb4;

  $bb500:
    assume {:verifier.code 0} true;
    assume $i394 == 1;
    goto $bb4;

  $bb496:
    assume {:verifier.code 0} true;
    assume $i391 == 1;
    goto $bb4;

  $bb492:
    assume {:verifier.code 0} true;
    assume $i388 == 1;
    goto $bb4;

  $bb488:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb4;

  $bb484:
    assume {:verifier.code 0} true;
    assume $i382 == 1;
    goto $bb4;

  $bb480:
    assume {:verifier.code 0} true;
    assume $i379 == 1;
    goto $bb4;

  $bb476:
    assume {:verifier.code 0} true;
    assume $i376 == 1;
    goto $bb4;

  $bb472:
    assume {:verifier.code 0} true;
    assume $i373 == 1;
    goto $bb4;

  $bb468:
    assume {:verifier.code 0} true;
    assume $i370 == 1;
    goto $bb4;

  $bb464:
    assume {:verifier.code 0} true;
    assume $i367 == 1;
    goto $bb4;

  $bb460:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb4;

  $bb456:
    assume {:verifier.code 0} true;
    assume $i361 == 1;
    goto $bb4;

  $bb452:
    assume {:verifier.code 0} true;
    assume $i358 == 1;
    goto $bb4;

  $bb448:
    assume {:verifier.code 0} true;
    assume $i355 == 1;
    goto $bb4;

  $bb444:
    assume {:verifier.code 0} true;
    assume $i352 == 1;
    goto $bb4;

  $bb440:
    assume {:verifier.code 0} true;
    assume $i349 == 1;
    goto $bb4;

  $bb436:
    assume {:verifier.code 0} true;
    assume $i346 == 1;
    goto $bb4;

  $bb432:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb4;

  $bb428:
    assume {:verifier.code 0} true;
    assume $i340 == 1;
    goto $bb4;

  $bb424:
    assume {:verifier.code 0} true;
    assume $i337 == 1;
    goto $bb4;

  $bb420:
    assume {:verifier.code 0} true;
    assume $i334 == 1;
    goto $bb4;

  $bb416:
    assume {:verifier.code 0} true;
    assume $i331 == 1;
    goto $bb4;

  $bb412:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb4;

  $bb408:
    assume {:verifier.code 0} true;
    assume $i325 == 1;
    goto $bb4;

  $bb404:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb4;

  $bb400:
    assume {:verifier.code 0} true;
    assume $i319 == 1;
    goto $bb4;

  $bb396:
    assume {:verifier.code 0} true;
    assume $i316 == 1;
    goto $bb4;

  $bb392:
    assume {:verifier.code 0} true;
    assume $i313 == 1;
    goto $bb4;

  $bb388:
    assume {:verifier.code 0} true;
    assume $i310 == 1;
    goto $bb4;

  $bb384:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb4;

  $bb380:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb4;

  $bb376:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb4;

  $bb372:
    assume {:verifier.code 0} true;
    assume $i298 == 1;
    goto $bb4;

  $bb368:
    assume {:verifier.code 0} true;
    assume $i295 == 1;
    goto $bb4;

  $bb364:
    assume {:verifier.code 0} true;
    assume $i292 == 1;
    goto $bb4;

  $bb360:
    assume {:verifier.code 0} true;
    assume $i289 == 1;
    goto $bb4;

  $bb356:
    assume {:verifier.code 0} true;
    assume $i286 == 1;
    goto $bb4;

  $bb352:
    assume {:verifier.code 0} true;
    assume $i283 == 1;
    goto $bb4;

  $bb348:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb4;

  $bb344:
    assume {:verifier.code 0} true;
    assume $i277 == 1;
    goto $bb4;

  $bb340:
    assume {:verifier.code 0} true;
    assume $i274 == 1;
    goto $bb4;

  $bb336:
    assume {:verifier.code 0} true;
    assume $i271 == 1;
    goto $bb4;

  $bb332:
    assume {:verifier.code 0} true;
    assume $i268 == 1;
    goto $bb4;

  $bb328:
    assume {:verifier.code 0} true;
    assume $i265 == 1;
    goto $bb4;

  $bb324:
    assume {:verifier.code 0} true;
    assume $i262 == 1;
    goto $bb4;

  $bb320:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb4;

  $bb316:
    assume {:verifier.code 0} true;
    assume $i256 == 1;
    goto $bb4;

  $bb312:
    assume {:verifier.code 0} true;
    assume $i253 == 1;
    goto $bb4;

  $bb308:
    assume {:verifier.code 0} true;
    assume $i250 == 1;
    goto $bb4;

  $bb304:
    assume {:verifier.code 0} true;
    assume $i247 == 1;
    goto $bb4;

  $bb300:
    assume {:verifier.code 0} true;
    assume $i244 == 1;
    goto $bb4;

  $bb296:
    assume {:verifier.code 0} true;
    assume $i241 == 1;
    goto $bb4;

  $bb292:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb4;

  $bb288:
    assume {:verifier.code 0} true;
    assume $i235 == 1;
    goto $bb4;

  $bb284:
    assume {:verifier.code 0} true;
    assume $i232 == 1;
    goto $bb4;

  $bb280:
    assume {:verifier.code 0} true;
    assume $i229 == 1;
    goto $bb4;

  $bb276:
    assume {:verifier.code 0} true;
    assume $i226 == 1;
    goto $bb4;

  $bb272:
    assume {:verifier.code 0} true;
    assume $i223 == 1;
    goto $bb4;

  $bb268:
    assume {:verifier.code 0} true;
    assume $i220 == 1;
    goto $bb4;

  $bb264:
    assume {:verifier.code 0} true;
    assume $i217 == 1;
    goto $bb4;

  $bb260:
    assume {:verifier.code 0} true;
    assume $i214 == 1;
    goto $bb4;

  $bb256:
    assume {:verifier.code 0} true;
    assume $i211 == 1;
    goto $bb4;

  $bb252:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb4;

  $bb248:
    assume {:verifier.code 0} true;
    assume $i205 == 1;
    goto $bb4;

  $bb244:
    assume {:verifier.code 0} true;
    assume $i202 == 1;
    goto $bb4;

  $bb240:
    assume {:verifier.code 0} true;
    assume $i199 == 1;
    goto $bb4;

  $bb236:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb4;

  $bb232:
    assume {:verifier.code 0} true;
    assume $i193 == 1;
    goto $bb4;

  $bb228:
    assume {:verifier.code 0} true;
    assume $i190 == 1;
    goto $bb4;

  $bb224:
    assume {:verifier.code 0} true;
    assume $i187 == 1;
    goto $bb4;

  $bb220:
    assume {:verifier.code 0} true;
    assume $i184 == 1;
    goto $bb4;

  $bb216:
    assume {:verifier.code 0} true;
    assume $i181 == 1;
    goto $bb4;

  $bb212:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb4;

  $bb208:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb4;

  $bb204:
    assume {:verifier.code 0} true;
    assume $i172 == 1;
    goto $bb4;

  $bb200:
    assume {:verifier.code 0} true;
    assume $i169 == 1;
    goto $bb4;

  $bb196:
    assume {:verifier.code 0} true;
    assume $i166 == 1;
    goto $bb4;

  $bb192:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb4;

  $bb188:
    assume {:verifier.code 0} true;
    assume $i160 == 1;
    goto $bb4;

  $bb184:
    assume {:verifier.code 0} true;
    assume $i157 == 1;
    goto $bb4;

  $bb180:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb4;

  $bb176:
    assume {:verifier.code 0} true;
    assume $i151 == 1;
    goto $bb4;

  $bb172:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb4;

  $bb168:
    assume {:verifier.code 0} true;
    assume $i145 == 1;
    goto $bb4;

  $bb164:
    assume {:verifier.code 0} true;
    assume $i142 == 1;
    goto $bb4;

  $bb160:
    assume {:verifier.code 0} true;
    assume $i139 == 1;
    goto $bb4;

  $bb156:
    assume {:verifier.code 0} true;
    assume $i136 == 1;
    goto $bb4;

  $bb152:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb4;

  $bb148:
    assume {:verifier.code 0} true;
    assume $i130 == 1;
    goto $bb4;

  $bb144:
    assume {:verifier.code 0} true;
    assume $i127 == 1;
    goto $bb4;

  $bb140:
    assume {:verifier.code 0} true;
    assume $i124 == 1;
    goto $bb4;

  $bb136:
    assume {:verifier.code 0} true;
    assume $i121 == 1;
    goto $bb4;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb128:
    assume {:verifier.code 0} true;
    assume $i115 == 1;
    goto $bb4;

  $bb124:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb4;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb4;

  $bb116:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb4;

  $bb112:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb4;

  $bb108:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb4;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i97 == 1;
    goto $bb4;

  $bb100:
    assume {:verifier.code 0} true;
    assume $i94 == 1;
    goto $bb4;

  $bb96:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb4;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb88:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb4;

  $bb84:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb4;

  $bb80:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb4;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i76 == 1;
    goto $bb4;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb4;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i67 == 1;
    goto $bb4;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb4;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb4;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb4;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i34 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;
}



const device_create: ref;

axiom device_create == $sub.ref(0, 412660);

procedure device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $p5 := external_alloc();
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



procedure device_create.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32, p.6: i32) returns ($r: ref);
  free requires assertsPassed;



implementation device_create.ref.ref.i32.ref.ref.i32.i32($p0: ref, $p1: ref, $i2: i32, $p3: ref, $p4: ref, p.5: i32, p.6: i32) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "device_create:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} $p5 := external_alloc();
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 413692);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 414724);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 415756);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const comedi_device_init: ref;

axiom comedi_device_init == $sub.ref(0, 416788);

procedure comedi_device_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation comedi_device_init($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var vslice_dummy_var_34: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(472, 1));
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} kref_init($p4);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(80, 1));
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} vslice_dummy_var_34 := spinlock_check($p5);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} __raw_spin_lock_init($p9, .str.26, $p1);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} __mutex_init($p10, .str.27, $p2);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} __init_rwsem($p11, .str.28, $p3);
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $sub.i32(0, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 417820);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    return;
}



const __init_rwsem: ref;

axiom __init_rwsem == $sub.ref(0, 418852);

procedure __init_rwsem($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_rwsem($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 419884);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const comedi_auto_unconfig: ref;

axiom comedi_auto_unconfig == $sub.ref(0, 420916);

procedure comedi_auto_unconfig($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $CurrAddr, $M.54, $M.25;



implementation comedi_auto_unconfig($p0: ref)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} comedi_release_hardware_device($p0);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const comedi_driver_register: ref;

axiom comedi_driver_register == $sub.ref(0, 421948);

procedure comedi_driver_register($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28;



implementation comedi_driver_register($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} mutex_lock_nested(comedi_drivers_list_lock, 0);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $p1 := $M.28;
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} mutex_unlock(comedi_drivers_list_lock);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const comedi_driver_unregister: ref;

axiom comedi_driver_unregister == $sub.ref(0, 422980);

procedure comedi_driver_unregister($p0: ref);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.2, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.54, $M.23, $M.25, $CurrAddr, assertsPassed;



implementation comedi_driver_unregister($p0: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p12: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $p95: ref;
  var $i96: i8;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i100: i64;
  var $i101: i64;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i32;
  var $p110: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $i123: i1;
  var $p124: ref;
  var $i125: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $p131: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $i138: i8;
  var $i139: i1;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $i143: i64;
  var $i144: i1;
  var $p145: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $p152: ref;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i1;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $i164: i64;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $p173: ref;
  var $p175: ref;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $i180: i8;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $i185: i64;
  var $i186: i1;
  var $p187: ref;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $p194: ref;
  var $p196: ref;
  var $i197: i64;
  var $i198: i1;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $i206: i64;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $p215: ref;
  var $p217: ref;
  var $i218: i64;
  var $i219: i1;
  var $p220: ref;
  var $p221: ref;
  var $i222: i8;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $i227: i64;
  var $i228: i1;
  var $p229: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $p236: ref;
  var $p238: ref;
  var $i239: i64;
  var $i240: i1;
  var $p241: ref;
  var $p242: ref;
  var $i243: i8;
  var $i244: i1;
  var $p245: ref;
  var $p246: ref;
  var $i247: i64;
  var $i248: i64;
  var $i249: i1;
  var $p250: ref;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i32;
  var $p257: ref;
  var $p259: ref;
  var $i260: i64;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $i264: i8;
  var $i265: i1;
  var $p266: ref;
  var $p267: ref;
  var $i268: i64;
  var $i269: i64;
  var $i270: i1;
  var $p271: ref;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $i277: i32;
  var $p278: ref;
  var $p280: ref;
  var $i281: i64;
  var $i282: i1;
  var $p283: ref;
  var $p284: ref;
  var $i285: i8;
  var $i286: i1;
  var $p287: ref;
  var $p288: ref;
  var $i289: i64;
  var $i290: i64;
  var $i291: i1;
  var $p292: ref;
  var $i293: i32;
  var $i294: i1;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i32;
  var $p299: ref;
  var $p301: ref;
  var $i302: i64;
  var $i303: i1;
  var $p304: ref;
  var $p305: ref;
  var $i306: i8;
  var $i307: i1;
  var $p308: ref;
  var $p309: ref;
  var $i310: i64;
  var $i311: i64;
  var $i312: i1;
  var $p313: ref;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i32;
  var $p320: ref;
  var $p322: ref;
  var $i323: i64;
  var $i324: i1;
  var $p325: ref;
  var $p326: ref;
  var $i327: i8;
  var $i328: i1;
  var $p329: ref;
  var $p330: ref;
  var $i331: i64;
  var $i332: i64;
  var $i333: i1;
  var $p334: ref;
  var $i335: i32;
  var $i336: i1;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $i340: i32;
  var $p341: ref;
  var $p343: ref;
  var $i344: i64;
  var $i345: i1;
  var $p346: ref;
  var $p347: ref;
  var $i348: i8;
  var $i349: i1;
  var $p350: ref;
  var $p351: ref;
  var $i352: i64;
  var $i353: i64;
  var $i354: i1;
  var $p355: ref;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $i361: i32;
  var $p362: ref;
  var $p364: ref;
  var $i365: i64;
  var $i366: i1;
  var $p367: ref;
  var $p368: ref;
  var $i369: i8;
  var $i370: i1;
  var $p371: ref;
  var $p372: ref;
  var $i373: i64;
  var $i374: i64;
  var $i375: i1;
  var $p376: ref;
  var $i377: i32;
  var $i378: i1;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $i382: i32;
  var $p383: ref;
  var $p385: ref;
  var $i386: i64;
  var $i387: i1;
  var $p388: ref;
  var $p389: ref;
  var $i390: i8;
  var $i391: i1;
  var $p392: ref;
  var $p393: ref;
  var $i394: i64;
  var $i395: i64;
  var $i396: i1;
  var $p397: ref;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $p401: ref;
  var $p402: ref;
  var $i403: i32;
  var $p404: ref;
  var $p406: ref;
  var $i407: i64;
  var $i408: i1;
  var $p409: ref;
  var $p410: ref;
  var $i411: i8;
  var $i412: i1;
  var $p413: ref;
  var $p414: ref;
  var $i415: i64;
  var $i416: i64;
  var $i417: i1;
  var $p418: ref;
  var $i419: i32;
  var $i420: i1;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $i424: i32;
  var $p425: ref;
  var $p427: ref;
  var $i428: i64;
  var $i429: i1;
  var $p430: ref;
  var $p431: ref;
  var $i432: i8;
  var $i433: i1;
  var $p434: ref;
  var $p435: ref;
  var $i436: i64;
  var $i437: i64;
  var $i438: i1;
  var $p439: ref;
  var $i440: i32;
  var $i441: i1;
  var $p442: ref;
  var $p443: ref;
  var $p444: ref;
  var $i445: i32;
  var $p446: ref;
  var $p448: ref;
  var $i449: i64;
  var $i450: i1;
  var $p451: ref;
  var $p452: ref;
  var $i453: i8;
  var $i454: i1;
  var $p455: ref;
  var $p456: ref;
  var $i457: i64;
  var $i458: i64;
  var $i459: i1;
  var $p460: ref;
  var $i461: i32;
  var $i462: i1;
  var $p463: ref;
  var $p464: ref;
  var $p465: ref;
  var $i466: i32;
  var $p467: ref;
  var $p469: ref;
  var $i470: i64;
  var $i471: i1;
  var $p472: ref;
  var $p473: ref;
  var $i474: i8;
  var $i475: i1;
  var $p476: ref;
  var $p477: ref;
  var $i478: i64;
  var $i479: i64;
  var $i480: i1;
  var $p481: ref;
  var $i482: i32;
  var $i483: i1;
  var $p484: ref;
  var $p485: ref;
  var $p486: ref;
  var $i487: i32;
  var $p488: ref;
  var $p490: ref;
  var $i491: i64;
  var $i492: i1;
  var $p493: ref;
  var $p494: ref;
  var $i495: i8;
  var $i496: i1;
  var $p497: ref;
  var $p498: ref;
  var $i499: i64;
  var $i500: i64;
  var $i501: i1;
  var $p502: ref;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $i508: i32;
  var $p509: ref;
  var $p511: ref;
  var $i512: i64;
  var $i513: i1;
  var $p514: ref;
  var $p515: ref;
  var $i516: i8;
  var $i517: i1;
  var $p518: ref;
  var $p519: ref;
  var $i520: i64;
  var $i521: i64;
  var $i522: i1;
  var $p523: ref;
  var $i524: i32;
  var $i525: i1;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $i529: i32;
  var $p530: ref;
  var $p532: ref;
  var $i533: i64;
  var $i534: i1;
  var $p535: ref;
  var $p536: ref;
  var $i537: i8;
  var $i538: i1;
  var $p539: ref;
  var $p540: ref;
  var $i541: i64;
  var $i542: i64;
  var $i543: i1;
  var $p544: ref;
  var $i545: i32;
  var $i546: i1;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $i550: i32;
  var $p551: ref;
  var $p553: ref;
  var $i554: i64;
  var $i555: i1;
  var $p556: ref;
  var $p557: ref;
  var $i558: i8;
  var $i559: i1;
  var $p560: ref;
  var $p561: ref;
  var $i562: i64;
  var $i563: i64;
  var $i564: i1;
  var $p565: ref;
  var $i566: i32;
  var $i567: i1;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $i571: i32;
  var $p572: ref;
  var $p574: ref;
  var $i575: i64;
  var $i576: i1;
  var $p577: ref;
  var $p578: ref;
  var $i579: i8;
  var $i580: i1;
  var $p581: ref;
  var $p582: ref;
  var $i583: i64;
  var $i584: i64;
  var $i585: i1;
  var $p586: ref;
  var $i587: i32;
  var $i588: i1;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $i592: i32;
  var $p593: ref;
  var $p595: ref;
  var $i596: i64;
  var $i597: i1;
  var $p598: ref;
  var $p599: ref;
  var $i600: i8;
  var $i601: i1;
  var $p602: ref;
  var $p603: ref;
  var $i604: i64;
  var $i605: i64;
  var $i606: i1;
  var $p607: ref;
  var $i608: i32;
  var $i609: i1;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $i613: i32;
  var $p614: ref;
  var $p616: ref;
  var $i617: i64;
  var $i618: i1;
  var $p619: ref;
  var $p620: ref;
  var $i621: i8;
  var $i622: i1;
  var $p623: ref;
  var $p624: ref;
  var $i625: i64;
  var $i626: i64;
  var $i627: i1;
  var $p628: ref;
  var $i629: i32;
  var $i630: i1;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
  var $i634: i32;
  var $p635: ref;
  var $p637: ref;
  var $i638: i64;
  var $i639: i1;
  var $p640: ref;
  var $p641: ref;
  var $i642: i8;
  var $i643: i1;
  var $p644: ref;
  var $p645: ref;
  var $i646: i64;
  var $i647: i64;
  var $i648: i1;
  var $p649: ref;
  var $i650: i32;
  var $i651: i1;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $i655: i32;
  var $p656: ref;
  var $p658: ref;
  var $i659: i64;
  var $i660: i1;
  var $p661: ref;
  var $p662: ref;
  var $i663: i8;
  var $i664: i1;
  var $p665: ref;
  var $p666: ref;
  var $i667: i64;
  var $i668: i64;
  var $i669: i1;
  var $p670: ref;
  var $i671: i32;
  var $i672: i1;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $i676: i32;
  var $p677: ref;
  var $p679: ref;
  var $i680: i64;
  var $i681: i1;
  var $p682: ref;
  var $p683: ref;
  var $i684: i8;
  var $i685: i1;
  var $p686: ref;
  var $p687: ref;
  var $i688: i64;
  var $i689: i64;
  var $i690: i1;
  var $p691: ref;
  var $i692: i32;
  var $i693: i1;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $i697: i32;
  var $p698: ref;
  var $p700: ref;
  var $i701: i64;
  var $i702: i1;
  var $p703: ref;
  var $p704: ref;
  var $i705: i8;
  var $i706: i1;
  var $p707: ref;
  var $p708: ref;
  var $i709: i64;
  var $i710: i64;
  var $i711: i1;
  var $p712: ref;
  var $i713: i32;
  var $i714: i1;
  var $p715: ref;
  var $p716: ref;
  var $p717: ref;
  var $i718: i32;
  var $p719: ref;
  var $p721: ref;
  var $i722: i64;
  var $i723: i1;
  var $p724: ref;
  var $p725: ref;
  var $i726: i8;
  var $i727: i1;
  var $p728: ref;
  var $p729: ref;
  var $i730: i64;
  var $i731: i64;
  var $i732: i1;
  var $p733: ref;
  var $i734: i32;
  var $i735: i1;
  var $p736: ref;
  var $p737: ref;
  var $p738: ref;
  var $i739: i32;
  var $p740: ref;
  var $p742: ref;
  var $i743: i64;
  var $i744: i1;
  var $p745: ref;
  var $p746: ref;
  var $i747: i8;
  var $i748: i1;
  var $p749: ref;
  var $p750: ref;
  var $i751: i64;
  var $i752: i64;
  var $i753: i1;
  var $p754: ref;
  var $i755: i32;
  var $i756: i1;
  var $p757: ref;
  var $p758: ref;
  var $p759: ref;
  var $i760: i32;
  var $p761: ref;
  var $p763: ref;
  var $i764: i64;
  var $i765: i1;
  var $p766: ref;
  var $p767: ref;
  var $i768: i8;
  var $i769: i1;
  var $p770: ref;
  var $p771: ref;
  var $i772: i64;
  var $i773: i64;
  var $i774: i1;
  var $p775: ref;
  var $i776: i32;
  var $i777: i1;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $i781: i32;
  var $p782: ref;
  var $p784: ref;
  var $i785: i64;
  var $i786: i1;
  var $p787: ref;
  var $p788: ref;
  var $i789: i8;
  var $i790: i1;
  var $p791: ref;
  var $p792: ref;
  var $i793: i64;
  var $i794: i64;
  var $i795: i1;
  var $p796: ref;
  var $i797: i32;
  var $i798: i1;
  var $p799: ref;
  var $p800: ref;
  var $p801: ref;
  var $i802: i32;
  var $p803: ref;
  var $p805: ref;
  var $i806: i64;
  var $i807: i1;
  var $p808: ref;
  var $p809: ref;
  var $i810: i8;
  var $i811: i1;
  var $p812: ref;
  var $p813: ref;
  var $i814: i64;
  var $i815: i64;
  var $i816: i1;
  var $p817: ref;
  var $i818: i32;
  var $i819: i1;
  var $p820: ref;
  var $p821: ref;
  var $p822: ref;
  var $i823: i32;
  var $p824: ref;
  var $p826: ref;
  var $i827: i64;
  var $i828: i1;
  var $p829: ref;
  var $p830: ref;
  var $i831: i8;
  var $i832: i1;
  var $p833: ref;
  var $p834: ref;
  var $i835: i64;
  var $i836: i64;
  var $i837: i1;
  var $p838: ref;
  var $i839: i32;
  var $i840: i1;
  var $p841: ref;
  var $p842: ref;
  var $p843: ref;
  var $i844: i32;
  var $p845: ref;
  var $p847: ref;
  var $i848: i64;
  var $i849: i1;
  var $p850: ref;
  var $p851: ref;
  var $i852: i8;
  var $i853: i1;
  var $p854: ref;
  var $p855: ref;
  var $i856: i64;
  var $i857: i64;
  var $i858: i1;
  var $p859: ref;
  var $i860: i32;
  var $i861: i1;
  var $p862: ref;
  var $p863: ref;
  var $p864: ref;
  var $i865: i32;
  var $p866: ref;
  var $p868: ref;
  var $i869: i64;
  var $i870: i1;
  var $p871: ref;
  var $p872: ref;
  var $i873: i8;
  var $i874: i1;
  var $p875: ref;
  var $p876: ref;
  var $i877: i64;
  var $i878: i64;
  var $i879: i1;
  var $p880: ref;
  var $i881: i32;
  var $i882: i1;
  var $p883: ref;
  var $p884: ref;
  var $p885: ref;
  var $i886: i32;
  var $p887: ref;
  var $p889: ref;
  var $i890: i64;
  var $i891: i1;
  var $p892: ref;
  var $p893: ref;
  var $i894: i8;
  var $i895: i1;
  var $p896: ref;
  var $p897: ref;
  var $i898: i64;
  var $i899: i64;
  var $i900: i1;
  var $p901: ref;
  var $i902: i32;
  var $i903: i1;
  var $p904: ref;
  var $p905: ref;
  var $p906: ref;
  var $i907: i32;
  var $p908: ref;
  var $p910: ref;
  var $i911: i64;
  var $i912: i1;
  var $p913: ref;
  var $p914: ref;
  var $i915: i8;
  var $i916: i1;
  var $p917: ref;
  var $p918: ref;
  var $i919: i64;
  var $i920: i64;
  var $i921: i1;
  var $p922: ref;
  var $i923: i32;
  var $i924: i1;
  var $p925: ref;
  var $p926: ref;
  var $p927: ref;
  var $i928: i32;
  var $p929: ref;
  var $p931: ref;
  var $i932: i64;
  var $i933: i1;
  var $p934: ref;
  var $p935: ref;
  var $i936: i8;
  var $i937: i1;
  var $p938: ref;
  var $p939: ref;
  var $i940: i64;
  var $i941: i64;
  var $i942: i1;
  var $p943: ref;
  var $i944: i32;
  var $i945: i1;
  var $p946: ref;
  var $p947: ref;
  var $p948: ref;
  var $i949: i32;
  var $p950: ref;
  var $p952: ref;
  var $i953: i64;
  var $i954: i1;
  var $p955: ref;
  var $p956: ref;
  var $i957: i8;
  var $i958: i1;
  var $p959: ref;
  var $p960: ref;
  var $i961: i64;
  var $i962: i64;
  var $i963: i1;
  var $p964: ref;
  var $i965: i32;
  var $i966: i1;
  var $p967: ref;
  var $p968: ref;
  var $p969: ref;
  var $i970: i32;
  var $p971: ref;
  var $p973: ref;
  var $i974: i64;
  var $i975: i1;
  var $p976: ref;
  var $p977: ref;
  var $i978: i8;
  var $i979: i1;
  var $p980: ref;
  var $p981: ref;
  var $i982: i64;
  var $i983: i64;
  var $i984: i1;
  var $p985: ref;
  var $i986: i32;
  var $i987: i1;
  var $p988: ref;
  var $p989: ref;
  var $p990: ref;
  var $i991: i32;
  var $p992: ref;
  var $p994: ref;
  var $i995: i64;
  var $i996: i1;
  var $p997: ref;
  var $p998: ref;
  var $i999: i8;
  var $i1000: i1;
  var $p1001: ref;
  var $p1002: ref;
  var $i1003: i64;
  var $i1004: i64;
  var $i1005: i1;
  var $p1006: ref;
  var $i1007: i32;
  var $i1008: i1;
  var $p1009: ref;
  var $p1010: ref;
  var $p1011: ref;
  var $i1012: i32;
  var $p1013: ref;
  var $p1015: ref;
  var $i1016: i64;
  var $i1017: i1;
  var $p1018: ref;
  var $p1019: ref;
  var $i1020: i8;
  var $i1021: i1;
  var $p1022: ref;
  var $p1023: ref;
  var $i1024: i64;
  var $i1025: i64;
  var $i1026: i1;
  var $p1027: ref;
  var $i1028: i32;
  var $i1029: i1;
  var $p1030: ref;
  var $p1031: ref;
  var $p1032: ref;
  var $i1033: i32;
  var $p1034: ref;
  var vslice_dummy_var_35: i32;
  var vslice_dummy_var_36: i32;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;
  var vslice_dummy_var_39: i32;
  var vslice_dummy_var_40: i32;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: i32;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;
  var vslice_dummy_var_50: i32;
  var vslice_dummy_var_51: i32;
  var vslice_dummy_var_52: i32;
  var vslice_dummy_var_53: i32;
  var vslice_dummy_var_54: i32;
  var vslice_dummy_var_55: i32;
  var vslice_dummy_var_56: i32;
  var vslice_dummy_var_57: i32;
  var vslice_dummy_var_58: i32;
  var vslice_dummy_var_59: i32;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i32;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} mutex_lock_nested(comedi_drivers_list_lock, 0);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $p1 := $M.28;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i2, $i3);
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p7 := $M.28;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} mutex_unlock(comedi_drivers_list_lock);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p28 := comedi_dev_get_from_minor(0);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} mutex_lock_nested($p31, 0);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p28, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p28, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} mutex_unlock($p47);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} vslice_dummy_var_35 := comedi_dev_put($p28);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p49 := comedi_dev_get_from_minor(1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p49, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} mutex_lock_nested($p52, 0);
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p49, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i8.i1($i54);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i55 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p49, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} mutex_unlock($p68);
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} vslice_dummy_var_36 := comedi_dev_put($p49);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} $p70 := comedi_dev_get_from_minor(2);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i71 := $p2i.ref.i64($p70);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i72 := $eq.i64($i71, 0);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p70, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} mutex_lock_nested($p73, 0);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p70, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i8.i1($i75);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i76 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p70, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} mutex_unlock($p89);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} vslice_dummy_var_37 := comedi_dev_put($p70);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $p91 := comedi_dev_get_from_minor(3);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i92 := $p2i.ref.i64($p91);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i93 := $eq.i64($i92, 0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p91, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} mutex_lock_nested($p94, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p91, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i8.i1($i96);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p91, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} mutex_unlock($p110);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} vslice_dummy_var_38 := comedi_dev_put($p91);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p112 := comedi_dev_get_from_minor(4);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i114 := $eq.i64($i113, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p112, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} mutex_lock_nested($p115, 0);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p112, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i8.i1($i117);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    assume {:branchcond $i118} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p112, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} mutex_unlock($p131);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} vslice_dummy_var_39 := comedi_dev_put($p112);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} $p133 := comedi_dev_get_from_minor(5);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i135 := $eq.i64($i134, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p133, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} mutex_lock_nested($p136, 0);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p133, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i138 := $load.i8($M.0, $p137);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $i139 := $trunc.i8.i1($i138);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p133, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} mutex_unlock($p152);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} vslice_dummy_var_40 := comedi_dev_put($p133);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} $p154 := comedi_dev_get_from_minor(6);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p154);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i156 := $eq.i64($i155, 0);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p154, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} mutex_lock_nested($p157, 0);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p154, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i8.i1($i159);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb106, $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    assume !($i160 == 1);
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p154, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} mutex_unlock($p173);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} vslice_dummy_var_41 := comedi_dev_put($p154);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} $p175 := comedi_dev_get_from_minor(7);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i176 := $p2i.ref.i64($p175);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i177 := $eq.i64($i176, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p175, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} mutex_lock_nested($p178, 0);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p175, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.0, $p179);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i8.i1($i180);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb120, $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p175, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} mutex_unlock($p194);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} vslice_dummy_var_42 := comedi_dev_put($p175);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} $p196 := comedi_dev_get_from_minor(8);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i197 := $p2i.ref.i64($p196);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i198 := $eq.i64($i197, 0);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p196, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} mutex_lock_nested($p199, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p196, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p200);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i8.i1($i201);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i202 == 1);
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p196, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} mutex_unlock($p215);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} vslice_dummy_var_43 := comedi_dev_put($p196);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} $p217 := comedi_dev_get_from_minor(9);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i218 := $p2i.ref.i64($p217);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $i219 := $eq.i64($i218, 0);
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p217, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} mutex_lock_nested($p220, 0);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p217, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i222 := $load.i8($M.0, $p221);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i223 := $trunc.i8.i1($i222);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb148, $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    assume !($i223 == 1);
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p217, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} mutex_unlock($p236);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} vslice_dummy_var_44 := comedi_dev_put($p217);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p238 := comedi_dev_get_from_minor(10);
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $i239 := $p2i.ref.i64($p238);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $i240 := $eq.i64($i239, 0);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i240} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p238, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} mutex_lock_nested($p241, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p238, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i243 := $load.i8($M.0, $p242);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i244 := $trunc.i8.i1($i243);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    assume !($i244 == 1);
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p238, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} mutex_unlock($p257);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} vslice_dummy_var_45 := comedi_dev_put($p238);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} $p259 := comedi_dev_get_from_minor(11);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $i261 := $eq.i64($i260, 0);
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} mutex_lock_nested($p262, 0);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.0, $p263);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i8.i1($i264);
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb176, $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} mutex_unlock($p278);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} vslice_dummy_var_46 := comedi_dev_put($p259);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} $p280 := comedi_dev_get_from_minor(12);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i281 := $p2i.ref.i64($p280);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i282 := $eq.i64($i281, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i282} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p280, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} mutex_lock_nested($p283, 0);
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p280, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.0, $p284);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i286 := $trunc.i8.i1($i285);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i286} true;
    goto $bb190, $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    assume !($i286 == 1);
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p280, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} mutex_unlock($p299);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} vslice_dummy_var_47 := comedi_dev_put($p280);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p301 := comedi_dev_get_from_minor(13);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i302 := $p2i.ref.i64($p301);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i303 := $eq.i64($i302, 0);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p301, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} mutex_lock_nested($p304, 0);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p301, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i306 := $load.i8($M.0, $p305);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i307 := $trunc.i8.i1($i306);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb204, $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    assume !($i307 == 1);
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p301, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} mutex_unlock($p320);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_48 := comedi_dev_put($p301);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p322 := comedi_dev_get_from_minor(14);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i323 := $p2i.ref.i64($p322);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i324 := $eq.i64($i323, 0);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p322, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} mutex_lock_nested($p325, 0);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p322, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.0, $p326);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i8.i1($i327);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb218, $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    assume !($i328 == 1);
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p322, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} mutex_unlock($p341);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} vslice_dummy_var_49 := comedi_dev_put($p322);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} $p343 := comedi_dev_get_from_minor(15);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i344 := $p2i.ref.i64($p343);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $i345 := $eq.i64($i344, 0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p343, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} mutex_lock_nested($p346, 0);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p343, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i348 := $load.i8($M.0, $p347);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i349 := $trunc.i8.i1($i348);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb232, $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    assume !($i349 == 1);
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p343, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} mutex_unlock($p362);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} vslice_dummy_var_50 := comedi_dev_put($p343);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $p364 := comedi_dev_get_from_minor(16);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i365 := $p2i.ref.i64($p364);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $i366 := $eq.i64($i365, 0);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p364, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} mutex_lock_nested($p367, 0);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p364, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i369 := $load.i8($M.0, $p368);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i370 := $trunc.i8.i1($i369);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i370} true;
    goto $bb246, $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    assume !($i370 == 1);
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p364, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} mutex_unlock($p383);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} vslice_dummy_var_51 := comedi_dev_put($p364);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p385 := comedi_dev_get_from_minor(17);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i386 := $p2i.ref.i64($p385);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i387 := $eq.i64($i386, 0);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p385, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} mutex_lock_nested($p388, 0);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p385, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $i390 := $load.i8($M.0, $p389);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $i391 := $trunc.i8.i1($i390);
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i391} true;
    goto $bb260, $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    assume !($i391 == 1);
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p385, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} mutex_unlock($p404);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} vslice_dummy_var_52 := comedi_dev_put($p385);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p406 := comedi_dev_get_from_minor(18);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i407 := $p2i.ref.i64($p406);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i408 := $eq.i64($i407, 0);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i408} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p406, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} mutex_lock_nested($p409, 0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p410 := $add.ref($add.ref($p406, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i411 := $load.i8($M.0, $p410);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i412 := $trunc.i8.i1($i411);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i412 == 1);
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p406, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} mutex_unlock($p425);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} vslice_dummy_var_53 := comedi_dev_put($p406);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p427 := comedi_dev_get_from_minor(19);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i428 := $p2i.ref.i64($p427);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $i429 := $eq.i64($i428, 0);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    assume {:branchcond $i429} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i429 == 1);
    assume {:verifier.code 0} true;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    $p430 := $add.ref($add.ref($p427, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} mutex_lock_nested($p430, 0);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p427, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i432 := $load.i8($M.0, $p431);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i433 := $trunc.i8.i1($i432);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i433} true;
    goto $bb288, $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    assume !($i433 == 1);
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    $p446 := $add.ref($add.ref($p427, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} mutex_unlock($p446);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} vslice_dummy_var_54 := comedi_dev_put($p427);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p448 := comedi_dev_get_from_minor(20);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    $i449 := $p2i.ref.i64($p448);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $i450 := $eq.i64($i449, 0);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    assume {:branchcond $i450} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p448, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} mutex_lock_nested($p451, 0);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p448, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i453 := $load.i8($M.0, $p452);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $i454 := $trunc.i8.i1($i453);
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    assume {:branchcond $i454} true;
    goto $bb302, $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    assume !($i454 == 1);
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p448, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} mutex_unlock($p467);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} vslice_dummy_var_55 := comedi_dev_put($p448);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p469 := comedi_dev_get_from_minor(21);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i470 := $p2i.ref.i64($p469);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $i471 := $eq.i64($i470, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    assume {:branchcond $i471} true;
    goto $bb313, $bb314;

  $bb314:
    assume !($i471 == 1);
    assume {:verifier.code 0} true;
    goto $bb315;

  $bb315:
    assume {:verifier.code 0} true;
    $p472 := $add.ref($add.ref($p469, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} mutex_lock_nested($p472, 0);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p469, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $i474 := $load.i8($M.0, $p473);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    $i475 := $trunc.i8.i1($i474);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb316, $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    assume !($i475 == 1);
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    $p488 := $add.ref($add.ref($p469, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} mutex_unlock($p488);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} vslice_dummy_var_56 := comedi_dev_put($p469);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p490 := comedi_dev_get_from_minor(22);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i491 := $p2i.ref.i64($p490);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i492 := $eq.i64($i491, 0);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    assume {:branchcond $i492} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p490, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} mutex_lock_nested($p493, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p490, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $i495 := $load.i8($M.0, $p494);
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i496 := $trunc.i8.i1($i495);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i496} true;
    goto $bb330, $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    assume !($i496 == 1);
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p490, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} mutex_unlock($p509);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} vslice_dummy_var_57 := comedi_dev_put($p490);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    goto $bb339;

  $bb339:
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} $p511 := comedi_dev_get_from_minor(23);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i512 := $p2i.ref.i64($p511);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i513 := $eq.i64($i512, 0);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i513} true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($p511, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} mutex_lock_nested($p514, 0);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $p515 := $add.ref($add.ref($p511, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i516 := $load.i8($M.0, $p515);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $i517 := $trunc.i8.i1($i516);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    assume {:branchcond $i517} true;
    goto $bb344, $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    assume !($i517 == 1);
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p511, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} mutex_unlock($p530);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} vslice_dummy_var_58 := comedi_dev_put($p511);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $p532 := comedi_dev_get_from_minor(24);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i533 := $p2i.ref.i64($p532);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i534 := $eq.i64($i533, 0);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    assume {:branchcond $i534} true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i534 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p532, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} mutex_lock_nested($p535, 0);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p532, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $i537 := $load.i8($M.0, $p536);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i538 := $trunc.i8.i1($i537);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    assume {:branchcond $i538} true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !($i538 == 1);
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb363;

  $bb363:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p532, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} mutex_unlock($p551);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_59 := comedi_dev_put($p532);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} $p553 := comedi_dev_get_from_minor(25);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i554 := $p2i.ref.i64($p553);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i555 := $eq.i64($i554, 0);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i555} true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i555 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p553, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} mutex_lock_nested($p556, 0);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $p557 := $add.ref($add.ref($p553, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i558 := $load.i8($M.0, $p557);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $i559 := $trunc.i8.i1($i558);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i559} true;
    goto $bb372, $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    assume !($i559 == 1);
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    $p572 := $add.ref($add.ref($p553, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} mutex_unlock($p572);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} vslice_dummy_var_60 := comedi_dev_put($p553);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $p574 := comedi_dev_get_from_minor(26);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i575 := $p2i.ref.i64($p574);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i576 := $eq.i64($i575, 0);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    assume {:branchcond $i576} true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i576 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    $p577 := $add.ref($add.ref($p574, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} mutex_lock_nested($p577, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($add.ref($p574, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $i579 := $load.i8($M.0, $p578);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i580 := $trunc.i8.i1($i579);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    assume {:branchcond $i580} true;
    goto $bb386, $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    assume !($i580 == 1);
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p574, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} mutex_unlock($p593);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} vslice_dummy_var_61 := comedi_dev_put($p574);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} $p595 := comedi_dev_get_from_minor(27);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $i596 := $p2i.ref.i64($p595);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $i597 := $eq.i64($i596, 0);
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i597} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i597 == 1);
    assume {:verifier.code 0} true;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p595, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} mutex_lock_nested($p598, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p595, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i600 := $load.i8($M.0, $p599);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i601 := $trunc.i8.i1($i600);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb400, $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    assume !($i601 == 1);
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    $p614 := $add.ref($add.ref($p595, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} mutex_unlock($p614);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} vslice_dummy_var_62 := comedi_dev_put($p595);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p616 := comedi_dev_get_from_minor(28);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i617 := $p2i.ref.i64($p616);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i618 := $eq.i64($i617, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i618} true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i618 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p616, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} mutex_lock_nested($p619, 0);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p620 := $add.ref($add.ref($p616, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i621 := $load.i8($M.0, $p620);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i622 := $trunc.i8.i1($i621);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    assume {:branchcond $i622} true;
    goto $bb414, $bb415;

  $bb415:
    assume {:verifier.code 0} true;
    assume !($i622 == 1);
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    $p635 := $add.ref($add.ref($p616, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} mutex_unlock($p635);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} vslice_dummy_var_63 := comedi_dev_put($p616);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    goto $bb423;

  $bb423:
    assume {:verifier.code 0} true;
    goto $bb424;

  $bb424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $p637 := comedi_dev_get_from_minor(29);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $i638 := $p2i.ref.i64($p637);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $i639 := $eq.i64($i638, 0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i639} true;
    goto $bb425, $bb426;

  $bb426:
    assume !($i639 == 1);
    assume {:verifier.code 0} true;
    goto $bb427;

  $bb427:
    assume {:verifier.code 0} true;
    $p640 := $add.ref($add.ref($p637, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 598} mutex_lock_nested($p640, 0);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p637, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $i642 := $load.i8($M.0, $p641);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i643 := $trunc.i8.i1($i642);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    assume {:branchcond $i643} true;
    goto $bb428, $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    assume !($i643 == 1);
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p637, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} mutex_unlock($p656);
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} vslice_dummy_var_64 := comedi_dev_put($p637);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p658 := comedi_dev_get_from_minor(30);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i659 := $p2i.ref.i64($p658);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i660 := $eq.i64($i659, 0);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i660} true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i660 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    $p661 := $add.ref($add.ref($p658, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} mutex_lock_nested($p661, 0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p658, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i663 := $load.i8($M.0, $p662);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i664 := $trunc.i8.i1($i663);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    assume {:branchcond $i664} true;
    goto $bb442, $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    assume !($i664 == 1);
    goto $bb444;

  $bb444:
    assume {:verifier.code 0} true;
    goto $bb447;

  $bb447:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p658, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} mutex_unlock($p677);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_65 := comedi_dev_put($p658);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    goto $bb451;

  $bb451:
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $p679 := comedi_dev_get_from_minor(31);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $i680 := $p2i.ref.i64($p679);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $i681 := $eq.i64($i680, 0);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} mutex_lock_nested($p682, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $i684 := $load.i8($M.0, $p683);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i685 := $trunc.i8.i1($i684);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    assume {:branchcond $i685} true;
    goto $bb456, $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    assume !($i685 == 1);
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    $p698 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} mutex_unlock($p698);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_66 := comedi_dev_put($p679);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $p700 := comedi_dev_get_from_minor(32);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i701 := $p2i.ref.i64($p700);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $i702 := $eq.i64($i701, 0);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i702} true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p700, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} mutex_lock_nested($p703, 0);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p700, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i705 := $load.i8($M.0, $p704);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i706 := $trunc.i8.i1($i705);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i706} true;
    goto $bb470, $bb471;

  $bb471:
    assume {:verifier.code 0} true;
    assume !($i706 == 1);
    goto $bb472;

  $bb472:
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    $p719 := $add.ref($add.ref($p700, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} mutex_unlock($p719);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} vslice_dummy_var_67 := comedi_dev_put($p700);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb480;

  $bb480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} $p721 := comedi_dev_get_from_minor(33);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i722 := $p2i.ref.i64($p721);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i723 := $eq.i64($i722, 0);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i723} true;
    goto $bb481, $bb482;

  $bb482:
    assume !($i723 == 1);
    assume {:verifier.code 0} true;
    goto $bb483;

  $bb483:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p721, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} mutex_lock_nested($p724, 0);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p721, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i726 := $load.i8($M.0, $p725);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $i727 := $trunc.i8.i1($i726);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i727} true;
    goto $bb484, $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    assume !($i727 == 1);
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p721, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} mutex_unlock($p740);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} vslice_dummy_var_68 := comedi_dev_put($p721);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $p742 := comedi_dev_get_from_minor(34);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i743 := $p2i.ref.i64($p742);
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i744 := $eq.i64($i743, 0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i744} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i744 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $p745 := $add.ref($add.ref($p742, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} mutex_lock_nested($p745, 0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $p746 := $add.ref($add.ref($p742, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i747 := $load.i8($M.0, $p746);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i748 := $trunc.i8.i1($i747);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i748} true;
    goto $bb498, $bb499;

  $bb499:
    assume {:verifier.code 0} true;
    assume !($i748 == 1);
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p742, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} mutex_unlock($p761);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} vslice_dummy_var_69 := comedi_dev_put($p742);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    goto $bb507;

  $bb507:
    assume {:verifier.code 0} true;
    goto $bb508;

  $bb508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} $p763 := comedi_dev_get_from_minor(35);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $i764 := $p2i.ref.i64($p763);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $i765 := $eq.i64($i764, 0);
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    assume {:branchcond $i765} true;
    goto $bb509, $bb510;

  $bb510:
    assume !($i765 == 1);
    assume {:verifier.code 0} true;
    goto $bb511;

  $bb511:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($p763, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} mutex_lock_nested($p766, 0);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p763, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i768 := $load.i8($M.0, $p767);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $i769 := $trunc.i8.i1($i768);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i769} true;
    goto $bb512, $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    assume !($i769 == 1);
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p763, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} mutex_unlock($p782);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} vslice_dummy_var_70 := comedi_dev_put($p763);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $p784 := comedi_dev_get_from_minor(36);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i785 := $p2i.ref.i64($p784);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i786 := $eq.i64($i785, 0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i786} true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i786 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p784, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} mutex_lock_nested($p787, 0);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p788 := $add.ref($add.ref($p784, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i789 := $load.i8($M.0, $p788);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i790 := $trunc.i8.i1($i789);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i790} true;
    goto $bb526, $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    assume !($i790 == 1);
    goto $bb528;

  $bb528:
    assume {:verifier.code 0} true;
    goto $bb531;

  $bb531:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($p784, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} mutex_unlock($p803);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} vslice_dummy_var_71 := comedi_dev_put($p784);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    goto $bb535;

  $bb535:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p805 := comedi_dev_get_from_minor(37);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i806 := $p2i.ref.i64($p805);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i807 := $eq.i64($i806, 0);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume {:branchcond $i807} true;
    goto $bb537, $bb538;

  $bb538:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($add.ref($p805, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} mutex_lock_nested($p808, 0);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($p805, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i810 := $load.i8($M.0, $p809);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i811 := $trunc.i8.i1($i810);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i811} true;
    goto $bb540, $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    assume !($i811 == 1);
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $p824 := $add.ref($add.ref($p805, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} mutex_unlock($p824);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} vslice_dummy_var_72 := comedi_dev_put($p805);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p826 := comedi_dev_get_from_minor(38);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i827 := $p2i.ref.i64($p826);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i828 := $eq.i64($i827, 0);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    assume {:branchcond $i828} true;
    goto $bb551, $bb552;

  $bb552:
    assume !($i828 == 1);
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($p826, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} mutex_lock_nested($p829, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p826, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i831 := $load.i8($M.0, $p830);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i832 := $trunc.i8.i1($i831);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i832} true;
    goto $bb554, $bb555;

  $bb555:
    assume {:verifier.code 0} true;
    assume !($i832 == 1);
    goto $bb556;

  $bb556:
    assume {:verifier.code 0} true;
    goto $bb559;

  $bb559:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($p826, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 653} mutex_unlock($p845);
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} vslice_dummy_var_73 := comedi_dev_put($p826);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    goto $bb563;

  $bb563:
    assume {:verifier.code 0} true;
    goto $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} $p847 := comedi_dev_get_from_minor(39);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i848 := $p2i.ref.i64($p847);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i849 := $eq.i64($i848, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i849} true;
    goto $bb565, $bb566;

  $bb566:
    assume !($i849 == 1);
    assume {:verifier.code 0} true;
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    $p850 := $add.ref($add.ref($p847, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} mutex_lock_nested($p850, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p847, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $i852 := $load.i8($M.0, $p851);
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $i853 := $trunc.i8.i1($i852);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    assume {:branchcond $i853} true;
    goto $bb568, $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    assume !($i853 == 1);
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    $p866 := $add.ref($add.ref($p847, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} mutex_unlock($p866);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_74 := comedi_dev_put($p847);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p868 := comedi_dev_get_from_minor(40);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $i869 := $p2i.ref.i64($p868);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i870 := $eq.i64($i869, 0);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i870} true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i870 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p868, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} mutex_lock_nested($p871, 0);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $p872 := $add.ref($add.ref($p868, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i873 := $load.i8($M.0, $p872);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i874 := $trunc.i8.i1($i873);
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i874} true;
    goto $bb582, $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    assume !($i874 == 1);
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref($p868, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} mutex_unlock($p887);
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} vslice_dummy_var_75 := comedi_dev_put($p868);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    goto $bb591;

  $bb591:
    assume {:verifier.code 0} true;
    goto $bb592;

  $bb592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} $p889 := comedi_dev_get_from_minor(41);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i890 := $p2i.ref.i64($p889);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i891 := $eq.i64($i890, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i891} true;
    goto $bb593, $bb594;

  $bb594:
    assume !($i891 == 1);
    assume {:verifier.code 0} true;
    goto $bb595;

  $bb595:
    assume {:verifier.code 0} true;
    $p892 := $add.ref($add.ref($p889, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} mutex_lock_nested($p892, 0);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($p889, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i894 := $load.i8($M.0, $p893);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i895 := $trunc.i8.i1($i894);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i895} true;
    goto $bb596, $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    assume !($i895 == 1);
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    $p908 := $add.ref($add.ref($p889, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} mutex_unlock($p908);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} vslice_dummy_var_76 := comedi_dev_put($p889);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $p910 := comedi_dev_get_from_minor(42);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i911 := $p2i.ref.i64($p910);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i912 := $eq.i64($i911, 0);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i912} true;
    goto $bb607, $bb608;

  $bb608:
    assume !($i912 == 1);
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($p910, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} mutex_lock_nested($p913, 0);
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $p914 := $add.ref($add.ref($p910, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $i915 := $load.i8($M.0, $p914);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i916 := $trunc.i8.i1($i915);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i916} true;
    goto $bb610, $bb611;

  $bb611:
    assume {:verifier.code 0} true;
    assume !($i916 == 1);
    goto $bb612;

  $bb612:
    assume {:verifier.code 0} true;
    goto $bb615;

  $bb615:
    assume {:verifier.code 0} true;
    $p929 := $add.ref($add.ref($p910, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} mutex_unlock($p929);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} vslice_dummy_var_77 := comedi_dev_put($p910);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    goto $bb619;

  $bb619:
    assume {:verifier.code 0} true;
    goto $bb620;

  $bb620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p931 := comedi_dev_get_from_minor(43);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i932 := $p2i.ref.i64($p931);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i933 := $eq.i64($i932, 0);
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i933} true;
    goto $bb621, $bb622;

  $bb622:
    assume !($i933 == 1);
    assume {:verifier.code 0} true;
    goto $bb623;

  $bb623:
    assume {:verifier.code 0} true;
    $p934 := $add.ref($add.ref($p931, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 682} mutex_lock_nested($p934, 0);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $p935 := $add.ref($add.ref($p931, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i936 := $load.i8($M.0, $p935);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i937 := $trunc.i8.i1($i936);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i937} true;
    goto $bb624, $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    assume !($i937 == 1);
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    $p950 := $add.ref($add.ref($p931, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} mutex_unlock($p950);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} vslice_dummy_var_78 := comedi_dev_put($p931);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p952 := comedi_dev_get_from_minor(44);
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i953 := $p2i.ref.i64($p952);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i954 := $eq.i64($i953, 0);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    assume {:branchcond $i954} true;
    goto $bb635, $bb636;

  $bb636:
    assume !($i954 == 1);
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    $p955 := $add.ref($add.ref($p952, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} mutex_lock_nested($p955, 0);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p952, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i957 := $load.i8($M.0, $p956);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i958 := $trunc.i8.i1($i957);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i958} true;
    goto $bb638, $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    assume !($i958 == 1);
    goto $bb640;

  $bb640:
    assume {:verifier.code 0} true;
    goto $bb643;

  $bb643:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($add.ref($p952, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} mutex_unlock($p971);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} vslice_dummy_var_79 := comedi_dev_put($p952);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    goto $bb647;

  $bb647:
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p973 := comedi_dev_get_from_minor(45);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $i974 := $p2i.ref.i64($p973);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i975 := $eq.i64($i974, 0);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i975} true;
    goto $bb649, $bb650;

  $bb650:
    assume !($i975 == 1);
    assume {:verifier.code 0} true;
    goto $bb651;

  $bb651:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($p973, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} mutex_lock_nested($p976, 0);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p977 := $add.ref($add.ref($p973, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i978 := $load.i8($M.0, $p977);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i979 := $trunc.i8.i1($i978);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume {:branchcond $i979} true;
    goto $bb652, $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    assume !($i979 == 1);
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    $p992 := $add.ref($add.ref($p973, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} mutex_unlock($p992);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} vslice_dummy_var_80 := comedi_dev_put($p973);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p994 := comedi_dev_get_from_minor(46);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i995 := $p2i.ref.i64($p994);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i996 := $eq.i64($i995, 0);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i996} true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i996 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    $p997 := $add.ref($add.ref($p994, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} mutex_lock_nested($p997, 0);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p998 := $add.ref($add.ref($p994, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i999 := $load.i8($M.0, $p998);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i1000 := $trunc.i8.i1($i999);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1000} true;
    goto $bb666, $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    assume !($i1000 == 1);
    goto $bb668;

  $bb668:
    assume {:verifier.code 0} true;
    goto $bb671;

  $bb671:
    assume {:verifier.code 0} true;
    $p1013 := $add.ref($add.ref($p994, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} mutex_unlock($p1013);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} vslice_dummy_var_81 := comedi_dev_put($p994);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    goto $bb675;

  $bb675:
    assume {:verifier.code 0} true;
    goto $bb676;

  $bb676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p1015 := comedi_dev_get_from_minor(47);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i1016 := $p2i.ref.i64($p1015);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i1017 := $eq.i64($i1016, 0);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1017} true;
    goto $bb677, $bb678;

  $bb678:
    assume !($i1017 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    $p1018 := $add.ref($add.ref($p1015, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} mutex_lock_nested($p1018, 0);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p1019 := $add.ref($add.ref($p1015, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $i1020 := $load.i8($M.0, $p1019);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $i1021 := $trunc.i8.i1($i1020);
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1021} true;
    goto $bb680, $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    assume !($i1021 == 1);
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    $p1034 := $add.ref($add.ref($p1015, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} mutex_unlock($p1034);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} vslice_dummy_var_82 := comedi_dev_put($p1015);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb680:
    assume $i1021 == 1;
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $p1022 := $add.ref($add.ref($p1015, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $p1023 := $load.ref($M.0, $p1022);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i1024 := $p2i.ref.i64($p1023);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    $i1025 := $p2i.ref.i64($p0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i1026 := $eq.i64($i1024, $i1025);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1026} true;
    goto $bb683, $bb684;

  $bb684:
    assume {:verifier.code 0} true;
    assume !($i1026 == 1);
    goto $bb682;

  $bb683:
    assume $i1026 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p1027 := $add.ref($add.ref($p1015, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i1028 := $load.i32($M.0, $p1027);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i1029 := $ne.i32($i1028, 0);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1029} true;
    goto $bb686, $bb687;

  $bb687:
    assume !($i1029 == 1);
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} comedi_device_detach($p1015);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    goto $bb685;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb686:
    assume $i1029 == 1;
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $p1030 := $add.ref($add.ref($p1015, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p1031 := $load.ref($M.0, $p1030);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p1032 := $add.ref($add.ref($p1015, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i1033 := $load.i32($M.0, $p1032);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} dev_warn.ref.ref.i32($p1031, .str.22, $i1033);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb677:
    assume $i1017 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    goto $bb689;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb666:
    assume $i1000 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $p1001 := $add.ref($add.ref($p994, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p1002 := $load.ref($M.0, $p1001);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i1003 := $p2i.ref.i64($p1002);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i1004 := $p2i.ref.i64($p0);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i1005 := $eq.i64($i1003, $i1004);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1005} true;
    goto $bb669, $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    assume !($i1005 == 1);
    goto $bb668;

  $bb669:
    assume $i1005 == 1;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p1006 := $add.ref($add.ref($p994, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $i1007 := $load.i32($M.0, $p1006);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i1008 := $ne.i32($i1007, 0);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1008} true;
    goto $bb672, $bb673;

  $bb673:
    assume !($i1008 == 1);
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} comedi_device_detach($p994);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    goto $bb671;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb672:
    assume $i1008 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p1009 := $add.ref($add.ref($p994, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p1010 := $load.ref($M.0, $p1009);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p1011 := $add.ref($add.ref($p994, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $i1012 := $load.i32($M.0, $p1011);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} dev_warn.ref.ref.i32($p1010, .str.22, $i1012);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb663:
    assume $i996 == 1;
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    goto $bb675;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb652:
    assume $i979 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p980 := $add.ref($add.ref($p973, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p981 := $load.ref($M.0, $p980);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $i982 := $p2i.ref.i64($p981);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $i983 := $p2i.ref.i64($p0);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i984 := $eq.i64($i982, $i983);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i984} true;
    goto $bb655, $bb656;

  $bb656:
    assume {:verifier.code 0} true;
    assume !($i984 == 1);
    goto $bb654;

  $bb655:
    assume $i984 == 1;
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p985 := $add.ref($add.ref($p973, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i986 := $load.i32($M.0, $p985);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i987 := $ne.i32($i986, 0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i987} true;
    goto $bb658, $bb659;

  $bb659:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} comedi_device_detach($p973);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    goto $bb657;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb658:
    assume $i987 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p988 := $add.ref($add.ref($p973, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p989 := $load.ref($M.0, $p988);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    $p990 := $add.ref($add.ref($p973, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $i991 := $load.i32($M.0, $p990);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} dev_warn.ref.ref.i32($p989, .str.22, $i991);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    goto $bb660;

  $bb649:
    assume $i975 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    goto $bb661;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb638:
    assume $i958 == 1;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $p959 := $add.ref($add.ref($p952, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p960 := $load.ref($M.0, $p959);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i961 := $p2i.ref.i64($p960);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i962 := $p2i.ref.i64($p0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i963 := $eq.i64($i961, $i962);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    assume {:branchcond $i963} true;
    goto $bb641, $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    assume !($i963 == 1);
    goto $bb640;

  $bb641:
    assume $i963 == 1;
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $p964 := $add.ref($add.ref($p952, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i965 := $load.i32($M.0, $p964);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $i966 := $ne.i32($i965, 0);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i966} true;
    goto $bb644, $bb645;

  $bb645:
    assume !($i966 == 1);
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} comedi_device_detach($p952);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    goto $bb643;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb644:
    assume $i966 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($p952, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $p968 := $load.ref($M.0, $p967);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($p952, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $i970 := $load.i32($M.0, $p969);
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} dev_warn.ref.ref.i32($p968, .str.22, $i970);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb635:
    assume $i954 == 1;
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    goto $bb647;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb624:
    assume $i937 == 1;
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $p938 := $add.ref($add.ref($p931, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $p939 := $load.ref($M.0, $p938);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i940 := $p2i.ref.i64($p939);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i941 := $p2i.ref.i64($p0);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $i942 := $eq.i64($i940, $i941);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i942} true;
    goto $bb627, $bb628;

  $bb628:
    assume {:verifier.code 0} true;
    assume !($i942 == 1);
    goto $bb626;

  $bb627:
    assume $i942 == 1;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($add.ref($p931, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i944 := $load.i32($M.0, $p943);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i945 := $ne.i32($i944, 0);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb630, $bb631;

  $bb631:
    assume !($i945 == 1);
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} comedi_device_detach($p931);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    goto $bb629;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb630:
    assume $i945 == 1;
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $p946 := $add.ref($add.ref($p931, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p947 := $load.ref($M.0, $p946);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $p948 := $add.ref($add.ref($p931, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i949 := $load.i32($M.0, $p948);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} dev_warn.ref.ref.i32($p947, .str.22, $i949);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    goto $bb632;

  $bb621:
    assume $i933 == 1;
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    goto $bb633;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb610:
    assume $i916 == 1;
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p917 := $add.ref($add.ref($p910, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $p918 := $load.ref($M.0, $p917);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i919 := $p2i.ref.i64($p918);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i920 := $p2i.ref.i64($p0);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i921 := $eq.i64($i919, $i920);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i921} true;
    goto $bb613, $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    assume !($i921 == 1);
    goto $bb612;

  $bb613:
    assume $i921 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($p910, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i923 := $load.i32($M.0, $p922);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i924 := $ne.i32($i923, 0);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i924} true;
    goto $bb616, $bb617;

  $bb617:
    assume !($i924 == 1);
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} comedi_device_detach($p910);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    goto $bb615;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb616:
    assume $i924 == 1;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p925 := $add.ref($add.ref($p910, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p926 := $load.ref($M.0, $p925);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($p910, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i928 := $load.i32($M.0, $p927);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} dev_warn.ref.ref.i32($p926, .str.22, $i928);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb607:
    assume $i912 == 1;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    goto $bb619;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb596:
    assume $i895 == 1;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($add.ref($p889, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p897 := $load.ref($M.0, $p896);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i898 := $p2i.ref.i64($p897);
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i899 := $p2i.ref.i64($p0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $i900 := $eq.i64($i898, $i899);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i900} true;
    goto $bb599, $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    assume !($i900 == 1);
    goto $bb598;

  $bb599:
    assume $i900 == 1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p901 := $add.ref($add.ref($p889, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $i902 := $load.i32($M.0, $p901);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i903 := $ne.i32($i902, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i903} true;
    goto $bb602, $bb603;

  $bb603:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} comedi_device_detach($p889);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    goto $bb601;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb602:
    assume $i903 == 1;
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p904 := $add.ref($add.ref($p889, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $p905 := $load.ref($M.0, $p904);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p906 := $add.ref($add.ref($p889, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i907 := $load.i32($M.0, $p906);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} dev_warn.ref.ref.i32($p905, .str.22, $i907);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    goto $bb604;

  $bb593:
    assume $i891 == 1;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    goto $bb605;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb582:
    assume $i874 == 1;
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p875 := $add.ref($add.ref($p868, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $p876 := $load.ref($M.0, $p875);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i877 := $p2i.ref.i64($p876);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i878 := $p2i.ref.i64($p0);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i879 := $eq.i64($i877, $i878);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    assume {:branchcond $i879} true;
    goto $bb585, $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    assume !($i879 == 1);
    goto $bb584;

  $bb585:
    assume $i879 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p880 := $add.ref($add.ref($p868, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $i881 := $load.i32($M.0, $p880);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i882 := $ne.i32($i881, 0);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i882} true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} comedi_device_detach($p868);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    goto $bb587;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb588:
    assume $i882 == 1;
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p868, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $p884 := $load.ref($M.0, $p883);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($p868, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $i886 := $load.i32($M.0, $p885);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} dev_warn.ref.ref.i32($p884, .str.22, $i886);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb579:
    assume $i870 == 1;
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    goto $bb591;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb568:
    assume $i853 == 1;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $p854 := $add.ref($add.ref($p847, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $p855 := $load.ref($M.0, $p854);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i856 := $p2i.ref.i64($p855);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $i857 := $p2i.ref.i64($p0);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $i858 := $eq.i64($i856, $i857);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i858} true;
    goto $bb571, $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    assume !($i858 == 1);
    goto $bb570;

  $bb571:
    assume $i858 == 1;
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $p859 := $add.ref($add.ref($p847, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i860 := $load.i32($M.0, $p859);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i861 := $ne.i32($i860, 0);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    assume {:branchcond $i861} true;
    goto $bb574, $bb575;

  $bb575:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} comedi_device_detach($p847);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    goto $bb573;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb574:
    assume $i861 == 1;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p847, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $p863 := $load.ref($M.0, $p862);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p864 := $add.ref($add.ref($p847, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i865 := $load.i32($M.0, $p864);
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} dev_warn.ref.ref.i32($p863, .str.22, $i865);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    goto $bb576;

  $bb565:
    assume $i849 == 1;
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    goto $bb577;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb554:
    assume $i832 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($add.ref($p826, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $p834 := $load.ref($M.0, $p833);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i835 := $p2i.ref.i64($p834);
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i836 := $p2i.ref.i64($p0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i837 := $eq.i64($i835, $i836);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i837} true;
    goto $bb557, $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    assume !($i837 == 1);
    goto $bb556;

  $bb557:
    assume $i837 == 1;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p838 := $add.ref($add.ref($p826, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i839 := $load.i32($M.0, $p838);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i840 := $ne.i32($i839, 0);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb560, $bb561;

  $bb561:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} comedi_device_detach($p826);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    goto $bb559;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb560:
    assume $i840 == 1;
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($p826, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $p842 := $load.ref($M.0, $p841);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($p826, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i844 := $load.i32($M.0, $p843);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} dev_warn.ref.ref.i32($p842, .str.22, $i844);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb551:
    assume $i828 == 1;
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    goto $bb563;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb540:
    assume $i811 == 1;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p812 := $add.ref($add.ref($p805, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $p813 := $load.ref($M.0, $p812);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i814 := $p2i.ref.i64($p813);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i815 := $p2i.ref.i64($p0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i816 := $eq.i64($i814, $i815);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i816} true;
    goto $bb543, $bb544;

  $bb544:
    assume {:verifier.code 0} true;
    assume !($i816 == 1);
    goto $bb542;

  $bb543:
    assume $i816 == 1;
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $p817 := $add.ref($add.ref($p805, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i818 := $load.i32($M.0, $p817);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i819 := $ne.i32($i818, 0);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i819} true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} comedi_device_detach($p805);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    goto $bb545;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb546:
    assume $i819 == 1;
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p820 := $add.ref($add.ref($p805, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p821 := $load.ref($M.0, $p820);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p805, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i823 := $load.i32($M.0, $p822);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} dev_warn.ref.ref.i32($p821, .str.22, $i823);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb537:
    assume $i807 == 1;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb549;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb526:
    assume $i790 == 1;
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p784, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.0, $p791);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i793 := $p2i.ref.i64($p792);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i794 := $p2i.ref.i64($p0);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i795 := $eq.i64($i793, $i794);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i795} true;
    goto $bb529, $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    assume !($i795 == 1);
    goto $bb528;

  $bb529:
    assume $i795 == 1;
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p784, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    $i797 := $load.i32($M.0, $p796);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $i798 := $ne.i32($i797, 0);
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb532, $bb533;

  $bb533:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} comedi_device_detach($p784);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    goto $bb531;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb532:
    assume $i798 == 1;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p799 := $add.ref($add.ref($p784, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p800 := $load.ref($M.0, $p799);
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p784, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i802 := $load.i32($M.0, $p801);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} dev_warn.ref.ref.i32($p800, .str.22, $i802);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb523:
    assume $i786 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    goto $bb535;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb512:
    assume $i769 == 1;
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $p770 := $add.ref($add.ref($p763, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $p771 := $load.ref($M.0, $p770);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i772 := $p2i.ref.i64($p771);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i773 := $p2i.ref.i64($p0);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i774 := $eq.i64($i772, $i773);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume {:branchcond $i774} true;
    goto $bb515, $bb516;

  $bb516:
    assume {:verifier.code 0} true;
    assume !($i774 == 1);
    goto $bb514;

  $bb515:
    assume $i774 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p775 := $add.ref($add.ref($p763, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i776 := $load.i32($M.0, $p775);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i777 := $ne.i32($i776, 0);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i777} true;
    goto $bb518, $bb519;

  $bb519:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb520:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} comedi_device_detach($p763);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    goto $bb517;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb518:
    assume $i777 == 1;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p763, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p779 := $load.ref($M.0, $p778);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p780 := $add.ref($add.ref($p763, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i781 := $load.i32($M.0, $p780);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} dev_warn.ref.ref.i32($p779, .str.22, $i781);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    goto $bb520;

  $bb509:
    assume $i765 == 1;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    goto $bb521;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb498:
    assume $i748 == 1;
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p742, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p750 := $load.ref($M.0, $p749);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i751 := $p2i.ref.i64($p750);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $i752 := $p2i.ref.i64($p0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i753 := $eq.i64($i751, $i752);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    assume {:branchcond $i753} true;
    goto $bb501, $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    assume !($i753 == 1);
    goto $bb500;

  $bb501:
    assume $i753 == 1;
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $p754 := $add.ref($add.ref($p742, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i755 := $load.i32($M.0, $p754);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i756 := $ne.i32($i755, 0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i756} true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} comedi_device_detach($p742);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    goto $bb503;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb504:
    assume $i756 == 1;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p757 := $add.ref($add.ref($p742, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p758 := $load.ref($M.0, $p757);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p742, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i760 := $load.i32($M.0, $p759);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} dev_warn.ref.ref.i32($p758, .str.22, $i760);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb495:
    assume $i744 == 1;
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    goto $bb507;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb484:
    assume $i727 == 1;
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p721, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p729 := $load.ref($M.0, $p728);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i730 := $p2i.ref.i64($p729);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $i731 := $p2i.ref.i64($p0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $i732 := $eq.i64($i730, $i731);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    assume {:branchcond $i732} true;
    goto $bb487, $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    assume !($i732 == 1);
    goto $bb486;

  $bb487:
    assume $i732 == 1;
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p721, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i734 := $load.i32($M.0, $p733);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i735 := $ne.i32($i734, 0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    assume {:branchcond $i735} true;
    goto $bb490, $bb491;

  $bb491:
    assume !($i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} comedi_device_detach($p721);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    goto $bb489;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb490:
    assume $i735 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p721, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $p737 := $load.ref($M.0, $p736);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p738 := $add.ref($add.ref($p721, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i739 := $load.i32($M.0, $p738);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} dev_warn.ref.ref.i32($p737, .str.22, $i739);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    goto $bb492;

  $bb481:
    assume $i723 == 1;
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    goto $bb493;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb470:
    assume $i706 == 1;
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p700, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.0, $p707);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i709 := $p2i.ref.i64($p708);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i710 := $p2i.ref.i64($p0);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i711 := $eq.i64($i709, $i710);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    assume {:branchcond $i711} true;
    goto $bb473, $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    assume !($i711 == 1);
    goto $bb472;

  $bb473:
    assume $i711 == 1;
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p712 := $add.ref($add.ref($p700, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i713 := $load.i32($M.0, $p712);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i714 := $ne.i32($i713, 0);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i714} true;
    goto $bb476, $bb477;

  $bb477:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} comedi_device_detach($p700);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    goto $bb475;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb476:
    assume $i714 == 1;
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p715 := $add.ref($add.ref($p700, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $p716 := $load.ref($M.0, $p715);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($p700, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i718 := $load.i32($M.0, $p717);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} dev_warn.ref.ref.i32($p716, .str.22, $i718);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb467:
    assume $i702 == 1;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    goto $bb479;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb456:
    assume $i685 == 1;
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $p686 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p687 := $load.ref($M.0, $p686);
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i688 := $p2i.ref.i64($p687);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $i689 := $p2i.ref.i64($p0);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i690 := $eq.i64($i688, $i689);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i690} true;
    goto $bb459, $bb460;

  $bb460:
    assume {:verifier.code 0} true;
    assume !($i690 == 1);
    goto $bb458;

  $bb459:
    assume $i690 == 1;
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i692 := $load.i32($M.0, $p691);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i693 := $ne.i32($i692, 0);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i693} true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i693 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} comedi_device_detach($p679);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    goto $bb461;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb462:
    assume $i693 == 1;
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $p694 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p695 := $load.ref($M.0, $p694);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $i697 := $load.i32($M.0, $p696);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} dev_warn.ref.ref.i32($p695, .str.22, $i697);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb453:
    assume $i681 == 1;
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    goto $bb465;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb442:
    assume $i664 == 1;
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p665 := $add.ref($add.ref($p658, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.0, $p665);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i667 := $p2i.ref.i64($p666);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i668 := $p2i.ref.i64($p0);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i669 := $eq.i64($i667, $i668);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i669} true;
    goto $bb445, $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    assume !($i669 == 1);
    goto $bb444;

  $bb445:
    assume $i669 == 1;
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p670 := $add.ref($add.ref($p658, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $i671 := $load.i32($M.0, $p670);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $i672 := $ne.i32($i671, 0);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i672} true;
    goto $bb448, $bb449;

  $bb449:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} comedi_device_detach($p658);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb447;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb448:
    assume $i672 == 1;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p658, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $p674 := $load.ref($M.0, $p673);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $p675 := $add.ref($add.ref($p658, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i676 := $load.i32($M.0, $p675);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} dev_warn.ref.ref.i32($p674, .str.22, $i676);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb439:
    assume $i660 == 1;
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    goto $bb451;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb428:
    assume $i643 == 1;
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p644 := $add.ref($add.ref($p637, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p645 := $load.ref($M.0, $p644);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $i646 := $p2i.ref.i64($p645);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $i647 := $p2i.ref.i64($p0);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $i648 := $eq.i64($i646, $i647);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i648} true;
    goto $bb431, $bb432;

  $bb432:
    assume {:verifier.code 0} true;
    assume !($i648 == 1);
    goto $bb430;

  $bb431:
    assume $i648 == 1;
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p637, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i650 := $load.i32($M.0, $p649);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i651 := $ne.i32($i650, 0);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb434, $bb435;

  $bb435:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} comedi_device_detach($p637);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb433;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb434:
    assume $i651 == 1;
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p652 := $add.ref($add.ref($p637, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p653 := $load.ref($M.0, $p652);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $p654 := $add.ref($add.ref($p637, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i655 := $load.i32($M.0, $p654);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} dev_warn.ref.ref.i32($p653, .str.22, $i655);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    goto $bb436;

  $bb425:
    assume $i639 == 1;
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    goto $bb437;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb414:
    assume $i622 == 1;
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p616, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $p624 := $load.ref($M.0, $p623);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i625 := $p2i.ref.i64($p624);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i626 := $p2i.ref.i64($p0);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i627 := $eq.i64($i625, $i626);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    assume {:branchcond $i627} true;
    goto $bb417, $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    assume !($i627 == 1);
    goto $bb416;

  $bb417:
    assume $i627 == 1;
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $p628 := $add.ref($add.ref($p616, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $i629 := $load.i32($M.0, $p628);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    $i630 := $ne.i32($i629, 0);
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} comedi_device_detach($p616);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    goto $bb419;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb420:
    assume $i630 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p616, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p632 := $load.ref($M.0, $p631);
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p616, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i634 := $load.i32($M.0, $p633);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} dev_warn.ref.ref.i32($p632, .str.22, $i634);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb411:
    assume $i618 == 1;
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb423;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb400:
    assume $i601 == 1;
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p595, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.0, $p602);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i604 := $p2i.ref.i64($p603);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i605 := $p2i.ref.i64($p0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i606 := $eq.i64($i604, $i605);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i606} true;
    goto $bb403, $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    assume !($i606 == 1);
    goto $bb402;

  $bb403:
    assume $i606 == 1;
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p595, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i608 := $load.i32($M.0, $p607);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i609 := $ne.i32($i608, 0);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i609} true;
    goto $bb406, $bb407;

  $bb407:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} comedi_device_detach($p595);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    goto $bb405;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb406:
    assume $i609 == 1;
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $p610 := $add.ref($add.ref($p595, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p611 := $load.ref($M.0, $p610);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $p612 := $add.ref($add.ref($p595, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i613 := $load.i32($M.0, $p612);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} dev_warn.ref.ref.i32($p611, .str.22, $i613);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto $bb408;

  $bb397:
    assume $i597 == 1;
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    goto $bb409;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb386:
    assume $i580 == 1;
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p581 := $add.ref($add.ref($p574, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.0, $p581);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i583 := $p2i.ref.i64($p582);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $i584 := $p2i.ref.i64($p0);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i585 := $eq.i64($i583, $i584);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb389, $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    assume !($i585 == 1);
    goto $bb388;

  $bb389:
    assume $i585 == 1;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p586 := $add.ref($add.ref($p574, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i587 := $load.i32($M.0, $p586);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i588 := $ne.i32($i587, 0);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb392, $bb393;

  $bb393:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} comedi_device_detach($p574);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    goto $bb391;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb392:
    assume $i588 == 1;
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p574, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $p590 := $load.ref($M.0, $p589);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p574, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $i592 := $load.i32($M.0, $p591);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} dev_warn.ref.ref.i32($p590, .str.22, $i592);
    goto corral_source_split_3997;

  corral_source_split_3997:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb383:
    assume $i576 == 1;
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    goto $bb395;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb372:
    assume $i559 == 1;
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $p560 := $add.ref($add.ref($p553, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.0, $p560);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i562 := $p2i.ref.i64($p561);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i563 := $p2i.ref.i64($p0);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i564 := $eq.i64($i562, $i563);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i564} true;
    goto $bb375, $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    assume !($i564 == 1);
    goto $bb374;

  $bb375:
    assume $i564 == 1;
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p565 := $add.ref($add.ref($p553, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i566 := $load.i32($M.0, $p565);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i567 := $ne.i32($i566, 0);
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i567} true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} comedi_device_detach($p553);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    goto $bb377;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb378:
    assume $i567 == 1;
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p553, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p569 := $load.ref($M.0, $p568);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $p570 := $add.ref($add.ref($p553, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i571 := $load.i32($M.0, $p570);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} dev_warn.ref.ref.i32($p569, .str.22, $i571);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb369:
    assume $i555 == 1;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    goto $bb381;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb358:
    assume $i538 == 1;
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    $p539 := $add.ref($add.ref($p532, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.0, $p539);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i541 := $p2i.ref.i64($p540);
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i542 := $p2i.ref.i64($p0);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i543 := $eq.i64($i541, $i542);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i543} true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i543 == 1);
    goto $bb360;

  $bb361:
    assume $i543 == 1;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p544 := $add.ref($add.ref($p532, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i545 := $load.i32($M.0, $p544);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $i546 := $ne.i32($i545, 0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb364, $bb365;

  $bb365:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} comedi_device_detach($p532);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    goto $bb363;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb364:
    assume $i546 == 1;
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p532, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p532, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i550 := $load.i32($M.0, $p549);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} dev_warn.ref.ref.i32($p548, .str.22, $i550);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb355:
    assume $i534 == 1;
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    goto $bb367;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb344:
    assume $i517 == 1;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p511, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.0, $p518);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i520 := $p2i.ref.i64($p519);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i521 := $p2i.ref.i64($p0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i522 := $eq.i64($i520, $i521);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i522} true;
    goto $bb347, $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    assume !($i522 == 1);
    goto $bb346;

  $bb347:
    assume $i522 == 1;
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p511, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i524 := $load.i32($M.0, $p523);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $i525 := $ne.i32($i524, 0);
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    assume {:branchcond $i525} true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} comedi_device_detach($p511);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    goto $bb349;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb350:
    assume $i525 == 1;
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $p526 := $add.ref($add.ref($p511, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p527 := $load.ref($M.0, $p526);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $p528 := $add.ref($add.ref($p511, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i529 := $load.i32($M.0, $p528);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} dev_warn.ref.ref.i32($p527, .str.22, $i529);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb341:
    assume $i513 == 1;
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    goto $bb353;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb330:
    assume $i496 == 1;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p497 := $add.ref($add.ref($p490, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.0, $p497);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $i500 := $p2i.ref.i64($p0);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i501 := $eq.i64($i499, $i500);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i501} true;
    goto $bb333, $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    assume !($i501 == 1);
    goto $bb332;

  $bb333:
    assume $i501 == 1;
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p490, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i503 := $load.i32($M.0, $p502);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i504 := $ne.i32($i503, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb336, $bb337;

  $bb337:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} comedi_device_detach($p490);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    goto $bb335;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb336:
    assume $i504 == 1;
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p490, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p506 := $load.ref($M.0, $p505);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p490, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $i508 := $load.i32($M.0, $p507);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 559} dev_warn.ref.ref.i32($p506, .str.22, $i508);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb327:
    assume $i492 == 1;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    goto $bb339;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb316:
    assume $i475 == 1;
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p469, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.0, $p476);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i478 := $p2i.ref.i64($p477);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $i479 := $p2i.ref.i64($p0);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i480 := $eq.i64($i478, $i479);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i480} true;
    goto $bb319, $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    assume !($i480 == 1);
    goto $bb318;

  $bb319:
    assume $i480 == 1;
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p469, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $i482 := $load.i32($M.0, $p481);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i483 := $ne.i32($i482, 0);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} comedi_device_detach($p469);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    goto $bb321;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb322:
    assume $i483 == 1;
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p484 := $add.ref($add.ref($p469, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p485 := $load.ref($M.0, $p484);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $p486 := $add.ref($add.ref($p469, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i487 := $load.i32($M.0, $p486);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} dev_warn.ref.ref.i32($p485, .str.22, $i487);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb313:
    assume $i471 == 1;
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    goto $bb325;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb302:
    assume $i454 == 1;
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p448, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.0, $p455);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i457 := $p2i.ref.i64($p456);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i458 := $p2i.ref.i64($p0);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i459 := $eq.i64($i457, $i458);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    assume {:branchcond $i459} true;
    goto $bb305, $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    assume !($i459 == 1);
    goto $bb304;

  $bb305:
    assume $i459 == 1;
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p448, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i461 := $load.i32($M.0, $p460);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $i462 := $ne.i32($i461, 0);
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} comedi_device_detach($p448);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    goto $bb307;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb308:
    assume $i462 == 1;
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p448, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p464 := $load.ref($M.0, $p463);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p448, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i466 := $load.i32($M.0, $p465);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} dev_warn.ref.ref.i32($p464, .str.22, $i466);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb299:
    assume $i450 == 1;
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    goto $bb311;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb288:
    assume $i433 == 1;
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p427, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.0, $p434);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i436 := $p2i.ref.i64($p435);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i437 := $p2i.ref.i64($p0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i438 := $eq.i64($i436, $i437);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i438} true;
    goto $bb291, $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    assume !($i438 == 1);
    goto $bb290;

  $bb291:
    assume $i438 == 1;
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p439 := $add.ref($add.ref($p427, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $i440 := $load.i32($M.0, $p439);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i441 := $ne.i32($i440, 0);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb294, $bb295;

  $bb295:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} comedi_device_detach($p427);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    goto $bb293;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb294:
    assume $i441 == 1;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p427, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p443 := $load.ref($M.0, $p442);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $p444 := $add.ref($add.ref($p427, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i445 := $load.i32($M.0, $p444);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} dev_warn.ref.ref.i32($p443, .str.22, $i445);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    goto $bb296;

  $bb285:
    assume $i429 == 1;
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    goto $bb297;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb274:
    assume $i412 == 1;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p406, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i415 := $p2i.ref.i64($p414);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $i416 := $p2i.ref.i64($p0);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i417 := $eq.i64($i415, $i416);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i417} true;
    goto $bb277, $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    assume !($i417 == 1);
    goto $bb276;

  $bb277:
    assume $i417 == 1;
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p406, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i419 := $load.i32($M.0, $p418);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i420 := $ne.i32($i419, 0);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb280, $bb281;

  $bb281:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} comedi_device_detach($p406);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    goto $bb279;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  $bb280:
    assume $i420 == 1;
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p406, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p422 := $load.ref($M.0, $p421);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p406, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i424 := $load.i32($M.0, $p423);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} dev_warn.ref.ref.i32($p422, .str.22, $i424);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb271:
    assume $i408 == 1;
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    goto $bb283;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb260:
    assume $i391 == 1;
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p385, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.0, $p392);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p393);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i395 := $p2i.ref.i64($p0);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i396 := $eq.i64($i394, $i395);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i396} true;
    goto $bb263, $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    assume !($i396 == 1);
    goto $bb262;

  $bb263:
    assume $i396 == 1;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p385, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i398 := $load.i32($M.0, $p397);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i399 := $ne.i32($i398, 0);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} comedi_device_detach($p385);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb265;

  SeqInstr_211:
    assume !assertsPassed;
    return;

  $bb266:
    assume $i399 == 1;
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $p400 := $add.ref($add.ref($p385, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p401 := $load.ref($M.0, $p400);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p385, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i403 := $load.i32($M.0, $p402);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} dev_warn.ref.ref.i32($p401, .str.22, $i403);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb257:
    assume $i387 == 1;
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    goto $bb269;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb246:
    assume $i370 == 1;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p364, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $i373 := $p2i.ref.i64($p372);
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $i374 := $p2i.ref.i64($p0);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i375 := $eq.i64($i373, $i374);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb249, $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    assume !($i375 == 1);
    goto $bb248;

  $bb249:
    assume $i375 == 1;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p364, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.0, $p376);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i378 := $ne.i32($i377, 0);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} comedi_device_detach($p364);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    goto $bb251;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb252:
    assume $i378 == 1;
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($add.ref($p364, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p380 := $load.ref($M.0, $p379);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $p381 := $add.ref($add.ref($p364, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i382 := $load.i32($M.0, $p381);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} dev_warn.ref.ref.i32($p380, .str.22, $i382);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb243:
    assume $i366 == 1;
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    goto $bb255;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb232:
    assume $i349 == 1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p343, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.0, $p350);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p351);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i353 := $p2i.ref.i64($p0);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $i354 := $eq.i64($i352, $i353);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i354} true;
    goto $bb235, $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    assume !($i354 == 1);
    goto $bb234;

  $bb235:
    assume $i354 == 1;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p343, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i356 := $load.i32($M.0, $p355);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i357 := $ne.i32($i356, 0);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} comedi_device_detach($p343);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    goto $bb237;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb238:
    assume $i357 == 1;
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p343, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $p359 := $load.ref($M.0, $p358);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p343, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i361 := $load.i32($M.0, $p360);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} dev_warn.ref.ref.i32($p359, .str.22, $i361);
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb229:
    assume $i345 == 1;
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    goto $bb241;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb218:
    assume $i328 == 1;
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p322, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.0, $p329);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p330);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i332 := $p2i.ref.i64($p0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i333 := $eq.i64($i331, $i332);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i333} true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i333 == 1);
    goto $bb220;

  $bb221:
    assume $i333 == 1;
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($p322, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.0, $p334);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    $i336 := $ne.i32($i335, 0);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} comedi_device_detach($p322);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    goto $bb223;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  $bb224:
    assume $i336 == 1;
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $p337 := $add.ref($add.ref($p322, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p338 := $load.ref($M.0, $p337);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p322, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $i340 := $load.i32($M.0, $p339);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} dev_warn.ref.ref.i32($p338, .str.22, $i340);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb215:
    assume $i324 == 1;
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb204:
    assume $i307 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p301, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p309 := $load.ref($M.0, $p308);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    $i310 := $p2i.ref.i64($p309);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $i311 := $p2i.ref.i64($p0);
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    $i312 := $eq.i64($i310, $i311);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb207, $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    assume !($i312 == 1);
    goto $bb206;

  $bb207:
    assume $i312 == 1;
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p301, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i315 := $ne.i32($i314, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} comedi_device_detach($p301);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    goto $bb209;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb210:
    assume $i315 == 1;
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p301, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p317 := $load.ref($M.0, $p316);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p301, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i319 := $load.i32($M.0, $p318);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} dev_warn.ref.ref.i32($p317, .str.22, $i319);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb201:
    assume $i303 == 1;
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    goto $bb213;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb190:
    assume $i286 == 1;
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p280, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p288);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i290 := $p2i.ref.i64($p0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $i291 := $eq.i64($i289, $i290);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i291} true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i291 == 1);
    goto $bb192;

  $bb193:
    assume $i291 == 1;
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p280, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.0, $p292);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i294 := $ne.i32($i293, 0);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} comedi_device_detach($p280);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    goto $bb195;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb196:
    assume $i294 == 1;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p280, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p280, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $i298 := $load.i32($M.0, $p297);
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} dev_warn.ref.ref.i32($p296, .str.22, $i298);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb187:
    assume $i282 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    goto $bb199;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb176:
    assume $i265 == 1;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.0, $p266);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p267);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $i269 := $p2i.ref.i64($p0);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i270 := $eq.i64($i268, $i269);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i270} true;
    goto $bb179, $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    assume !($i270 == 1);
    goto $bb178;

  $bb179:
    assume $i270 == 1;
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i272 := $load.i32($M.0, $p271);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} comedi_device_detach($p259);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    goto $bb181;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb182:
    assume $i273 == 1;
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i277 := $load.i32($M.0, $p276);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} dev_warn.ref.ref.i32($p275, .str.22, $i277);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb173:
    assume $i261 == 1;
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    goto $bb185;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb162:
    assume $i244 == 1;
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p238, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.0, $p245);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i248 := $p2i.ref.i64($p0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i249 := $eq.i64($i247, $i248);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb164;

  $bb165:
    assume $i249 == 1;
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p238, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.0, $p250);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} comedi_device_detach($p238);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    goto $bb167;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb168:
    assume $i252 == 1;
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p238, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p238, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.0, $p255);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} dev_warn.ref.ref.i32($p254, .str.22, $i256);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb159:
    assume $i240 == 1;
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    goto $bb171;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb148:
    assume $i223 == 1;
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p217, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.0, $p224);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p225);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i227 := $p2i.ref.i64($p0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i228 := $eq.i64($i226, $i227);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb151, $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    assume !($i228 == 1);
    goto $bb150;

  $bb151:
    assume $i228 == 1;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p217, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i230 := $load.i32($M.0, $p229);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i231 := $ne.i32($i230, 0);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} comedi_device_detach($p217);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    goto $bb153;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb154:
    assume $i231 == 1;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p217, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p217, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.0, $p234);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} dev_warn.ref.ref.i32($p233, .str.22, $i235);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb145:
    assume $i219 == 1;
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    goto $bb157;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i202 == 1;
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p196, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $i207 := $eq.i64($i205, $i206);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    assume {:branchcond $i207} true;
    goto $bb137, $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    assume !($i207 == 1);
    goto $bb136;

  $bb137:
    assume $i207 == 1;
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p196, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.0, $p208);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} comedi_device_detach($p196);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    goto $bb139;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  $bb140:
    assume $i210 == 1;
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p196, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p196, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} dev_warn.ref.ref.i32($p212, .str.22, $i214);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb131:
    assume $i198 == 1;
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    goto $bb143;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb120:
    assume $i181 == 1;
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p175, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.0, $p182);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i185 := $p2i.ref.i64($p0);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i186 := $eq.i64($i184, $i185);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i186 == 1);
    goto $bb122;

  $bb123:
    assume $i186 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p175, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i188 := $load.i32($M.0, $p187);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i189 := $ne.i32($i188, 0);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} comedi_device_detach($p175);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i189 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p175, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p175, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} dev_warn.ref.ref.i32($p191, .str.22, $i193);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb117:
    assume $i177 == 1;
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i160 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p154, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p0);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i165 := $eq.i64($i163, $i164);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb109, $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    assume !($i165 == 1);
    goto $bb108;

  $bb109:
    assume $i165 == 1;
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p154, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} comedi_device_detach($p154);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    goto $bb111;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i168 == 1;
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p154, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p154, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i172 := $load.i32($M.0, $p171);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} dev_warn.ref.ref.i32($p170, .str.22, $i172);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb103:
    assume $i156 == 1;
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i139 == 1;
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p133, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.0, $p140);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i143 := $p2i.ref.i64($p0);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i144 := $eq.i64($i142, $i143);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i144 == 1);
    goto $bb94;

  $bb95:
    assume $i144 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p133, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i147 := $ne.i32($i146, 0);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} comedi_device_detach($p133);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    goto $bb97;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb98:
    assume $i147 == 1;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p133, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p149 := $load.ref($M.0, $p148);
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p133, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} dev_warn.ref.ref.i32($p149, .str.22, $i151);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb89:
    assume $i135 == 1;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb78:
    assume $i118 == 1;
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p112, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i122 := $p2i.ref.i64($p0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i123 := $eq.i64($i121, $i122);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i123 == 1);
    goto $bb80;

  $bb81:
    assume $i123 == 1;
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p112, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i126 := $ne.i32($i125, 0);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} comedi_device_detach($p112);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb84:
    assume $i126 == 1;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p112, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p112, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} dev_warn.ref.ref.i32($p128, .str.22, $i130);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb75:
    assume $i114 == 1;
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i97 == 1;
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p91, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i101 := $p2i.ref.i64($p0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i102 := $eq.i64($i100, $i101);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb66;

  $bb67:
    assume $i102 == 1;
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p91, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} comedi_device_detach($p91);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb70:
    assume $i105 == 1;
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p91, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p91, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i109 := $load.i32($M.0, $p108);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} dev_warn.ref.ref.i32($p107, .str.22, $i109);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb61:
    assume $i93 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb50:
    assume $i76 == 1;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p70, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p0);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i79, $i80);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume !($i81 == 1);
    goto $bb52;

  $bb53:
    assume $i81 == 1;
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p70, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p82);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} comedi_device_detach($p70);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i84 == 1;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p70, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p70, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} dev_warn.ref.ref.i32($p86, .str.22, $i88);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb47:
    assume $i72 == 1;
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    goto $bb59;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i55 == 1;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p49, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i58, $i59);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb38;

  $bb39:
    assume $i60 == 1;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p49, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} comedi_device_detach($p49);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    goto $bb41;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i63 == 1;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p49, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p49, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} dev_warn.ref.ref.i32($p65, .str.22, $i67);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb33:
    assume $i51 == 1;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    goto $bb45;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i34 == 1;
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p28, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i37, $i38);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb24;

  $bb25:
    assume $i39 == 1;
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p28, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} comedi_device_detach($p28);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i42 == 1;
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p28, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p28, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} dev_warn.ref.ref.i32($p44, .str.22, $i46);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb18:
    assume $i30 == 1;
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $p12 := $p7;
    goto $bb7;

  $bb7:
    call $p13, $p14, $i15, $i16, $i17, $p18, $p22, $p23, $p24, $p25, $i26, $i27, $p12 := comedi_driver_unregister_loop_$bb7($p0, $p13, $p14, $i15, $i16, $i17, $p18, $p22, $p23, $p24, $p25, $i26, $i27, $p12);
    goto $bb7_last;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p18 := $p12;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb13:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p12 := $p23;
    goto $bb13_dummy;

  $bb9:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p20);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $M.28 := $p6;
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;
}



const comedi_buf_write_alloc: ref;

axiom comedi_buf_write_alloc == $sub.ref(0, 424012);

procedure comedi_buf_write_alloc($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_write_alloc($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} {:cexpr "comedi_buf_write_alloc:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $i4 := comedi_buf_write_n_available($p0);
    call {:si_unique_call 713} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i1, $i4);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i6);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    call {:si_unique_call 714} devirtbounce.5(0);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const comedi_buf_write_n_available: ref;

axiom comedi_buf_write_n_available == $sub.ref(0, 425044);

procedure comedi_buf_write_n_available($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_write_n_available($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i4, $i6);
    call {:si_unique_call 715} {:cexpr "free_end"} boogie_si_record_i32($i7);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32($i7, $i9);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const comedi_buf_write_free: ref;

axiom comedi_buf_write_free == $sub.ref(0, 426076);

procedure comedi_buf_write_free($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_write_free($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var vslice_dummy_var_83: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} {:cexpr "comedi_buf_write_free:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $i4 := comedi_buf_write_n_allocated($p0);
    call {:si_unique_call 718} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i1, $i4);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(28, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i6);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(28, 1));
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i6);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(28, 1));
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32($i16, $i18);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} vslice_dummy_var_83 := comedi_buf_munge($p0, $i19);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i25 := $uge.i32($i22, $i24);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $i30 := $urem.i32($i27, $i29);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const comedi_buf_write_n_allocated: ref;

axiom comedi_buf_write_n_allocated == $sub.ref(0, 427108);

procedure comedi_buf_write_n_allocated($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_write_n_allocated($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(32, 1));
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(28, 1));
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i4, $i6);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const comedi_buf_munge: ref;

axiom comedi_buf_munge == $sub.ref(0, 428140);

procedure comedi_buf_munge($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_munge($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i1;
  var $i23: i32;
  var $i72: i32;
  var $i22: i32;
  var $i18: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "comedi_buf_munge:arg:num_bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i4 := comedi_bytes_per_sample($p0);
    call {:si_unique_call 722} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 128);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i19 := $urem.i32($i1, $i4);
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i1, $i19);
    call {:si_unique_call 724} {:cexpr "num_bytes"} boogie_si_record_i32($i20);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32(0, $i20);
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i22 := 0;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i18 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb10;

  $bb10:
    call $i24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i23, $i72 := comedi_buf_munge_loop_$bb10($p0, $p3, $i4, $i20, $i24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $p36, $p37, $p38, $i39, $i40, $p41, $p42, $i43, $p44, $i45, $i46, $i47, $p48, $p49, $i50, $p52, $i53, $i54, $p55, $p56, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p64, $i65, $p66, $i67, $i68, $p69, $i70, $i71, $i23, $i72);
    goto $bb10_last;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, $i23);
    call {:si_unique_call 725} {:cexpr "block_size"} boogie_si_record_i32($i24);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32($i26, $i28);
    call {:si_unique_call 726} {:cexpr "buf_end"} boogie_si_record_i32($i29);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $i30 := $ugt.i32($i24, $i29);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $i24;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i40 := $zext.i32.i64($i39);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p37, $mul.ref($i40, 1));
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    call {:si_unique_call 727} devirtbounce.12($p33, $p35, $p0, $p41, $i31, $i43);
    call {:si_unique_call 728} devirtbounce.5(0);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $i46 := $udiv.i32($i31, $i4);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i45, $i46);
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(56, 1));
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i54 := $urem.i32($i50, $i53);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $i58 := $add.i32($i57, $i31);
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $i58);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i61, $i31);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i68 := $urem.i32($i65, $i67);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i23, $i31);
    call {:si_unique_call 729} {:cexpr "count"} boogie_si_record_i32($i70);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i71 := $ult.i32($i70, $i20);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $i72 := $i70;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $i22 := $i72;
    goto $bb9;

  $bb15:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $i23 := $i70;
    goto $bb15_dummy;

  $bb12:
    assume $i30 == 1;
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i31 := $i29;
    goto $bb14;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i15, $i1);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    call {:si_unique_call 723} {:cexpr "comedi_buf_munge:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i18 := $i1;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb15_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4884;
}



const comedi_buf_read_alloc: ref;

axiom comedi_buf_read_alloc == $sub.ref(0, 429172);

procedure comedi_buf_read_alloc($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_read_alloc($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "comedi_buf_read_alloc:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i5, $i7);
    call {:si_unique_call 731} {:cexpr "available"} boogie_si_record_i32($i8);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i1, $i8);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i10);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    call {:si_unique_call 732} devirtbounce.5(0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const comedi_buf_read_free: ref;

axiom comedi_buf_read_free == $sub.ref(0, 430204);

procedure comedi_buf_read_free($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_read_free($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} {:cexpr "comedi_buf_read_free:arg:nbytes"} boogie_si_record_i32($i1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    call {:si_unique_call 734} devirtbounce.5(0);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 735} $i4 := comedi_buf_read_n_allocated($p3);
    call {:si_unique_call 736} {:cexpr "allocated"} boogie_si_record_i32($i4);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i1, $i4);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i6);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i6);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i19 := $urem.i32($i16, $i18);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const comedi_buf_read_n_allocated: ref;

axiom comedi_buf_read_n_allocated == $sub.ref(0, 431236);

procedure comedi_buf_read_n_allocated($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_read_n_allocated($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(40, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const comedi_buf_write_samples: ref;

axiom comedi_buf_write_samples == $sub.ref(0, 432268);

procedure comedi_buf_write_samples($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_write_samples($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i21: i32;
  var $i22: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i20: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "comedi_buf_write_samples:arg:nsamples"} boogie_si_record_i32($i2);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i3 := comedi_buf_write_n_available($p0);
    call {:si_unique_call 739} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} $i4 := comedi_bytes_to_samples($p0, $i3);
    call {:si_unique_call 741} {:cexpr "max_samples"} boogie_si_record_i32($i4);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, $i4);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $i21 := comedi_samples_to_bytes($p0, $i18);
    call {:si_unique_call 744} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $i22 := comedi_buf_write_alloc($p0, $i21);
    call {:si_unique_call 746} {:cexpr "nbytes"} boogie_si_record_i32($i22);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} comedi_buf_memcpy_to($p0, $p1, $i22);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} vslice_dummy_var_84 := comedi_buf_write_free($p0, $i22);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} comedi_inc_scan_progress($p0, $i22);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i27, 4);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i28);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i20 := $i22;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} dev_warn.ref.ref($p9, .str.23);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 32);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i14);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i18 := $i4;
    goto $bb3;
}



const comedi_buf_memcpy_to: ref;

axiom comedi_buf_memcpy_to == $sub.ref(0, 433300);

procedure comedi_buf_memcpy_to($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_memcpy_to($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} {:cexpr "comedi_buf_memcpy_to:arg:num_bytes"} boogie_si_record_i32($i2);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 751} {:cexpr "write_ptr"} boogie_si_record_i32($i6);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p1, $i2, $i6;
    goto $bb4;

  $bb4:
    call $i11, $p12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $p22, $i23, $i24, $p25, $i26, $i27, $p8, $i9, $i10, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6 := comedi_buf_memcpy_to_loop_$bb4($p4, $i11, $p12, $i13, $i14, $p15, $i16, $i17, $i18, $p19, $p20, $i21, $p22, $i23, $i24, $p25, $i26, $i27, $p8, $i9, $i10, cmdloc_dummy_var_4, cmdloc_dummy_var_5, cmdloc_dummy_var_6);
    goto $bb4_last;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i10, $i9);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    $i14 := $ugt.i32($i11, $i13);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5063;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    $i21 := $zext.i32.i64($i10);
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i18);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_4 := $M.0;
    cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 753} cmdloc_dummy_var_6 := $memcpy.i8(cmdloc_dummy_var_4, cmdloc_dummy_var_5, $p22, $p8, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_6;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i18);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p8, $mul.ref($i24, 1));
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i9, $i18);
    call {:si_unique_call 754} {:cexpr "num_bytes"} boogie_si_record_i32($i26);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p25, $i26, 0;
    goto $bb9_dummy;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, $i10);
    call {:si_unique_call 752} {:cexpr "block_size"} boogie_si_record_i32($i17);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5049;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 434332);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const comedi_buf_read_samples: ref;

axiom comedi_buf_read_samples == $sub.ref(0, 435364);

procedure comedi_buf_read_samples($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_read_samples($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i8: i32;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} {:cexpr "comedi_buf_read_samples:arg:nsamples"} boogie_si_record_i32($i2);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i3 := comedi_buf_read_n_available($p0);
    call {:si_unique_call 757} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i4 := comedi_bytes_to_samples($p0, $i3);
    call {:si_unique_call 759} {:cexpr "max_samples"} boogie_si_record_i32($i4);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, $i4);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $i2;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i9 := comedi_samples_to_bytes($p0, $i6);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i10 := comedi_buf_read_alloc($p0, $i9);
    call {:si_unique_call 763} {:cexpr "nbytes"} boogie_si_record_i32($i10);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} comedi_buf_memcpy_from($p0, $p1, $i10);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} vslice_dummy_var_85 := comedi_buf_read_free($p0, $i10);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} comedi_inc_scan_progress($p0, $i10);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 4);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 264)), $mul.ref(76, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i16);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i8 := $i10;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const comedi_buf_memcpy_from: ref;

axiom comedi_buf_memcpy_from == $sub.ref(0, 436396);

procedure comedi_buf_memcpy_from($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_buf_memcpy_from($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i64;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} {:cexpr "comedi_buf_memcpy_from:arg:nbytes"} boogie_si_record_i32($i2);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 768} {:cexpr "read_ptr"} boogie_si_record_i32($i6);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i2, 0);
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p1, $i2, $i6;
    goto $bb4;

  $bb4:
    call $p11, $p12, $i13, $p14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p8, $i9, $i10, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9 := comedi_buf_memcpy_from_loop_$bb4($p4, $p11, $p12, $i13, $p14, $p15, $i16, $i17, $i18, $p19, $i20, $i21, $i22, $i23, $i24, $i25, $p26, $i27, $p8, $i9, $i10, cmdloc_dummy_var_7, cmdloc_dummy_var_8, cmdloc_dummy_var_9);
    goto $bb4_last;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i13 := $zext.i32.i64($i10);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i16, $i10);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i18 := $ule.i32($i17, $i9);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $i23 := $zext.i32.i64($i22);
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_7 := $M.0;
    cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 770} cmdloc_dummy_var_9 := $memcpy.i8(cmdloc_dummy_var_7, cmdloc_dummy_var_8, $p8, $p14, $i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_9;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i9, $i22);
    call {:si_unique_call 771} {:cexpr "nbytes"} boogie_si_record_i32($i24);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i22);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p8, $mul.ref($i25, 1));
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i24, 0);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p8, $i9, $i10 := $p26, $i24, 0;
    goto $bb9_dummy;

  $bb6:
    assume $i18 == 1;
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, $i10);
    call {:si_unique_call 769} {:cexpr "block_size"} boogie_si_record_i32($i21);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;
}



const comedi_vm_open: ref;

axiom comedi_vm_open == $sub.ref(0, 437428);

procedure comedi_vm_open($p0: ref);
  free requires assertsPassed;



implementation comedi_vm_open($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} comedi_buf_map_get($p3);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    return;
}



const comedi_vm_close: ref;

axiom comedi_vm_close == $sub.ref(0, 438460);

procedure comedi_vm_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation comedi_vm_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} vslice_dummy_var_86 := comedi_buf_map_put($p3);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const comedi_buf_map_get: ref;

axiom comedi_buf_map_get == $sub.ref(0, 439492);

procedure comedi_buf_map_get($p0: ref);
  free requires assertsPassed;



implementation comedi_buf_map_get($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} kref_get___0($p3);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const kref_get___0: ref;

axiom kref_get___0 == $sub.ref(0, 440524);

procedure kref_get___0($p0: ref);
  free requires assertsPassed;



implementation kref_get___0($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_87: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 776} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 777} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 779} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} vslice_dummy_var_87 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 780} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 782} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 785} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} warn_slowpath_null(.str.24, 47);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const noop_llseek: ref;

axiom noop_llseek == $sub.ref(0, 441556);

procedure noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation noop_llseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 787} {:cexpr "noop_llseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 788} {:cexpr "noop_llseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 1} true;
    call {:si_unique_call 789} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 790} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const comedi_read: ref;

axiom comedi_read == $sub.ref(0, 442588);

procedure comedi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.29, $M.41, $M.42, $M.0, $CurrAddr;



implementation comedi_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $p66: ref;
  var $i67: i64;
  var $i68: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $p74: ref;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i100: i32;
  var $i101: i1;
  var $i102: i8;
  var $i103: i1;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $i107: i1;
  var $i108: i8;
  var $i109: i1;
  var $i110: i32;
  var $p114: ref;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $i129: i64;
  var $i130: i1;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i99: i32;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i64;
  var $p141: ref;
  var $i142: i64;
  var $i143: i64;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i32;
  var $i151: i32;
  var $i152: i1;
  var $i111: i32;
  var $i112: i32;
  var $i113: i8;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i64;
  var $p158: ref;
  var $i159: i64;
  var $i160: i1;
  var $i161: i1;
  var $i162: i8;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i1;
  var $p170: ref;
  var $i171: i32;
  var $i172: i1;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $i179: i64;
  var $i180: i1;
  var $i181: i1;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i185: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i186: i1;
  var $p187: ref;
  var $i188: i1;
  var $i189: i32;
  var $i190: i64;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 792} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 795} {:cexpr "comedi_read:arg:nbytes"} boogie_si_record_i64($i2);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $p8 := get_current();
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p9, 0);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p11, $p8);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p12, default_wake_function);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p14, $0.ref);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p16, $0.ref);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 797} down_read($p22);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 798} {:cexpr "old_detach_count"} boogie_si_record_i32($i24);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p28, .str.5);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p29, .str.40);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p30, .str.4);
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p31, .str.39);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.39, $p33);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 2464);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p33, $i36);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p37, 1);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.40, $p38);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 800} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := 0, $sub.i32(0, 19), 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i186 := $trunc.i8.i1($i48);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i46, 0);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    assume {:branchcond $i188} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i188 == 1);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i189 := $i47;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i190 := $sext.i32.i64($i189);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $r := $i190;
    return;

  $bb101:
    assume $i188 == 1;
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i189 := $i46;
    goto $bb103;

  $bb98:
    assume $i186 == 1;
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} up_read($p187);
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb3:
    assume $i43 == 1;
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} __dynamic_dev_dbg.ref.ref.ref($p5, $p45, .str.39);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p49 := comedi_file_read_subdevice($p0);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i51 == 1);
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p53);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i61 == 1);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $i62 := $eq.i64($i2, 0);
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p0);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i65, $i67);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 64);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} add_wait_queue($p74, $p4);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i2, 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := 0, 0, 0;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} remove_wait_queue($p153, $p4);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $p154 := get_current();
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p154, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p155, 0);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p7, 0);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} $p156 := get_current();
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $i157 := $load.i64($M.42, $p7);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p156, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 820} $i159 := devirtbounce.13(0, $p158, $i157, $p158);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $M.42 := $store.i64($M.42, $p7, $i159);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i8.i1($i113);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i160} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i160 == 1);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i161 := comedi_is_subdevice_idle($p49);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i162 := $zext.i1.i8($i161);
    call {:si_unique_call 833} {:cexpr "tmp___20"} boogie_si_record_i8($i162);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i162);
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i185 := 1;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := $i111, $i112, $i185;
    goto $bb6;

  $bb78:
    assume $i163 == 1;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} up_read($p164);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} mutex_lock_nested($p165, 0);
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $p166 := comedi_file_read_subdevice($p0);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.0, $p167);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i8.i1($i168);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb80, $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    assume !($i169 == 1);
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} mutex_unlock($p184);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i185 := 0;
    goto $bb96;

  $bb80:
    assume $i169 == 1;
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, $i24);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb83, $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    assume !($i172 == 1);
    goto $bb82;

  $bb83:
    assume $i172 == 1;
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i173 := $p2i.ref.i64($p49);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    $i174 := $p2i.ref.i64($p166);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i175 := $eq.i64($i173, $i174);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i175 == 1);
    goto $bb82;

  $bb85:
    assume $i175 == 1;
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p166, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p177 := $load.ref($M.0, $p176);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i178 := $p2i.ref.i64($p177);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i179 := $p2i.ref.i64($p57);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i180 := $eq.i64($i178, $i179);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb82;

  $bb87:
    assume $i180 == 1;
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i8.i1($i113);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i181 == 1);
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $i182 := comedi_buf_n_bytes_ready($p49);
    call {:si_unique_call 839} {:cexpr "tmp___19"} boogie_si_record_i32($i182);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 0);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb92:
    assume $i183 == 1;
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} do_become_nonbusy($p21, $p49);
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb89:
    assume $i181 == 1;
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} do_become_nonbusy($p21, $p49);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb75:
    assume $i160 == 1;
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb26:
    assume $i75 == 1;
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $p76, $p77, $p78, $i79, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p114, $i115, $i116, $i117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $p126, $i127, $p128, $i129, $i130, $p132, $i133, $i134, $i135, $i99, $i152 := comedi_read_loop_$bb29($p0, $i2, $p6, $p49, $p57, $i75, $p76, $p77, $p78, $i79, $p80, $i81, $i82, $i83, $p84, $i85, $i86, $p87, $i88, $i89, $p90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $p114, $i115, $i116, $i117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $p126, $i127, $p128, $i129, $i130, $p132, $i133, $i134, $i135, $i99, $i152);
    goto $bb29_last;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i152 == 1);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb71:
    assume $i152 == 1;
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $p76 := get_current();
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p77, 0);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p6, 1);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} $p78 := get_current();
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.41, $p6);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p78, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 806} $i81 := devirtbounce.13(0, $p80, $i79, $p80);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, $p6, $i81);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i64.i32($i2);
    call {:si_unique_call 807} {:cexpr "n"} boogie_si_record_i32($i82);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i83 := comedi_buf_read_n_available($p49);
    call {:si_unique_call 809} {:cexpr "tmp___6"} boogie_si_record_i32($i83);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $i86 := $add.i32($i85, $i83);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i89 := $ugt.i32($i86, $i88);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    $i95 := $i83;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i96 := $slt.i32($i95, $i82);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    $i97 := $i82;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i99 := $i97;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p137 := $load.ref($M.0, $p136);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i139 := $load.i32($M.0, $p138);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i140 := $zext.i32.i64($i139);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p137, $mul.ref($i140, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i99);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i143 := copy_to_user($p1, $p141, $i142);
    call {:si_unique_call 826} {:cexpr "tmp___13"} boogie_si_record_i64($i143);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i144 := $trunc.i64.i32($i143);
    call {:si_unique_call 827} {:cexpr "m"} boogie_si_record_i32($i144);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i147, $i148 := $i99, 0;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} vslice_dummy_var_88 := comedi_buf_read_alloc($p49, $i147);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} vslice_dummy_var_89 := comedi_buf_read_free($p49, $i147);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i151 := $add.i32(0, $i147);
    call {:si_unique_call 831} {:cexpr "count"} boogie_si_record_i32($i151);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := $i151, $i148, 0;
    goto $bb48;

  $bb68:
    assume $i145 == 1;
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i146 := $sub.i32($i99, $i144);
    call {:si_unique_call 828} {:cexpr "n"} boogie_si_record_i32($i146);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i147, $i148 := $i146, $sub.i32(0, 14);
    goto $bb70;

  $bb38:
    assume $i98 == 1;
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i100 := comedi_get_subdevice_runflags($p49);
    call {:si_unique_call 812} {:cexpr "tmp___7"} boogie_si_record_i32($i100);
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i101 := comedi_is_runflags_running($i100);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i8($i101);
    call {:si_unique_call 814} {:cexpr "tmp___9"} boogie_si_record_i8($i102);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i8.i1($i102);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    $i104 := 1;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $i105 := $ne.i32($i104, 0);
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i106 := $i100;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $i115 := $load.i32($M.0, $p114);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i115, 2048);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} schedule();
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} $p118 := get_current();
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i119 := signal_pending($p118);
    call {:si_unique_call 824} {:cexpr "tmp___12"} boogie_si_record_i32($i119);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i124 := $eq.i64($i123, 0);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p49, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p126);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $p128 := $bitcast.ref.ref($p0);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    $i129 := $p2i.ref.i64($p128);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i130 := $ne.i64($i127, $i129);
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5396;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 64);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i75 == 1);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb65_dummy;

  $bb62:
    assume $i135 == 1;
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := 0, $sub.i32(0, 22), 0;
    goto $bb48;

  $bb59:
    assume $i130 == 1;
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := 0, $sub.i32(0, 13), 0;
    goto $bb48;

  $bb56:
    assume $i124 == 1;
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := 0, 0, 0;
    goto $bb48;

  $bb53:
    assume $i120 == 1;
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := 0, $sub.i32(0, 512), 0;
    goto $bb48;

  $bb50:
    assume $i117 == 1;
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := 0, $sub.i32(0, 11), 0;
    goto $bb48;

  $bb43:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} $i107 := comedi_is_runflags_in_error($i106);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i8($i107);
    call {:si_unique_call 816} {:cexpr "tmp___8"} boogie_si_record_i8($i108);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i8.i1($i108);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    assume {:branchcond $i109} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i110 := 0;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i111, $i112, $i113 := 0, $i110, 1;
    goto $bb48;

  $bb45:
    assume $i109 == 1;
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $i110 := $sub.i32(0, 32);
    goto $bb47;

  $bb40:
    assume $i103 == 1;
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i104 := 0;
    goto $bb42;

  $bb35:
    assume $i96 == 1;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i97 := $i95;
    goto $bb37;

  $bb32:
    assume $i89 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p57, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i91, $i93);
    call {:si_unique_call 810} {:cexpr "m"} boogie_si_record_i32($i94);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i95 := $i94;
    goto $bb34;

  $bb23:
    assume $i73 == 1;
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := 0, $sub.i32(0, 22), 1;
    goto $bb6;

  $bb20:
    assume $i68 == 1;
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := 0, $sub.i32(0, 13), 1;
    goto $bb6;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i62 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := 0, 0, 1;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i61 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := 0, $sub.i32(0, 5), 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb9;

  $bb65_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32(0, 0);
    goto corral_source_split_5299;
}



const comedi_write: ref;

axiom comedi_write == $sub.ref(0, 443620);

procedure comedi_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.29, $M.43, $M.0, $M.44, $CurrAddr;



implementation comedi_write($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i24;
  var $i35: i24;
  var $i36: i24;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i32;
  var $i85: i1;
  var $i86: i8;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $i93: i8;
  var $i94: i1;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i1;
  var $p103: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $i115: i32;
  var $i116: i8;
  var $i117: i8;
  var $i122: i32;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $p131: ref;
  var $i132: i32;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $i136: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i32;
  var $i142: i1;
  var $i143: i32;
  var $i144: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $i159: i64;
  var $p160: ref;
  var $i161: i64;
  var $i162: i1;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i167: i1;
  var $i145: i32;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $p173: ref;
  var $i174: i64;
  var $i175: i64;
  var $i176: i32;
  var $i177: i1;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i182: i32;
  var $i183: i1;
  var $i118: i32;
  var $i119: i32;
  var $i120: i8;
  var $i121: i8;
  var $i46: i32;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i8;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i64;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $p193: ref;
  var $i194: i1;
  var $i195: i32;
  var $i196: i64;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 847} {:cexpr "comedi_write:arg:nbytes"} boogie_si_record_i64($i2);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p8 := get_current();
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p9, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p11, $p8);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.32 := $store.ref($M.32, $p12, default_wake_function);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.33 := $store.ref($M.33, $p14, $0.ref);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $M.34 := $store.ref($M.34, $p16, $0.ref);
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} down_read($p22);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    call {:si_unique_call 850} {:cexpr "old_detach_count"} boogie_si_record_i32($i24);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p28, .str.5);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p29, .str.38);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p30, .str.4);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p31, .str.39);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i34 := $load.i24($M.39, $p33);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i35 := $and.i24($i34, $sub.i24(0, 262144));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i36 := $or.i24($i35, 2317);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p33, $i36);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p37, 1);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.40, $p38);
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i64($i39);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 1);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 852} {:cexpr "tmp___0"} boogie_si_record_i64($i42);
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i46, $i47, $p48, $i49, $i50 := $sub.i32(0, 19), 0, $u0, 0, 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i184 := $trunc.i8.i1($i49);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i184} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i184 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} $p186 := get_current();
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p187, 0);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p7, 0);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $p188 := get_current();
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i189 := $load.i64($M.44, $p7);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p188, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 891} $i191 := devirtbounce.13(0, $p190, $i189, $p190);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.44 := $store.i64($M.44, $p7, $i191);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i192 := $trunc.i8.i1($i50);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i194 := $ne.i32($i47, 0);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i194 == 1);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i195 := $i46;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    $i196 := $sext.i32.i64($i195);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    $r := $i196;
    return;

  $bb97:
    assume $i194 == 1;
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i195 := $i47;
    goto $bb99;

  $bb94:
    assume $i192 == 1;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} up_read($p193);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb90:
    assume $i184 == 1;
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p48, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} remove_wait_queue($p185, $p4);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb3:
    assume $i43 == 1;
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} __dynamic_dev_dbg.ref.ref.ref($p5, $p45, .str.39);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $p51 := comedi_file_write_subdevice($p0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i53 == 1);
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p51, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i56 := $p2i.ref.i64($p55);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    $i57 := $eq.i64($i56, 0);
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p51, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p51, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i63 := $eq.i64($i62, 0);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i63 == 1);
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i2, 0);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p51, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p66);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p0);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i67, $i69);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i74 := $and.i32($i73, 64);
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} add_wait_queue($p76, $p4);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i2, 0);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i77 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := 0, 0, 1, 1;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i46, $i47, $p48, $i49, $i50 := $i118, $i119, $p59, $i120, $i121;
    goto $bb6;

  $bb26:
    assume $i77 == 1;
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    call $p78, $p79, $p80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $p129, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $p146, $i147, $i148, $i149, $p150, $i151, $i152, $p153, $p154, $i155, $i156, $p157, $p158, $i159, $p160, $i161, $i162, $p164, $i165, $i166, $i167, $i145, $i183, vslice_dummy_var_90 := comedi_write_loop_$bb29($p0, $i2, $p6, $p51, $p59, $i77, $p78, $p79, $p80, $i81, $p82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i122, $p123, $i124, $i125, $p126, $i127, $i128, $p129, $i130, $p131, $i132, $i133, $i134, $p135, $i136, $i138, $i139, $i140, $i141, $i142, $i143, $i144, $p146, $i147, $i148, $i149, $p150, $i151, $i152, $p153, $p154, $i155, $i156, $p157, $p158, $i159, $p160, $i161, $i162, $p164, $i165, $i166, $i167, $i145, $i183, vslice_dummy_var_90);
    goto $bb29_last;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i183 == 1);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb87:
    assume $i183 == 1;
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} $p78 := get_current();
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p79, 0);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p6, 1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $p80 := get_current();
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i81 := $load.i64($M.43, $p6);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p80, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 858} $i83 := devirtbounce.13(0, $p82, $i81, $p82);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, $p6, $i83);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i84 := comedi_get_subdevice_runflags($p51);
    call {:si_unique_call 860} {:cexpr "runflags"} boogie_si_record_i32($i84);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $i85 := comedi_is_runflags_running($i84);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    $i86 := $zext.i1.i8($i85);
    call {:si_unique_call 862} {:cexpr "tmp___7"} boogie_si_record_i8($i86);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i8.i1($i86);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    $i88 := 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $i89 := $ne.i32($i88, 0);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i90 := $i84;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i122 := $trunc.i64.i32($i2);
    call {:si_unique_call 871} {:cexpr "n"} boogie_si_record_i32($i122);
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $i125 := $add.i32($i124, $i122);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i128 := $ugt.i32($i125, $i127);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i134 := $i122;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p135);
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} vslice_dummy_var_90 := comedi_buf_write_alloc($p51, $i136);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $i138 := comedi_buf_write_n_allocated($p51);
    call {:si_unique_call 875} {:cexpr "tmp___10"} boogie_si_record_i32($i138);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i139 := $ugt.i32($i134, $i138);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    $i141 := $i134;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    $i142 := $slt.i32($i141, $i122);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    $i143 := $i122;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i145 := $i143;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.0, $p168);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.0, $p170);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i172 := $zext.i32.i64($i171);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($p169, $mul.ref($i172, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i174 := $sext.i32.i64($i145);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $i175 := copy_from_user($p173, $p1, $i174);
    call {:si_unique_call 883} {:cexpr "tmp___13"} boogie_si_record_i64($i175);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i64.i32($i175);
    call {:si_unique_call 884} {:cexpr "m"} boogie_si_record_i32($i176);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i177 := $ne.i32($i176, 0);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    $i179, $i180 := 0, $i145;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_91 := comedi_buf_write_free($p51, $i180);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i182 := $add.i32(0, $i180);
    call {:si_unique_call 887} {:cexpr "count"} boogie_si_record_i32($i182);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := $i179, $i182, 1, 1;
    goto $bb53;

  $bb84:
    assume $i177 == 1;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i178 := $sub.i32($i145, $i176);
    call {:si_unique_call 885} {:cexpr "n"} boogie_si_record_i32($i178);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i179, $i180 := $sub.i32(0, 14), $i178;
    goto $bb86;

  $bb64:
    assume $i144 == 1;
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $i147 := $load.i32($M.0, $p146);
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i148 := $and.i32($i147, 2048);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} schedule();
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p150 := get_current();
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i151 := signal_pending($p150);
    call {:si_unique_call 881} {:cexpr "tmp___12"} boogie_si_record_i32($i151);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p51, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p154 := $load.ref($M.0, $p153);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p154);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i156 := $eq.i64($i155, 0);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p51, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i159 := $p2i.ref.i64($p158);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i161 := $p2i.ref.i64($p160);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i162 := $ne.i64($i159, $i161);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 64);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 0);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i77 == 1);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb81_dummy;

  $bb78:
    assume $i167 == 1;
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := $sub.i32(0, 22), 0, 1, 1;
    goto $bb53;

  $bb75:
    assume $i162 == 1;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := $sub.i32(0, 13), 0, 1, 1;
    goto $bb53;

  $bb72:
    assume $i156 == 1;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := 0, 0, 1, 1;
    goto $bb53;

  $bb69:
    assume $i152 == 1;
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := $sub.i32(0, 512), 0, 1, 1;
    goto $bb53;

  $bb66:
    assume $i149 == 1;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := $sub.i32(0, 11), 0, 1, 1;
    goto $bb53;

  $bb61:
    assume $i142 == 1;
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i143 := $i141;
    goto $bb63;

  $bb58:
    assume $i139 == 1;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $i140 := comedi_buf_write_n_allocated($p51);
    call {:si_unique_call 877} {:cexpr "tmp___9"} boogie_si_record_i32($i140);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i141 := $i140;
    goto $bb60;

  $bb55:
    assume $i128 == 1;
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i130 := $load.i32($M.0, $p129);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i133 := $sub.i32($i130, $i132);
    call {:si_unique_call 872} {:cexpr "m"} boogie_si_record_i32($i133);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i134 := $i133;
    goto $bb57;

  $bb35:
    assume $i89 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32(0, 0);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    $i115, $i116, $i117 := 0, 1, 1;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i118, $i119, $i120, $i121 := $i115, 0, $i116, $i117;
    goto $bb53;

  $bb37:
    assume $i91 == 1;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i92 := comedi_is_runflags_in_error($i90);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i93 := $zext.i1.i8($i92);
    call {:si_unique_call 864} {:cexpr "tmp___6"} boogie_si_record_i8($i93);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i8.i1($i93);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i95 := 0;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p59, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} remove_wait_queue($p96, $p4);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} up_read($p97);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} mutex_lock_nested($p98, 0);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p99 := comedi_file_write_subdevice($p0);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i8.i1($i101);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i102 == 1);
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} mutex_unlock($p114);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i115, $i116, $i117 := $i95, 0, 0;
    goto $bb52;

  $bb42:
    assume $i102 == 1;
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p21, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.0, $p103);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i104, $i24);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb44;

  $bb45:
    assume $i105 == 1;
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p51);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p99);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $i108 := $eq.i64($i106, $i107);
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb44;

  $bb47:
    assume $i108 == 1;
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p99, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i112 := $p2i.ref.i64($p59);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $i113 := $eq.i64($i111, $i112);
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i113 == 1);
    goto $bb44;

  $bb49:
    assume $i113 == 1;
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} do_become_nonbusy($p21, $p51);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb39:
    assume $i94 == 1;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32(0, 32);
    goto $bb41;

  $bb32:
    assume $i87 == 1;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i88 := 0;
    goto $bb34;

  $bb23:
    assume $i75 == 1;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $i46, $i47, $p48, $i49, $i50 := $sub.i32(0, 22), 0, $p59, 0, 1;
    goto $bb6;

  $bb20:
    assume $i70 == 1;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i46, $i47, $p48, $i49, $i50 := $sub.i32(0, 13), 0, $p59, 0, 1;
    goto $bb6;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i46, $i47, $p48, $i49, $i50 := 0, 0, $p59, 0, 1;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i46, $i47, $p48, $i49, $i50 := $sub.i32(0, 5), 0, $u0, 0, 1;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb9;

  $bb81_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32(0, 0);
    goto corral_source_split_5594;
}



const comedi_poll: ref;

axiom comedi_poll == $sub.ref(0, 444652);

procedure comedi_poll($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $CurrAddr;



implementation comedi_poll($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i47: i1;
  var $i48: i8;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $i60: i1;
  var $i61: i32;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $i62: i32;
  var $i53: i32;
  var $i46: i32;
  var $i67: i32;
  var $p68: ref;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i1;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $p84: ref;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i88: i32;
  var $i90: i1;
  var $i91: i8;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $p97: ref;
  var $p98: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i104: i32;
  var $i106: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i32;
  var $i105: i32;
  var $i96: i32;
  var $i89: i32;
  var $i110: i32;
  var $i30: i32;
  var $p111: ref;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 894} mutex_lock_nested($p8, 0);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p12, .str.5);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p13, .str.41);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p14, .str.4);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p15, .str.39);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.39, $p17);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 2268);
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p17, $i20);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p21, 1);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.40, $p22);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 896} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} mutex_unlock($p111);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p7, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} __dynamic_dev_dbg.ref.ref.ref($p2, $p29, .str.39);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb1:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p31 := comedi_file_read_subdevice($p0);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p68 := comedi_file_write_subdevice($p0);
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p68);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i110 := $i67;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i30 := $i110;
    goto $bb6;

  $bb29:
    assume $i70 == 1;
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p68, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i73 := $p2i.ref.i64($p72);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb31;

  $bb32:
    assume $i74 == 1;
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i75 := comedi_bytes_per_sample($p68);
    call {:si_unique_call 911} {:cexpr "tmp___3"} boogie_si_record_i32($i75);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p68, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} poll_wait($p0, $p78, $p1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p68, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} vslice_dummy_var_92 := comedi_buf_write_alloc($p68, $i82);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p68, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $i87 := $eq.i64($i86, 0);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i87 == 1);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $i90 := comedi_is_subdevice_running($p68);
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $i91 := $zext.i1.i8($i90);
    call {:si_unique_call 916} {:cexpr "tmp___4"} boogie_si_record_i8($i91);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $i92 := $trunc.i8.i1($i91);
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    $i93 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i94 == 1);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p68, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    $p98 := $load.ref($M.0, $p97);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p98, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 64);
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i103 == 1);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i106 := comedi_buf_write_n_allocated($p68);
    call {:si_unique_call 920} {:cexpr "tmp___6"} boogie_si_record_i32($i106);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i107 := $uge.i32($i106, $i75);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    assume {:branchcond $i107} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i67;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i105 := $i109;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i96 := $i105;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i89 := $i96;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i110 := $i89;
    goto $bb49;

  $bb46:
    assume $i107 == 1;
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i108 := $or.i32($i67, 260);
    call {:si_unique_call 921} {:cexpr "mask"} boogie_si_record_i32($i108);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i109 := $i108;
    goto $bb48;

  $bb43:
    assume $i103 == 1;
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i104 := $or.i32($i67, 260);
    call {:si_unique_call 918} {:cexpr "mask"} boogie_si_record_i32($i104);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i105 := $i104;
    goto $bb45;

  $bb40:
    assume $i94 == 1;
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i67, 260);
    call {:si_unique_call 917} {:cexpr "mask"} boogie_si_record_i32($i95);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb42;

  $bb37:
    assume $i92 == 1;
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i93 := 0;
    goto $bb39;

  $bb34:
    assume $i87 == 1;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i67, 260);
    call {:si_unique_call 914} {:cexpr "mask"} boogie_si_record_i32($i88);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $i89 := $i88;
    goto $bb36;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb10;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 264)), $mul.ref(160, 1));
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} poll_wait($p0, $p40, $p1);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i44 == 1);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i47 := comedi_is_subdevice_running($p31);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i8($i47);
    call {:si_unique_call 903} {:cexpr "tmp___0"} boogie_si_record_i8($i48);
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i51 == 1);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p31, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5873;

  corral_source_split_5873:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, 64);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i60 := $ne.i32($i59, 0);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i60 == 1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $i63 := comedi_buf_read_n_available($p31);
    call {:si_unique_call 907} {:cexpr "tmp___2"} boogie_si_record_i32($i63);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i66 := 0;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i62 := $i66;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i53 := $i62;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46 := $i53;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i67 := $i46;
    goto $bb28;

  $bb25:
    assume $i64 == 1;
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $i65 := $or.i32(0, 65);
    call {:si_unique_call 908} {:cexpr "mask"} boogie_si_record_i32($i65);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i66 := $i65;
    goto $bb27;

  $bb22:
    assume $i60 == 1;
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i61 := $or.i32(0, 65);
    call {:si_unique_call 905} {:cexpr "mask"} boogie_si_record_i32($i61);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i62 := $i61;
    goto $bb24;

  $bb19:
    assume $i51 == 1;
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i52 := $or.i32(0, 65);
    call {:si_unique_call 904} {:cexpr "mask"} boogie_si_record_i32($i52);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb21;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb18;

  $bb13:
    assume $i44 == 1;
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i45 := $or.i32(0, 65);
    call {:si_unique_call 901} {:cexpr "mask"} boogie_si_record_i32($i45);
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $i46 := $i45;
    goto $bb15;
}



const comedi_unlocked_ioctl: ref;

axiom comedi_unlocked_ioctl == $sub.ref(0, 445684);

procedure comedi_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.2, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation comedi_unlocked_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $i27: i64;
  var $p29: ref;
  var $i30: i8;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $p84: ref;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i78: i32;
  var $i14: i32;
  var $p113: ref;
  var $i114: i64;
  var $i28: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 923} {:cexpr "comedi_unlocked_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 924} {:cexpr "comedi_unlocked_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} $p4 := file_inode($p0);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i5 := iminor($p4);
    call {:si_unique_call 927} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} mutex_lock_nested($p11, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i1, 1083466752);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p10, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i8.i1($i30);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i31 == 1);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p32, .str.5);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p33, .str.48);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p34, .str.4);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p35, .str.39);
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.39, $p37);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 2072);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p37, $i40);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p41, 1);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.40, $p42);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 937} {:cexpr "tmp___2"} boogie_si_record_i64($i46);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 19);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p10, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} mutex_unlock($p113);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i14);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i28 := $i114;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p10, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} __dynamic_dev_dbg.ref.ref.ref($p3, $p49, .str.39);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb21:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $slt.i32($i1, 25616);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i1, 25617);
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i1, 25617);
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i78 := $sub.i32(0, 25);
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i14 := $i78;
    goto $bb5;

  $bb36:
    assume $i54 == 1;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i112 := do_setwsubd_ioctl($p10, $i2, $p0);
    call {:si_unique_call 942} {:cexpr "rc"} boogie_si_record_i32($i112);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i78 := $i112;
    goto $bb81;

  $bb34:
    assume $i53 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i111 := do_setrsubd_ioctl($p10, $i2, $p0);
    call {:si_unique_call 940} {:cexpr "rc"} boogie_si_record_i32($i111);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i78 := $i111;
    goto $bb81;

  $bb32:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i1, 25615);
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i55 == 1);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p0);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i110 := do_poll_ioctl($p10, $i2, $p109);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    call {:si_unique_call 944} {:cexpr "rc"} boogie_si_record_i32($i110);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i78 := $i110;
    goto $bb81;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb38;

  $bb41:
    assume $i56 == 1;
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p0);
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i96 := do_cancel_ioctl($p10, $i2, $p95);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    call {:si_unique_call 946} {:cexpr "rc"} boogie_si_record_i32($i96);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $i78 := $i96;
    goto $bb81;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i1, 25605);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i1, 25606);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i58 == 1);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p0);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i94 := do_unlock_ioctl($p10, $i2, $p93);
    call {:si_unique_call 950} {:cexpr "rc"} boogie_si_record_i32($i94);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i78 := $i94;
    goto $bb81;

  $bb45:
    assume $i58 == 1;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p0);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $i92 := do_lock_ioctl($p10, $i2, $p91);
    call {:si_unique_call 948} {:cexpr "rc"} boogie_si_record_i32($i92);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $i78 := $i92;
    goto $bb81;

  $bb43:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb38;

  $bb49:
    assume $i60 == 1;
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p88 := $i2p.i64.ref($i2);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $i90 := do_bufinfo_ioctl($p10, $p88, $p89);
    call {:si_unique_call 952} {:cexpr "rc"} boogie_si_record_i32($i90);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i78 := $i90;
    goto $bb81;

  $bb47:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb38;

  $bb51:
    assume $i61 == 1;
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p79 := $i2p.i64.ref($i2);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i80 := do_devinfo_ioctl($p10, $p79, $p0);
    call {:si_unique_call 954} {:cexpr "rc"} boogie_si_record_i32($i80);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i78 := $i80;
    goto $bb81;

  $bb28:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i1, $sub.i32(0, 2144312317));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i1, $sub.i32(0, 2142215159));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i1, $sub.i32(0, 2142215158));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i1, $sub.i32(0, 2142215158));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb38;

  $bb59:
    assume $i65 == 1;
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p100 := $i2p.i64.ref($i2);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p0);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i102 := do_cmdtest_ioctl($p10, $p100, $p101);
    call {:si_unique_call 958} {:cexpr "rc"} boogie_si_record_i32($i102);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $i78 := $i102;
    goto $bb81;

  $bb57:
    assume $i64 == 1;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p97 := $i2p.i64.ref($i2);
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p0);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} $i99 := do_cmd_ioctl($p10, $p97, $p98);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    call {:si_unique_call 956} {:cexpr "rc"} boogie_si_record_i32($i99);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i78 := $i99;
    goto $bb81;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i63 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb38;

  $bb63:
    assume $i67 == 1;
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $p81 := $i2p.i64.ref($i2);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p0);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i83 := do_subdinfo_ioctl($p10, $p81, $p82);
    call {:si_unique_call 960} {:cexpr "rc"} boogie_si_record_i32($i83);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $i78 := $i83;
    goto $bb81;

  $bb61:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i1, $sub.i32(0, 2144312317));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i68 == 1);
    goto $bb38;

  $bb65:
    assume $i68 == 1;
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p84 := $i2p.i64.ref($i2);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} $i85 := do_chaninfo_ioctl($p10, $p84);
    call {:si_unique_call 962} {:cexpr "rc"} boogie_si_record_i32($i85);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i78 := $i85;
    goto $bb81;

  $bb53:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i1, $sub.i32(0, 2144836596));
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i1, $sub.i32(0, 2144836596));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb38;

  $bb71:
    assume $i71 == 1;
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $p106 := $i2p.i64.ref($i2);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p0);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 963} $i108 := do_insn_ioctl($p10, $p106, $p107);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    call {:si_unique_call 964} {:cexpr "rc"} boogie_si_record_i32($i108);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $i78 := $i108;
    goto $bb81;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb38;

  $bb73:
    assume $i72 == 1;
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $p76 := $i2p.i64.ref($i2);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $i77 := do_bufconfig_ioctl($p10, $p76);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    call {:si_unique_call 966} {:cexpr "rc"} boogie_si_record_i32($i77);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i78 := $i77;
    goto $bb81;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i1, $sub.i32(0, 2146409461));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i1, $sub.i32(0, 2146409461));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb38;

  $bb77:
    assume $i74 == 1;
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $p103 := $i2p.i64.ref($i2);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p0);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $i105 := do_insnlist_ioctl($p10, $p103, $p104);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    call {:si_unique_call 968} {:cexpr "rc"} boogie_si_record_i32($i105);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i78 := $i105;
    goto $bb81;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb75:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i1, $sub.i32(0, 2146409464));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb38;

  $bb79:
    assume $i75 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p86 := $i2p.i64.ref($i2);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i87 := do_rangeinfo_ioctl($p10, $p86);
    call {:si_unique_call 970} {:cexpr "rc"} boogie_si_record_i32($i87);
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i78 := $i87;
    goto $bb81;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i5, 47);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i2);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i16 := do_devconfig_ioctl($p10, $p15);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 931} {:cexpr "rc"} boogie_si_record_i32($i16);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb5;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i2, 0);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i21 := $M.21;
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i22 := $sge.i32($i20, $i21);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb12:
    assume $i22 == 1;
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i23 := comedi_clear_board_dev($p10);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 933} {:cexpr "tmp___1"} boogie_si_record_i8($i24);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume $i25 == 1;
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} mutex_unlock($p26);
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} comedi_free_board_dev($p10);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i27 := $sext.i32.i64($i16);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i28 := $i27;
    goto $bb16;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 25);
    goto $bb5;
}



const comedi_compat_ioctl: ref;

axiom comedi_compat_ioctl == $sub.ref(0, 446716);

procedure comedi_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.55, $M.56, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.58, $M.57, $M.0, $M.2, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation comedi_compat_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i64)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i32;
  var $p31: ref;
  var $i32: i64;
  var $i33: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i34: i32;
  var $i42: i64;

  $bb0:
    call {:si_unique_call 971} {:cexpr "comedi_compat_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 972} {:cexpr "comedi_compat_ioctl:arg:arg"} boogie_si_record_i64($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i1, 25616);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 25617);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 1083466752);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 1083466752);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 515);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i34);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    $r := $i42;
    return;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i2);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 975} $p31 := compat_ptr($i30);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    call {:si_unique_call 976} {:cexpr "arg"} boogie_si_record_i64($i32);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i33 := translated_ioctl($p0, $i1, $i32);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    call {:si_unique_call 978} {:cexpr "rc"} boogie_si_record_i32($i33);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb66;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i1, 25617);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb15;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $i35 := translated_ioctl($p0, $i1, $i2);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    call {:si_unique_call 974} {:cexpr "rc"} boogie_si_record_i32($i35);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $i34 := $i35;
    goto $bb66;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb6:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i1, 25615);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 25607);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb15;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i1, 25605);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i1, 25606);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27:
    assume $i13 == 1;
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb25:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i1, $sub.i32(0, 1070832626));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb15;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb33;

  $bb30:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i1, $sub.i32(0, 2135923711));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb36;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i1, $sub.i32(0, 2143263734));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i1, $sub.i32(0, 2142739454));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb15;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb45;

  $bb42:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i1, $sub.i32(0, 2143263734));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb15;

  $bb47:
    assume $i21 == 1;
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $i39 := compat_cmdtest($p0, $i2);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    call {:si_unique_call 980} {:cexpr "rc"} boogie_si_record_i32($i39);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i34 := $i39;
    goto $bb66;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, $sub.i32(0, 2143263735));
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i22 == 1);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $i38 := compat_cmd($p0, $i2);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    call {:si_unique_call 982} {:cexpr "rc"} boogie_si_record_i32($i38);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i34 := $i38;
    goto $bb66;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, $sub.i32(0, 2145360883));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb15;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb52;

  $bb38:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i1, $sub.i32(0, 2145360893));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i1, $sub.i32(0, 2145360884));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i25 == 1);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i41 := compat_insn($p0, $i2);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    call {:si_unique_call 984} {:cexpr "rc"} boogie_si_record_i32($i41);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i34 := $i41;
    goto $bb66;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i1, $sub.i32(0, 2145360893));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb15;

  $bb58:
    assume $i26 == 1;
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i36 := compat_chaninfo($p0, $i2);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    call {:si_unique_call 986} {:cexpr "rc"} boogie_si_record_i32($i36);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $i34 := $i36;
    goto $bb66;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb54:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i1, $sub.i32(0, 2146933749));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i1, $sub.i32(0, 2146933749));
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb15;

  $bb62:
    assume $i28 == 1;
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i40 := compat_insnlist($p0, $i2);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    call {:si_unique_call 988} {:cexpr "rc"} boogie_si_record_i32($i40);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $i34 := $i40;
    goto $bb66;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i1, $sub.i32(0, 2146933752));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb64:
    assume $i29 == 1;
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i37 := compat_rangeinfo($p0, $i2);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 990} {:cexpr "rc"} boogie_si_record_i32($i37);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i34 := $i37;
    goto $bb66;

  SeqInstr_442:
    assume !assertsPassed;
    return;
}



const comedi_mmap: ref;

axiom comedi_mmap == $sub.ref(0, 447748);

procedure comedi_mmap($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.0, $M.54, $M.2, $M.28, $CurrAddr, $M.3, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.25, assertsPassed;



implementation comedi_mmap($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $i17: i8;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i24;
  var $i26: i24;
  var $i27: i24;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $p45: ref;
  var $p44: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i64;
  var $i81: i1;
  var $i82: i64;
  var $i83: i1;
  var $i84: i64;
  var $i85: i32;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $i90: i32;
  var $i91: i1;
  var $i92: i1;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i32;
  var $i112: i1;
  var $i113: i64;
  var $i114: i32;
  var $i115: i1;
  var $i93: i32;
  var $i94: i64;
  var $p116: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p37: ref;
  var $i38: i32;
  var $p123: ref;
  var $i15: i32;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i11 := $load.i64($M.0, $p10);
    call {:si_unique_call 994} {:cexpr "start"} boogie_si_record_i64($i11);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p9, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i13 := down_read_trylock($p12);
    call {:si_unique_call 996} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p9, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i8.i1($i17);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p19, .str.5);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p20, .str.46);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p21, .str.4);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p22, .str.39);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i25 := $load.i24($M.39, $p24);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i26 := $and.i24($i25, $sub.i24(0, 262144));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i27 := $or.i24($i26, 2190);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p24, $i27);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p28, 1);
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.40, $p29);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i64($i30);
    goto corral_source_split_6175;

  corral_source_split_6175:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 1);
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $i33 := ldv__builtin_expect($i32, 0);
    call {:si_unique_call 998} {:cexpr "tmp___0"} boogie_si_record_i64($i33);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37, $i38 := $0.ref, $sub.i32(0, 19);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p9, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} up_read($p123);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} vslice_dummy_var_93 := comedi_buf_map_put($p37);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i15 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i34 == 1;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p9, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} __dynamic_dev_dbg.ref.ref.ref($p2, $p36, .str.39);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(80, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i41 := $and.i64($i40, 2);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i42 == 1);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $p45 := comedi_file_read_subdevice($p0);
    assume {:verifier.code 0} true;
    $p44 := $p45;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p44);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p44, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(152, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i53 := $load.i64($M.0, $p52);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(8, 1));
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i76 := $load.i64($M.0, $p75);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i77 := $sub.i64($i74, $i76);
    call {:si_unique_call 1007} {:cexpr "size"} boogie_si_record_i64($i77);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p49, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.45, $p78);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i80 := $zext.i32.i64($i79);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i81 := $ult.i64($i80, $i77);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i82 := $and.i64($i77, 4095);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i84 := $lshr.i64($i77, 12);
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i64.i32($i84);
    call {:si_unique_call 1008} {:cexpr "n_pages"} boogie_si_record_i32($i85);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p86 := comedi_buf_map_from_subdev_get($p44);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i88 == 1);
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p86, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.0, $p89);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i91 := $ugt.i32($i85, $i90);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32(0, $i85);
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p116, comedi_vm_ops);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(168, 1));
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p118, $p86);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p1, $mul.ref(0, 184)), $mul.ref(144, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 88)), $mul.ref(0, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    call {:si_unique_call 1016} devirtbounce.14($p122, $p1);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p37, $i38 := $p86, 0;
    goto $bb10;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb39:
    assume $i92 == 1;
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $i93, $i94 := 0, $i11;
    goto $bb42;

  $bb42:
    call $p95, $p96, $i97, $p99, $p100, $p101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i93, $i94 := comedi_mmap_loop_$bb42($p1, $p4, $i85, $p86, $p95, $p96, $i97, $p99, $p100, $p101, $i102, $i103, $i104, $p105, $i106, $i107, $i108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i93, $i94);
    goto $bb42_last;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p86, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i93);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.46 := $store.i64($M.46, $p99, $sub.i64(0, 9223372036854775769));
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p96, $mul.ref($i97, 16)), $mul.ref(0, 1));
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p101 := $load.ref($M.0, $p100);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i102 := $p2i.ref.i64($p101);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $i103 := __phys_addr($i102);
    call {:si_unique_call 1011} {:cexpr "tmp___2"} boogie_si_record_i64($i103);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i104 := $lshr.i64($i103, 12);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i104, 64));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i106 := $p2i.ref.i64($p105);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i107 := $add.i64($i106, 24189255811072);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i108 := $sdiv.i64($i107, 64);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.46, $p109);
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $i111 := remap_pfn_range($p1, $i94, $i108, 4096, $i110);
    call {:si_unique_call 1013} {:cexpr "tmp___3"} boogie_si_record_i32($i111);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i113 := $add.i64($i94, 4096);
    call {:si_unique_call 1014} {:cexpr "start"} boogie_si_record_i64($i113);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i114 := $add.i32($i93, 1);
    call {:si_unique_call 1015} {:cexpr "i"} boogie_si_record_i32($i114);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i114, $i85);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i115 == 1);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb47:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i93, $i94 := $i114, $i113;
    goto $bb47_dummy;

  $bb44:
    assume $i112 == 1;
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p37, $i38 := $p86, $sub.i32(0, 11);
    goto $bb10;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p37, $i38 := $p86, $sub.i32(0, 22);
    goto $bb10;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb34;

  $bb30:
    assume $i83 == 1;
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $p37, $i38 := $0.ref, $sub.i32(0, 14);
    goto $bb10;

  $bb27:
    assume $i81 == 1;
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p37, $i38 := $0.ref, $sub.i32(0, 14);
    goto $bb10;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p55, .str.5);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p56, .str.46);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p57, .str.4);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p58, .str.47);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.39, $p60);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 2211);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p60, $i63);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p64, 1);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.40, $p65);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1004} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 1005} {:cexpr "tmp___1"} boogie_si_record_i64($i69);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p37, $i38 := $0.ref, $sub.i32(0, 22);
    goto $bb10;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p9, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} __dynamic_dev_dbg.ref.ref.ref($p3, $p72, .str.47);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $p37, $i38 := $0.ref, $sub.i32(0, 22);
    goto $bb10;

  $bb15:
    assume $i47 == 1;
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p37, $i38 := $0.ref, $sub.i32(0, 22);
    goto $bb10;

  $bb12:
    assume $i42 == 1;
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p43 := comedi_file_write_subdevice($p0);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $p44 := $p43;
    goto $bb14;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 11);
    goto $bb3;

  $bb47_dummy:
    assume false;
    return;

  $bb42_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;
}



const comedi_open: ref;

axiom comedi_open == $sub.ref(0, 448780);

procedure comedi_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.28, $M.23, $CurrAddr, assertsPassed, $M.2, $M.3, $M.46, $M.24, $M.54, $M.25;



implementation comedi_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i24;
  var $i46: i24;
  var $i47: i24;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p58: ref;
  var $i59: i8;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $i69: i8;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $p90: ref;
  var $p92: ref;
  var $i57: i32;
  var $p93: ref;
  var $i94: i1;
  var $p96: ref;
  var $i24: i32;
  var vslice_dummy_var_94: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i4 := iminor($p0);
    call {:si_unique_call 1020} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p5 := comedi_dev_get_from_minor($i4);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $p25 := kzalloc(32, 208);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i27, 0);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p26, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p5);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} mutex_lock_nested($p30, 0);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i33 == 1);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $i34 := capable(12);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 1028} {:cexpr "tmp___4"} boogie_si_record_i8($i35);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i37, 0);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i8.i1($i59);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i89 := $add.i32($i88, 1);
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p90, $i89);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p92, $p25);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} comedi_file_reset($p1);
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} mutex_unlock($p93);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i57, 0);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i24 := $i57;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $r := $i24;
    return;

  $bb42:
    assume $i94 == 1;
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} vslice_dummy_var_94 := comedi_dev_put($p5);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p26);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} kfree($p96);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i60 == 1;
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb26;

  $bb27:
    assume $i63 == 1;
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $i68 := ldv_try_module_get_7($p67);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i8($i68);
    call {:si_unique_call 1034} {:cexpr "tmp___6"} boogie_si_record_i8($i69);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i8.i1($i69);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(544, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume $i77 == 1;
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(544, 1));
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    call {:si_unique_call 1035} $i81 := devirtbounce.15($p80, $p5);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    call {:si_unique_call 1036} {:cexpr "rc"} boogie_si_record_i32($i81);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 0);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb37:
    assume $i82 == 1;
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} ldv_module_put_8($p86);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i57 := $i81;
    goto $bb21;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 38);
    goto $bb21;

  $bb29:
    assume $i70 == 1;
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb31;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p39, .str.5);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p40, .str.42);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p41, .str.4);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p42, .str.45);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i45 := $load.i24($M.39, $p44);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $i46 := $and.i24($i45, $sub.i24(0, 262144));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i47 := $or.i24($i46, 2603);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p44, $i47);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p48, 1);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.40, $p49);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i64($i50);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i51, 1);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i53 := ldv__builtin_expect($i52, 0);
    call {:si_unique_call 1030} {:cexpr "tmp___3"} boogie_si_record_i64($i53);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, 0);
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    assume {:branchcond $i54} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32(0, 19);
    goto $bb21;

  $bb18:
    assume $i54 == 1;
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} __dynamic_dev_dbg.ref.ref.ref($p3, $p56, .str.45);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i36 == 1;
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb15;

  $bb11:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 12);
    goto $bb6;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $M.47 := $store.ref($M.47, $p8, .str.5);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.48 := $store.ref($M.48, $p9, .str.42);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $M.49 := $store.ref($M.49, $p10, .str.4);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $M.50 := $store.ref($M.50, $p11, .str.43);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.51, $p13);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 2591);
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $M.51 := $store.i24($M.51, $p13, $i16);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $M.52 := $store.i8($M.52, $p17, 1);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.52, $p18);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 1023} {:cexpr "tmp___1"} boogie_si_record_i64($i22);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32(0, 19);
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} __dynamic_pr_debug.ref.ref($p2, .str.44);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const comedi_close: ref;

axiom comedi_close == $sub.ref(0, 449812);

procedure comedi_close($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.2, $M.28, $M.23, $M.54, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation comedi_close($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i15: i32;
  var $p37: ref;
  var $i38: i8;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} mutex_lock_nested($p7, 0);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i8.i1($i38);
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $i55 := $sub.i32($i54, 1);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} mutex_unlock($p57);
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} vslice_dummy_var_96 := comedi_dev_put($p6);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p4);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1048} kfree($p59);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i39 == 1;
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(0, 1));
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 1);
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb20;

  $bb21:
    assume $i42 == 1;
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(552, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} ldv_module_put_9($p52);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i46 == 1;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(552, 1));
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    call {:si_unique_call 1044} devirtbounce.9($p48, $p6);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 0);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb6;

  $bb6:
    call $p16, $p17, $i18, $p19, $p20, $p21, $i22, $p23, $i24, $i25, $p27, $p28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i15, vslice_dummy_var_95 := comedi_close_loop_$bb6($p1, $p6, $p12, $p16, $p17, $i18, $p19, $p20, $p21, $i22, $p23, $i24, $i25, $p27, $p28, $i29, $p30, $i31, $i32, $p33, $i34, $i35, $i36, $i15, vslice_dummy_var_95);
    goto $bb6_last;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p17, $mul.ref($i18, 296));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 296)), $mul.ref(56, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p1);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i22, $i24);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref($i18, 296)), $mul.ref(48, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p1);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i29, $i31);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i15, 1);
    call {:si_unique_call 1043} {:cexpr "i"} boogie_si_record_i32($i34);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p12);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $i36 := $sgt.i32($i35, $i34);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i36 == 1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb14:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i15 := $i34;
    goto $bb14_dummy;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p17, $mul.ref($i18, 296)), $mul.ref(48, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $0.ref);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} vslice_dummy_var_95 := do_cancel($p6, $p19);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb14_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6491;
}



const comedi_fasync: ref;

axiom comedi_fasync == $sub.ref(0, 450844);

procedure comedi_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_fasync($i0: i32, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} {:cexpr "comedi_fasync:arg:fd"} boogie_si_record_i32($i0);
    call {:si_unique_call 1050} {:cexpr "comedi_fasync:arg:on"} boogie_si_record_i32($i2);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 560)), $mul.ref(536, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i9 := fasync_helper($i0, $p1, $i2, $p8);
    call {:si_unique_call 1052} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const fasync_helper: ref;

axiom fasync_helper == $sub.ref(0, 451876);

procedure fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation fasync_helper($i0: i32, $p1: ref, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1053} {:cexpr "fasync_helper:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1054} {:cexpr "fasync_helper:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1055} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1056} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ldv_module_put_9: ref;

axiom ldv_module_put_9 == $sub.ref(0, 452908);

procedure ldv_module_put_9($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_9($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} ldv_module_put($p0);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_472:
    assume !assertsPassed;
    return;
}



const iminor: ref;

axiom iminor == $sub.ref(0, 453940);

procedure iminor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation iminor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1000)), $mul.ref(76, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1048575);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __dynamic_pr_debug: ref;

axiom __dynamic_pr_debug == $sub.ref(0, 454972);

procedure __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation __dynamic_pr_debug.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    return;
}



const capable: ref;

axiom capable == $sub.ref(0, 456004);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1058} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1059} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 1060} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 457036);

procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    return;
}



const ldv_try_module_get_7: ref;

axiom ldv_try_module_get_7 == $sub.ref(0, 458068);

procedure ldv_try_module_get_7($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_try_module_get_7($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 1062} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_module_put_8: ref;

axiom ldv_module_put_8 == $sub.ref(0, 459100);

procedure ldv_module_put_8($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_8($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} ldv_module_put($p0);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_475:
    assume !assertsPassed;
    return;
}



const comedi_file_reset: ref;

axiom comedi_file_reset == $sub.ref(0, 460132);

procedure comedi_file_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_file_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i8;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p6 := file_inode($p0);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i7 := iminor($p6);
    call {:si_unique_call 1066} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(520, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i12 := $ugt.i32($i7, 47);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p28, $p29 := $p9, $p11;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i8($i32);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, $i34);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p28);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p29);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $p13 := comedi_subdevice_from_minor($p5, $i7);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i15 == 1);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p13, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 32768);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $p20 := $p9;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p13);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 16384);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $p27 := $p11;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $p28, $p29 := $p20, $p27;
    goto $bb15;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p27 := $p13;
    goto $bb14;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $p13;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb4;
}



const file_inode: ref;

axiom file_inode == $sub.ref(0, 461164);

procedure file_inode($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation file_inode($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(32, 1));
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const comedi_subdevice_from_minor: ref;

axiom comedi_subdevice_from_minor == $sub.ref(0, 462196);

procedure comedi_subdevice_from_minor($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_subdevice_from_minor($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} {:cexpr "comedi_subdevice_from_minor:arg:minor"} boogie_si_record_i32($i1);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i2 := $sub.i32($i1, 48);
    call {:si_unique_call 1069} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 207);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 1071} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} mutex_lock_nested(comedi_subdevice_minor_table_lock, 0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i2);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref($i8, 8));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.3, $p9);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $p10;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} mutex_unlock(comedi_subdevice_minor_table_lock);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i15, $i16);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb10;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 1072} devirtbounce.2(0, .str.4, 218, 12);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call comedi_subdevice_from_minor_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_try_module_get: ref;

axiom ldv_try_module_get == $sub.ref(0, 463228);

procedure ldv_try_module_get($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_try_module_get($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i3 := ldv_undef_int();
    call {:si_unique_call 1076} {:cexpr "module_get_succeeded"} boogie_si_record_i32($i3);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb5;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i5 := $M.23;
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 1);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $M.23 := $i6;
    call {:si_unique_call 1077} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32($i6);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb5;
}



const ldv_undef_int: ref;

axiom ldv_undef_int == $sub.ref(0, 464260);

procedure ldv_undef_int() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_undef_int() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1078} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1079} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1080} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const down_read_trylock: ref;

axiom down_read_trylock == $sub.ref(0, 465292);

procedure down_read_trylock($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation down_read_trylock($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1081} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1082} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const comedi_file_write_subdevice: ref;

axiom comedi_file_write_subdevice == $sub.ref(0, 466324);

procedure comedi_file_write_subdevice($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_file_write_subdevice($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} comedi_file_check($p0);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const comedi_file_read_subdevice: ref;

axiom comedi_file_read_subdevice == $sub.ref(0, 467356);

procedure comedi_file_read_subdevice($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_file_read_subdevice($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} comedi_file_check($p0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const comedi_buf_map_from_subdev_get: ref;

axiom comedi_buf_map_from_subdev_get == $sub.ref(0, 468388);

procedure comedi_buf_map_from_subdev_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_buf_map_from_subdev_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $p7 := spinlock_check($p6);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i8 := _raw_spin_lock_irqsave($p7);
    call {:si_unique_call 1087} {:cexpr "flags"} boogie_si_record_i64($i8);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.53, $p9);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $0.ref;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(72, 1));
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} spin_unlock_irqrestore($p17, $i8);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $p5 := $p16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1088} comedi_buf_map_get($p10);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p16 := $p10;
    goto $bb10;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $p5 := $0.ref;
    goto $bb3;
}



const remap_pfn_range: ref;

axiom remap_pfn_range == $sub.ref(0, 469420);

procedure remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.54, $CurrAddr;



implementation remap_pfn_range($p0: ref, $i1: i64, $i2: i64, $i3: i64, $i4: i64) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 1} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1090} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.54 := $store.i64($M.54, $p6, $i4);
    call {:si_unique_call 1091} {:cexpr "remap_pfn_range:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1092} {:cexpr "remap_pfn_range:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 1093} {:cexpr "remap_pfn_range:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1094} $i7 := __VERIFIER_nondet_int();
    call {:si_unique_call 1095} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i7);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const up_read: ref;

axiom up_read == $sub.ref(0, 470452);

procedure up_read($p0: ref);
  free requires assertsPassed;



implementation up_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    return;
}



const comedi_file_check: ref;

axiom comedi_file_check == $sub.ref(0, 471484);

procedure comedi_file_check($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation comedi_file_check($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(28, 1));
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i9, $i13);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i14 == 1);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 560)), $mul.ref(44, 1));
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i16, $i18);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} comedi_file_reset($p0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb2;
}



const compat_ptr: ref;

axiom compat_ptr == $sub.ref(0, 472516);

procedure compat_ptr($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation compat_ptr($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} {:cexpr "compat_ptr:arg:uptr"} boogie_si_record_i32($i0);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const translated_ioctl: ref;

axiom translated_ioctl == $sub.ref(0, 473548);

procedure translated_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.2, $M.55, $M.56, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.58, $M.57, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation translated_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} {:cexpr "translated_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 1099} {:cexpr "translated_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(40, 1));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 224)), $mul.ref(64, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 25);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 504)), $mul.ref(40, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 224)), $mul.ref(64, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 1100} $i13 := devirtbounce.16($p12, $p0, $i1, $i2);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    call {:si_unique_call 1101} {:cexpr "tmp"} boogie_si_record_i64($i13);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;

  SeqInstr_478:
    assume !assertsPassed;
    return;
}



const compat_chaninfo: ref;

axiom compat_chaninfo == $sub.ref(0, 474580);

procedure compat_chaninfo($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.55, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.0, $M.2, $M.56, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.58, $M.57, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation compat_chaninfo($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $i84: i32;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i1;
  var $i96: i64;
  var $i97: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1103} {:cexpr "compat_chaninfo:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1104} $p4 := compat_ptr($i3);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $p6 := compat_alloc_user_space(48);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $p8 := current_thread_info();
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p5);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i13 := __chk_range_not_ok($i9, 32, $i12);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1108} {:cexpr "tmp___2"} boogie_si_record_i8($i14);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1109} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1110} {:cexpr "tmp___4"} boogie_si_record_i64($i18);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} $p21 := current_thread_info();
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p7);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i26 := __chk_range_not_ok($i22, 48, $i25);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1113} {:cexpr "tmp___6"} boogie_si_record_i8($i27);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1114} $i31 := ldv__builtin_expect($i30, 1);
    call {:si_unique_call 1115} {:cexpr "tmp___8"} boogie_si_record_i64($i31);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    call {:si_unique_call 1116} $p35 := devirtbounce.17(0, $p34, $sub.i32(0, 14), 0);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i36 := $extractvalue($p35, 0);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i37 := $extractvalue($p35, 1);
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p39, $i38);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i36, 0);
    call {:si_unique_call 1117} {:cexpr "err"} boogie_si_record_i32($i40);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p2);
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.55, $p41);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    call {:si_unique_call 1118} $i45 := devirtbounce.18(0, $i42, $p44, $sub.i32(0, 14), 0);
    call {:si_unique_call 1119} {:cexpr "__pu_err"} boogie_si_record_i32($i45);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, $i40);
    call {:si_unique_call 1120} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    call {:si_unique_call 1121} $p49 := devirtbounce.17(0, $p48, $sub.i32(0, 14), 0);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i50 := $extractvalue($p49, 0);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i51 := $extractvalue($p49, 1);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p53, $i52);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i50, $i46);
    call {:si_unique_call 1122} {:cexpr "err"} boogie_si_record_i32($i54);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p2);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.55, $p55);
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $p57 := compat_ptr($i56);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    call {:si_unique_call 1124} $i61 := devirtbounce.19(0, $p58, $p60, $sub.i32(0, 14), 0);
    call {:si_unique_call 1125} {:cexpr "__pu_err___0"} boogie_si_record_i32($i61);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, $i54);
    call {:si_unique_call 1126} {:cexpr "err"} boogie_si_record_i32($i62);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    call {:si_unique_call 1127} $p65 := devirtbounce.17(0, $p64, $sub.i32(0, 14), 0);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i66 := $extractvalue($p65, 0);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i67 := $extractvalue($p65, 1);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i64.i32($i67);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p69, $i68);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i66, $i62);
    call {:si_unique_call 1128} {:cexpr "err"} boogie_si_record_i32($i70);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p2);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.55, $p71);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p73 := compat_ptr($i72);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    call {:si_unique_call 1130} $i77 := devirtbounce.19(0, $p74, $p76, $sub.i32(0, 14), 0);
    call {:si_unique_call 1131} {:cexpr "__pu_err___1"} boogie_si_record_i32($i77);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i78 := $or.i32($i77, $i70);
    call {:si_unique_call 1132} {:cexpr "err"} boogie_si_record_i32($i78);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    call {:si_unique_call 1133} $p81 := devirtbounce.17(0, $p80, $sub.i32(0, 14), 0);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i82 := $extractvalue($p81, 0);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i83 := $extractvalue($p81, 1);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i84 := $trunc.i64.i32($i83);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p2);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $M.55 := $store.i32($M.55, $p85, $i84);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i82, $i78);
    call {:si_unique_call 1134} {:cexpr "err"} boogie_si_record_i32($i86);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p2);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.55, $p87);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p89 := compat_ptr($i88);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p7, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p91);
    call {:si_unique_call 1136} $i93 := devirtbounce.19(0, $p90, $p92, $sub.i32(0, 14), 0);
    call {:si_unique_call 1137} {:cexpr "__pu_err___2"} boogie_si_record_i32($i93);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i94 := $or.i32($i93, $i86);
    call {:si_unique_call 1138} {:cexpr "err"} boogie_si_record_i32($i94);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i95 := $ne.i32($i94, 0);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i95} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p7);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i97 := translated_ioctl($p0, $sub.i32(0, 2144312317), $i96);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    call {:si_unique_call 1140} {:cexpr "tmp___25"} boogie_si_record_i32($i97);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i20 := $i97;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i95 == 1;
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb6;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb6;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;
}



const compat_rangeinfo: ref;

axiom compat_rangeinfo == $sub.ref(0, 475612);

procedure compat_rangeinfo($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.56, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.0, $M.2, $M.55, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.58, $M.57, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation compat_rangeinfo($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $i22: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i8;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i64;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i63: i64;
  var $i64: i32;
  var $i20: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1142} {:cexpr "compat_rangeinfo:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i1);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p4 := compat_ptr($i3);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $p6 := compat_alloc_user_space(16);
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} $p8 := current_thread_info();
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p5);
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $i13 := __chk_range_not_ok($i9, 8, $i12);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1147} {:cexpr "tmp___2"} boogie_si_record_i8($i14);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1148} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 1149} {:cexpr "tmp___4"} boogie_si_record_i64($i18);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1150} $p21 := current_thread_info();
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p7);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i26 := __chk_range_not_ok($i22, 16, $i25);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i8($i26);
    call {:si_unique_call 1152} {:cexpr "tmp___6"} boogie_si_record_i8($i27);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i8.i1($i27);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i31 := ldv__builtin_expect($i30, 1);
    call {:si_unique_call 1154} {:cexpr "tmp___8"} boogie_si_record_i64($i31);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    call {:si_unique_call 1155} $p35 := devirtbounce.17(0, $p34, $sub.i32(0, 14), 0);
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i36 := $extractvalue($p35, 0);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $i37 := $extractvalue($p35, 1);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p2);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $M.56 := $store.i32($M.56, $p39, $i38);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i36, 0);
    call {:si_unique_call 1156} {:cexpr "err"} boogie_si_record_i32($i40);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p2);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.56, $p41);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    call {:si_unique_call 1157} $i45 := devirtbounce.18(0, $i42, $p44, $sub.i32(0, 14), 0);
    call {:si_unique_call 1158} {:cexpr "__pu_err"} boogie_si_record_i32($i45);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, $i40);
    call {:si_unique_call 1159} {:cexpr "err"} boogie_si_record_i32($i46);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    call {:si_unique_call 1160} $p49 := devirtbounce.17(0, $p48, $sub.i32(0, 14), 0);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i50 := $extractvalue($p49, 0);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $i51 := $extractvalue($p49, 1);
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i64.i32($i51);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p2);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $M.56 := $store.i32($M.56, $p53, $i52);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i54 := $or.i32($i50, $i46);
    call {:si_unique_call 1161} {:cexpr "err"} boogie_si_record_i32($i54);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p2);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.56, $p55);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} $p57 := compat_ptr($i56);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    call {:si_unique_call 1163} $i60 := devirtbounce.20(0, $p57, $p59, $sub.i32(0, 14), 0);
    call {:si_unique_call 1164} {:cexpr "__pu_err___0"} boogie_si_record_i32($i60);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, $i54);
    call {:si_unique_call 1165} {:cexpr "err"} boogie_si_record_i32($i61);
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p7);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $i64 := translated_ioctl($p0, $sub.i32(0, 2146409464), $i63);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    call {:si_unique_call 1167} {:cexpr "tmp___15"} boogie_si_record_i32($i64);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i20 := $i64;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i62 == 1;
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb6;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb6;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb9;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;
}



const compat_cmd: ref;

axiom compat_cmd == $sub.ref(0, 476644);

procedure compat_cmd($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.2, $M.55, $M.56, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.57, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation compat_cmd($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} {:cexpr "compat_cmd:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p3 := compat_ptr($i2);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p5 := compat_alloc_user_space(80);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $i7 := get_compat_cmd($p6, $p4);
    call {:si_unique_call 1172} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $i11 := translated_ioctl($p0, $sub.i32(0, 2142215159), $i10);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    call {:si_unique_call 1174} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, $sub.i32(0, 11));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i16 := $i11;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i9 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $i13 := put_compat_cmd($p4, $p6);
    call {:si_unique_call 1176} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb10;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb9;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const compat_cmdtest: ref;

axiom compat_cmdtest == $sub.ref(0, 477676);

procedure compat_cmdtest($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.2, $M.55, $M.56, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.57, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation compat_cmdtest($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} {:cexpr "compat_cmdtest:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p3 := compat_ptr($i2);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p5 := compat_alloc_user_space(80);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i7 := get_compat_cmd($p6, $p4);
    call {:si_unique_call 1181} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $i11 := translated_ioctl($p0, $sub.i32(0, 2142215158), $i10);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    call {:si_unique_call 1183} {:cexpr "rc"} boogie_si_record_i32($i11);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, 0);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $i13 := put_compat_cmd($p4, $p6);
    call {:si_unique_call 1185} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i11;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i9 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const compat_insnlist: ref;

axiom compat_insnlist == $sub.ref(0, 478708);

procedure compat_insnlist($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.2, $M.55, $M.56, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.58, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation compat_insnlist($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i8;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i8;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i1;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i67: i32;
  var $p79: ref;
  var $i80: i64;
  var $i81: i32;
  var $i17: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} {:cexpr "compat_insnlist:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p3 := compat_ptr($i2);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $p5 := current_thread_info();
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p4);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, $p8);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i10 := __chk_range_not_ok($i6, 8, $i9);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i8($i10);
    call {:si_unique_call 1190} {:cexpr "tmp___1"} boogie_si_record_i8($i11);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i13 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} $i15 := ldv__builtin_expect($i14, 1);
    call {:si_unique_call 1192} {:cexpr "tmp___3"} boogie_si_record_i64($i15);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    call {:si_unique_call 1193} $p20 := devirtbounce.17(0, $p19, $sub.i32(0, 14), 0);
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $i21 := $extractvalue($p20, 0);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i22 := $extractvalue($p20, 1);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i64.i32($i22);
    call {:si_unique_call 1194} {:cexpr "n_insns"} boogie_si_record_i32($i23);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i21, 0);
    call {:si_unique_call 1195} {:cexpr "err"} boogie_si_record_i32($i24);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    call {:si_unique_call 1196} $p27 := devirtbounce.17(0, $p26, $sub.i32(0, 14), 0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i28 := $extractvalue($p27, 0);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i29 := $extractvalue($p27, 1);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i64.i32($i29);
    call {:si_unique_call 1197} {:cexpr "uptr"} boogie_si_record_i32($i30);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i28, $i24);
    call {:si_unique_call 1198} {:cexpr "err"} boogie_si_record_i32($i31);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} $p32 := compat_ptr($i30);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i31, 0);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i23);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i36 := $mul.i64($i35, 40);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i37 := $add.i64($i36, 16);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} $p38 := compat_alloc_user_space($i37);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $p40 := current_thread_info();
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p40, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i46 := __chk_range_not_ok($i42, 16, $i45);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i8($i46);
    call {:si_unique_call 1203} {:cexpr "tmp___9"} boogie_si_record_i8($i47);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i8.i1($i47);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    $i49 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i51 := ldv__builtin_expect($i50, 1);
    call {:si_unique_call 1205} {:cexpr "tmp___11"} boogie_si_record_i64($i51);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    call {:si_unique_call 1206} $i56 := devirtbounce.18(0, $i23, $p55, $sub.i32(0, 14), 0);
    call {:si_unique_call 1207} {:cexpr "__pu_err"} boogie_si_record_i32($i56);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i57 := $or.i32($i56, $i31);
    call {:si_unique_call 1208} {:cexpr "err"} boogie_si_record_i32($i57);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    call {:si_unique_call 1209} $i63 := devirtbounce.21(0, $p59, $p62, $sub.i32(0, 14), 0);
    call {:si_unique_call 1210} {:cexpr "__pu_err___0"} boogie_si_record_i32($i63);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, $i57);
    call {:si_unique_call 1211} {:cexpr "err"} boogie_si_record_i32($i64);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i66 := $ult.i32(0, $i23);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i66 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} $i81 := translated_ioctl($p0, $sub.i32(0, 2146409461), $i80);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    call {:si_unique_call 1216} {:cexpr "tmp___12"} boogie_si_record_i32($i81);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i17 := $i81;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i66 == 1;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb27;

  $bb27:
    call $p68, $p69, $i70, $p71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i67 := compat_insnlist_loop_$bb27($i23, $p33, $p39, $p68, $p69, $i70, $p71, $i72, $p73, $i74, $i75, $i76, $i77, $i78, $i67);
    goto $bb27_last;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p39, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i67);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($p69, $mul.ref($i70, 40));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i72 := $zext.i32.i64($i67);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p33, $mul.ref($i72, 32));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} $i74 := get_compat_insn($p71, $p73);
    call {:si_unique_call 1213} {:cexpr "rc"} boogie_si_record_i32($i74);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i76 := $i74;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i67, 1);
    call {:si_unique_call 1214} {:cexpr "n"} boogie_si_record_i32($i77);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i78 := $ult.i32($i77, $i23);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i78 == 1);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb32:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i67 := $i77;
    goto $bb32_dummy;

  $bb29:
    assume $i75 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i17 := $i76;
    goto $bb6;

  $bb21:
    assume $i65 == 1;
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb6;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb6;

  $bb13:
    assume $i48 == 1;
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i49 := 0;
    goto $bb15;

  $bb10:
    assume $i34 == 1;
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb6;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7140;
}



const compat_insn: ref;

axiom compat_insn == $sub.ref(0, 479740);

procedure compat_insn($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.2, $M.55, $M.56, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.58, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation compat_insn($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i10: i64;
  var $i11: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} {:cexpr "compat_insn:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i64.i32($i1);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $p3 := compat_ptr($i2);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $p5 := compat_alloc_user_space(40);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $i7 := get_compat_insn($p6, $p4);
    call {:si_unique_call 1221} {:cexpr "rc"} boogie_si_record_i32($i7);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p6);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i11 := translated_ioctl($p0, $sub.i32(0, 2144836596), $i10);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    call {:si_unique_call 1223} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i9 := $i7;
    goto $bb3;
}



const compat_alloc_user_space: ref;

axiom compat_alloc_user_space == $sub.ref(0, 480772);

procedure compat_alloc_user_space($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation compat_alloc_user_space($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} {:cexpr "compat_alloc_user_space:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $p1 := external_alloc();
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const get_compat_insn: ref;

axiom get_compat_insn == $sub.ref(0, 481804);

procedure get_compat_insn($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.57, $CurrAddr;



implementation get_compat_insn($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i32;
  var $i76: i64;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i32;
  var $i90: i64;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $p3 := current_thread_info();
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i8 := __chk_range_not_ok($i4, 32, $i7);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1229} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i13 := ldv__builtin_expect($i12, 1);
    call {:si_unique_call 1231} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} $p16 := current_thread_info();
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} $i21 := __chk_range_not_ok($i17, 40, $i20);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 1234} {:cexpr "tmp___4"} boogie_si_record_i8($i22);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i26 := ldv__builtin_expect($i25, 1);
    call {:si_unique_call 1236} {:cexpr "tmp___6"} boogie_si_record_i64($i26);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    call {:si_unique_call 1237} $p30 := devirtbounce.17(0, $p29, $sub.i32(0, 14), 0);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i31 := $extractvalue($p30, 0);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i32 := $extractvalue($p30, 1);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.57 := $store.i32($M.57, $p34, $i33);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i31, 0);
    call {:si_unique_call 1238} {:cexpr "err"} boogie_si_record_i32($i35);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.57, $p36);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    call {:si_unique_call 1239} $i40 := devirtbounce.18(0, $i37, $p39, $sub.i32(0, 14), 0);
    call {:si_unique_call 1240} {:cexpr "__pu_err"} boogie_si_record_i32($i40);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, $i35);
    call {:si_unique_call 1241} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    call {:si_unique_call 1242} $p44 := devirtbounce.17(0, $p43, $sub.i32(0, 14), 0);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i45 := $extractvalue($p44, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i46 := $extractvalue($p44, 1);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $M.57 := $store.i32($M.57, $p48, $i47);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i45, $i41);
    call {:si_unique_call 1243} {:cexpr "err"} boogie_si_record_i32($i49);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.57, $p50);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    call {:si_unique_call 1244} $i54 := devirtbounce.18(0, $i51, $p53, $sub.i32(0, 14), 0);
    call {:si_unique_call 1245} {:cexpr "__pu_err___0"} boogie_si_record_i32($i54);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, $i49);
    call {:si_unique_call 1246} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    call {:si_unique_call 1247} $p58 := devirtbounce.17(0, $p57, $sub.i32(0, 14), 0);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i59 := $extractvalue($p58, 0);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i60 := $extractvalue($p58, 1);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $M.57 := $store.i32($M.57, $p62, $i61);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i59, $i55);
    call {:si_unique_call 1248} {:cexpr "err"} boogie_si_record_i32($i63);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p2);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.57, $p64);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} $p66 := compat_ptr($i65);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    call {:si_unique_call 1250} $i70 := devirtbounce.19(0, $p67, $p69, $sub.i32(0, 14), 0);
    call {:si_unique_call 1251} {:cexpr "__pu_err___1"} boogie_si_record_i32($i70);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, $i63);
    call {:si_unique_call 1252} {:cexpr "err"} boogie_si_record_i32($i71);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    call {:si_unique_call 1253} $p74 := devirtbounce.17(0, $p73, $sub.i32(0, 14), 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i75 := $extractvalue($p74, 0);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $i76 := $extractvalue($p74, 1);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i64.i32($i76);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $M.57 := $store.i32($M.57, $p78, $i77);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i75, $i71);
    call {:si_unique_call 1254} {:cexpr "err"} boogie_si_record_i32($i79);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p2);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.57, $p80);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    call {:si_unique_call 1255} $i84 := devirtbounce.18(0, $i81, $p83, $sub.i32(0, 14), 0);
    call {:si_unique_call 1256} {:cexpr "__pu_err___2"} boogie_si_record_i32($i84);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, $i79);
    call {:si_unique_call 1257} {:cexpr "err"} boogie_si_record_i32($i85);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    call {:si_unique_call 1258} $p88 := devirtbounce.17(0, $p87, $sub.i32(0, 14), 0);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i89 := $extractvalue($p88, 0);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i90 := $extractvalue($p88, 1);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i32($i90);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p2);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.57 := $store.i32($M.57, $p92, $i91);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i93 := $or.i32($i89, $i85);
    call {:si_unique_call 1259} {:cexpr "err"} boogie_si_record_i32($i93);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p2);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.57, $p94);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    call {:si_unique_call 1260} $i98 := devirtbounce.18(0, $i95, $p97, $sub.i32(0, 14), 0);
    call {:si_unique_call 1261} {:cexpr "__pu_err___3"} boogie_si_record_i32($i98);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i98, $i93);
    call {:si_unique_call 1262} {:cexpr "err"} boogie_si_record_i32($i99);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i101 := (if $i100 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i15 := $i101;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb6;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const current_thread_info: ref;

axiom current_thread_info == $sub.ref(0, 482836);

procedure current_thread_info() returns ($r: ref);
  free requires assertsPassed;



implementation current_thread_info() returns ($r: ref)
{
  var $i0: i64;
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $i0 := current_top_of_stack();
    call {:si_unique_call 1264} {:cexpr "tmp"} boogie_si_record_i64($i0);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64($i0, 32768);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __chk_range_not_ok: ref;

axiom __chk_range_not_ok == $sub.ref(0, 483868);

procedure __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation __chk_range_not_ok($i0: i64, $i1: i64, $i2: i64) returns ($r: i1)
{
  var $i3: i64;
  var $i4: i1;
  var $i6: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} {:cexpr "__chk_range_not_ok:arg:addr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1266} {:cexpr "__chk_range_not_ok:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1267} {:cexpr "__chk_range_not_ok:arg:limit"} boogie_si_record_i64($i2);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $i3 := $add.i64($i0, $i1);
    call {:si_unique_call 1268} {:cexpr "addr"} boogie_si_record_i64($i3);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i4 := $ult.i64($i3, $i1);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $ugt.i64($i3, $i2);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $i5 := $i6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb3;
}



const current_top_of_stack: ref;

axiom current_top_of_stack == $sub.ref(0, 484900);

procedure current_top_of_stack() returns ($r: i64);
  free requires assertsPassed;



implementation current_top_of_stack() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $i0 := devirtbounce.22(0, $add.ref($add.ref($add.ref(cpu_tss, $mul.ref(0, 8824)), $mul.ref(0, 1)), $mul.ref(8, 1)));
    call {:si_unique_call 1270} {:cexpr "pfo_ret__"} boogie_si_record_i64($i0);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const get_compat_cmd: ref;

axiom get_compat_cmd == $sub.ref(0, 485932);

procedure get_compat_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58, $CurrAddr;



implementation get_compat_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i64;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i64;
  var $i75: i32;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $i89: i32;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i32;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i32;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i32;
  var $i116: i64;
  var $i117: i32;
  var $p118: ref;
  var $i119: i32;
  var $p120: ref;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $i131: i32;
  var $p132: ref;
  var $i133: i32;
  var $p134: ref;
  var $i135: i32;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i32;
  var $i144: i64;
  var $i145: i32;
  var $p146: ref;
  var $i147: i32;
  var $p148: ref;
  var $i149: i32;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i64;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $i173: i32;
  var $p174: ref;
  var $i175: i32;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $i181: i32;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i64;
  var $i187: i32;
  var $p188: ref;
  var $i189: i32;
  var $p190: ref;
  var $i191: i32;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;
  var $i195: i32;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i64;
  var $i201: i32;
  var $p202: ref;
  var $i203: i32;
  var $p204: ref;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i32;
  var $i216: i64;
  var $i217: i32;
  var $p218: ref;
  var $i219: i32;
  var $p220: ref;
  var $i221: i32;
  var $p222: ref;
  var $p223: ref;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i32;
  var $i230: i64;
  var $i231: i32;
  var $p232: ref;
  var $i233: i32;
  var $p234: ref;
  var $i235: i32;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $i245: i32;
  var $i246: i64;
  var $i247: i32;
  var $p248: ref;
  var $i249: i32;
  var $p250: ref;
  var $i251: i32;
  var $p252: ref;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p3 := current_thread_info();
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p1);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i7 := $load.i64($M.0, $p6);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $i8 := __chk_range_not_ok($i4, 64, $i7);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 1274} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i13 := ldv__builtin_expect($i12, 1);
    call {:si_unique_call 1276} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p16 := current_thread_info();
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p0);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p16, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $i21 := __chk_range_not_ok($i17, 80, $i20);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 1279} {:cexpr "tmp___4"} boogie_si_record_i8($i22);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $i26 := ldv__builtin_expect($i25, 1);
    call {:si_unique_call 1281} {:cexpr "tmp___6"} boogie_si_record_i64($i26);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    call {:si_unique_call 1282} $p30 := devirtbounce.17(0, $p29, $sub.i32(0, 14), 0);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $i31 := $extractvalue($p30, 0);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $i32 := $extractvalue($p30, 1);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i64.i32($i32);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p2);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p34, $i33);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i31, 0);
    call {:si_unique_call 1283} {:cexpr "err"} boogie_si_record_i32($i35);
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.58, $p36);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    call {:si_unique_call 1284} $i40 := devirtbounce.18(0, $i37, $p39, $sub.i32(0, 14), 0);
    call {:si_unique_call 1285} {:cexpr "__pu_err"} boogie_si_record_i32($i40);
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i41 := $or.i32($i40, $i35);
    call {:si_unique_call 1286} {:cexpr "err"} boogie_si_record_i32($i41);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    call {:si_unique_call 1287} $p44 := devirtbounce.17(0, $p43, $sub.i32(0, 14), 0);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i45 := $extractvalue($p44, 0);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i46 := $extractvalue($p44, 1);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p2);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p48, $i47);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i49 := $or.i32($i45, $i41);
    call {:si_unique_call 1288} {:cexpr "err"} boogie_si_record_i32($i49);
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p2);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.58, $p50);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p52);
    call {:si_unique_call 1289} $i54 := devirtbounce.18(0, $i51, $p53, $sub.i32(0, 14), 0);
    call {:si_unique_call 1290} {:cexpr "__pu_err___0"} boogie_si_record_i32($i54);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, $i49);
    call {:si_unique_call 1291} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    call {:si_unique_call 1292} $p58 := devirtbounce.17(0, $p57, $sub.i32(0, 14), 0);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $i59 := $extractvalue($p58, 0);
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i60 := $extractvalue($p58, 1);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i64.i32($i60);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p2);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p62, $i61);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i59, $i55);
    call {:si_unique_call 1293} {:cexpr "err"} boogie_si_record_i32($i63);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p2);
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.58, $p64);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    call {:si_unique_call 1294} $i68 := devirtbounce.18(0, $i65, $p67, $sub.i32(0, 14), 0);
    call {:si_unique_call 1295} {:cexpr "__pu_err___1"} boogie_si_record_i32($i68);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, $i63);
    call {:si_unique_call 1296} {:cexpr "err"} boogie_si_record_i32($i69);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    call {:si_unique_call 1297} $p72 := devirtbounce.17(0, $p71, $sub.i32(0, 14), 0);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $i73 := $extractvalue($p72, 0);
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i74 := $extractvalue($p72, 1);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i64.i32($i74);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p2);
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p76, $i75);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i73, $i69);
    call {:si_unique_call 1298} {:cexpr "err"} boogie_si_record_i32($i77);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i79 := $load.i32($M.58, $p78);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    call {:si_unique_call 1299} $i82 := devirtbounce.18(0, $i79, $p81, $sub.i32(0, 14), 0);
    call {:si_unique_call 1300} {:cexpr "__pu_err___2"} boogie_si_record_i32($i82);
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i82, $i77);
    call {:si_unique_call 1301} {:cexpr "err"} boogie_si_record_i32($i83);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    call {:si_unique_call 1302} $p86 := devirtbounce.17(0, $p85, $sub.i32(0, 14), 0);
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $i87 := $extractvalue($p86, 0);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $i88 := $extractvalue($p86, 1);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i64.i32($i88);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p2);
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p90, $i89);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i87, $i83);
    call {:si_unique_call 1303} {:cexpr "err"} boogie_si_record_i32($i91);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p2);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.58, $p92);
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    call {:si_unique_call 1304} $i96 := devirtbounce.18(0, $i93, $p95, $sub.i32(0, 14), 0);
    call {:si_unique_call 1305} {:cexpr "__pu_err___3"} boogie_si_record_i32($i96);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i97 := $or.i32($i96, $i91);
    call {:si_unique_call 1306} {:cexpr "err"} boogie_si_record_i32($i97);
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    call {:si_unique_call 1307} $p100 := devirtbounce.17(0, $p99, $sub.i32(0, 14), 0);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i101 := $extractvalue($p100, 0);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $i102 := $extractvalue($p100, 1);
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i102);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p2);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p104, $i103);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i105 := $or.i32($i101, $i97);
    call {:si_unique_call 1308} {:cexpr "err"} boogie_si_record_i32($i105);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p2);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.58, $p106);
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p108);
    call {:si_unique_call 1309} $i110 := devirtbounce.18(0, $i107, $p109, $sub.i32(0, 14), 0);
    call {:si_unique_call 1310} {:cexpr "__pu_err___4"} boogie_si_record_i32($i110);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i111 := $or.i32($i110, $i105);
    call {:si_unique_call 1311} {:cexpr "err"} boogie_si_record_i32($i111);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    call {:si_unique_call 1312} $p114 := devirtbounce.17(0, $p113, $sub.i32(0, 14), 0);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i115 := $extractvalue($p114, 0);
    goto corral_source_split_7446;

  corral_source_split_7446:
    assume {:verifier.code 0} true;
    $i116 := $extractvalue($p114, 1);
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i64.i32($i116);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p2);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p118, $i117);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i119 := $or.i32($i115, $i111);
    call {:si_unique_call 1313} {:cexpr "err"} boogie_si_record_i32($i119);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $p120 := $bitcast.ref.ref($p2);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.58, $p120);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    call {:si_unique_call 1314} $i124 := devirtbounce.18(0, $i121, $p123, $sub.i32(0, 14), 0);
    call {:si_unique_call 1315} {:cexpr "__pu_err___5"} boogie_si_record_i32($i124);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i124, $i119);
    call {:si_unique_call 1316} {:cexpr "err"} boogie_si_record_i32($i125);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    call {:si_unique_call 1317} $p128 := devirtbounce.17(0, $p127, $sub.i32(0, 14), 0);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $i129 := $extractvalue($p128, 0);
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $i130 := $extractvalue($p128, 1);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i32($i130);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p2);
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p132, $i131);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i129, $i125);
    call {:si_unique_call 1318} {:cexpr "err"} boogie_si_record_i32($i133);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p2);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.58, $p134);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    call {:si_unique_call 1319} $i138 := devirtbounce.18(0, $i135, $p137, $sub.i32(0, 14), 0);
    call {:si_unique_call 1320} {:cexpr "__pu_err___6"} boogie_si_record_i32($i138);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i139 := $or.i32($i138, $i133);
    call {:si_unique_call 1321} {:cexpr "err"} boogie_si_record_i32($i139);
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    call {:si_unique_call 1322} $p142 := devirtbounce.17(0, $p141, $sub.i32(0, 14), 0);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i143 := $extractvalue($p142, 0);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i144 := $extractvalue($p142, 1);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i64.i32($i144);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p2);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p146, $i145);
    goto corral_source_split_7481;

  corral_source_split_7481:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i143, $i139);
    call {:si_unique_call 1323} {:cexpr "err"} boogie_si_record_i32($i147);
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p2);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i149 := $load.i32($M.58, $p148);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p150);
    call {:si_unique_call 1324} $i152 := devirtbounce.18(0, $i149, $p151, $sub.i32(0, 14), 0);
    call {:si_unique_call 1325} {:cexpr "__pu_err___7"} boogie_si_record_i32($i152);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i152, $i147);
    call {:si_unique_call 1326} {:cexpr "err"} boogie_si_record_i32($i153);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    call {:si_unique_call 1327} $p156 := devirtbounce.17(0, $p155, $sub.i32(0, 14), 0);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i157 := $extractvalue($p156, 0);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i158 := $extractvalue($p156, 1);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i64.i32($i158);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p2);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p160, $i159);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i161 := $or.i32($i157, $i153);
    call {:si_unique_call 1328} {:cexpr "err"} boogie_si_record_i32($i161);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p2);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.58, $p162);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p164);
    call {:si_unique_call 1329} $i166 := devirtbounce.18(0, $i163, $p165, $sub.i32(0, 14), 0);
    call {:si_unique_call 1330} {:cexpr "__pu_err___8"} boogie_si_record_i32($i166);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i166, $i161);
    call {:si_unique_call 1331} {:cexpr "err"} boogie_si_record_i32($i167);
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    call {:si_unique_call 1332} $p170 := devirtbounce.17(0, $p169, $sub.i32(0, 14), 0);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i171 := $extractvalue($p170, 0);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i172 := $extractvalue($p170, 1);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i173 := $trunc.i64.i32($i172);
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p174 := $bitcast.ref.ref($p2);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p174, $i173);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $i175 := $or.i32($i171, $i167);
    call {:si_unique_call 1333} {:cexpr "err"} boogie_si_record_i32($i175);
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p2);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.58, $p176);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    call {:si_unique_call 1334} $i180 := devirtbounce.18(0, $i177, $p179, $sub.i32(0, 14), 0);
    call {:si_unique_call 1335} {:cexpr "__pu_err___9"} boogie_si_record_i32($i180);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i181 := $or.i32($i180, $i175);
    call {:si_unique_call 1336} {:cexpr "err"} boogie_si_record_i32($i181);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p183 := $bitcast.ref.ref($p182);
    call {:si_unique_call 1337} $p184 := devirtbounce.17(0, $p183, $sub.i32(0, 14), 0);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i185 := $extractvalue($p184, 0);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i186 := $extractvalue($p184, 1);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i64.i32($i186);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p2);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p188, $i187);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i189 := $or.i32($i185, $i181);
    call {:si_unique_call 1338} {:cexpr "err"} boogie_si_record_i32($i189);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $p190 := $bitcast.ref.ref($p2);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i191 := $load.i32($M.58, $p190);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    call {:si_unique_call 1339} $i194 := devirtbounce.18(0, $i191, $p193, $sub.i32(0, 14), 0);
    call {:si_unique_call 1340} {:cexpr "__pu_err___10"} boogie_si_record_i32($i194);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i195 := $or.i32($i194, $i189);
    call {:si_unique_call 1341} {:cexpr "err"} boogie_si_record_i32($i195);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(48, 1));
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p196);
    call {:si_unique_call 1342} $p198 := devirtbounce.17(0, $p197, $sub.i32(0, 14), 0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i199 := $extractvalue($p198, 0);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    $i200 := $extractvalue($p198, 1);
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i201 := $trunc.i64.i32($i200);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p2);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p202, $i201);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i203 := $or.i32($i199, $i195);
    call {:si_unique_call 1343} {:cexpr "err"} boogie_si_record_i32($i203);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p204 := $bitcast.ref.ref($p2);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.58, $p204);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1344} $p206 := compat_ptr($i205);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p206);
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    $p209 := $bitcast.ref.ref($p208);
    call {:si_unique_call 1345} $i210 := devirtbounce.19(0, $p207, $p209, $sub.i32(0, 14), 0);
    call {:si_unique_call 1346} {:cexpr "__pu_err___11"} boogie_si_record_i32($i210);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i211 := $or.i32($i210, $i203);
    call {:si_unique_call 1347} {:cexpr "err"} boogie_si_record_i32($i211);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p213 := $bitcast.ref.ref($p212);
    call {:si_unique_call 1348} $p214 := devirtbounce.17(0, $p213, $sub.i32(0, 14), 0);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i215 := $extractvalue($p214, 0);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i216 := $extractvalue($p214, 1);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i217 := $trunc.i64.i32($i216);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p2);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p218, $i217);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i219 := $or.i32($i215, $i211);
    call {:si_unique_call 1349} {:cexpr "err"} boogie_si_record_i32($i219);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p2);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $i221 := $load.i32($M.58, $p220);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $p223 := $bitcast.ref.ref($p222);
    call {:si_unique_call 1350} $i224 := devirtbounce.18(0, $i221, $p223, $sub.i32(0, 14), 0);
    call {:si_unique_call 1351} {:cexpr "__pu_err___12"} boogie_si_record_i32($i224);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i225 := $or.i32($i224, $i219);
    call {:si_unique_call 1352} {:cexpr "err"} boogie_si_record_i32($i225);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(56, 1));
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    call {:si_unique_call 1353} $p228 := devirtbounce.17(0, $p227, $sub.i32(0, 14), 0);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i229 := $extractvalue($p228, 0);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    $i230 := $extractvalue($p228, 1);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i64.i32($i230);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $p232 := $bitcast.ref.ref($p2);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p232, $i231);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i233 := $or.i32($i229, $i225);
    call {:si_unique_call 1354} {:cexpr "err"} boogie_si_record_i32($i233);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p2);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.58, $p234);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} $p236 := compat_ptr($i235);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p237 := $bitcast.ref.ref($p236);
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $p239 := $bitcast.ref.ref($p238);
    call {:si_unique_call 1356} $i240 := devirtbounce.23(0, $p237, $p239, $sub.i32(0, 14), 0);
    call {:si_unique_call 1357} {:cexpr "__pu_err___13"} boogie_si_record_i32($i240);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i240, $i233);
    call {:si_unique_call 1358} {:cexpr "err"} boogie_si_record_i32($i241);
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p1, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p242);
    call {:si_unique_call 1359} $p244 := devirtbounce.17(0, $p243, $sub.i32(0, 14), 0);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i245 := $extractvalue($p244, 0);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i246 := $extractvalue($p244, 1);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $i247 := $trunc.i64.i32($i246);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p248 := $bitcast.ref.ref($p2);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p248, $i247);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $i249 := $or.i32($i245, $i241);
    call {:si_unique_call 1360} {:cexpr "err"} boogie_si_record_i32($i249);
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    $p250 := $bitcast.ref.ref($p2);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.58, $p250);
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p0, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p253 := $bitcast.ref.ref($p252);
    call {:si_unique_call 1361} $i254 := devirtbounce.18(0, $i251, $p253, $sub.i32(0, 14), 0);
    call {:si_unique_call 1362} {:cexpr "__pu_err___14"} boogie_si_record_i32($i254);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i255 := $or.i32($i254, $i249);
    call {:si_unique_call 1363} {:cexpr "err"} boogie_si_record_i32($i255);
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $i257 := (if $i256 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $i15 := $i257;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb6;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i24 := 0;
    goto $bb9;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const put_compat_cmd: ref;

axiom put_compat_cmd == $sub.ref(0, 486964);

procedure put_compat_cmd($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation put_compat_cmd($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i8;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i64;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i64;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i64;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i75: i64;
  var $i76: i32;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i64;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i64;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $p112: ref;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i64;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i32;
  var $i141: i64;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $i151: i32;
  var $i152: i64;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i64;
  var $i164: i32;
  var $i165: i32;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $i173: i32;
  var $i174: i64;
  var $i175: i32;
  var $i176: i32;
  var $p177: ref;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $i182: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} $p2 := current_thread_info();
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i6 := $load.i64($M.0, $p5);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i7 := __chk_range_not_ok($i3, 80, $i6);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1366} {:cexpr "tmp___0"} boogie_si_record_i8($i8);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1368} {:cexpr "tmp___2"} boogie_si_record_i64($i12);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p15 := current_thread_info();
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p0);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 48)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} $i20 := __chk_range_not_ok($i16, 64, $i19);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i21 := $zext.i1.i8($i20);
    call {:si_unique_call 1371} {:cexpr "tmp___4"} boogie_si_record_i8($i21);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i8.i1($i21);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} $i25 := ldv__builtin_expect($i24, 1);
    call {:si_unique_call 1373} {:cexpr "tmp___6"} boogie_si_record_i64($i25);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    call {:si_unique_call 1374} $p29 := devirtbounce.17(0, $p28, $sub.i32(0, 14), 0);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i30 := $extractvalue($p29, 0);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $i31 := $extractvalue($p29, 1);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    call {:si_unique_call 1375} {:cexpr "temp"} boogie_si_record_i32($i32);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i30, 0);
    call {:si_unique_call 1376} {:cexpr "err"} boogie_si_record_i32($i33);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    call {:si_unique_call 1377} $i36 := devirtbounce.18(0, $i32, $p35, $sub.i32(0, 14), 0);
    call {:si_unique_call 1378} {:cexpr "__pu_err"} boogie_si_record_i32($i36);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, $i33);
    call {:si_unique_call 1379} {:cexpr "err"} boogie_si_record_i32($i37);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    call {:si_unique_call 1380} $p40 := devirtbounce.17(0, $p39, $sub.i32(0, 14), 0);
    goto corral_source_split_7651;

  corral_source_split_7651:
    assume {:verifier.code 0} true;
    $i41 := $extractvalue($p40, 0);
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $i42 := $extractvalue($p40, 1);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    call {:si_unique_call 1381} {:cexpr "temp"} boogie_si_record_i32($i43);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i41, $i37);
    call {:si_unique_call 1382} {:cexpr "err"} boogie_si_record_i32($i44);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    call {:si_unique_call 1383} $i47 := devirtbounce.18(0, $i43, $p46, $sub.i32(0, 14), 0);
    call {:si_unique_call 1384} {:cexpr "__pu_err___0"} boogie_si_record_i32($i47);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, $i44);
    call {:si_unique_call 1385} {:cexpr "err"} boogie_si_record_i32($i48);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    call {:si_unique_call 1386} $p51 := devirtbounce.17(0, $p50, $sub.i32(0, 14), 0);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i52 := $extractvalue($p51, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i53 := $extractvalue($p51, 1);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i64.i32($i53);
    call {:si_unique_call 1387} {:cexpr "temp"} boogie_si_record_i32($i54);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i52, $i48);
    call {:si_unique_call 1388} {:cexpr "err"} boogie_si_record_i32($i55);
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    call {:si_unique_call 1389} $i58 := devirtbounce.18(0, $i54, $p57, $sub.i32(0, 14), 0);
    call {:si_unique_call 1390} {:cexpr "__pu_err___1"} boogie_si_record_i32($i58);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, $i55);
    call {:si_unique_call 1391} {:cexpr "err"} boogie_si_record_i32($i59);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    call {:si_unique_call 1392} $p62 := devirtbounce.17(0, $p61, $sub.i32(0, 14), 0);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i63 := $extractvalue($p62, 0);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    $i64 := $extractvalue($p62, 1);
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    call {:si_unique_call 1393} {:cexpr "temp"} boogie_si_record_i32($i65);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i63, $i59);
    call {:si_unique_call 1394} {:cexpr "err"} boogie_si_record_i32($i66);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(12, 1));
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    call {:si_unique_call 1395} $i69 := devirtbounce.18(0, $i65, $p68, $sub.i32(0, 14), 0);
    call {:si_unique_call 1396} {:cexpr "__pu_err___2"} boogie_si_record_i32($i69);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i69, $i66);
    call {:si_unique_call 1397} {:cexpr "err"} boogie_si_record_i32($i70);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    call {:si_unique_call 1398} $p73 := devirtbounce.17(0, $p72, $sub.i32(0, 14), 0);
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $i74 := $extractvalue($p73, 0);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i75 := $extractvalue($p73, 1);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i76 := $trunc.i64.i32($i75);
    call {:si_unique_call 1399} {:cexpr "temp"} boogie_si_record_i32($i76);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i77 := $or.i32($i74, $i70);
    call {:si_unique_call 1400} {:cexpr "err"} boogie_si_record_i32($i77);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(16, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    call {:si_unique_call 1401} $i80 := devirtbounce.18(0, $i76, $p79, $sub.i32(0, 14), 0);
    call {:si_unique_call 1402} {:cexpr "__pu_err___3"} boogie_si_record_i32($i80);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i80, $i77);
    call {:si_unique_call 1403} {:cexpr "err"} boogie_si_record_i32($i81);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(20, 1));
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    call {:si_unique_call 1404} $p84 := devirtbounce.17(0, $p83, $sub.i32(0, 14), 0);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    $i85 := $extractvalue($p84, 0);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i86 := $extractvalue($p84, 1);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i87 := $trunc.i64.i32($i86);
    call {:si_unique_call 1405} {:cexpr "temp"} boogie_si_record_i32($i87);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i85, $i81);
    call {:si_unique_call 1406} {:cexpr "err"} boogie_si_record_i32($i88);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(20, 1));
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    call {:si_unique_call 1407} $i91 := devirtbounce.18(0, $i87, $p90, $sub.i32(0, 14), 0);
    call {:si_unique_call 1408} {:cexpr "__pu_err___4"} boogie_si_record_i32($i91);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i91, $i88);
    call {:si_unique_call 1409} {:cexpr "err"} boogie_si_record_i32($i92);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p93);
    call {:si_unique_call 1410} $p95 := devirtbounce.17(0, $p94, $sub.i32(0, 14), 0);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i96 := $extractvalue($p95, 0);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i97 := $extractvalue($p95, 1);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i64.i32($i97);
    call {:si_unique_call 1411} {:cexpr "temp"} boogie_si_record_i32($i98);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i96, $i92);
    call {:si_unique_call 1412} {:cexpr "err"} boogie_si_record_i32($i99);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(24, 1));
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    call {:si_unique_call 1413} $i102 := devirtbounce.18(0, $i98, $p101, $sub.i32(0, 14), 0);
    call {:si_unique_call 1414} {:cexpr "__pu_err___5"} boogie_si_record_i32($i102);
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, $i99);
    call {:si_unique_call 1415} {:cexpr "err"} boogie_si_record_i32($i103);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    call {:si_unique_call 1416} $p106 := devirtbounce.17(0, $p105, $sub.i32(0, 14), 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i107 := $extractvalue($p106, 0);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 0} true;
    $i108 := $extractvalue($p106, 1);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i109 := $trunc.i64.i32($i108);
    call {:si_unique_call 1417} {:cexpr "temp"} boogie_si_record_i32($i109);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $i110 := $or.i32($i107, $i103);
    call {:si_unique_call 1418} {:cexpr "err"} boogie_si_record_i32($i110);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(28, 1));
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    call {:si_unique_call 1419} $i113 := devirtbounce.18(0, $i109, $p112, $sub.i32(0, 14), 0);
    call {:si_unique_call 1420} {:cexpr "__pu_err___6"} boogie_si_record_i32($i113);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i113, $i110);
    call {:si_unique_call 1421} {:cexpr "err"} boogie_si_record_i32($i114);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    call {:si_unique_call 1422} $p117 := devirtbounce.17(0, $p116, $sub.i32(0, 14), 0);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $i118 := $extractvalue($p117, 0);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $i119 := $extractvalue($p117, 1);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i64.i32($i119);
    call {:si_unique_call 1423} {:cexpr "temp"} boogie_si_record_i32($i120);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $i121 := $or.i32($i118, $i114);
    call {:si_unique_call 1424} {:cexpr "err"} boogie_si_record_i32($i121);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(32, 1));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    call {:si_unique_call 1425} $i124 := devirtbounce.18(0, $i120, $p123, $sub.i32(0, 14), 0);
    call {:si_unique_call 1426} {:cexpr "__pu_err___7"} boogie_si_record_i32($i124);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i125 := $or.i32($i124, $i121);
    call {:si_unique_call 1427} {:cexpr "err"} boogie_si_record_i32($i125);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    call {:si_unique_call 1428} $p128 := devirtbounce.17(0, $p127, $sub.i32(0, 14), 0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $i129 := $extractvalue($p128, 0);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $i130 := $extractvalue($p128, 1);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i32($i130);
    call {:si_unique_call 1429} {:cexpr "temp"} boogie_si_record_i32($i131);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i132 := $or.i32($i129, $i125);
    call {:si_unique_call 1430} {:cexpr "err"} boogie_si_record_i32($i132);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(36, 1));
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p133);
    call {:si_unique_call 1431} $i135 := devirtbounce.18(0, $i131, $p134, $sub.i32(0, 14), 0);
    call {:si_unique_call 1432} {:cexpr "__pu_err___8"} boogie_si_record_i32($i135);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i136 := $or.i32($i135, $i132);
    call {:si_unique_call 1433} {:cexpr "err"} boogie_si_record_i32($i136);
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(40, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    call {:si_unique_call 1434} $p139 := devirtbounce.17(0, $p138, $sub.i32(0, 14), 0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i140 := $extractvalue($p139, 0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $i141 := $extractvalue($p139, 1);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i64.i32($i141);
    call {:si_unique_call 1435} {:cexpr "temp"} boogie_si_record_i32($i142);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i140, $i136);
    call {:si_unique_call 1436} {:cexpr "err"} boogie_si_record_i32($i143);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(40, 1));
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    call {:si_unique_call 1437} $i146 := devirtbounce.18(0, $i142, $p145, $sub.i32(0, 14), 0);
    call {:si_unique_call 1438} {:cexpr "__pu_err___9"} boogie_si_record_i32($i146);
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i146, $i143);
    call {:si_unique_call 1439} {:cexpr "err"} boogie_si_record_i32($i147);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(44, 1));
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    call {:si_unique_call 1440} $p150 := devirtbounce.17(0, $p149, $sub.i32(0, 14), 0);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i151 := $extractvalue($p150, 0);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i152 := $extractvalue($p150, 1);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i64.i32($i152);
    call {:si_unique_call 1441} {:cexpr "temp"} boogie_si_record_i32($i153);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i151, $i147);
    call {:si_unique_call 1442} {:cexpr "err"} boogie_si_record_i32($i154);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(44, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    call {:si_unique_call 1443} $i157 := devirtbounce.18(0, $i153, $p156, $sub.i32(0, 14), 0);
    call {:si_unique_call 1444} {:cexpr "__pu_err___10"} boogie_si_record_i32($i157);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i158 := $or.i32($i157, $i154);
    call {:si_unique_call 1445} {:cexpr "err"} boogie_si_record_i32($i158);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    call {:si_unique_call 1446} $p161 := devirtbounce.17(0, $p160, $sub.i32(0, 14), 0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i162 := $extractvalue($p161, 0);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $i163 := $extractvalue($p161, 1);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i64.i32($i163);
    call {:si_unique_call 1447} {:cexpr "temp"} boogie_si_record_i32($i164);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i165 := $or.i32($i162, $i158);
    call {:si_unique_call 1448} {:cexpr "err"} boogie_si_record_i32($i165);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(52, 1));
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    call {:si_unique_call 1449} $i168 := devirtbounce.18(0, $i164, $p167, $sub.i32(0, 14), 0);
    call {:si_unique_call 1450} {:cexpr "__pu_err___11"} boogie_si_record_i32($i168);
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i169 := $or.i32($i168, $i165);
    call {:si_unique_call 1451} {:cexpr "err"} boogie_si_record_i32($i169);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p1, $mul.ref(0, 80)), $mul.ref(72, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $p171 := $bitcast.ref.ref($p170);
    call {:si_unique_call 1452} $p172 := devirtbounce.17(0, $p171, $sub.i32(0, 14), 0);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i173 := $extractvalue($p172, 0);
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i174 := $extractvalue($p172, 1);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i64.i32($i174);
    call {:si_unique_call 1453} {:cexpr "temp"} boogie_si_record_i32($i175);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i176 := $or.i32($i173, $i169);
    call {:si_unique_call 1454} {:cexpr "err"} boogie_si_record_i32($i176);
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(60, 1));
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    call {:si_unique_call 1455} $i179 := devirtbounce.18(0, $i175, $p178, $sub.i32(0, 14), 0);
    call {:si_unique_call 1456} {:cexpr "__pu_err___12"} boogie_si_record_i32($i179);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i180 := $or.i32($i179, $i176);
    call {:si_unique_call 1457} {:cexpr "err"} boogie_si_record_i32($i180);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $i182 := (if $i181 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $i14 := $i182;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb10:
    assume $i26 == 1;
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb6;

  $bb7:
    assume $i22 == 1;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb9;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 14);
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const do_devconfig_ioctl: ref;

axiom do_devconfig_ioctl == $sub.ref(0, 487996);

procedure do_devconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $M.23, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $M.54, $M.25;



implementation do_devconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i9: i64;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1458} $p2 := $alloc($mul.ref(148, $zext.i32.i64(1)));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $i3 := capable(21);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1460} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p2);
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p1);
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} $i22 := copy_from_user($p20, $p21, 148);
    call {:si_unique_call 1466} {:cexpr "tmp___2"} boogie_si_record_i64($i22);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(0, 1)), $mul.ref(19, 1));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 0);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 148)), $mul.ref(20, 1)), $mul.ref(31, 4));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $i34 := $M.21;
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $i35 := $sge.i32($i33, $i34);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} $i36 := comedi_device_attach($p0, $p2);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    call {:si_unique_call 1469} {:cexpr "tmp___3"} boogie_si_record_i32($i36);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i8 := $i36;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i35 == 1;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb6;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} dev_warn.ref.ref($p31, .str.49);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb6;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb6;

  $bb8:
    assume $i10 == 1;
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} $i11 := is_device_busy($p0);
    call {:si_unique_call 1462} {:cexpr "tmp___1"} boogie_si_record_i32($i11);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb6;

  $bb13:
    assume $i15 == 1;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} comedi_device_detach($p0);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} ldv_module_put_6($p19);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 16);
    goto $bb6;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const comedi_clear_board_dev: ref;

axiom comedi_clear_board_dev == $sub.ref(0, 489028);

procedure comedi_clear_board_dev($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.2;



implementation comedi_clear_board_dev($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    call {:si_unique_call 1470} {:cexpr "i"} boogie_si_record_i32($i2);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i2);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i3, 8));
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.2, $p4);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i2);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i9, 8));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p10, $0.ref);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;
}



const do_bufconfig_ioctl: ref;

axiom do_bufconfig_ioctl == $sub.ref(0, 490060);

procedure do_bufconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $CurrAddr, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.25, $M.54, $M.2, $M.28, $M.23, $M.3, assertsPassed;



implementation do_bufconfig_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i8;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} $i6 := copy_from_user($p4, $p5, 32);
    call {:si_unique_call 1476} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $i13 := $uge.i32($i10, $i12);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i17);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p15, $mul.ref($i18, 296));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p15, $mul.ref($i18, 296)), $mul.ref(40, 1));
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p21, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p64, $i63);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p21, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p67, $i66);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p1);
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} $i70 := copy_to_user($p68, $p69, 32);
    call {:si_unique_call 1481} {:cexpr "tmp___3"} boogie_si_record_i64($i70);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb30:
    assume $i71 == 1;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb24:
    assume $i57 == 1;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} $i60 := resize_async_buffer($p0, $p19, $i59);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    call {:si_unique_call 1485} {:cexpr "retval"} boogie_si_record_i32($i60);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 0);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb26:
    assume $i61 == 1;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $i8 := $i60;
    goto $bb3;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i46 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} $i47 := capable(21);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i48 := $zext.i1.i8($i47);
    call {:si_unique_call 1483} {:cexpr "tmp___1"} boogie_si_record_i8($i48);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i8.i1($i48);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p52);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p21, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 1);
    goto $bb3;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb19;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p24, .str.5);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p25, .str.50);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p26, .str.4);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p27, .str.51);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.39, $p29);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 889);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p29, $i32);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p33, 1);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.40, $p34);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 1478} {:cexpr "tmp___0"} boogie_si_record_i64($i38);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i39 == 1;
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} __dynamic_dev_dbg.ref.ref.ref($p3, $p41, .str.51);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const do_devinfo_ioctl: ref;

axiom do_devinfo_ioctl == $sub.ref(0, 491092);

procedure do_devinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation do_devinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_97: i64;
  var vslice_dummy_var_98: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p3 := $alloc($mul.ref(176, $zext.i32.i64(1)));
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 1487} cmdloc_dummy_var_11 := $memset.i8(cmdloc_dummy_var_10, $p4, 0, 176, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(0, 1));
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1868);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(4, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} vslice_dummy_var_97 := strlcpy($p10, $p14, 20);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(28, 1));
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} vslice_dummy_var_98 := strlcpy($p17, $p19, 20);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} $p21 := comedi_file_read_subdevice($p2);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} $p28 := comedi_file_write_subdevice($p2);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(52, 1));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p1);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p3);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} $i37 := copy_to_user($p35, $p36, 176);
    call {:si_unique_call 1493} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb7:
    assume $i38 == 1;
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 14);
    goto $bb9;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p28, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(52, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p21, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const do_subdinfo_ioctl: ref;

axiom do_subdinfo_ioctl == $sub.ref(0, 492124);

procedure do_subdinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_subdinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i1;
  var $i31: i8;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $i48: i32;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i64;
  var $i104: i1;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i1;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i14: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $i133: i32;
  var $p134: ref;
  var $i135: i1;
  var $i136: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} $p6 := kcalloc($i5, 72, 208);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $i13 := $sgt.i32($i12, 0);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p1);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p7);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p128);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i129);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $i131 := $mul.i64($i130, 72);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} $i132 := copy_to_user($p126, $p127, $i131);
    call {:si_unique_call 1499} {:cexpr "tmp___2"} boogie_si_record_i64($i132);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $i133 := $trunc.i64.i32($i132);
    call {:si_unique_call 1500} {:cexpr "ret"} boogie_si_record_i32($i133);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p7);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} kfree($p134);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i133, 0);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $i136 := (if $i135 == 1 then $sub.i32(0, 14) else 0);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    $i10 := $i136;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb8;

  $bb8:
    call $p15, $p16, $i17, $p18, $i19, $p21, $i22, $p23, $p24, $i25, $p26, $p27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $p86, $i87, $i88, $p89, $p90, $i91, $i92, $p93, $p94, $i95, $i96, $p97, $i98, $i99, $p100, $p101, $p102, $i103, $i104, $p105, $i106, $i107, $p108, $p109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $i125, $i14 := do_subdinfo_ioctl_loop_$bb8($p0, $p2, $p7, $p11, $p15, $p16, $i17, $p18, $i19, $p21, $i22, $p23, $p24, $i25, $p26, $p27, $i28, $p29, $i30, $i31, $i32, $p33, $i34, $i35, $p36, $p37, $p38, $i39, $p40, $p41, $i42, $p43, $p44, $p45, $i46, $i47, $i48, $p49, $p50, $p51, $i52, $i53, $p54, $p55, $p56, $p57, $i58, $i59, $p60, $i61, $i62, $p63, $p64, $p65, $i66, $i67, $i68, $p69, $i70, $i71, $p72, $p73, $p74, $i75, $i76, $p77, $i78, $i79, $p80, $p81, $p82, $i83, $i84, $i85, $p86, $i87, $i88, $p89, $p90, $i91, $i92, $p93, $p94, $i95, $i96, $p97, $i98, $i99, $p100, $p101, $p102, $i103, $i104, $p105, $i106, $i107, $p108, $p109, $p110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $p118, $i119, $i120, $p121, $p122, $i123, $i124, $i125, $i14);
    goto $bb8_last;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i14);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref($i17, 296));
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i14);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(12, 1));
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(0, 1));
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(16, 1));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(4, 1));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(20, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} $i30 := comedi_is_subdevice_running($p18);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i8($i30);
    call {:si_unique_call 1496} {:cexpr "tmp___1"} boogie_si_record_i8($i31);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i8.i1($i31);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(12, 1));
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, 5);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(24, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(16, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p40, $i39);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(148, 1));
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(20, 1));
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(160, 1));
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(56, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(56, 1));
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i67 := $p2i.ref.i64($p2);
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i68 := $eq.i64($i66, $i67);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(48, 1));
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $i75 := $p2i.ref.i64($p74);
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(48, 1));
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p2);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i83, $i84);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(148, 1));
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i91, 0);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(168, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $i103 := $p2i.ref.i64($p102);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(216, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i111 := $p2i.ref.i64($p110);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(200, 1));
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $i120 := $ne.i64($i119, $p2i.ref.i64(insn_inval));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i120 == 1);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, 2);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i123 := $add.i32($i14, 1);
    call {:si_unique_call 1497} {:cexpr "i"} boogie_si_record_i32($i123);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p11);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $i125 := $sgt.i32($i124, $i123);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i125 == 1);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb43:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i123;
    goto $bb43_dummy;

  $bb40:
    assume $i120 == 1;
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p121, 1);
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i112 == 1;
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8209;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i115 := $or.i32($i114, 4096);
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i115);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i104 == 1;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i107 := $or.i32($i106, 64);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i107);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume $i92 == 1;
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(152, 1));
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i96 := $ne.i64($i95, 0);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb30;

  $bb31:
    assume $i96 == 1;
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    $i98 := $load.i32($M.0, $p97);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i98, 16);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i85 == 1;
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 8);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p89, $i88);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i76 == 1;
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $i79 := $or.i32($i78, 4);
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i68 == 1;
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i71 := $or.i32($i70, 2);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i59 == 1;
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, 1);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p63, $i62);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i48 := $shl.i32($i14, 24);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p16, $mul.ref($i17, 296)), $mul.ref(160, 1));
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p50, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $i53 := $or.i32($i48, $i52);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, $i53);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 134217728);
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref($i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;

  $bb43_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8065;
}



const do_chaninfo_ioctl: ref;

axiom do_chaninfo_ioctl == $sub.ref(0, 493156);

procedure do_chaninfo_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation do_chaninfo_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i32;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i57: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} $p2 := $alloc($mul.ref(48, $zext.i32.i64(1)));
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $i5 := copy_from_user($p3, $p4, 48);
    call {:si_unique_call 1504} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i12 := $uge.i32($i9, $i11);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb23:
    assume $i49 == 1;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p14, $mul.ref($i17, 296)), $mul.ref(168, 1));
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p14, $mul.ref($i17, 296)), $mul.ref(16, 1));
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 0);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i56 == 1;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb31;

  $bb31:
    call $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $p68, $i69, $p70, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, $i57 := do_chaninfo_ioctl_loop_$bb31($p0, $p2, $p14, $i17, $p54, $p58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i66, $p67, $p68, $i69, $p70, $p71, $p72, $i73, $i74, $p75, $p76, $i77, $p78, $i79, $i80, $i81, $i82, $i83, $i57);
    goto $bb31_last;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i60 := $shl.i32($i59, 28);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i63 := $shl.i32($i62, 24);
    goto corral_source_split_8334;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i60, $i63);
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i65 := $shl.i32($i57, 16);
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i64, $i65);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p14, $mul.ref($i17, 296)), $mul.ref(168, 1));
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i69 := $sext.i32.i64($i57);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p68, $mul.ref($i69, 8));
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p71, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i66, $i73);
    call {:si_unique_call 1507} {:cexpr "x"} boogie_si_record_i32($i74);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} __might_fault(.str.4, 1085);
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i77 := $sext.i32.i64($i57);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p76, $mul.ref($i77, 4));
    call {:si_unique_call 1509} $i79 := devirtbounce.24(0, $i74, $p78);
    call {:si_unique_call 1510} {:cexpr "__ret_pu"} boogie_si_record_i32($i79);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i80 := $ne.i32($i79, 0);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i57, 1);
    call {:si_unique_call 1511} {:cexpr "i"} boogie_si_record_i32($i81);
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p54);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $i83 := $sgt.i32($i82, $i81);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i83 == 1);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb37:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i57 := $i81;
    goto $bb37_dummy;

  $bb34:
    assume $i80 == 1;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref($i17, 296)), $mul.ref(148, 1));
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i25 == 1);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref($i17, 296)), $mul.ref(152, 1));
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p14, $mul.ref($i17, 296)), $mul.ref(152, 1));
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p14, $mul.ref($i17, 296)), $mul.ref(16, 1));
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i37 := $load.i32($M.0, $p36);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i37);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i39 := $mul.i64($i38, 4);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $i40 := copy_to_user($p32, $p35, $i39);
    call {:si_unique_call 1506} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb11;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;

  $bb37_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8327;
}



const do_rangeinfo_ioctl: ref;

axiom do_rangeinfo_ioctl == $sub.ref(0, 494188);

procedure do_rangeinfo_ioctl($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr;



implementation do_rangeinfo_ioctl($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p33: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i24;
  var $i59: i24;
  var $i60: i24;
  var $p61: ref;
  var $p62: ref;
  var $i63: i8;
  var $i64: i64;
  var $i65: i64;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p2);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i6 := copy_from_user($p4, $p5, 16);
    call {:si_unique_call 1515} {:cexpr "tmp"} boogie_si_record_i64($i6);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i10, 24);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 15);
    call {:si_unique_call 1516} {:cexpr "subd"} boogie_si_record_i32($i12);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 16);
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 255);
    call {:si_unique_call 1517} {:cexpr "chan"} boogie_si_record_i32($i16);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $i22 := $sle.i32($i21, $i12);
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i12);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref($i25, 296)), $mul.ref(160, 1));
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p24, $mul.ref($i25, 296)), $mul.ref(168, 1));
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i37 == 1);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume $i37 == 1;
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p24, $mul.ref($i25, 296)), $mul.ref(16, 1));
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, $i16);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p24, $mul.ref($i25, 296)), $mul.ref(168, 1));
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $i43 := $sext.i32.i64($i16);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p42, $mul.ref($i43, 8));
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $p45;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 65535);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i48, $i50);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    $i83 := $sext.i32.i64($i82);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $i84 := $mul.i64($i83, 12);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $i85 := copy_to_user($p78, $p80, $i84);
    call {:si_unique_call 1522} {:cexpr "tmp___1"} boogie_si_record_i64($i85);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb26:
    assume $i86 == 1;
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb20:
    assume $i51 == 1;
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p52, .str.5);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p53, .str.6);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p54, .str.7);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p55, .str.8);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $i58 := $load.i24($M.39, $p57);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $i59 := $and.i24($i58, $sub.i24(0, 262144));
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $i60 := $or.i24($i59, 89);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p57, $i60);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p61, 1);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    $i63 := $load.i8($M.40, $p62);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $i64 := $zext.i8.i64($i63);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i65 := $and.i64($i64, 1);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $i66 := ldv__builtin_expect($i65, 0);
    call {:si_unique_call 1519} {:cexpr "tmp___0"} boogie_si_record_i64($i66);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb22:
    assume $i67 == 1;
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $i72 := $and.i32($i71, 65535);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p33, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p3, $p69, .str.8, $i72, $i74, $i76);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i40 == 1;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref($i25, 296)), $mul.ref(160, 1));
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    $p33 := $p32;
    goto $bb13;

  $bb8:
    assume $i22 == 1;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;
}



const do_bufinfo_ioctl: ref;

axiom do_bufinfo_ioctl == $sub.ref(0, 495220);

procedure do_bufinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $CurrAddr;



implementation do_bufinfo_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i75: i1;
  var $i76: i8;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $i81: i32;
  var $i82: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i64;
  var $i110: i1;
  var $i9: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p3);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p1);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $i7 := copy_from_user($p5, $p6, 44);
    call {:si_unique_call 1526} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i14 := $uge.i32($i11, $i13);
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p16, $mul.ref($i19, 296));
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(40, 1));
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(56, 1));
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.0, $p49);
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i52 := $eq.i64($i51, 0);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(56, 1));
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p2);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i57, $i58);
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i62 := $ne.i32($i61, 0);
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i82 := $ne.i32($i81, 0);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(28, 1));
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i96);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.0, $p101);
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i102);
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_8583;

  corral_source_split_8583:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p106, $i105);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p1);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p3);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} $i109 := copy_to_user($p107, $p108, 44);
    call {:si_unique_call 1531} {:cexpr "tmp___3"} boogie_si_record_i64($i109);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i110 := $ne.i64($i109, 0);
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i110} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb40:
    assume $i110 == 1;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;

  $bb34:
    assume $i82 == 1;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, 64);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i87 == 1);
    goto $bb36;

  $bb37:
    assume $i87 == 1;
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} $i90 := comedi_buf_write_alloc($p20, $i89);
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, $i90);
    goto corral_source_split_8640;

  corral_source_split_8640:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} vslice_dummy_var_100 := comedi_buf_write_free($p20, $i93);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 64);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_8603;

  corral_source_split_8603:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb24;

  $bb25:
    assume $i67 == 1;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} $i70 := comedi_buf_read_alloc($p20, $i69);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p71, $i70);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_99 := comedi_buf_read_free($p20, $i73);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} $i75 := comedi_is_subdevice_idle($p20);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i76 := $zext.i1.i8($i75);
    call {:si_unique_call 1535} {:cexpr "tmp___1"} boogie_si_record_i8($i76);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i8.i1($i76);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume $i77 == 1;
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} $i78 := comedi_buf_n_bytes_ready($p20);
    call {:si_unique_call 1537} {:cexpr "tmp___2"} boogie_si_record_i32($i78);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i79 == 1;
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} do_become_nonbusy($p0, $p20);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb19:
    assume $i59 == 1;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 13);
    goto $bb3;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, 0);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p54, 0);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p25, .str.5);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p26, .str.52);
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p27, .str.4);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p28, .str.51);
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.39, $p30);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 1125);
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p30, $i33);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p34, 1);
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.40, $p35);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 1528} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, 0);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, 0);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(16, 1));
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(20, 1));
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, 0);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p47, 0);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(24, 1));
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} __dynamic_dev_dbg.ref.ref.ref($p4, $p42, .str.51);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(0, 14);
    goto $bb3;
}



const do_lock_ioctl: ref;

axiom do_lock_ioctl == $sub.ref(0, 496252);

procedure do_lock_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_lock_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $i22: i32;
  var $p24: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} {:cexpr "do_lock_ioctl:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i5, $i1);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(72, 1));
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1542} $p12 := spinlock_check($p11);
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} $i13 := _raw_spin_lock_irqsave($p12);
    call {:si_unique_call 1544} {:cexpr "flags"} boogie_si_record_i64($i13);
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(56, 1));
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(48, 1));
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(48, 1));
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p2);
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(72, 1));
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} spin_unlock_irqrestore($p24, $i13);
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $i7 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 16);
    goto $bb10;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb6;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const do_unlock_ioctl: ref;

axiom do_unlock_ioctl == $sub.ref(0, 497284);

procedure do_unlock_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_unlock_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} {:cexpr "do_unlock_ioctl:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i5, $i1);
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(56, 1));
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(48, 1));
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(48, 1));
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p2);
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $i28 := $eq.i64($i26, $i27);
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb14:
    assume $i28 == 1;
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(48, 1));
    goto corral_source_split_8722;

  corral_source_split_8722:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8706;

  corral_source_split_8706:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(48, 1));
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p2);
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i21, $i22);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb10;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 13);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const do_cancel_ioctl: ref;

axiom do_cancel_ioctl == $sub.ref(0, 498316);

procedure do_cancel_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation do_cancel_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $i24: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} {:cexpr "do_cancel_ioctl:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_8725;

  corral_source_split_8725:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i5, $i1);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($i1, 296));
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(40, 1));
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(56, 1));
    goto corral_source_split_8745;

  corral_source_split_8745:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(56, 1));
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p2);
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i21, $i22);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1548} $i24 := do_cancel($p0, $p10);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    call {:si_unique_call 1549} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    $i7 := $i24;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const do_cmd_ioctl: ref;

axiom do_cmd_ioctl == $sub.ref(0, 499348);

procedure do_cmd_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $CurrAddr, $M.54, $M.2, $M.28, $M.23, $M.3, assertsPassed, $M.24, $M.25;



implementation do_cmd_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i24;
  var $i39: i24;
  var $i40: i24;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $i60: i24;
  var $i61: i24;
  var $i62: i24;
  var $p63: ref;
  var $p64: ref;
  var $i65: i8;
  var $i66: i64;
  var $i67: i64;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i24;
  var $i82: i24;
  var $i83: i24;
  var $p84: ref;
  var $p85: ref;
  var $i86: i8;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i24;
  var $i121: i24;
  var $i122: i24;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i24;
  var $i148: i24;
  var $i149: i24;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i24;
  var $i169: i24;
  var $i170: i24;
  var $p171: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i64;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $i194: i1;
  var $i103: i32;
  var $i12: i32;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1550} $p3 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1553} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} $i10 := __comedi_get_user_cmd($p0, $p1, $p3);
    call {:si_unique_call 1558} {:cexpr "ret"} boogie_si_record_i32($i10);
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i19 := $zext.i32.i64($i18);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($p16, $mul.ref($i19, 296));
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(40, 1));
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(48, 1));
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(56, 1));
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.0, $p72);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1));
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p3);
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 1568} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p96, $p97, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(64, 1));
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p99, $0.ref);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1));
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i101 := __comedi_get_user_chanlist($p0, $p20, $p14, $p100);
    call {:si_unique_call 1570} {:cexpr "ret"} boogie_si_record_i32($i101);
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(224, 1));
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1));
    call {:si_unique_call 1572} $i107 := devirtbounce.25($p105, $p0, $p20, $p106);
    call {:si_unique_call 1573} {:cexpr "ret"} boogie_si_record_i32($i107);
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 1);
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i112 == 1);
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i107, 0);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 0);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} comedi_buf_reset($p20);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(248, 1));
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p180, 54);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i184 := $and.i32($i183, 32);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1587} comedi_update_subdevice_runflags($p20, 134217732, 134217728);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(56, 1));
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p190, $p2);
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(216, 1));
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    call {:si_unique_call 1588} $i193 := devirtbounce.6($p192, $p0, $p20);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    call {:si_unique_call 1589} {:cexpr "ret"} boogie_si_record_i32($i193);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    $i194 := $eq.i32($i193, 0);
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i103 := $i193;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1571} do_become_nonbusy($p0, $p20);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i12 := $i103;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb54:
    assume $i194 == 1;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb51:
    assume $i185 == 1;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(248, 1));
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i187 := $load.i32($M.0, $p186);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i187, 1);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(248, 1));
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p189, $i188);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb45:
    assume $i161 == 1;
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p162, .str.5);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p163, .str.53);
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p164, .str.4);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p165, .str.59);
    goto corral_source_split_8998;

  corral_source_split_8998:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i168 := $load.i24($M.39, $p167);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i169 := $and.i24($i168, $sub.i24(0, 262144));
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i170 := $or.i24($i169, 1730);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p167, $i170);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p171, 1);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.40, $p172);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i64($i173);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i175 := $and.i64($i174, 1);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1583} $i176 := ldv__builtin_expect($i175, 0);
    call {:si_unique_call 1584} {:cexpr "tmp___5"} boogie_si_record_i64($i176);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32(0, 12);
    goto $bb28;

  $bb47:
    assume $i177 == 1;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} __dynamic_dev_dbg.ref.ref.ref($p9, $p179, .str.59);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p114, .str.5);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p115, .str.53);
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p116, .str.4);
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p117, .str.57);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    $i120 := $load.i24($M.39, $p119);
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i121 := $and.i24($i120, $sub.i24(0, 262144));
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i122 := $or.i24($i121, 1714);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p119, $i122);
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p123, 1);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.40, $p124);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i64($i125);
    goto corral_source_split_8931;

  corral_source_split_8931:
    assume {:verifier.code 0} true;
    $i127 := $and.i64($i126, 1);
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} $i128 := ldv__builtin_expect($i127, 0);
    call {:si_unique_call 1575} {:cexpr "tmp___2"} boogie_si_record_i64($i128);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p22, $mul.ref(0, 264)), $mul.ref(80, 1));
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p3);
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $p134 := $bitcast.ref.ref($p132);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 1577} cmdloc_dummy_var_17 := $memcpy.i8(cmdloc_dummy_var_15, cmdloc_dummy_var_16, $p133, $p134, 80, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p135, $p14);
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(64, 1));
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, $0.ref);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p1);
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p3);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} $i139 := copy_to_user($p137, $p138, 80);
    call {:si_unique_call 1579} {:cexpr "tmp___4"} boogie_si_record_i64($i139);
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32(0, 11);
    goto $bb28;

  $bb38:
    assume $i140 == 1;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p141, .str.5);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p142, .str.53);
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p143, .str.4);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p144, .str.58);
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i147 := $load.i24($M.39, $p146);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i148 := $and.i24($i147, $sub.i24(0, 262144));
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $i149 := $or.i24($i148, 1720);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p146, $i149);
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p150, 1);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.40, $p151);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i64($i152);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $i154 := $and.i64($i153, 1);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} $i155 := ldv__builtin_expect($i154, 0);
    call {:si_unique_call 1581} {:cexpr "tmp___3"} boogie_si_record_i64($i155);
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $i156 := $ne.i64($i155, 0);
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i103 := $sub.i32(0, 14);
    goto $bb28;

  $bb40:
    assume $i156 == 1;
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} __dynamic_dev_dbg.ref.ref.ref($p8, $p158, .str.58);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume $i129 == 1;
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p131, .str.57, $i107);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb31;

  $bb26:
    assume $i102 == 1;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $i103 := $i101;
    goto $bb28;

  $bb20:
    assume $i74 == 1;
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p75, .str.5);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p76, .str.53);
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p77, .str.4);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p78, .str.56);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p79);
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i81 := $load.i24($M.39, $p80);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i82 := $and.i24($i81, $sub.i24(0, 262144));
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    $i83 := $or.i24($i82, 1699);
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p80, $i83);
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p84, 1);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.40, $p85);
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i64($i86);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    $i88 := $and.i64($i87, 1);
    goto corral_source_split_8879;

  corral_source_split_8879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} $i89 := ldv__builtin_expect($i88, 0);
    call {:si_unique_call 1566} {:cexpr "tmp___1"} boogie_si_record_i64($i89);
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 22);
    goto $bb3;

  $bb22:
    assume $i90 == 1;
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p92, .str.56, $i94);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb14:
    assume $i53 == 1;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p54, .str.5);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p55, .str.53);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p56, .str.4);
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p57, .str.55);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $i60 := $load.i24($M.39, $p59);
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i61 := $and.i24($i60, $sub.i24(0, 262144));
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i62 := $or.i24($i61, 1692);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p59, $i62);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p63, 1);
    goto corral_source_split_8842;

  corral_source_split_8842:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $i65 := $load.i8($M.40, $p64);
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i64($i65);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 1);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} $i68 := ldv__builtin_expect($i67, 0);
    call {:si_unique_call 1563} {:cexpr "tmp___0"} boogie_si_record_i64($i68);
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $i69 := $ne.i64($i68, 0);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 16);
    goto $bb3;

  $bb16:
    assume $i69 == 1;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} __dynamic_dev_dbg.ref.ref.ref($p5, $p71, .str.55);
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p16, $mul.ref($i19, 296)), $mul.ref(48, 1));
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p2);
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i29, $i30);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb7;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p32, .str.5);
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p33, .str.53);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p34, .str.4);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p35, .str.54);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i38 := $load.i24($M.39, $p37);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $i39 := $and.i24($i38, $sub.i24(0, 262144));
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    $i40 := $or.i24($i39, 1686);
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p37, $i40);
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p41, 1);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.40, $p42);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i64($i43);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    $i45 := $and.i64($i44, 1);
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1559} $i46 := ldv__builtin_expect($i45, 0);
    call {:si_unique_call 1560} {:cexpr "tmp"} boogie_si_record_i64($i46);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 13);
    goto $bb3;

  $bb10:
    assume $i47 == 1;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} __dynamic_dev_dbg.ref.ref.ref($p4, $p49, .str.54);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i12 := $i10;
    goto $bb3;
}



const do_cmdtest_ioctl: ref;

axiom do_cmdtest_ioctl == $sub.ref(0, 500380);

procedure do_cmdtest_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr;



implementation do_cmdtest_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} $p3 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} $i5 := __comedi_get_user_cmd($p0, $p1, $p3);
    call {:si_unique_call 1593} {:cexpr "ret"} boogie_si_record_i32($i5);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p11, $mul.ref($i14, 296));
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p9);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_9060;

  corral_source_split_9060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p11, $mul.ref($i14, 296)), $mul.ref(224, 1));
    goto corral_source_split_9068;

  corral_source_split_9068:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    call {:si_unique_call 1596} $i22 := devirtbounce.25($p21, $p0, $p15, $p3);
    call {:si_unique_call 1597} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} kfree($p25);
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, $p9);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p1);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $i29 := copy_to_user($p27, $p28, 80);
    call {:si_unique_call 1600} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_9078;

  corral_source_split_9078:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i49 := $i22;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i7 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p31, .str.5);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p32, .str.66);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p33, .str.4);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p34, .str.61);
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.39, $p36);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 1806);
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p36, $i39);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p40, 1);
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.40, $p41);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1602} {:cexpr "tmp"} boogie_si_record_i64($i45);
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i49 := $sub.i32(0, 14);
    goto $bb16;

  $bb13:
    assume $i46 == 1;
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_9107;

  corral_source_split_9107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} __dynamic_dev_dbg.ref.ref.ref($p4, $p48, .str.61);
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $i18 := __comedi_get_user_chanlist($p0, $p15, $p9, $p3);
    call {:si_unique_call 1595} {:cexpr "ret"} boogie_si_record_i32($i18);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i7 := $i18;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;
}



const do_insnlist_ioctl: ref;

axiom do_insnlist_ioctl == $sub.ref(0, 501412);

procedure do_insnlist_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $CurrAddr, $M.2, $M.28, $M.23, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation do_insnlist_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $i61: i64;
  var $p63: ref;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $i92: i64;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $i104: i1;
  var $i105: i32;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i24;
  var $i113: i24;
  var $i114: i24;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i64;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $i128: i32;
  var $i129: i32;
  var $i130: i64;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $i135: i1;
  var $i136: i64;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i64;
  var $p144: ref;
  var $i145: i32;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $i149: i1;
  var $i150: i32;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $i157: i24;
  var $i158: i24;
  var $i159: i24;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i64;
  var $i164: i64;
  var $i165: i64;
  var $i166: i1;
  var $p167: ref;
  var $p168: ref;
  var $i169: i1;
  var $i170: i8;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i60: i32;
  var $i175: i32;
  var $i176: i32;
  var $i58: i32;
  var $i59: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p177: ref;
  var $p178: ref;
  var $i179: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1604} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p3);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $i10 := copy_from_user($p8, $p9, 16);
    call {:si_unique_call 1610} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} $p13 := kmalloc_array(256, 4, 208);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_9123;

  corral_source_split_9123:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} $p23 := kcalloc($i22, 40, 208);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_9140;

  corral_source_split_9140:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p24);
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i33 := $zext.i32.i64($i32);
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i34 := $mul.i64($i33, 40);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} $i35 := copy_from_user($p27, $p30, $i34);
    call {:si_unique_call 1616} {:cexpr "tmp___3"} boogie_si_record_i64($i35);
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i57 := $ult.i32(0, $i56);
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i58, $i59 := 0, 0;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p23, $i58, $i59;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p17);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} kfree($p177);
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p14);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} kfree($p178);
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i179 := $slt.i32($i19, 0);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i12 := $i18;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb56:
    assume $i179 == 1;
    goto corral_source_split_9353;

  corral_source_split_9353:
    assume {:verifier.code 0} true;
    $i12 := $i19;
    goto $bb3;

  $bb18:
    assume $i57 == 1;
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $i60 := 0;
    goto $bb21;

  $bb21:
    call $i61, $p63, $i64, $i65, $i66, $i85, $p87, $i88, $i89, $i90, $p91, $i92, $p94, $p95, $p96, $i97, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $p132, $i133, $i134, $i135, $i136, $p138, $p139, $p140, $p141, $i142, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $i169, $i170, $i171, $i172, $i173, $i174, $i60, $i175, $i176 := do_insnlist_ioctl_loop_$bb21($p0, $p2, $p14, $p24, $p55, $i61, $p63, $i64, $i65, $i66, $i85, $p87, $i88, $i89, $i90, $p91, $i92, $p94, $p95, $p96, $i97, $p99, $i100, $i101, $i102, $i103, $i104, $i105, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $p132, $i133, $i134, $i135, $i136, $p138, $p139, $p140, $p141, $i142, $p144, $i145, $i146, $i147, $i148, $i149, $i150, $i169, $i170, $i171, $i172, $i173, $i174, $i60, $i175, $i176);
    goto $bb21_last;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_9194;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p24, $mul.ref($i61, 40)), $mul.ref(4, 1));
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    $i65 := $ugt.i32($i64, 256);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $i66 := $i60;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i60);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p24, $mul.ref($i85, 40)), $mul.ref(0, 1));
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 134217728);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    $i90 := $ne.i32($i89, 0);
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i60);
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p24, $mul.ref($i124, 40));
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} $i126 := parse_insn($p0, $p125, $p14, $p2);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    call {:si_unique_call 1629} {:cexpr "ret"} boogie_si_record_i32($i126);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i126, 0);
    goto corral_source_split_9284;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    $i128, $i129 := $i60, $i126;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i130 := $sext.i32.i64($i60);
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p24, $mul.ref($i130, 40)), $mul.ref(0, 1));
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i133, 67108864);
    goto corral_source_split_9292;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} $i169 := need_resched();
    goto corral_source_split_9340;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    $i170 := $zext.i1.i8($i169);
    call {:si_unique_call 1636} {:cexpr "tmp___9"} boogie_si_record_i8($i170);
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i8.i1($i170);
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i172 := $add.i32($i60, 1);
    call {:si_unique_call 1638} {:cexpr "i"} boogie_si_record_i32($i172);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    $i173 := $load.i32($M.0, $p55);
    goto corral_source_split_9348;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    $i174 := $ult.i32($i172, $i173);
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $i175, $i176 := $i172, $i126;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $i58, $i59 := $i175, $i176;
    goto $bb20;

  $bb53:
    assume $i174 == 1;
    assume {:verifier.code 0} true;
    $i60 := $i172;
    goto $bb53_dummy;

  $bb50:
    assume $i171 == 1;
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} schedule();
    goto corral_source_split_9345;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb41:
    assume $i135 == 1;
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $i136 := $sext.i32.i64($i60);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    goto corral_source_split_9297;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p24, $mul.ref($i136, 40)), $mul.ref(8, 1));
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    $p140 := $bitcast.ref.ref($p139);
    goto corral_source_split_9300;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p14);
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $i142 := $sext.i32.i64($i60);
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p24, $mul.ref($i142, 40)), $mul.ref(4, 1));
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_9305;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    $i146 := $zext.i32.i64($i145);
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i147 := $mul.i64($i146, 4);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} $i148 := copy_to_user($p140, $p141, $i147);
    call {:si_unique_call 1631} {:cexpr "tmp___8"} boogie_si_record_i64($i148);
    goto corral_source_split_9308;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    $i149 := $ne.i64($i148, 0);
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $i150 := $i60;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume $i149 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p151, .str.5);
    goto corral_source_split_9313;

  corral_source_split_9313:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p152, .str.67);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9316;

  corral_source_split_9316:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p153, .str.4);
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p154, .str.70);
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p155);
    goto corral_source_split_9321;

  corral_source_split_9321:
    assume {:verifier.code 0} true;
    $i157 := $load.i24($M.39, $p156);
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $i158 := $and.i24($i157, $sub.i24(0, 262144));
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $i159 := $or.i24($i158, 1488);
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p156, $i159);
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p160, 1);
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.40, $p161);
    goto corral_source_split_9329;

  corral_source_split_9329:
    assume {:verifier.code 0} true;
    $i163 := $zext.i8.i64($i162);
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $i164 := $and.i64($i163, 1);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i165 := ldv__builtin_expect($i164, 0);
    call {:si_unique_call 1633} {:cexpr "tmp___7"} boogie_si_record_i64($i165);
    goto corral_source_split_9332;

  corral_source_split_9332:
    assume {:verifier.code 0} true;
    $i166 := $ne.i64($i165, 0);
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i166 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p23, $i150, $sub.i32(0, 14);
    goto $bb7;

  $bb45:
    assume $i166 == 1;
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_9337;

  corral_source_split_9337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} __dynamic_dev_dbg.ref.ref.ref($p7, $p168, .str.70);
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb38:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p23, $i128, $i129;
    goto $bb7;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i90 == 1;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p14);
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $i92 := $sext.i32.i64($i60);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p24, $mul.ref($i92, 40)), $mul.ref(8, 1));
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i60);
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p24, $mul.ref($i97, 40)), $mul.ref(4, 1));
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i100 := $load.i32($M.0, $p99);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    $i101 := $zext.i32.i64($i100);
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    $i102 := $mul.i64($i101, 4);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} $i103 := copy_from_user($p91, $p96, $i102);
    call {:si_unique_call 1624} {:cexpr "tmp___6"} boogie_si_record_i64($i103);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i104 := $ne.i64($i103, 0);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i105 := $i60;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p106, .str.5);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9255;

  corral_source_split_9255:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p107, .str.67);
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p108, .str.4);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p109, .str.68);
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    $i112 := $load.i24($M.39, $p111);
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 0} true;
    $i113 := $and.i24($i112, $sub.i24(0, 262144));
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $i114 := $or.i24($i113, 1476);
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p111, $i114);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p115, 1);
    goto corral_source_split_9268;

  corral_source_split_9268:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.40, $p116);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i64($i117);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    $i119 := $and.i64($i118, 1);
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} $i120 := ldv__builtin_expect($i119, 0);
    call {:si_unique_call 1626} {:cexpr "tmp___5"} boogie_si_record_i64($i120);
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i120, 0);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p23, $i105, $sub.i32(0, 14);
    goto $bb7;

  $bb33:
    assume $i121 == 1;
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} __dynamic_dev_dbg.ref.ref.ref($p6, $p123, .str.68);
    goto corral_source_split_9279;

  corral_source_split_9279:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb23:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p67, .str.5);
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p68, .str.67);
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p69, .str.4);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p70, .str.69);
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_9210;

  corral_source_split_9210:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.39, $p72);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 1468);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p72, $i75);
    goto corral_source_split_9214;

  corral_source_split_9214:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p76, 1);
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.40, $p77);
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 1621} {:cexpr "tmp___4"} boogie_si_record_i64($i81);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p23, $i66, $sub.i32(0, 22);
    goto $bb7;

  $bb25:
    assume $i82 == 1;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} __dynamic_dev_dbg.ref.ref.ref($p5, $p84, .str.69);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb12:
    assume $i36 == 1;
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9158;

  corral_source_split_9158:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p37, .str.5);
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p38, .str.67);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p39, .str.4);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p40, .str.68);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.39, $p42);
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 1460);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p42, $i45);
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p46, 1);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.40, $p47);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1618} {:cexpr "tmp___2"} boogie_si_record_i64($i51);
    goto corral_source_split_9178;

  corral_source_split_9178:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p23, 0, $sub.i32(0, 14);
    goto $bb7;

  $bb14:
    assume $i52 == 1;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9182;

  corral_source_split_9182:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} __dynamic_dev_dbg.ref.ref.ref($p4, $p54, .str.68);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p23, 0, $sub.i32(0, 12);
    goto $bb7;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $0.ref, 0, $sub.i32(0, 12);
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 14);
    goto $bb3;

  $bb53_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_9192;
}



const do_insn_ioctl: ref;

axiom do_insn_ioctl == $sub.ref(0, 502444);

procedure do_insn_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.2, $M.28, $M.23, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation do_insn_ioctl($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i8: i32;
  var $p49: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1639} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} $p4 := kmalloc_array(256, 4, 208);
    goto corral_source_split_9356;

  corral_source_split_9356:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p3);
    goto corral_source_split_9367;

  corral_source_split_9367:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} $i11 := copy_from_user($p9, $p10, 40);
    call {:si_unique_call 1643} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_9370;

  corral_source_split_9370:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 256);
    goto corral_source_split_9376;

  corral_source_split_9376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 134217728);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_9385;

  corral_source_split_9385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} $i31 := parse_insn($p0, $p3, $p5, $p2);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    call {:si_unique_call 1647} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_9407;

  corral_source_split_9407:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 67108864);
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    call {:si_unique_call 1650} {:cexpr "ret"} boogie_si_record_i32($i48);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $i8 := $i48;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p5);
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1641} kfree($p49);
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9412;

  corral_source_split_9412:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p5);
    goto corral_source_split_9415;

  corral_source_split_9415:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $i44 := $mul.i64($i43, 4);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} $i45 := copy_to_user($p39, $p40, $i44);
    call {:si_unique_call 1649} {:cexpr "tmp___2"} boogie_si_record_i64($i45);
    goto corral_source_split_9420;

  corral_source_split_9420:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i46 == 1;
    goto corral_source_split_9423;

  corral_source_split_9423:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_9404;

  corral_source_split_9404:
    assume {:verifier.code 0} true;
    $i8 := $i31;
    goto $bb3;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i20 == 1;
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p5);
    goto corral_source_split_9388;

  corral_source_split_9388:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_9394;

  corral_source_split_9394:
    assume {:verifier.code 0} true;
    $i28 := $mul.i64($i27, 4);
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i29 := copy_from_user($p21, $p24, $i28);
    call {:si_unique_call 1645} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_9399;

  corral_source_split_9399:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb8:
    assume $i15 == 1;
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9379;

  corral_source_split_9379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 256);
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_9361;

  corral_source_split_9361:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;
}



const do_poll_ioctl: ref;

axiom do_poll_ioctl == $sub.ref(0, 503476);

procedure do_poll_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation do_poll_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} {:cexpr "do_poll_ioctl:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_9428;

  corral_source_split_9428:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i5, $i1);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p9, $mul.ref($i1, 296));
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(56, 1));
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_9443;

  corral_source_split_9443:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(56, 1));
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p2);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i17, $i18);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(232, 1));
    goto corral_source_split_9456;

  corral_source_split_9456:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9436;

  corral_source_split_9436:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p9, $mul.ref($i1, 296)), $mul.ref(232, 1));
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    call {:si_unique_call 1652} $i26 := devirtbounce.6($p25, $p0, $p10);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    call {:si_unique_call 1653} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_9463;

  corral_source_split_9463:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb3;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 16);
    goto $bb3;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_9446;

  corral_source_split_9446:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb3;
}



const do_setrsubd_ioctl: ref;

axiom do_setrsubd_ioctl == $sub.ref(0, 504508);

procedure do_setrsubd_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_setrsubd_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} {:cexpr "do_setrsubd_ioctl:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_9466;

  corral_source_split_9466:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $i9 := $ule.i64($i8, $i1);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($i1, 296));
    goto corral_source_split_9480;

  corral_source_split_9480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} $p14 := comedi_file_read_subdevice($p2);
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p13);
    goto corral_source_split_9483;

  corral_source_split_9483:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref($i1, 296)), $mul.ref(20, 1));
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 32768);
    goto corral_source_split_9490;

  corral_source_split_9490:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p14);
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p13);
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p14, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_9500;

  corral_source_split_9500:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_9503;

  corral_source_split_9503:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i26, $i28);
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p14, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_9510;

  corral_source_split_9510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p14, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 64);
    goto corral_source_split_9517;

  corral_source_split_9517:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb13;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_9520;

  corral_source_split_9520:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_9493;

  corral_source_split_9493:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const do_setwsubd_ioctl: ref;

axiom do_setwsubd_ioctl == $sub.ref(0, 505540);

procedure do_setwsubd_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation do_setwsubd_ioctl($p0: ref, $i1: i64, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} {:cexpr "do_setwsubd_ioctl:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 504)), $mul.ref(456, 1));
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_9527;

  corral_source_split_9527:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_9530;

  corral_source_split_9530:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $i9 := $ule.i64($i8, $i1);
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($i1, 296));
    goto corral_source_split_9540;

  corral_source_split_9540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p14 := comedi_file_write_subdevice($p2);
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p13);
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i17 := $eq.i64($i15, $i16);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref($i1, 296)), $mul.ref(20, 1));
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 16384);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p14);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_9556;

  corral_source_split_9556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p13);
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p14, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p2);
    goto corral_source_split_9562;

  corral_source_split_9562:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i26, $i28);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb13;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p14, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb13;

  $bb16:
    assume $i33 == 1;
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p14, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_9574;

  corral_source_split_9574:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p35, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 64);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb13;

  $bb18:
    assume $i40 == 1;
    goto corral_source_split_9580;

  corral_source_split_9580:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 16);
    goto $bb3;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_9553;

  corral_source_split_9553:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb3;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 506572);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1660} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_9587;

  corral_source_split_9587:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1661} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} __might_fault(.str.93, 697);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_9590;

  corral_source_split_9590:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_9600;

  corral_source_split_9600:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1664} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_9595;

  corral_source_split_9595:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_9608;

  corral_source_split_9608:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 1666} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const parse_insn: ref;

axiom parse_insn == $sub.ref(0, 507604);

procedure parse_insn($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.2, $M.28, $M.23, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation parse_insn($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i64;
  var $i32: i32;
  var $p33: ref;
  var $i34: i64;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i24;
  var $i90: i24;
  var $i91: i24;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i24;
  var $i114: i24;
  var $i115: i24;
  var $p116: ref;
  var $p117: ref;
  var $i118: i8;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i24;
  var $i140: i24;
  var $i141: i24;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $i29: i32;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i24;
  var $i164: i24;
  var $i165: i24;
  var $p166: ref;
  var $p167: ref;
  var $i168: i8;
  var $i169: i64;
  var $i170: i64;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i1;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i24;
  var $i194: i24;
  var $i195: i24;
  var $p196: ref;
  var $p197: ref;
  var $i198: i8;
  var $i199: i64;
  var $i200: i64;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i32;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $i213: i64;
  var $i214: i64;
  var $i215: i1;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $i222: i24;
  var $i223: i24;
  var $i224: i24;
  var $p225: ref;
  var $p226: ref;
  var $i227: i8;
  var $i228: i64;
  var $i229: i64;
  var $i230: i64;
  var $i231: i1;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i1;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i24;
  var $i244: i24;
  var $i245: i24;
  var $p246: ref;
  var $p247: ref;
  var $i248: i8;
  var $i249: i64;
  var $i250: i64;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i64;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var $i261: i32;
  var $i262: i1;
  var $i263: i1;
  var $i264: i1;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $i270: i32;
  var $i271: i1;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $i278: i24;
  var $i279: i24;
  var $i280: i24;
  var $p281: ref;
  var $p282: ref;
  var $i283: i8;
  var $i284: i64;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i32;
  var $p293: ref;
  var $p294: ref;
  var $i295: i64;
  var $i296: i1;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $i300: i32;
  var $i301: i64;
  var $i302: i64;
  var $p303: ref;
  var $i304: i32;
  var $p306: ref;
  var $i307: i32;
  var $i305: i32;
  var $p308: ref;
  var $i309: i32;
  var $i310: i1;
  var $i312: i64;
  var $p313: ref;
  var $i314: i32;
  var $i315: i1;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $i322: i24;
  var $i323: i24;
  var $i324: i24;
  var $p325: ref;
  var $p326: ref;
  var $i327: i8;
  var $i328: i64;
  var $i329: i64;
  var $i330: i64;
  var $i331: i1;
  var $p332: ref;
  var $p333: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i1;
  var $i311: i32;
  var $i334: i32;
  var $i338: i1;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
  var $p348: ref;
  var $i349: i24;
  var $i350: i24;
  var $i351: i24;
  var $p352: ref;
  var $p353: ref;
  var $i354: i8;
  var $i355: i64;
  var $i356: i64;
  var $i357: i64;
  var $i358: i1;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $i362: i32;
  var $i363: i32;
  var $p364: ref;
  var $i365: i32;
  var $i366: i1;
  var $i368: i32;
  var $p369: ref;
  var $i370: i32;
  var $i371: i1;
  var $p372: ref;
  var $i373: i32;
  var $i374: i32;
  var $i375: i1;
  var $p376: ref;
  var $i377: i32;
  var $i378: i32;
  var $p379: ref;
  var $i380: i32;
  var $i381: i32;
  var $p382: ref;
  var $i383: i32;
  var $p384: ref;
  var $p385: ref;
  var $i386: i32;
  var $i387: i1;
  var $p388: ref;
  var $i389: i32;
  var $i390: i32;
  var $p391: ref;
  var $i367: i32;
  var $i392: i32;
  var $i393: i1;
  var $p394: ref;
  var $p395: ref;
  var $i396: i32;
  var $i292: i32;
  var $p397: ref;
  var $i151: i32;
  var $i177: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 33554432);
    goto corral_source_split_9613;

  corral_source_split_9613:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    $i153 := $load.i32($M.0, $p152);
    goto corral_source_split_9621;

  corral_source_split_9621:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    $i156 := $uge.i32($i153, $i155);
    goto corral_source_split_9624;

  corral_source_split_9624:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_9854;

  corral_source_split_9854:
    assume {:verifier.code 0} true;
    $p179 := $load.ref($M.0, $p178);
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    $i182 := $zext.i32.i64($i181);
    goto corral_source_split_9858;

  corral_source_split_9858:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($p179, $mul.ref($i182, 296));
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(12, 1));
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    $i186 := $eq.i32($i185, 0);
    goto corral_source_split_9862;

  corral_source_split_9862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i186} true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i186 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(48, 1));
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i209 := $p2i.ref.i64($p208);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_9898;

  corral_source_split_9898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i210 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1705} $i235 := comedi_check_chanlist($p183, 1, $p234);
    call {:si_unique_call 1706} {:cexpr "ret"} boogie_si_record_i32($i235);
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $i236 := $slt.i32($i235, 0);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    assume {:branchcond $i236} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i236 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(56, 1));
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    $i257 := $p2i.ref.i64($p256);
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $i258 := $ne.i64($i257, 0);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(56, 1));
    goto corral_source_split_9976;

  corral_source_split_9976:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p259, parse_insn);
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i262 := $slt.i32($i261, 201326594);
    assume {:verifier.code 0} true;
    assume {:branchcond $i262} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i262 == 1);
    assume {:verifier.code 0} true;
    $i263 := $slt.i32($i261, 201326595);
    assume {:verifier.code 0} true;
    assume {:branchcond $i263} true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    $i264 := $eq.i32($i261, 201326595);
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i264 == 1);
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $i292 := $sub.i32(0, 22);
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    $p397 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(56, 1));
    goto corral_source_split_10032;

  corral_source_split_10032:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p397, $0.ref);
    assume {:verifier.code 0} true;
    $i151 := $i292;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i177 := $i151;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $r := $i177;
    return;

  $bb88:
    assume $i264 == 1;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} $i392 := check_insn_config_length($p1, $p2);
    call {:si_unique_call 1711} {:cexpr "ret"} boogie_si_record_i32($i392);
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    $i393 := $ne.i32($i392, 0);
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    assume {:branchcond $i393} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i393 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(208, 1));
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $p395 := $load.ref($M.0, $p394);
    call {:si_unique_call 1730} $i396 := devirtbounce.11($p395, $p0, $p183, $p1, $p2);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    call {:si_unique_call 1731} {:cexpr "ret"} boogie_si_record_i32($i396);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i292 := $i396;
    goto $bb103;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb143:
    assume $i393 == 1;
    goto corral_source_split_10179;

  corral_source_split_10179:
    assume {:verifier.code 0} true;
    $i292 := $i392;
    goto $bb103;

  $bb86:
    assume $i263 == 1;
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9981;

  corral_source_split_9981:
    assume {:verifier.code 0} true;
    $i365 := $load.i32($M.0, $p364);
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i366 := $ne.i32($i365, 2);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i366} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i366 == 1);
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.0, $p2);
    call {:si_unique_call 1726} {:cexpr "orig_mask"} boogie_si_record_i32($i368);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(16, 1));
    goto corral_source_split_10142;

  corral_source_split_10142:
    assume {:verifier.code 0} true;
    $i370 := $load.i32($M.0, $p369);
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $i371 := $sle.i32($i370, 32);
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    $i383 := 0;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto corral_source_split_10166;

  corral_source_split_10166:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(200, 1));
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $p385 := $load.ref($M.0, $p384);
    call {:si_unique_call 1728} $i386 := devirtbounce.11($p385, $p0, $p183, $p1, $p2);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    call {:si_unique_call 1729} {:cexpr "ret"} boogie_si_record_i32($i386);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i368);
    goto corral_source_split_10169;

  corral_source_split_10169:
    assume {:verifier.code 0} true;
    $i387 := $ne.i32($i383, 0);
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i387} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i387 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i367 := $i386;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    $i292 := $i367;
    goto $bb103;

  $bb140:
    assume $i387 == 1;
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    $i389 := $load.i32($M.0, $p388);
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $i390 := $lshr.i32($i389, $i383);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_10176;

  corral_source_split_10176:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p391, $i390);
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb134:
    assume $i371 == 1;
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_10149;

  corral_source_split_10149:
    assume {:verifier.code 0} true;
    $i373 := $load.i32($M.0, $p372);
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $i374 := $and.i32($i373, 65535);
    call {:si_unique_call 1727} {:cexpr "shift"} boogie_si_record_i32($i374);
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i375 := $ne.i32($i374, 0);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i383 := $i374;
    goto $bb139;

  $bb136:
    assume $i375 == 1;
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p376, 0);
    goto corral_source_split_10156;

  corral_source_split_10156:
    assume {:verifier.code 0} true;
    $i377 := $load.i32($M.0, $p2);
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i378 := $shl.i32($i377, $i374);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i378);
    goto corral_source_split_10159;

  corral_source_split_10159:
    assume {:verifier.code 0} true;
    $p379 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $i380 := $load.i32($M.0, $p379);
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $i381 := $shl.i32($i380, $i374);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p382, $i381);
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb131:
    assume $i366 == 1;
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    $i367 := $sub.i32(0, 22);
    goto $bb133;

  $bb84:
    assume $i262 == 1;
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i261, 134217729);
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i261, 134217729);
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb93, $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb90;

  $bb93:
    assume $i266 == 1;
    goto corral_source_split_9989;

  corral_source_split_9989:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(152, 1));
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $p294 := $load.ref($M.0, $p293);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    $i295 := $p2i.ref.i64($p294);
    goto corral_source_split_9992;

  corral_source_split_9992:
    assume {:verifier.code 0} true;
    $i296 := $ne.i64($i295, 0);
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i296 == 1);
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(148, 1));
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    $i307 := $load.i32($M.0, $p306);
    goto corral_source_split_10046;

  corral_source_split_10046:
    assume {:verifier.code 0} true;
    $i305 := $i307;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $p308 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    $i309 := $load.i32($M.0, $p308);
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $i310 := $ult.i32(0, $i309);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i310} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i310 == 1);
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i334 := $i235;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto corral_source_split_10091;

  corral_source_split_10091:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i334, 0);
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    assume {:branchcond $i338} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    $i363 := $i334;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    $i292 := $i363;
    goto $bb103;

  $bb122:
    assume $i338 == 1;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(192, 1));
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.0, $p339);
    call {:si_unique_call 1721} $i341 := devirtbounce.11($p340, $p0, $p183, $p1, $p2);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    call {:si_unique_call 1722} {:cexpr "ret"} boogie_si_record_i32($i341);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, $sub.i32(0, 110));
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i363 := $i341;
    goto $bb130;

  $bb124:
    assume $i342 == 1;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p343, .str.5);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p344, .str.71);
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p345, .str.4);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10112;

  corral_source_split_10112:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p346, .str.81);
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $p348 := $bitcast.ref.ref($p347);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i349 := $load.i24($M.39, $p348);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    $i350 := $and.i24($i349, $sub.i24(0, 262144));
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $i351 := $or.i24($i350, 1369);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p348, $i351);
    goto corral_source_split_10119;

  corral_source_split_10119:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p352, 1);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10122;

  corral_source_split_10122:
    assume {:verifier.code 0} true;
    $i354 := $load.i8($M.40, $p353);
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $i355 := $zext.i8.i64($i354);
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i356 := $and.i64($i355, 1);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} $i357 := ldv__builtin_expect($i356, 0);
    call {:si_unique_call 1724} {:cexpr "tmp___9"} boogie_si_record_i64($i357);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    $i358 := $ne.i64($i357, 0);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i358} true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb126:
    assume $i358 == 1;
    goto corral_source_split_10129;

  corral_source_split_10129:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $p360 := $load.ref($M.0, $p359);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(8, 1));
    goto corral_source_split_10132;

  corral_source_split_10132:
    assume {:verifier.code 0} true;
    $i362 := $load.i32($M.0, $p361);
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} __dynamic_dev_dbg.ref.ref.ref.i32($p15, $p360, .str.81, $i362);
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    goto $bb128;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb107:
    assume $i310 == 1;
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i311 := 0;
    goto $bb110;

  $bb110:
    call $i312, $p313, $i314, $i315, $i335, $i336, $i337, $i311 := parse_insn_loop_$bb110($p2, $i305, $p308, $i312, $p313, $i314, $i315, $i335, $i336, $i337, $i311);
    goto $bb110_last;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i312 := $sext.i32.i64($i311);
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($p2, $mul.ref($i312, 4));
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $i315 := $ugt.i32($i314, $i305);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i335 := $add.i32($i311, 1);
    call {:si_unique_call 1720} {:cexpr "i"} boogie_si_record_i32($i335);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $i336 := $load.i32($M.0, $p308);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    $i337 := $ult.i32($i335, $i336);
    goto corral_source_split_10096;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i337 == 1);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb119:
    assume $i337 == 1;
    assume {:verifier.code 0} true;
    $i311 := $i335;
    goto $bb119_dummy;

  $bb112:
    assume $i315 == 1;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p316, .str.5);
    goto corral_source_split_10064;

  corral_source_split_10064:
    assume {:verifier.code 0} true;
    $p317 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p317, .str.71);
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p318, .str.4);
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p319, .str.80);
    goto corral_source_split_10070;

  corral_source_split_10070:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p321 := $bitcast.ref.ref($p320);
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    $i322 := $load.i24($M.39, $p321);
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $i323 := $and.i24($i322, $sub.i24(0, 262144));
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    $i324 := $or.i24($i323, 1360);
    goto corral_source_split_10075;

  corral_source_split_10075:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p321, $i324);
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $p325 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p325, 1);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.40, $p326);
    goto corral_source_split_10080;

  corral_source_split_10080:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i64($i327);
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i329 := $and.i64($i328, 1);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1717} $i330 := ldv__builtin_expect($i329, 0);
    call {:si_unique_call 1718} {:cexpr "tmp___8"} boogie_si_record_i64($i330);
    goto corral_source_split_10083;

  corral_source_split_10083:
    assume {:verifier.code 0} true;
    $i331 := $ne.i64($i330, 0);
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    assume {:branchcond $i331} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i331 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i334 := $sub.i32(0, 22);
    goto $bb117;

  $bb114:
    assume $i331 == 1;
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $p332 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    $p333 := $load.ref($M.0, $p332);
    goto corral_source_split_10088;

  corral_source_split_10088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} __dynamic_dev_dbg.ref.ref.ref($p14, $p333, .str.80);
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb104:
    assume $i296 == 1;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(152, 1));
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $p298 := $load.ref($M.0, $p297);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_10037;

  corral_source_split_10037:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.0, $p299);
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $i301 := $zext.i32.i64($i300);
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $i302 := $and.i64($i301, 65535);
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($p298, $mul.ref($i302, 4));
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $i304 := $load.i32($M.0, $p303);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    $i305 := $i304;
    goto $bb106;

  $bb91:
    assume $i265 == 1;
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i261, 67108864);
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb90;

  $bb95:
    assume $i267 == 1;
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(184, 1));
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    $p269 := $load.ref($M.0, $p268);
    call {:si_unique_call 1712} $i270 := devirtbounce.11($p269, $p0, $p183, $p1, $p2);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    call {:si_unique_call 1713} {:cexpr "ret"} boogie_si_record_i32($i270);
    goto corral_source_split_9997;

  corral_source_split_9997:
    assume {:verifier.code 0} true;
    $i271 := $eq.i32($i270, $sub.i32(0, 110));
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i271 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i292 := $i270;
    goto $bb103;

  $bb97:
    assume $i271 == 1;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p272, .str.5);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p273, .str.71);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10005;

  corral_source_split_10005:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p274, .str.4);
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p275, .str.79);
    goto corral_source_split_10008;

  corral_source_split_10008:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p276);
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    $i278 := $load.i24($M.39, $p277);
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $i279 := $and.i24($i278, $sub.i24(0, 262144));
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    $i280 := $or.i24($i279, 1349);
    goto corral_source_split_10013;

  corral_source_split_10013:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p277, $i280);
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p281, 1);
    goto corral_source_split_10016;

  corral_source_split_10016:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $i283 := $load.i8($M.40, $p282);
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    $i284 := $zext.i8.i64($i283);
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $i285 := $and.i64($i284, 1);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} $i286 := ldv__builtin_expect($i285, 0);
    call {:si_unique_call 1715} {:cexpr "tmp___7"} boogie_si_record_i64($i286);
    goto corral_source_split_10021;

  corral_source_split_10021:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb99:
    assume $i287 == 1;
    goto corral_source_split_10024;

  corral_source_split_10024:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p289 := $load.ref($M.0, $p288);
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(8, 1));
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $i291 := $load.i32($M.0, $p290);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} __dynamic_dev_dbg.ref.ref.ref.i32($p13, $p289, .str.79, $i291);
    goto corral_source_split_10029;

  corral_source_split_10029:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb80:
    assume $i258 == 1;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i177 := $sub.i32(0, 16);
    goto $bb57;

  $bb74:
    assume $i236 == 1;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p237, .str.5);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p238, .str.71);
    goto corral_source_split_9944;

  corral_source_split_9944:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p239, .str.4);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9947;

  corral_source_split_9947:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p240, .str.78);
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p241);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $i243 := $load.i24($M.39, $p242);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    $i244 := $and.i24($i243, $sub.i24(0, 262144));
    goto corral_source_split_9952;

  corral_source_split_9952:
    assume {:verifier.code 0} true;
    $i245 := $or.i24($i244, 1333);
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p242, $i245);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9955;

  corral_source_split_9955:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p246, 1);
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.40, $p247);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i64($i248);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    $i250 := $and.i64($i249, 1);
    goto corral_source_split_9960;

  corral_source_split_9960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1707} $i251 := ldv__builtin_expect($i250, 0);
    call {:si_unique_call 1708} {:cexpr "tmp___6"} boogie_si_record_i64($i251);
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i177 := $sub.i32(0, 22);
    goto $bb57;

  $bb76:
    assume $i252 == 1;
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    $p254 := $load.ref($M.0, $p253);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1709} __dynamic_dev_dbg.ref.ref.ref($p12, $p254, .str.78);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb65:
    assume $i210 == 1;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p179, $mul.ref($i182, 296)), $mul.ref(48, 1));
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_9902;

  corral_source_split_9902:
    assume {:verifier.code 0} true;
    $i213 := $p2i.ref.i64($p212);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i214 := $p2i.ref.i64($p3);
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i213, $i214);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb67;

  $bb68:
    assume $i215 == 1;
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p216, .str.5);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9910;

  corral_source_split_9910:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p217, .str.71);
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p218, .str.4);
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p219, .str.77);
    goto corral_source_split_9915;

  corral_source_split_9915:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $p221 := $bitcast.ref.ref($p220);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    $i222 := $load.i24($M.39, $p221);
    goto corral_source_split_9918;

  corral_source_split_9918:
    assume {:verifier.code 0} true;
    $i223 := $and.i24($i222, $sub.i24(0, 262144));
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $i224 := $or.i24($i223, 1325);
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p221, $i224);
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p225, 1);
    goto corral_source_split_9923;

  corral_source_split_9923:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.40, $p226);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i64($i227);
    goto corral_source_split_9926;

  corral_source_split_9926:
    assume {:verifier.code 0} true;
    $i229 := $and.i64($i228, 1);
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} $i230 := ldv__builtin_expect($i229, 0);
    call {:si_unique_call 1703} {:cexpr "tmp___5"} boogie_si_record_i64($i230);
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i177 := $sub.i32(0, 13);
    goto $bb57;

  $bb70:
    assume $i231 == 1;
    goto corral_source_split_9931;

  corral_source_split_9931:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $p233 := $load.ref($M.0, $p232);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} __dynamic_dev_dbg.ref.ref.ref($p11, $p233, .str.77);
    goto corral_source_split_9934;

  corral_source_split_9934:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb59:
    assume $i186 == 1;
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p187, .str.5);
    goto corral_source_split_9866;

  corral_source_split_9866:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p188, .str.71);
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p189, .str.4);
    goto corral_source_split_9870;

  corral_source_split_9870:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p190, .str.72);
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_9874;

  corral_source_split_9874:
    assume {:verifier.code 0} true;
    $i193 := $load.i24($M.39, $p192);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $i194 := $and.i24($i193, $sub.i24(0, 262144));
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i195 := $or.i24($i194, 1318);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p192, $i195);
    goto corral_source_split_9878;

  corral_source_split_9878:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p196, 1);
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.40, $p197);
    goto corral_source_split_9882;

  corral_source_split_9882:
    assume {:verifier.code 0} true;
    $i199 := $zext.i8.i64($i198);
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i200 := $and.i64($i199, 1);
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1699} $i201 := ldv__builtin_expect($i200, 0);
    call {:si_unique_call 1700} {:cexpr "tmp___4"} boogie_si_record_i64($i201);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_9886;

  corral_source_split_9886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i202} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i177 := $sub.i32(0, 5);
    goto $bb57;

  $bb61:
    assume $i202 == 1;
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.0, $p203);
    goto corral_source_split_9890;

  corral_source_split_9890:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.0, $p205);
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1701} __dynamic_dev_dbg.ref.ref.ref.i32($p10, $p204, .str.72, $i206);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb52:
    assume $i156 == 1;
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9822;

  corral_source_split_9822:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p157, .str.5);
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p158, .str.71);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9826;

  corral_source_split_9826:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p159, .str.4);
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p160, .str.76);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9830;

  corral_source_split_9830:
    assume {:verifier.code 0} true;
    $p162 := $bitcast.ref.ref($p161);
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i163 := $load.i24($M.39, $p162);
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i164 := $and.i24($i163, $sub.i24(0, 262144));
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    $i165 := $or.i24($i164, 1310);
    goto corral_source_split_9834;

  corral_source_split_9834:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p162, $i165);
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p166, 1);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9838;

  corral_source_split_9838:
    assume {:verifier.code 0} true;
    $i168 := $load.i8($M.40, $p167);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i169 := $zext.i8.i64($i168);
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i170 := $and.i64($i169, 1);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} $i171 := ldv__builtin_expect($i170, 0);
    call {:si_unique_call 1697} {:cexpr "tmp___3"} boogie_si_record_i64($i171);
    goto corral_source_split_9842;

  corral_source_split_9842:
    assume {:verifier.code 0} true;
    $i172 := $ne.i64($i171, 0);
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i172} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i177 := $sub.i32(0, 22);
    goto $bb57;

  $bb54:
    assume $i172 == 1;
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9846;

  corral_source_split_9846:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p174, .str.76, $i176);
    goto corral_source_split_9850;

  corral_source_split_9850:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_9616;

  corral_source_split_9616:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 167772165);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i21, 167772166);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i21, 167772166);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9791;

  corral_source_split_9791:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p133, .str.5);
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p134, .str.71);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p135, .str.4);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9797;

  corral_source_split_9797:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p136, .str.75);
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    $i139 := $load.i24($M.39, $p138);
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $i140 := $and.i24($i139, $sub.i24(0, 262144));
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    $i141 := $or.i24($i140, 1300);
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p138, $i141);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p142, 1);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.40, $p143);
    goto corral_source_split_9808;

  corral_source_split_9808:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i64($i144);
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i145, 1);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1693} $i147 := ldv__builtin_expect($i146, 0);
    call {:si_unique_call 1694} {:cexpr "tmp___2"} boogie_si_record_i64($i147);
    goto corral_source_split_9811;

  corral_source_split_9811:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    $i151 := $i29;
    goto $bb51;

  $bb48:
    assume $i148 == 1;
    goto corral_source_split_9814;

  corral_source_split_9814:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_9816;

  corral_source_split_9816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} __dynamic_dev_dbg.ref.ref.ref($p8, $p150, .str.75);
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i46, 1);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9667;

  corral_source_split_9667:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_9670;

  corral_source_split_9670:
    assume {:verifier.code 0} true;
    $i52 := $uge.i32($i49, $i51);
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_9704;

  corral_source_split_9704:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($p74, $mul.ref($i77, 296));
    goto corral_source_split_9709;

  corral_source_split_9709:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p74, $mul.ref($i77, 296)), $mul.ref(40, 1));
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_9712;

  corral_source_split_9712:
    assume {:verifier.code 0} true;
    $i82 := $eq.i64($i81, 0);
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p74, $mul.ref($i77, 296)), $mul.ref(40, 1));
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $p102 := $load.ref($M.0, $p101);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p102, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_9746;

  corral_source_split_9746:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p104);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    $i106 := $eq.i64($i105, 0);
    goto corral_source_split_9749;

  corral_source_split_9749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p74, $mul.ref($i77, 296)), $mul.ref(40, 1));
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_9781;

  corral_source_split_9781:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 264)), $mul.ref(256, 1));
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.0, $p2);
    call {:si_unique_call 1691} $i130 := devirtbounce.26($p128, $p0, $p78, $i129);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    call {:si_unique_call 1692} {:cexpr "ret"} boogie_si_record_i32($i130);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    $i131 := $sge.i32($i130, 0);
    goto corral_source_split_9785;

  corral_source_split_9785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $i130;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_9789;

  corral_source_split_9789:
    assume {:verifier.code 0} true;
    $i29 := $i132;
    goto $bb15;

  $bb44:
    assume $i131 == 1;
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $i132 := 1;
    goto $bb46;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i106 == 1;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p107, .str.5);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9754;

  corral_source_split_9754:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p108, .str.71);
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p109, .str.4);
    goto corral_source_split_9757;

  corral_source_split_9757:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p110, .str.74);
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $p112 := $bitcast.ref.ref($p111);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    $i113 := $load.i24($M.39, $p112);
    goto corral_source_split_9762;

  corral_source_split_9762:
    assume {:verifier.code 0} true;
    $i114 := $and.i24($i113, $sub.i24(0, 262144));
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    $i115 := $or.i24($i114, 1291);
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p112, $i115);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p116, 1);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.40, $p117);
    goto corral_source_split_9769;

  corral_source_split_9769:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i64($i118);
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    $i120 := $and.i64($i119, 1);
    goto corral_source_split_9771;

  corral_source_split_9771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} $i121 := ldv__builtin_expect($i120, 0);
    call {:si_unique_call 1689} {:cexpr "tmp___1"} boogie_si_record_i64($i121);
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_9773;

  corral_source_split_9773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 11);
    goto $bb15;

  $bb40:
    assume $i122 == 1;
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_9777;

  corral_source_split_9777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} __dynamic_dev_dbg.ref.ref.ref($p7, $p124, .str.74);
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb32:
    assume $i82 == 1;
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p83, .str.5);
    goto corral_source_split_9717;

  corral_source_split_9717:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p84, .str.71);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9720;

  corral_source_split_9720:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p85, .str.4);
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p86, .str.73);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_9725;

  corral_source_split_9725:
    assume {:verifier.code 0} true;
    $i89 := $load.i24($M.39, $p88);
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $i90 := $and.i24($i89, $sub.i24(0, 262144));
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    $i91 := $or.i24($i90, 1286);
    goto corral_source_split_9728;

  corral_source_split_9728:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p88, $i91);
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p92, 1);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.40, $p93);
    goto corral_source_split_9733;

  corral_source_split_9733:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i64($i94);
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 1);
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} $i97 := ldv__builtin_expect($i96, 0);
    call {:si_unique_call 1686} {:cexpr "tmp___0"} boogie_si_record_i64($i97);
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb15;

  $bb34:
    assume $i98 == 1;
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_9741;

  corral_source_split_9741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} __dynamic_dev_dbg.ref.ref.ref($p6, $p100, .str.73);
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb26:
    assume $i52 == 1;
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p53, .str.5);
    goto corral_source_split_9675;

  corral_source_split_9675:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p54, .str.71);
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p55, .str.4);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_9680;

  corral_source_split_9680:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p56, .str.72);
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_9683;

  corral_source_split_9683:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.39, $p58);
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 1280);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p58, $i61);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9688;

  corral_source_split_9688:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p62, 1);
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.40, $p63);
    goto corral_source_split_9691;

  corral_source_split_9691:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 1683} {:cexpr "tmp"} boogie_si_record_i64($i67);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb15;

  $bb28:
    assume $i68 == 1;
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_9699;

  corral_source_split_9699:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p70, .str.72, $i72);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb23:
    assume $i47 == 1;
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb15;

  $bb6:
    assume $i23 == 1;
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 1);
    goto corral_source_split_9629;

  corral_source_split_9629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume !($i39 == 1);
    goto corral_source_split_9656;

  corral_source_split_9656:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p2);
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, 99999);
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p2);
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i42, 1000);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    $i44 := $zext.i32.i64($i43);
    goto corral_source_split_9662;

  corral_source_split_9662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} __udelay($i44);
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $i29 := 1;
    goto $bb15;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb18;

  $bb4:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i21, 100663300);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_9638;

  corral_source_split_9638:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 2);
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} do_gettimeofday($p4);
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    $i31 := $load.i64($M.59, $p30);
    goto corral_source_split_9647;

  corral_source_split_9647:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i64.i32($i31);
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i32);
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    $i34 := $load.i64($M.60, $p33);
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i64.i32($i34);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p2, $mul.ref(1, 4));
    goto corral_source_split_9653;

  corral_source_split_9653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i29 := 2;
    goto $bb15;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    $i29 := $sub.i32(0, 22);
    goto $bb15;

  $bb119_dummy:
    assume false;
    return;

  $bb110_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10055;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 508636);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 1734} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_10186;

  corral_source_split_10186:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 1735} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1736} __might_fault(.str.93, 732);
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_10193;

  corral_source_split_10193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 1738} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 1740} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_10203;

  corral_source_split_10203:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 509668);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 510700);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1742} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 511732);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1743} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1744} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1745} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 512764);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    return;
}



const do_gettimeofday: ref;

axiom do_gettimeofday == $sub.ref(0, 513796);

procedure do_gettimeofday($p0: ref);
  free requires assertsPassed;



implementation do_gettimeofday($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10216;

  corral_source_split_10216:
    assume {:verifier.code 0} true;
    return;
}



const __udelay: ref;

axiom __udelay == $sub.ref(0, 514828);

procedure __udelay($i0: i64);
  free requires assertsPassed;



implementation __udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} {:cexpr "__udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    return;
}



const check_insn_config_length: ref;

axiom check_insn_config_length == $sub.ref(0, 515860);

procedure check_insn_config_length($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation check_insn_config_length($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $p65: ref;
  var $i66: i32;
  var $i5: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 0);
    goto corral_source_split_10223;

  corral_source_split_10223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 2001);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i6, 4098);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i6, 5001);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $slt.i32($i6, 5003);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i6, 5004);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i6, 5004);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p1);
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} vslice_dummy_var_101 := printk.ref.i32(.str.82, $i62);
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1748} vslice_dummy_var_102 := printk.ref.ref.ref(.str.83, .str.84, .str.4);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10271;

  corral_source_split_10271:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} vslice_dummy_var_103 := printk.ref.i32(.str.85, $i66);
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32($i54, 3);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    assume {:branchcond $i55} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;

  $bb119:
    assume $i55 == 1;
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb12:
    assume $i10 == 1;
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i6, 5002);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10229;

  corral_source_split_10229:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i51, 2);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i52 == 1;
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb22;

  $bb10:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i6, 4109);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i6, 5000);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb29;

  $bb27:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i6, 4109);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb20;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i6, 4099);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb35;

  $bb35:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i6, 4099);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb20;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb8:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i6, 2004);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i6, 2006);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i6, 4097);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb43:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i6, 2006);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb46, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb20;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb47;

  $bb41:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i6, 2005);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb39:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i6, 2002);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i6, 2003);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb53:
    assume $i24 == 1;
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i6, 26);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i6, 31);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i6, 33);
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i6, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb67;

  $bb67:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i6, 34);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb20;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 1);
    goto corral_source_split_10241;

  corral_source_split_10241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i49 == 1;
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb66;

  $bb63:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i6, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb71:
    assume $i31 == 1;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb61:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i6, 28);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i6, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb78;

  $bb78:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i6, 29);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb20;

  $bb79:
    assume $i34 == 1;
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 5);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb122:
    assume $i58 == 1;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb77;

  $bb74:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i6, 27);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb84;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb82;

  $bb59:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i6, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i6, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i6, 24);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb20;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb92;

  $bb89:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i6, 22);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb94, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb20;

  $bb94:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb95;

  $bb87:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i6, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb97, $bb99;

  $bb99:
    assume !($i41 == 1);
    goto corral_source_split_10247;

  corral_source_split_10247:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 6);
    goto corral_source_split_10250;

  corral_source_split_10250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb125:
    assume $i61 == 1;
    goto corral_source_split_10266;

  corral_source_split_10266:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb98;

  $bb85:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i6, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb20;

  $bb104:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb105;

  $bb102:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i6, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i45} true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb20;

  $bb107:
    assume $i45 == 1;
    goto corral_source_split_10256;

  corral_source_split_10256:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb100:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i6, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb109, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb20;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb110;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 516892);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1750} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1751} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1752} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_10276;

  corral_source_split_10276:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 517924);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    return;
}



const need_resched: ref;

axiom need_resched == $sub.ref(0, 518956);

procedure need_resched() returns ($r: i1);
  free requires assertsPassed;



implementation need_resched() returns ($r: i1)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1753} $p0 := current_thread_info();
    goto corral_source_split_10281;

  corral_source_split_10281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} $i1 := test_ti_thread_flag($p0, 3);
    call {:si_unique_call 1755} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_10284;

  corral_source_split_10284:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1757} {:cexpr "tmp___1"} boogie_si_record_i64($i5);
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 519988);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10289;

  corral_source_split_10289:
    assume {:verifier.code 0} true;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 521020);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_10292;

  corral_source_split_10292:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1759} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 1760} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 522052);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1761} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 1762} $i2 := devirtbounce.27(0, $p1, $i0);
    call {:si_unique_call 1763} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_10297;

  corral_source_split_10297:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __comedi_get_user_cmd: ref;

axiom __comedi_get_user_cmd == $sub.ref(0, 523084);

procedure __comedi_get_user_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $CurrAddr;



implementation __comedi_get_user_cmd($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i24;
  var $i19: i24;
  var $i20: i24;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i64;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i24;
  var $i129: i24;
  var $i130: i24;
  var $p131: ref;
  var $p132: ref;
  var $i133: i8;
  var $i134: i64;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i32;
  var $p142: ref;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $i146: i32;
  var $i147: i1;
  var $i148: i1;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $i156: i32;
  var $p157: ref;
  var $i30: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1765} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1767} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_10300;

  corral_source_split_10300:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1769} $i10 := copy_from_user($p8, $p9, 80);
    call {:si_unique_call 1770} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_10338;

  corral_source_split_10338:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $i35 := $uge.i32($i32, $i34);
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10375;

  corral_source_split_10375:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $i60 := $zext.i32.i64($i59);
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p57, $mul.ref($i60, 296)), $mul.ref(12, 1));
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_10380;

  corral_source_split_10380:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 0);
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p57, $mul.ref($i60, 296)), $mul.ref(216, 1));
    goto corral_source_split_10414;

  corral_source_split_10414:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i87 := $p2i.ref.i64($p86);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    $i88 := $eq.i64($i87, 0);
    goto corral_source_split_10417;

  corral_source_split_10417:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i88 == 1);
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p57, $mul.ref($i60, 296)), $mul.ref(224, 1));
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    $i91 := $p2i.ref.i64($p90);
    goto corral_source_split_10445;

  corral_source_split_10445:
    assume {:verifier.code 0} true;
    $i92 := $eq.i64($i91, 0);
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i92 == 1);
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p57, $mul.ref($i60, 296)), $mul.ref(40, 1));
    goto corral_source_split_10449;

  corral_source_split_10449:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i95 := $p2i.ref.i64($p94);
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i96 := $eq.i64($i95, 0);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_10461;

  corral_source_split_10461:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p57, $mul.ref($i60, 296)), $mul.ref(24, 1));
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    $i121 := $ugt.i32($i118, $i120);
    goto corral_source_split_10465;

  corral_source_split_10465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p57, $mul.ref($i60, 296)), $mul.ref(20, 1));
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_10501;

  corral_source_split_10501:
    assume {:verifier.code 0} true;
    $i146 := $and.i32($i145, 49152);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i147 := $slt.i32($i146, 32768);
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i146, 32768);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb40:
    assume $i148 == 1;
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_10505;

  corral_source_split_10505:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, $sub.i32(0, 65));
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i152);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb38:
    assume $i147 == 1;
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i146, 16384);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb42;

  $bb43:
    assume $i149 == 1;
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    $i156 := $or.i32($i155, 64);
    goto corral_source_split_10513;

  corral_source_split_10513:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p157, $i156);
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb31:
    assume $i121 == 1;
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p122, .str.5);
    goto corral_source_split_10469;

  corral_source_split_10469:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p123, .str.60);
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p124, .str.4);
    goto corral_source_split_10473;

  corral_source_split_10473:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p125, .str.65);
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_10477;

  corral_source_split_10477:
    assume {:verifier.code 0} true;
    $i128 := $load.i24($M.39, $p127);
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $i129 := $and.i24($i128, $sub.i24(0, 262144));
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $i130 := $or.i24($i129, 1602);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p127, $i130);
    goto corral_source_split_10481;

  corral_source_split_10481:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p131, 1);
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.40, $p132);
    goto corral_source_split_10485;

  corral_source_split_10485:
    assume {:verifier.code 0} true;
    $i134 := $zext.i8.i64($i133);
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i135 := $and.i64($i134, 1);
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1783} $i136 := ldv__builtin_expect($i135, 0);
    call {:si_unique_call 1784} {:cexpr "tmp___4"} boogie_si_record_i64($i136);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_10489;

  corral_source_split_10489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i137} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb6;

  $bb33:
    assume $i137 == 1;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_10493;

  corral_source_split_10493:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p57, $mul.ref($i60, 296)), $mul.ref(24, 1));
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.0, $p142);
    goto corral_source_split_10497;

  corral_source_split_10497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1785} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p7, $p139, .str.65, $i141, $i143);
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i96 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p97, .str.5);
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p98, .str.60);
    goto corral_source_split_10422;

  corral_source_split_10422:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p99, .str.4);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10425;

  corral_source_split_10425:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p100, .str.64);
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.39, $p102);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_10430;

  corral_source_split_10430:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 1595);
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p102, $i105);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10433;

  corral_source_split_10433:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p106, 1);
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.40, $p107);
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_10438;

  corral_source_split_10438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 1781} {:cexpr "tmp___3"} boogie_si_record_i64($i111);
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 5);
    goto $bb6;

  $bb27:
    assume $i112 == 1;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p113);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10457;

  corral_source_split_10457:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p114, .str.64, $i116);
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i92 == 1;
    goto $bb21;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb21;

  $bb14:
    assume $i64 == 1;
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p65, .str.5);
    goto corral_source_split_10385;

  corral_source_split_10385:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p66, .str.60);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10388;

  corral_source_split_10388:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p67, .str.4);
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p68, .str.63);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_10393;

  corral_source_split_10393:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.39, $p70);
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1588);
    goto corral_source_split_10396;

  corral_source_split_10396:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p70, $i73);
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p74, 1);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.40, $p75);
    goto corral_source_split_10401;

  corral_source_split_10401:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1777} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 1778} {:cexpr "tmp___2"} boogie_si_record_i64($i79);
    goto corral_source_split_10404;

  corral_source_split_10404:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 5);
    goto $bb6;

  $bb16:
    assume $i80 == 1;
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_10409;

  corral_source_split_10409:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1779} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p82, .str.63, $i84);
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10343;

  corral_source_split_10343:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p36, .str.5);
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p37, .str.60);
    goto corral_source_split_10346;

  corral_source_split_10346:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p38, .str.4);
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p39, .str.62);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10351;

  corral_source_split_10351:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.39, $p41);
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 1580);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p41, $i44);
    goto corral_source_split_10356;

  corral_source_split_10356:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p45, 1);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10359;

  corral_source_split_10359:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.40, $p46);
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 1775} {:cexpr "tmp___1"} boogie_si_record_i64($i50);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_10364;

  corral_source_split_10364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb6;

  $bb10:
    assume $i51 == 1;
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10367;

  corral_source_split_10367:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p53, .str.62, $i55);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_10305;

  corral_source_split_10305:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p12, .str.5);
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p13, .str.60);
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p14, .str.4);
    goto corral_source_split_10311;

  corral_source_split_10311:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p15, .str.61);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10314;

  corral_source_split_10314:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $i18 := $load.i24($M.39, $p17);
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i19 := $and.i24($i18, $sub.i24(0, 262144));
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    $i20 := $or.i24($i19, 1575);
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p17, $i20);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10320;

  corral_source_split_10320:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p21, 1);
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.40, $p22);
    goto corral_source_split_10323;

  corral_source_split_10323:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i64($i23);
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $i25 := $and.i64($i24, 1);
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1771} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1772} {:cexpr "tmp"} boogie_si_record_i64($i26);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 14);
    goto $bb6;

  $bb3:
    assume $i27 == 1;
    goto corral_source_split_10329;

  corral_source_split_10329:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1773} __dynamic_dev_dbg.ref.ref.ref($p3, $p29, .str.61);
    goto corral_source_split_10332;

  corral_source_split_10332:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __comedi_get_user_chanlist: ref;

axiom __comedi_get_user_chanlist == $sub.ref(0, 524116);

procedure __comedi_get_user_chanlist($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __comedi_get_user_chanlist($p0: ref, $p1: ref, $p2: ref, $p3: ref) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10517;

  corral_source_split_10517:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_10521;

  corral_source_split_10521:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $i9 := $mul.i64($i8, 4);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} $p10 := memdup_user($p5, $i9);
    goto corral_source_split_10525;

  corral_source_split_10525:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1787} $i13 := IS_ERR($p12);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1788} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_10529;

  corral_source_split_10529:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(56, 1));
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $i22 := comedi_check_chanlist($p1, $i21, $p11);
    call {:si_unique_call 1792} {:cexpr "ret"} boogie_si_record_i32($i22);
    goto corral_source_split_10541;

  corral_source_split_10541:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 0);
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(48, 1));
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p10);
    goto corral_source_split_10549;

  corral_source_split_10549:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10537;

  corral_source_split_10537:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p11);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1793} kfree($p24);
    goto corral_source_split_10546;

  corral_source_split_10546:
    assume {:verifier.code 0} true;
    $i19 := $i22;
    goto $bb3;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p11);
    goto corral_source_split_10533;

  corral_source_split_10533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1789} $i17 := PTR_ERR($p16);
    call {:si_unique_call 1790} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i64.i32($i17);
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;
}



const memdup_user: ref;

axiom memdup_user == $sub.ref(0, 525148);

procedure memdup_user($p0: ref, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation memdup_user($p0: ref, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} {:cexpr "memdup_user:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1795} $p2 := external_alloc();
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const comedi_is_subdevice_idle: ref;

axiom comedi_is_subdevice_idle == $sub.ref(0, 526180);

procedure comedi_is_subdevice_idle($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_is_subdevice_idle($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i64;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10554;

  corral_source_split_10554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} $i1 := comedi_get_subdevice_runflags($p0);
    call {:si_unique_call 1797} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    $i3 := $and.i64($i2, 134217732);
    goto corral_source_split_10557;

  corral_source_split_10557:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_buf_n_bytes_ready: ref;

axiom comedi_buf_n_bytes_ready == $sub.ref(0, 527212);

procedure comedi_buf_n_bytes_ready($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_buf_n_bytes_ready($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10562;

  corral_source_split_10562:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(28, 1));
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_10565;

  corral_source_split_10565:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 264)), $mul.ref(36, 1));
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 528244);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1798} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1799} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1800} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const resize_async_buffer: ref;

axiom resize_async_buffer == $sub.ref(0, 529276);

procedure resize_async_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, $M.3, assertsPassed;



implementation resize_async_buffer($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i24;
  var $i23: i24;
  var $i24: i24;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i64;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i24;
  var $i75: i24;
  var $i76: i24;
  var $p77: ref;
  var $p78: ref;
  var $i79: i8;
  var $i80: i64;
  var $i81: i64;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1801} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1803} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1804} {:cexpr "resize_async_buffer:arg:new_size"} boogie_si_record_i32($i2);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_10575;

  corral_source_split_10575:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_10578;

  corral_source_split_10578:
    assume {:verifier.code 0} true;
    $i10 := $ult.i32($i9, $i2);
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_10586;

  corral_source_split_10586:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1808} $i34 := comedi_buf_is_mmapped($p1);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i8($i34);
    call {:si_unique_call 1809} {:cexpr "tmp___1"} boogie_si_record_i8($i35);
    goto corral_source_split_10620;

  corral_source_split_10620:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i55 := $add.i32($i2, 4095);
    goto corral_source_split_10652;

  corral_source_split_10652:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, $sub.i32(0, 4096));
    call {:si_unique_call 1813} {:cexpr "new_size"} boogie_si_record_i32($i56);
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1814} $i58 := comedi_buf_alloc($p0, $p1, $i57);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    call {:si_unique_call 1815} {:cexpr "retval"} boogie_si_record_i32($i58);
    goto corral_source_split_10655;

  corral_source_split_10655:
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i58, 0);
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(248, 1));
    goto corral_source_split_10660;

  corral_source_split_10660:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i62 := $p2i.ref.i64($p61);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_10663;

  corral_source_split_10663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p68, .str.5);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10674;

  corral_source_split_10674:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p69, .str.33);
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p70, .str.4);
    goto corral_source_split_10677;

  corral_source_split_10677:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p71, .str.36);
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p72);
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $i74 := $load.i24($M.39, $p73);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    $i75 := $and.i24($i74, $sub.i24(0, 262144));
    goto corral_source_split_10683;

  corral_source_split_10683:
    assume {:verifier.code 0} true;
    $i76 := $or.i24($i75, 381);
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p73, $i76);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10686;

  corral_source_split_10686:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p77, 1);
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.40, $p78);
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i64($i79);
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $i81 := $and.i64($i80, 1);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1818} $i82 := ldv__builtin_expect($i81, 0);
    call {:si_unique_call 1819} {:cexpr "tmp___2"} boogie_si_record_i64($i82);
    goto corral_source_split_10692;

  corral_source_split_10692:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10583;

  corral_source_split_10583:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb26:
    assume $i83 == 1;
    goto corral_source_split_10695;

  corral_source_split_10695:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(8, 1));
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p7, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_10701;

  corral_source_split_10701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1820} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p5, $p85, .str.36, $i87, $i89);
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i63 == 1;
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 296)), $mul.ref(248, 1));
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    call {:si_unique_call 1816} $i66 := devirtbounce.6($p65, $p0, $p1);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    call {:si_unique_call 1817} {:cexpr "retval"} boogie_si_record_i32($i66);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, 0);
    goto corral_source_split_10668;

  corral_source_split_10668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i67 == 1;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $i11 := $i66;
    goto $bb3;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i59 == 1;
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $i11 := $i58;
    goto $bb3;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i36 == 1;
    goto corral_source_split_10623;

  corral_source_split_10623:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p37, .str.5);
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p38, .str.33);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10628;

  corral_source_split_10628:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p39, .str.4);
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p40, .str.35);
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.39, $p42);
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 363);
    goto corral_source_split_10636;

  corral_source_split_10636:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p42, $i45);
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p46, 1);
    goto corral_source_split_10639;

  corral_source_split_10639:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.40, $p47);
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1810} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 1811} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_10644;

  corral_source_split_10644:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb13:
    assume $i52 == 1;
    goto corral_source_split_10647;

  corral_source_split_10647:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1812} __dynamic_dev_dbg.ref.ref.ref($p4, $p54, .str.35);
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_10591;

  corral_source_split_10591:
    assume {:verifier.code 0} true;
    $M.35 := $store.ref($M.35, $p16, .str.5);
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    $M.36 := $store.ref($M.36, $p17, .str.33);
    goto corral_source_split_10594;

  corral_source_split_10594:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $M.37 := $store.ref($M.37, $p18, .str.4);
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $M.38 := $store.ref($M.38, $p19, .str.34);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_10599;

  corral_source_split_10599:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $i22 := $load.i24($M.39, $p21);
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    $i23 := $and.i24($i22, $sub.i24(0, 262144));
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $i24 := $or.i24($i23, 358);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    $M.39 := $store.i24($M.39, $p21, $i24);
    goto corral_source_split_10604;

  corral_source_split_10604:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $M.40 := $store.i8($M.40, $p25, 1);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_10607;

  corral_source_split_10607:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.40, $p26);
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i64($i27);
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    $i29 := $and.i64($i28, 1);
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} $i30 := ldv__builtin_expect($i29, 0);
    call {:si_unique_call 1806} {:cexpr "tmp"} boogie_si_record_i64($i30);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_10612;

  corral_source_split_10612:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb7:
    assume $i31 == 1;
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10615;

  corral_source_split_10615:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1807} __dynamic_dev_dbg.ref.ref.ref($p3, $p33, .str.34);
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;
}



const comedi_buf_is_mmapped: ref;

axiom comedi_buf_is_mmapped == $sub.ref(0, 530308);

procedure comedi_buf_is_mmapped($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_buf_is_mmapped($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10706;

  corral_source_split_10706:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 264)), $mul.ref(16, 1));
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_10722;

  corral_source_split_10722:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} $i9 := atomic_read($p8);
    call {:si_unique_call 1822} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_10714;

  corral_source_split_10714:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 1);
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_10719;

  corral_source_split_10719:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb5;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 531340);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const is_device_busy: ref;

axiom is_device_busy == $sub.ref(0, 532372);

procedure is_device_busy($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_busy($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i1;
  var $i22: i8;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i8: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_10730;

  corral_source_split_10730:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10735;

  corral_source_split_10735:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb8:
    call $p9, $p10, $i11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i8 := is_device_busy_loop_$bb8($p0, $p5, $p9, $p10, $i11, $p12, $p13, $p14, $i15, $i16, $p17, $p18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i8);
    goto $bb8_last;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i8);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 296));
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p10, $mul.ref($i11, 296)), $mul.ref(56, 1));
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_10750;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p10, $mul.ref($i11, 296)), $mul.ref(40, 1));
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i8, 1);
    call {:si_unique_call 1825} {:cexpr "i"} boogie_si_record_i32($i24);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p5);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    $i26 := $sgt.i32($i25, $i24);
    goto corral_source_split_10770;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i26 == 1);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb19:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i24;
    goto $bb19_dummy;

  $bb13:
    assume $i20 == 1;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} $i21 := comedi_buf_is_mmapped($p12);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i8($i21);
    call {:si_unique_call 1824} {:cexpr "tmp"} boogie_si_record_i8($i22);
    goto corral_source_split_10763;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i8.i1($i22);
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i23 == 1;
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10743;
}



const ldv_module_put_6: ref;

axiom ldv_module_put_6 == $sub.ref(0, 533404);

procedure ldv_module_put_6($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_6($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1826} ldv_module_put($p0);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_547:
    assume !assertsPassed;
    return;
}



const comedi_device_attach: ref;

axiom comedi_device_attach == $sub.ref(0, 534436);

procedure comedi_device_attach($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.23, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.2, $M.28, $M.54, $M.3, assertsPassed, $CurrAddr, $M.24, $M.25;



implementation comedi_device_attach($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p18: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p10: ref;
  var $p45: ref;
  var $p9: ref;
  var $p31: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i1;
  var $i55: i8;
  var $i56: i1;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p51: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $i69: i1;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p85: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $i65: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_10780;

  corral_source_split_10780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} mutex_lock_nested(comedi_drivers_list_lock, 0);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    $p6 := $M.28;
    goto corral_source_split_10787;

  corral_source_split_10787:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    $p9 := $p6;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p31 := $p9;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p31);
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    $i68 := $p2i.ref.i64($p67);
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i68, 0);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $p31);
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(64, 1));
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p77);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_10907;

  corral_source_split_10907:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i80 == 1);
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_10920;

  corral_source_split_10920:
    assume {:verifier.code 0} true;
    $p85 := $p89;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_10923;

  corral_source_split_10923:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $p85);
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(24, 1));
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    call {:si_unique_call 1841} $i93 := devirtbounce.28($p92, $p0, $p1);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    call {:si_unique_call 1842} {:cexpr "ret"} boogie_si_record_i32($i93);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $i94 := $sge.i32($i93, 0);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    $i96 := $i93;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $i97 := $slt.i32($i96, 0);
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i65 := $i96;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} mutex_unlock(comedi_drivers_list_lock);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    $i5 := $i65;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb58:
    assume $i97 == 1;
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1845} comedi_device_detach($p0);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_10936;

  corral_source_split_10936:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} ldv_module_put_31($p99);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i94 == 1;
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1843} $i95 := comedi_device_postconfig($p0);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    call {:si_unique_call 1844} {:cexpr "ret"} boogie_si_record_i32($i95);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    $i96 := $i95;
    goto $bb57;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i80 == 1;
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(64, 1));
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_10912;

  corral_source_split_10912:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    $p85 := $p84;
    goto $bb54;

  $bb49:
    assume $i69 == 1;
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(32, 1));
    goto corral_source_split_10894;

  corral_source_split_10894:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_10897;

  corral_source_split_10897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1839} dev_warn.ref.ref.ref($p71, .str.15, $p73);
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p31, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} ldv_module_put_30($p75);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 38);
    goto $bb47;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i47 == 1;
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    $p48 := $M.28;
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $i49 := $p2i.ref.i64($p48);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_10854;

  corral_source_split_10854:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 5);
    goto $bb47;

  $bb32:
    assume $i50 == 1;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $p51 := $p48;
    goto $bb35;

  $bb35:
    call $p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p51 := comedi_device_attach_loop_$bb35($p52, $p53, $i54, $i55, $i56, $i57, $i58, $p59, $p60, $p61, $p62, $i63, $i64, $p51);
    goto $bb35_last;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10860;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} $i54 := ldv_try_module_get_28($p53);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i8($i54);
    call {:si_unique_call 1835} {:cexpr "tmp___3"} boogie_si_record_i8($i55);
    goto corral_source_split_10863;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := 1;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_10869;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} comedi_report_boards($p51);
    goto corral_source_split_10878;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} ldv_module_put_29($p60);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_10881;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p51, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i64 == 1);
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb44:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $p51 := $p62;
    goto $bb44_dummy;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i58 == 1;
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i56 == 1;
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb39;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $p10 := $p6;
    goto $bb8;

  $bb8:
    call $p11, $p12, $i13, $i14, $i15, $i16, $i17, $p19, $i20, $i21, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p30, $p32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p18, $p41, $p42, $i43, $i44, $p10, $p45 := comedi_device_attach_loop_$bb8($p0, $p1, $p11, $p12, $i13, $i14, $i15, $i16, $i17, $p19, $i20, $i21, $p22, $p23, $p24, $p25, $p26, $p27, $i28, $i29, $p30, $p32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p18, $p41, $p42, $i43, $i44, $p10, $p45);
    goto $bb8_last;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} $i13 := ldv_try_module_get_26($p12);
    goto corral_source_split_10797;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 1829} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} $i36 := strcmp($p33, $p35);
    call {:si_unique_call 1832} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_10834;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $p38 := $p10;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_10844;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} ldv_module_put_27($p40);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $p18 := $p10;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p18, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_10810;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $p45 := $p42;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $p9 := $p45;
    goto $bb7;

  $bb27:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $p10 := $p42;
    goto $bb27_dummy;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb24:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10847;

  corral_source_split_10847:
    assume {:verifier.code 0} true;
    $p31 := $p38;
    goto $bb21;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} $p24 := comedi_recognize($p10, $p23);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(64, 1));
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(64, 1));
    goto corral_source_split_10824;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_10827;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    $p30 := $p10;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb19:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10837;

  corral_source_split_10837:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb21;

  $bb13:
    assume $i17 == 1;
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    $p18 := $p10;
    goto $bb15;

  $bb10:
    assume $i15 == 1;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 16);
    goto $bb3;

  $bb44_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10858;

  $bb27_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_10793;
}



const ldv_try_module_get_26: ref;

axiom ldv_try_module_get_26 == $sub.ref(0, 535468);

procedure ldv_try_module_get_26($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_try_module_get_26($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1847} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 1848} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10942;

  corral_source_split_10942:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const comedi_recognize: ref;

axiom comedi_recognize == $sub.ref(0, 536500);

procedure comedi_recognize($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_recognize($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i7: i32;
  var $p8: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10945;

  corral_source_split_10945:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $i6 := $ult.i32(0, $i5);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p14 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10963;

  corral_source_split_10963:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i7, $p8 := 0, $p3;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $p12, $p15, $i16, $i17, $p18, $i19, $i20, $i21, $i7, $p8 := comedi_recognize_loop_$bb4($p0, $p1, $p4, $p9, $i10, $i11, $p12, $p15, $i16, $i17, $p18, $i19, $i20, $i21, $i7, $p8);
    goto $bb4_last;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} $i10 := strcmp($p9, $p1);
    call {:si_unique_call 1850} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $p12 := $p8;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p8, $mul.ref($i17, 8));
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i7, 1);
    call {:si_unique_call 1851} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_10969;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p4);
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32($i19, $i20);
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i21 == 1);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i7, $p8 := $i19, $p18;
    goto $bb10_dummy;

  $bb6:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_10960;

  corral_source_split_10960:
    assume {:verifier.code 0} true;
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $p14 := $p12;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10954;
}



const strcmp: ref;

axiom strcmp == $sub.ref(0, 537532);

procedure strcmp($p0: ref, $p1: ref) returns ($r: i32);



const ldv_module_put_27: ref;

axiom ldv_module_put_27 == $sub.ref(0, 538564);

procedure ldv_module_put_27($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} ldv_module_put($p0);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_571:
    assume !assertsPassed;
    return;
}



const ldv_try_module_get_28: ref;

axiom ldv_try_module_get_28 == $sub.ref(0, 539596);

procedure ldv_try_module_get_28($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.23;



implementation ldv_try_module_get_28($p0: ref) returns ($r: i1)
{
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1853} $i1 := ldv_try_module_get($p0);
    call {:si_unique_call 1854} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const comedi_report_boards: ref;

axiom comedi_report_boards == $sub.ref(0, 540628);

procedure comedi_report_boards($p0: ref);
  free requires assertsPassed;



implementation comedi_report_boards($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p9: ref;
  var $i10: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_10982;

  corral_source_split_10982:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1855} vslice_dummy_var_104 := printk.ref.ref(.str.94, $p2);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_10987;

  corral_source_split_10987:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, 0);
    goto corral_source_split_10990;

  corral_source_split_10990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} vslice_dummy_var_106 := printk.ref.ref(.str.95, $p24);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    $p9, $i10 := $p5, 0;
    goto $bb4;

  $bb4:
    call $p11, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $p9, $i10, vslice_dummy_var_105 := comedi_report_boards_loop_$bb4($p0, $p6, $p11, $p13, $i14, $i15, $p16, $i17, $i18, $i19, $p9, $i10, vslice_dummy_var_105);
    goto $bb4_last;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p9);
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} vslice_dummy_var_105 := printk.ref.ref(.str.95, $p11);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_10998;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p9, $mul.ref($i15, 8));
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i10, 1);
    call {:si_unique_call 1857} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p6);
    goto corral_source_split_11003;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    $i19 := $ugt.i32($i18, $i17);
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i19 == 1);
    goto corral_source_split_11006;

  corral_source_split_11006:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $p9, $i10 := $p16, $i17;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10994;
}



const ldv_module_put_29: ref;

axiom ldv_module_put_29 == $sub.ref(0, 541660);

procedure ldv_module_put_29($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_29($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1859} ldv_module_put($p0);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_574:
    assume !assertsPassed;
    return;
}



const ldv_module_put_30: ref;

axiom ldv_module_put_30 == $sub.ref(0, 542692);

procedure ldv_module_put_30($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} ldv_module_put($p0);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_577:
    assume !assertsPassed;
    return;
}



const ldv_module_put_31: ref;

axiom ldv_module_put_31 == $sub.ref(0, 543724);

procedure ldv_module_put_31($p0: ref);
  free requires assertsPassed;
  modifies $M.23, assertsPassed;



implementation ldv_module_put_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1861} ldv_module_put($p0);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_11024;

  corral_source_split_11024:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_580:
    assume !assertsPassed;
    return;
}



const poll_wait: ref;

axiom poll_wait == $sub.ref(0, 544756);

procedure poll_wait($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation poll_wait($p0: ref, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_11027;

  corral_source_split_11027:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_11032;

  corral_source_split_11032:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p1);
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb6:
    assume $i10 == 1;
    goto corral_source_split_11040;

  corral_source_split_11040:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    call {:si_unique_call 1862} devirtbounce.29($p12, $p0, $p1, $p2);
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 545788);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1863} $p0 := devirtbounce.30(0, current_task);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 546820);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const down_read: ref;

axiom down_read == $sub.ref(0, 547852);

procedure down_read($p0: ref);
  free requires assertsPassed;



implementation down_read($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 548884);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11048;

  corral_source_split_11048:
    assume {:verifier.code 0} true;
    return;
}



const comedi_is_runflags_in_error: ref;

axiom comedi_is_runflags_in_error == $sub.ref(0, 549916);

procedure comedi_is_runflags_in_error($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation comedi_is_runflags_in_error($i0: i32) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1864} {:cexpr "comedi_is_runflags_in_error:arg:runflags"} boogie_si_record_i32($i0);
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $i2 := $and.i64($i1, 4);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_11053;

  corral_source_split_11053:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 550948);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 551980);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 1866} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_11061;

  corral_source_split_11061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1868} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 553012);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(8, 1));
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.29, $p2);
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1870} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 1871} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_11069;

  corral_source_split_11069:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const max_read_buffer_kb_show: ref;

axiom max_read_buffer_kb_show == $sub.ref(0, 554044);

procedure max_read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation max_read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i30: i32;
  var $i31: i64;
  var $i9: i64;
  var vslice_dummy_var_107: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1872} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} $p6 := comedi_dev_get_from_minor($i5);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11076;

  corral_source_split_11076:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1874} mutex_lock_nested($p10, 0);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} $p11 := comedi_read_subdevice($p6, $i5);
    goto corral_source_split_11085;

  corral_source_split_11085:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_11087;

  corral_source_split_11087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11109;

  corral_source_split_11109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} mutex_unlock($p28);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1878} vslice_dummy_var_107 := comedi_dev_put($p6);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} $i30 := snprintf.ref.i64.ref.i32($p2, 4096, .str.37, $i27);
    call {:si_unique_call 1880} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_11113;

  corral_source_split_11113:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11090;

  corral_source_split_11090:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32768);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_11093;

  corral_source_split_11093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11096;

  corral_source_split_11096:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_11099;

  corral_source_split_11099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11102;

  corral_source_split_11102:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_11104;

  corral_source_split_11104:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1876} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const max_read_buffer_kb_store: ref;

axiom max_read_buffer_kb_store == $sub.ref(0, 555076);

procedure max_read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.61, $M.0, $CurrAddr, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation max_read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i11: i64;
  var vslice_dummy_var_108: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1882} {:cexpr "max_read_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11116;

  corral_source_split_11116:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1883} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1884} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1885} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11120;

  corral_source_split_11120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.61, $p4);
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.61, $p4);
    goto corral_source_split_11132;

  corral_source_split_11132:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p4, $i15);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1886} $p16 := comedi_dev_get_from_minor($i7);
    goto corral_source_split_11135;

  corral_source_split_11135:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} mutex_lock_nested($p19, 0);
    goto corral_source_split_11142;

  corral_source_split_11142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1888} $p20 := comedi_read_subdevice($p16, $i7);
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_11144;

  corral_source_split_11144:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11167;

  corral_source_split_11167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} mutex_unlock($p36);
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1890} vslice_dummy_var_108 := comedi_dev_put($p16);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i35, 0);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 0} true;
    $i40 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 0} true;
    $i11 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_11172;

  corral_source_split_11172:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i35);
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb21;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11148;

  corral_source_split_11148:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 32768);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11154;

  corral_source_split_11154:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.61, $p4);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_11164;

  corral_source_split_11164:
    assume {:verifier.code 0} true;
    $i35 := $i8;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11122;

  corral_source_split_11122:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const kstrtouint: ref;

axiom kstrtouint == $sub.ref(0, 556108);

procedure kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kstrtouint($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1891} {:cexpr "kstrtouint:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1892} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1893} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11180;

  corral_source_split_11180:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const comedi_read_subdevice: ref;

axiom comedi_read_subdevice == $sub.ref(0, 557140);

procedure comedi_read_subdevice($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_read_subdevice($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1894} {:cexpr "comedi_read_subdevice:arg:minor"} boogie_si_record_i32($i1);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 47);
    goto corral_source_split_11183;

  corral_source_split_11183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(520, 1));
    goto corral_source_split_11198;

  corral_source_split_11198:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $p10 := $p12;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_11196;

  corral_source_split_11196:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} $p3 := comedi_subdevice_from_minor($p0, $i1);
    goto corral_source_split_11186;

  corral_source_split_11186:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_11192;

  corral_source_split_11192:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 32768);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 558172);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



const read_buffer_kb_show: ref;

axiom read_buffer_kb_show == $sub.ref(0, 559204);

procedure read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation read_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i30: i32;
  var $i31: i64;
  var $i9: i64;
  var vslice_dummy_var_109: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_11203;

  corral_source_split_11203:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1896} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $p6 := comedi_dev_get_from_minor($i5);
    goto corral_source_split_11205;

  corral_source_split_11205:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11206;

  corral_source_split_11206:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11207;

  corral_source_split_11207:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11213;

  corral_source_split_11213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1898} mutex_lock_nested($p10, 0);
    goto corral_source_split_11214;

  corral_source_split_11214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1899} $p11 := comedi_read_subdevice($p6, $i5);
    goto corral_source_split_11215;

  corral_source_split_11215:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_11216;

  corral_source_split_11216:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_11217;

  corral_source_split_11217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11238;

  corral_source_split_11238:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11239;

  corral_source_split_11239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1901} mutex_unlock($p28);
    goto corral_source_split_11240;

  corral_source_split_11240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} vslice_dummy_var_109 := comedi_dev_put($p6);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_11241;

  corral_source_split_11241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1903} $i30 := snprintf.ref.i64.ref.i32($p2, 4096, .str.37, $i27);
    call {:si_unique_call 1904} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_11242;

  corral_source_split_11242:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_11243;

  corral_source_split_11243:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11211;

  corral_source_split_11211:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11219;

  corral_source_split_11219:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11220;

  corral_source_split_11220:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_11221;

  corral_source_split_11221:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32768);
    goto corral_source_split_11222;

  corral_source_split_11222:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_11223;

  corral_source_split_11223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_11225;

  corral_source_split_11225:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11226;

  corral_source_split_11226:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_11227;

  corral_source_split_11227:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_11228;

  corral_source_split_11228:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_11229;

  corral_source_split_11229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_11231;

  corral_source_split_11231:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11232;

  corral_source_split_11232:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11233;

  corral_source_split_11233:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_11234;

  corral_source_split_11234:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_11235;

  corral_source_split_11235:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1900} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_11236;

  corral_source_split_11236:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11209;

  corral_source_split_11209:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const read_buffer_kb_store: ref;

axiom read_buffer_kb_store == $sub.ref(0, 560236);

procedure read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.61, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, $M.3, assertsPassed;



implementation read_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i11: i64;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1905} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1906} {:cexpr "read_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_11245;

  corral_source_split_11245:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11246;

  corral_source_split_11246:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_11247;

  corral_source_split_11247:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1907} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_11248;

  corral_source_split_11248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1909} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_11249;

  corral_source_split_11249:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11250;

  corral_source_split_11250:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.61, $p4);
    goto corral_source_split_11257;

  corral_source_split_11257:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_11258;

  corral_source_split_11258:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.61, $p4);
    goto corral_source_split_11262;

  corral_source_split_11262:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_11263;

  corral_source_split_11263:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p4, $i15);
    goto corral_source_split_11264;

  corral_source_split_11264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} $p16 := comedi_dev_get_from_minor($i7);
    goto corral_source_split_11265;

  corral_source_split_11265:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_11266;

  corral_source_split_11266:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_11267;

  corral_source_split_11267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11271;

  corral_source_split_11271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1911} mutex_lock_nested($p19, 0);
    goto corral_source_split_11272;

  corral_source_split_11272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} $p20 := comedi_read_subdevice($p16, $i7);
    goto corral_source_split_11273;

  corral_source_split_11273:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_11274;

  corral_source_split_11274:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_11275;

  corral_source_split_11275:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_11293;

  corral_source_split_11293:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11294;

  corral_source_split_11294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1915} mutex_unlock($p34);
    goto corral_source_split_11295;

  corral_source_split_11295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} vslice_dummy_var_110 := comedi_dev_put($p16);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_11296;

  corral_source_split_11296:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i33, 0);
    goto corral_source_split_11297;

  corral_source_split_11297:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    goto corral_source_split_11302;

  corral_source_split_11302:
    assume {:verifier.code 0} true;
    $i38 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_11304;

  corral_source_split_11304:
    assume {:verifier.code 0} true;
    $i11 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11255;

  corral_source_split_11255:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_11299;

  corral_source_split_11299:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i33);
    goto corral_source_split_11300;

  corral_source_split_11300:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb21;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_11277;

  corral_source_split_11277:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11278;

  corral_source_split_11278:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_11279;

  corral_source_split_11279:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 32768);
    goto corral_source_split_11280;

  corral_source_split_11280:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_11281;

  corral_source_split_11281:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_11283;

  corral_source_split_11283:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11284;

  corral_source_split_11284:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_11285;

  corral_source_split_11285:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_11286;

  corral_source_split_11286:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_11287;

  corral_source_split_11287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_11289;

  corral_source_split_11289:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.61, $p4);
    goto corral_source_split_11290;

  corral_source_split_11290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1913} $i32 := resize_async_buffer($p16, $p20, $i31);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    call {:si_unique_call 1914} {:cexpr "err"} boogie_si_record_i32($i32);
    goto corral_source_split_11291;

  corral_source_split_11291:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb18;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_11269;

  corral_source_split_11269:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11260;

  corral_source_split_11260:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11252;

  corral_source_split_11252:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_11253;

  corral_source_split_11253:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const max_write_buffer_kb_show: ref;

axiom max_write_buffer_kb_show == $sub.ref(0, 561268);

procedure max_write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation max_write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i30: i32;
  var $i31: i64;
  var $i9: i64;
  var vslice_dummy_var_111: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11306;

  corral_source_split_11306:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11307;

  corral_source_split_11307:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_11308;

  corral_source_split_11308:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1917} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_11309;

  corral_source_split_11309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} $p6 := comedi_dev_get_from_minor($i5);
    goto corral_source_split_11310;

  corral_source_split_11310:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11311;

  corral_source_split_11311:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11312;

  corral_source_split_11312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11318;

  corral_source_split_11318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1919} mutex_lock_nested($p10, 0);
    goto corral_source_split_11319;

  corral_source_split_11319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} $p11 := comedi_write_subdevice($p6, $i5);
    goto corral_source_split_11320;

  corral_source_split_11320:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_11321;

  corral_source_split_11321:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_11322;

  corral_source_split_11322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11343;

  corral_source_split_11343:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11344;

  corral_source_split_11344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} mutex_unlock($p28);
    goto corral_source_split_11345;

  corral_source_split_11345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1923} vslice_dummy_var_111 := comedi_dev_put($p6);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_11346;

  corral_source_split_11346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} $i30 := snprintf.ref.i64.ref.i32($p2, 4096, .str.37, $i27);
    call {:si_unique_call 1925} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_11347;

  corral_source_split_11347:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_11348;

  corral_source_split_11348:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11316;

  corral_source_split_11316:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11324;

  corral_source_split_11324:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11325;

  corral_source_split_11325:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_11326;

  corral_source_split_11326:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16384);
    goto corral_source_split_11327;

  corral_source_split_11327:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_11328;

  corral_source_split_11328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_11330;

  corral_source_split_11330:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11331;

  corral_source_split_11331:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_11332;

  corral_source_split_11332:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_11333;

  corral_source_split_11333:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_11334;

  corral_source_split_11334:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_11336;

  corral_source_split_11336:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11337;

  corral_source_split_11337:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11338;

  corral_source_split_11338:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_11339;

  corral_source_split_11339:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_11340;

  corral_source_split_11340:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1921} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_11341;

  corral_source_split_11341:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11314;

  corral_source_split_11314:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const max_write_buffer_kb_store: ref;

axiom max_write_buffer_kb_store == $sub.ref(0, 562300);

procedure max_write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.61, $M.0, $CurrAddr, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation max_write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i38: i1;
  var $i39: i64;
  var $i40: i64;
  var $i11: i64;
  var vslice_dummy_var_112: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1927} {:cexpr "max_write_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_11350;

  corral_source_split_11350:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11351;

  corral_source_split_11351:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_11352;

  corral_source_split_11352:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1928} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_11353;

  corral_source_split_11353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1929} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1930} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_11354;

  corral_source_split_11354:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11355;

  corral_source_split_11355:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.61, $p4);
    goto corral_source_split_11362;

  corral_source_split_11362:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_11363;

  corral_source_split_11363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.61, $p4);
    goto corral_source_split_11367;

  corral_source_split_11367:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_11368;

  corral_source_split_11368:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p4, $i15);
    goto corral_source_split_11369;

  corral_source_split_11369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1931} $p16 := comedi_dev_get_from_minor($i7);
    goto corral_source_split_11370;

  corral_source_split_11370:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_11371;

  corral_source_split_11371:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_11372;

  corral_source_split_11372:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11376;

  corral_source_split_11376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} mutex_lock_nested($p19, 0);
    goto corral_source_split_11377;

  corral_source_split_11377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1933} $p20 := comedi_write_subdevice($p16, $i7);
    goto corral_source_split_11378;

  corral_source_split_11378:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_11379;

  corral_source_split_11379:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_11380;

  corral_source_split_11380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i35 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_11401;

  corral_source_split_11401:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11402;

  corral_source_split_11402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} mutex_unlock($p36);
    goto corral_source_split_11403;

  corral_source_split_11403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1935} vslice_dummy_var_112 := comedi_dev_put($p16);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_11404;

  corral_source_split_11404:
    assume {:verifier.code 0} true;
    $i38 := $ne.i32($i35, 0);
    goto corral_source_split_11405;

  corral_source_split_11405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    goto corral_source_split_11410;

  corral_source_split_11410:
    assume {:verifier.code 0} true;
    $i40 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_11412;

  corral_source_split_11412:
    assume {:verifier.code 0} true;
    $i11 := $i40;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11360;

  corral_source_split_11360:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i38 == 1;
    goto corral_source_split_11407;

  corral_source_split_11407:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i35);
    goto corral_source_split_11408;

  corral_source_split_11408:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb21;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_11382;

  corral_source_split_11382:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11383;

  corral_source_split_11383:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_11384;

  corral_source_split_11384:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 16384);
    goto corral_source_split_11385;

  corral_source_split_11385:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_11386;

  corral_source_split_11386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_11388;

  corral_source_split_11388:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11389;

  corral_source_split_11389:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_11390;

  corral_source_split_11390:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_11391;

  corral_source_split_11391:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_11392;

  corral_source_split_11392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_11394;

  corral_source_split_11394:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.61, $p4);
    goto corral_source_split_11395;

  corral_source_split_11395:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11396;

  corral_source_split_11396:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_11397;

  corral_source_split_11397:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 264)), $mul.ref(24, 1));
    goto corral_source_split_11398;

  corral_source_split_11398:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_11399;

  corral_source_split_11399:
    assume {:verifier.code 0} true;
    $i35 := $i8;
    goto $bb18;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_11374;

  corral_source_split_11374:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11365;

  corral_source_split_11365:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11357;

  corral_source_split_11357:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_11358;

  corral_source_split_11358:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const comedi_write_subdevice: ref;

axiom comedi_write_subdevice == $sub.ref(0, 563332);

procedure comedi_write_subdevice($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation comedi_write_subdevice($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} {:cexpr "comedi_write_subdevice:arg:minor"} boogie_si_record_i32($i1);
    goto corral_source_split_11414;

  corral_source_split_11414:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 47);
    goto corral_source_split_11415;

  corral_source_split_11415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 560)), $mul.ref(528, 1));
    goto corral_source_split_11430;

  corral_source_split_11430:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_11431;

  corral_source_split_11431:
    assume {:verifier.code 0} true;
    $p10 := $p12;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_11428;

  corral_source_split_11428:
    assume {:verifier.code 0} true;
    $r := $p10;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_11417;

  corral_source_split_11417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1937} $p3 := comedi_subdevice_from_minor($p0, $i1);
    goto corral_source_split_11418;

  corral_source_split_11418:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11419;

  corral_source_split_11419:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11420;

  corral_source_split_11420:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    goto corral_source_split_11422;

  corral_source_split_11422:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11423;

  corral_source_split_11423:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_11424;

  corral_source_split_11424:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, 16384);
    goto corral_source_split_11425;

  corral_source_split_11425:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11426;

  corral_source_split_11426:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $p3;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb4;
}



const write_buffer_kb_show: ref;

axiom write_buffer_kb_show == $sub.ref(0, 564364);

procedure write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation write_buffer_kb_show($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i30: i32;
  var $i31: i64;
  var $i9: i64;
  var vslice_dummy_var_113: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11433;

  corral_source_split_11433:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11434;

  corral_source_split_11434:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_11435;

  corral_source_split_11435:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1048575);
    call {:si_unique_call 1938} {:cexpr "minor"} boogie_si_record_i32($i5);
    goto corral_source_split_11436;

  corral_source_split_11436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1939} $p6 := comedi_dev_get_from_minor($i5);
    goto corral_source_split_11437;

  corral_source_split_11437:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_11438;

  corral_source_split_11438:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11439;

  corral_source_split_11439:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11445;

  corral_source_split_11445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} mutex_lock_nested($p10, 0);
    goto corral_source_split_11446;

  corral_source_split_11446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1941} $p11 := comedi_write_subdevice($p6, $i5);
    goto corral_source_split_11447;

  corral_source_split_11447:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_11448;

  corral_source_split_11448:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_11449;

  corral_source_split_11449:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_11470;

  corral_source_split_11470:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p6, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11471;

  corral_source_split_11471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1943} mutex_unlock($p28);
    goto corral_source_split_11472;

  corral_source_split_11472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} vslice_dummy_var_113 := comedi_dev_put($p6);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_11473;

  corral_source_split_11473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1945} $i30 := snprintf.ref.i64.ref.i32($p2, 4096, .str.37, $i27);
    call {:si_unique_call 1946} {:cexpr "tmp"} boogie_si_record_i32($i30);
    goto corral_source_split_11474;

  corral_source_split_11474:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_11475;

  corral_source_split_11475:
    assume {:verifier.code 0} true;
    $i9 := $i31;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11443;

  corral_source_split_11443:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11451;

  corral_source_split_11451:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11452;

  corral_source_split_11452:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_11453;

  corral_source_split_11453:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 16384);
    goto corral_source_split_11454;

  corral_source_split_11454:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_11455;

  corral_source_split_11455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb7;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_11457;

  corral_source_split_11457:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11458;

  corral_source_split_11458:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_11459;

  corral_source_split_11459:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_11460;

  corral_source_split_11460:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_11461;

  corral_source_split_11461:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb7;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_11463;

  corral_source_split_11463:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p11, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11464;

  corral_source_split_11464:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_11465;

  corral_source_split_11465:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_11466;

  corral_source_split_11466:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_11467;

  corral_source_split_11467:
    assume {:verifier.code 0} true;
    $i26 := $udiv.i32($i25, 1024);
    call {:si_unique_call 1942} {:cexpr "size"} boogie_si_record_i32($i26);
    goto corral_source_split_11468;

  corral_source_split_11468:
    assume {:verifier.code 0} true;
    $i27 := $i26;
    goto $bb12;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_11441;

  corral_source_split_11441:
    assume {:verifier.code 0} true;
    $i9 := $sub.i64(0, 19);
    goto $bb3;
}



const write_buffer_kb_store: ref;

axiom write_buffer_kb_store == $sub.ref(0, 565396);

procedure write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.61, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, $M.3, assertsPassed;



implementation write_buffer_kb_store($p0: ref, $p1: ref, $p2: ref, $i3: i64) returns ($r: i64)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i36: i1;
  var $i37: i64;
  var $i38: i64;
  var $i11: i64;
  var vslice_dummy_var_114: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1947} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    call {:si_unique_call 1948} {:cexpr "write_buffer_kb_store:arg:count"} boogie_si_record_i64($i3);
    goto corral_source_split_11477;

  corral_source_split_11477:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1256, 1));
    goto corral_source_split_11478;

  corral_source_split_11478:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_11479;

  corral_source_split_11479:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 1048575);
    call {:si_unique_call 1949} {:cexpr "minor"} boogie_si_record_i32($i7);
    goto corral_source_split_11480;

  corral_source_split_11480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1950} $i8 := kstrtouint($p2, 10, $p4);
    call {:si_unique_call 1951} {:cexpr "err"} boogie_si_record_i32($i8);
    goto corral_source_split_11481;

  corral_source_split_11481:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_11482;

  corral_source_split_11482:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.61, $p4);
    goto corral_source_split_11489;

  corral_source_split_11489:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, 4194303);
    goto corral_source_split_11490;

  corral_source_split_11490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.61, $p4);
    goto corral_source_split_11494;

  corral_source_split_11494:
    assume {:verifier.code 0} true;
    $i15 := $mul.i32($i14, 1024);
    goto corral_source_split_11495;

  corral_source_split_11495:
    assume {:verifier.code 0} true;
    $M.61 := $store.i32($M.61, $p4, $i15);
    goto corral_source_split_11496;

  corral_source_split_11496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} $p16 := comedi_dev_get_from_minor($i7);
    goto corral_source_split_11497;

  corral_source_split_11497:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_11498;

  corral_source_split_11498:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_11499;

  corral_source_split_11499:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11503;

  corral_source_split_11503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1953} mutex_lock_nested($p19, 0);
    goto corral_source_split_11504;

  corral_source_split_11504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1954} $p20 := comedi_write_subdevice($p16, $i7);
    goto corral_source_split_11505;

  corral_source_split_11505:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_11506;

  corral_source_split_11506:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_11507;

  corral_source_split_11507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 22);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_11525;

  corral_source_split_11525:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p16, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_11526;

  corral_source_split_11526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} mutex_unlock($p34);
    goto corral_source_split_11527;

  corral_source_split_11527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} vslice_dummy_var_114 := comedi_dev_put($p16);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_11528;

  corral_source_split_11528:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i33, 0);
    goto corral_source_split_11529;

  corral_source_split_11529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i36 == 1);
    goto corral_source_split_11534;

  corral_source_split_11534:
    assume {:verifier.code 0} true;
    $i38 := $i3;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_11536;

  corral_source_split_11536:
    assume {:verifier.code 0} true;
    $i11 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11487;

  corral_source_split_11487:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb19:
    assume $i36 == 1;
    goto corral_source_split_11531;

  corral_source_split_11531:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i33);
    goto corral_source_split_11532;

  corral_source_split_11532:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb21;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_11509;

  corral_source_split_11509:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(20, 1));
    goto corral_source_split_11510;

  corral_source_split_11510:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_11511;

  corral_source_split_11511:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 16384);
    goto corral_source_split_11512;

  corral_source_split_11512:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_11513;

  corral_source_split_11513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb13;

  $bb14:
    assume $i26 == 1;
    goto corral_source_split_11515;

  corral_source_split_11515:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p20, $mul.ref(0, 296)), $mul.ref(40, 1));
    goto corral_source_split_11516;

  corral_source_split_11516:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_11517;

  corral_source_split_11517:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_11518;

  corral_source_split_11518:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_11519;

  corral_source_split_11519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb13;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_11521;

  corral_source_split_11521:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.61, $p4);
    goto corral_source_split_11522;

  corral_source_split_11522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1955} $i32 := resize_async_buffer($p16, $p20, $i31);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    call {:si_unique_call 1956} {:cexpr "err"} boogie_si_record_i32($i32);
    goto corral_source_split_11523;

  corral_source_split_11523:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb18;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_11501;

  corral_source_split_11501:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 19);
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_11492;

  corral_source_split_11492:
    assume {:verifier.code 0} true;
    $i11 := $sub.i64(0, 22);
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_11484;

  corral_source_split_11484:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i8);
    goto corral_source_split_11485;

  corral_source_split_11485:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb3;
}



const seq_lseek: ref;

axiom seq_lseek == $sub.ref(0, 566428);

procedure seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation seq_lseek($p0: ref, $i1: i64, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1959} {:cexpr "seq_lseek:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 1960} {:cexpr "seq_lseek:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_11538;

  corral_source_split_11538:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1961} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 1962} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_11539;

  corral_source_split_11539:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_read: ref;

axiom seq_read == $sub.ref(0, 567460);

procedure seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64);
  free requires assertsPassed;



implementation seq_read($p0: ref, $p1: ref, $i2: i64, $p3: ref) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1963} {:cexpr "seq_read:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_11541;

  corral_source_split_11541:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1964} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1965} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_11542;

  corral_source_split_11542:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const comedi_proc_open: ref;

axiom comedi_proc_open == $sub.ref(0, 568492);

procedure comedi_proc_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation comedi_proc_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11544;

  corral_source_split_11544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1966} $i2 := single_open($p1, comedi_read___0, $0.ref);
    call {:si_unique_call 1967} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_11545;

  corral_source_split_11545:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const single_release: ref;

axiom single_release == $sub.ref(0, 569524);

procedure single_release($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_release($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11547;

  corral_source_split_11547:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1968} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1969} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11548;

  corral_source_split_11548:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const comedi_read___0: ref;

axiom comedi_read___0 == $sub.ref(0, 570556);

procedure comedi_read___0($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation comedi_read___0($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i20: i32;
  var $p21: ref;
  var $i6: i32;
  var $i23: i1;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i36: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p29: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i1;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i66: i32;
  var $p76: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i86: i32;
  var $p96: ref;
  var $i98: i32;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i32;
  var $i106: i32;
  var $p116: ref;
  var $i118: i32;
  var $p119: ref;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i1;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i126: i32;
  var $p136: ref;
  var $i138: i32;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i1;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $i154: i32;
  var $i146: i32;
  var $p156: ref;
  var $i158: i32;
  var $p159: ref;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i1;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i166: i32;
  var $p176: ref;
  var $i178: i32;
  var $p179: ref;
  var $i180: i64;
  var $i181: i1;
  var $p182: ref;
  var $p183: ref;
  var $i184: i8;
  var $i185: i1;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i32;
  var $i186: i32;
  var $p196: ref;
  var $i198: i32;
  var $p199: ref;
  var $i200: i64;
  var $i201: i1;
  var $p202: ref;
  var $p203: ref;
  var $i204: i8;
  var $i205: i1;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i206: i32;
  var $p216: ref;
  var $i218: i32;
  var $p219: ref;
  var $i220: i64;
  var $i221: i1;
  var $p222: ref;
  var $p223: ref;
  var $i224: i8;
  var $i225: i1;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $i234: i32;
  var $i226: i32;
  var $p236: ref;
  var $i238: i32;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $i244: i8;
  var $i245: i1;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $i254: i32;
  var $i246: i32;
  var $p256: ref;
  var $i258: i32;
  var $p259: ref;
  var $i260: i64;
  var $i261: i1;
  var $p262: ref;
  var $p263: ref;
  var $i264: i8;
  var $i265: i1;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $i274: i32;
  var $i266: i32;
  var $p276: ref;
  var $i278: i32;
  var $p279: ref;
  var $i280: i64;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $i284: i8;
  var $i285: i1;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $i286: i32;
  var $p296: ref;
  var $i298: i32;
  var $p299: ref;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $p303: ref;
  var $i304: i8;
  var $i305: i1;
  var $p307: ref;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i306: i32;
  var $p316: ref;
  var $i318: i32;
  var $p319: ref;
  var $i320: i64;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $i324: i8;
  var $i325: i1;
  var $p327: ref;
  var $p328: ref;
  var $p329: ref;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i32;
  var $i326: i32;
  var $p336: ref;
  var $i338: i32;
  var $p339: ref;
  var $i340: i64;
  var $i341: i1;
  var $p342: ref;
  var $p343: ref;
  var $i344: i8;
  var $i345: i1;
  var $p347: ref;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $p352: ref;
  var $p353: ref;
  var $i354: i32;
  var $i346: i32;
  var $p356: ref;
  var $i358: i32;
  var $p359: ref;
  var $i360: i64;
  var $i361: i1;
  var $p362: ref;
  var $p363: ref;
  var $i364: i8;
  var $i365: i1;
  var $p367: ref;
  var $p368: ref;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i374: i32;
  var $i366: i32;
  var $p376: ref;
  var $i378: i32;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $p382: ref;
  var $p383: ref;
  var $i384: i8;
  var $i385: i1;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $p391: ref;
  var $p392: ref;
  var $p393: ref;
  var $i394: i32;
  var $i386: i32;
  var $p396: ref;
  var $i398: i32;
  var $p399: ref;
  var $i400: i64;
  var $i401: i1;
  var $p402: ref;
  var $p403: ref;
  var $i404: i8;
  var $i405: i1;
  var $p407: ref;
  var $p408: ref;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $p412: ref;
  var $p413: ref;
  var $i414: i32;
  var $i406: i32;
  var $p416: ref;
  var $i418: i32;
  var $p419: ref;
  var $i420: i64;
  var $i421: i1;
  var $p422: ref;
  var $p423: ref;
  var $i424: i8;
  var $i425: i1;
  var $p427: ref;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $i434: i32;
  var $i426: i32;
  var $p436: ref;
  var $i438: i32;
  var $p439: ref;
  var $i440: i64;
  var $i441: i1;
  var $p442: ref;
  var $p443: ref;
  var $i444: i8;
  var $i445: i1;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $i454: i32;
  var $i446: i32;
  var $p456: ref;
  var $i458: i32;
  var $p459: ref;
  var $i460: i64;
  var $i461: i1;
  var $p462: ref;
  var $p463: ref;
  var $i464: i8;
  var $i465: i1;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $p472: ref;
  var $p473: ref;
  var $i474: i32;
  var $i466: i32;
  var $p476: ref;
  var $i478: i32;
  var $p479: ref;
  var $i480: i64;
  var $i481: i1;
  var $p482: ref;
  var $p483: ref;
  var $i484: i8;
  var $i485: i1;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $i494: i32;
  var $i486: i32;
  var $p496: ref;
  var $i498: i32;
  var $p499: ref;
  var $i500: i64;
  var $i501: i1;
  var $p502: ref;
  var $p503: ref;
  var $i504: i8;
  var $i505: i1;
  var $p507: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $i514: i32;
  var $i506: i32;
  var $p516: ref;
  var $i518: i32;
  var $p519: ref;
  var $i520: i64;
  var $i521: i1;
  var $p522: ref;
  var $p523: ref;
  var $i524: i8;
  var $i525: i1;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $p532: ref;
  var $p533: ref;
  var $i534: i32;
  var $i526: i32;
  var $p536: ref;
  var $i538: i32;
  var $p539: ref;
  var $i540: i64;
  var $i541: i1;
  var $p542: ref;
  var $p543: ref;
  var $i544: i8;
  var $i545: i1;
  var $p547: ref;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $p551: ref;
  var $p552: ref;
  var $p553: ref;
  var $i554: i32;
  var $i546: i32;
  var $p556: ref;
  var $i558: i32;
  var $p559: ref;
  var $i560: i64;
  var $i561: i1;
  var $p562: ref;
  var $p563: ref;
  var $i564: i8;
  var $i565: i1;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $p573: ref;
  var $i574: i32;
  var $i566: i32;
  var $p576: ref;
  var $i578: i32;
  var $p579: ref;
  var $i580: i64;
  var $i581: i1;
  var $p582: ref;
  var $p583: ref;
  var $i584: i8;
  var $i585: i1;
  var $p587: ref;
  var $p588: ref;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $p593: ref;
  var $i594: i32;
  var $i586: i32;
  var $p596: ref;
  var $i598: i32;
  var $p599: ref;
  var $i600: i64;
  var $i601: i1;
  var $p602: ref;
  var $p603: ref;
  var $i604: i8;
  var $i605: i1;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $p610: ref;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $i614: i32;
  var $i606: i32;
  var $p616: ref;
  var $i618: i32;
  var $p619: ref;
  var $i620: i64;
  var $i621: i1;
  var $p622: ref;
  var $p623: ref;
  var $i624: i8;
  var $i625: i1;
  var $p627: ref;
  var $p628: ref;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
  var $i634: i32;
  var $i626: i32;
  var $p636: ref;
  var $i638: i32;
  var $p639: ref;
  var $i640: i64;
  var $i641: i1;
  var $p642: ref;
  var $p643: ref;
  var $i644: i8;
  var $i645: i1;
  var $p647: ref;
  var $p648: ref;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $p652: ref;
  var $p653: ref;
  var $i654: i32;
  var $i646: i32;
  var $p656: ref;
  var $i658: i32;
  var $p659: ref;
  var $i660: i64;
  var $i661: i1;
  var $p662: ref;
  var $p663: ref;
  var $i664: i8;
  var $i665: i1;
  var $p667: ref;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $i674: i32;
  var $i666: i32;
  var $p676: ref;
  var $i678: i32;
  var $p679: ref;
  var $i680: i64;
  var $i681: i1;
  var $p682: ref;
  var $p683: ref;
  var $i684: i8;
  var $i685: i1;
  var $p687: ref;
  var $p688: ref;
  var $p689: ref;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $p693: ref;
  var $i694: i32;
  var $i686: i32;
  var $p696: ref;
  var $i698: i32;
  var $p699: ref;
  var $i700: i64;
  var $i701: i1;
  var $p702: ref;
  var $p703: ref;
  var $i704: i8;
  var $i705: i1;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $p710: ref;
  var $p711: ref;
  var $p712: ref;
  var $p713: ref;
  var $i714: i32;
  var $i706: i32;
  var $p716: ref;
  var $i718: i32;
  var $p719: ref;
  var $i720: i64;
  var $i721: i1;
  var $p722: ref;
  var $p723: ref;
  var $i724: i8;
  var $i725: i1;
  var $p727: ref;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $i734: i32;
  var $i726: i32;
  var $p736: ref;
  var $i738: i32;
  var $p739: ref;
  var $i740: i64;
  var $i741: i1;
  var $p742: ref;
  var $p743: ref;
  var $i744: i8;
  var $i745: i1;
  var $p747: ref;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $i754: i32;
  var $i746: i32;
  var $p756: ref;
  var $i758: i32;
  var $p759: ref;
  var $i760: i64;
  var $i761: i1;
  var $p762: ref;
  var $p763: ref;
  var $i764: i8;
  var $i765: i1;
  var $p767: ref;
  var $p768: ref;
  var $p769: ref;
  var $p770: ref;
  var $p771: ref;
  var $p772: ref;
  var $p773: ref;
  var $i774: i32;
  var $i766: i32;
  var $p776: ref;
  var $i778: i32;
  var $p779: ref;
  var $i780: i64;
  var $i781: i1;
  var $p782: ref;
  var $p783: ref;
  var $i784: i8;
  var $i785: i1;
  var $p787: ref;
  var $p788: ref;
  var $p789: ref;
  var $p790: ref;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $i794: i32;
  var $i786: i32;
  var $p796: ref;
  var $i798: i32;
  var $p799: ref;
  var $i800: i64;
  var $i801: i1;
  var $p802: ref;
  var $p803: ref;
  var $i804: i8;
  var $i805: i1;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $p811: ref;
  var $p812: ref;
  var $p813: ref;
  var $i814: i32;
  var $i806: i32;
  var $p816: ref;
  var $i818: i32;
  var $p819: ref;
  var $i820: i64;
  var $i821: i1;
  var $p822: ref;
  var $p823: ref;
  var $i824: i8;
  var $i825: i1;
  var $p827: ref;
  var $p828: ref;
  var $p829: ref;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $i834: i32;
  var $i826: i32;
  var $p836: ref;
  var $i838: i32;
  var $p839: ref;
  var $i840: i64;
  var $i841: i1;
  var $p842: ref;
  var $p843: ref;
  var $i844: i8;
  var $i845: i1;
  var $p847: ref;
  var $p848: ref;
  var $p849: ref;
  var $p850: ref;
  var $p851: ref;
  var $p852: ref;
  var $p853: ref;
  var $i854: i32;
  var $i846: i32;
  var $p856: ref;
  var $i858: i32;
  var $p859: ref;
  var $i860: i64;
  var $i861: i1;
  var $p862: ref;
  var $p863: ref;
  var $i864: i8;
  var $i865: i1;
  var $p867: ref;
  var $p868: ref;
  var $p869: ref;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $p873: ref;
  var $i874: i32;
  var $i866: i32;
  var $p876: ref;
  var $i878: i32;
  var $p879: ref;
  var $i880: i64;
  var $i881: i1;
  var $p882: ref;
  var $p883: ref;
  var $i884: i8;
  var $i885: i1;
  var $p887: ref;
  var $p888: ref;
  var $p889: ref;
  var $p890: ref;
  var $p891: ref;
  var $p892: ref;
  var $p893: ref;
  var $i894: i32;
  var $i886: i32;
  var $p896: ref;
  var $i898: i32;
  var $p899: ref;
  var $i900: i64;
  var $i901: i1;
  var $p902: ref;
  var $p903: ref;
  var $i904: i8;
  var $i905: i1;
  var $p907: ref;
  var $p908: ref;
  var $p909: ref;
  var $p910: ref;
  var $p911: ref;
  var $p912: ref;
  var $p913: ref;
  var $i914: i32;
  var $i906: i32;
  var $p916: ref;
  var $i918: i32;
  var $p919: ref;
  var $i920: i64;
  var $i921: i1;
  var $p922: ref;
  var $p923: ref;
  var $i924: i8;
  var $i925: i1;
  var $p927: ref;
  var $p928: ref;
  var $p929: ref;
  var $p930: ref;
  var $p931: ref;
  var $p932: ref;
  var $p933: ref;
  var $i934: i32;
  var $i926: i32;
  var $p936: ref;
  var $i938: i32;
  var $p939: ref;
  var $i940: i64;
  var $i941: i1;
  var $p942: ref;
  var $p943: ref;
  var $i944: i8;
  var $i945: i1;
  var $p947: ref;
  var $p948: ref;
  var $p949: ref;
  var $p950: ref;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $i954: i32;
  var $i946: i32;
  var $p956: ref;
  var $i958: i32;
  var $p959: ref;
  var $i960: i64;
  var $i961: i1;
  var $p962: ref;
  var $p963: ref;
  var $i964: i8;
  var $i965: i1;
  var $p967: ref;
  var $p968: ref;
  var $p969: ref;
  var $p970: ref;
  var $p971: ref;
  var $p972: ref;
  var $p973: ref;
  var $i974: i32;
  var $i966: i32;
  var $p976: ref;
  var $i978: i32;
  var $p979: ref;
  var $i980: i64;
  var $i981: i1;
  var $p982: ref;
  var $p983: ref;
  var $i984: i8;
  var $i985: i1;
  var $p987: ref;
  var $p988: ref;
  var $p989: ref;
  var $p990: ref;
  var $p991: ref;
  var $p992: ref;
  var $p993: ref;
  var $i994: i32;
  var $i986: i32;
  var $p996: ref;
  var $i24: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11550;

  corral_source_split_11550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1970} vslice_dummy_var_115 := seq_printf.ref.ref.ref($p0, .str.100, .str.101);
    goto corral_source_split_11551;

  corral_source_split_11551:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1971} $p3 := comedi_dev_get_from_minor(0);
    goto corral_source_split_11553;

  corral_source_split_11553:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_11554;

  corral_source_split_11554:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_11555;

  corral_source_split_11555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11561;

  corral_source_split_11561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1972} down_read($p7);
    goto corral_source_split_11562;

  corral_source_split_11562:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11563;

  corral_source_split_11563:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_11564;

  corral_source_split_11564:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_11565;

  corral_source_split_11565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i20 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_11578;

  corral_source_split_11578:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11579;

  corral_source_split_11579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1974} up_read($p21);
    goto corral_source_split_11580;

  corral_source_split_11580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1975} vslice_dummy_var_117 := comedi_dev_put($p3);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_11581;

  corral_source_split_11581:
    assume {:verifier.code 0} true;
    $i6 := $i20;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_11559;

  corral_source_split_11559:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1976} $p59 := comedi_dev_get_from_minor(1);
    goto corral_source_split_11583;

  corral_source_split_11583:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p59);
    goto corral_source_split_11584;

  corral_source_split_11584:
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i60, 0);
    goto corral_source_split_11585;

  corral_source_split_11585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p59, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11647;

  corral_source_split_11647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1984} down_read($p62);
    goto corral_source_split_11648;

  corral_source_split_11648:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p59, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11649;

  corral_source_split_11649:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_11650;

  corral_source_split_11650:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_11651;

  corral_source_split_11651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $i6;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_11664;

  corral_source_split_11664:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p59, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11665;

  corral_source_split_11665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1986} up_read($p76);
    goto corral_source_split_11666;

  corral_source_split_11666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1987} vslice_dummy_var_123 := comedi_dev_put($p59);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_11667;

  corral_source_split_11667:
    assume {:verifier.code 0} true;
    $i78 := $i66;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_11669;

  corral_source_split_11669:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1988} $p79 := comedi_dev_get_from_minor(2);
    goto corral_source_split_11671;

  corral_source_split_11671:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_11672;

  corral_source_split_11672:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_11673;

  corral_source_split_11673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p79, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11677;

  corral_source_split_11677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1989} down_read($p82);
    goto corral_source_split_11678;

  corral_source_split_11678:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p79, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11679;

  corral_source_split_11679:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_11680;

  corral_source_split_11680:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i84);
    goto corral_source_split_11681;

  corral_source_split_11681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i85 == 1);
    assume {:verifier.code 0} true;
    $i86 := $i78;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_11694;

  corral_source_split_11694:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p79, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11695;

  corral_source_split_11695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1991} up_read($p96);
    goto corral_source_split_11696;

  corral_source_split_11696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1992} vslice_dummy_var_125 := comedi_dev_put($p79);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_11697;

  corral_source_split_11697:
    assume {:verifier.code 0} true;
    $i98 := $i86;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_11699;

  corral_source_split_11699:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1993} $p99 := comedi_dev_get_from_minor(3);
    goto corral_source_split_11701;

  corral_source_split_11701:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_11702;

  corral_source_split_11702:
    assume {:verifier.code 0} true;
    $i101 := $eq.i64($i100, 0);
    goto corral_source_split_11703;

  corral_source_split_11703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p99, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11707;

  corral_source_split_11707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1994} down_read($p102);
    goto corral_source_split_11708;

  corral_source_split_11708:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p99, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11709;

  corral_source_split_11709:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_11710;

  corral_source_split_11710:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_11711;

  corral_source_split_11711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $i98;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_11724;

  corral_source_split_11724:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p99, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11725;

  corral_source_split_11725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1996} up_read($p116);
    goto corral_source_split_11726;

  corral_source_split_11726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1997} vslice_dummy_var_127 := comedi_dev_put($p99);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_11727;

  corral_source_split_11727:
    assume {:verifier.code 0} true;
    $i118 := $i106;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_11729;

  corral_source_split_11729:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1998} $p119 := comedi_dev_get_from_minor(4);
    goto corral_source_split_11731;

  corral_source_split_11731:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p119);
    goto corral_source_split_11732;

  corral_source_split_11732:
    assume {:verifier.code 0} true;
    $i121 := $eq.i64($i120, 0);
    goto corral_source_split_11733;

  corral_source_split_11733:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p119, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11737;

  corral_source_split_11737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1999} down_read($p122);
    goto corral_source_split_11738;

  corral_source_split_11738:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p119, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11739;

  corral_source_split_11739:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_11740;

  corral_source_split_11740:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i8.i1($i124);
    goto corral_source_split_11741;

  corral_source_split_11741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $i118;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_11754;

  corral_source_split_11754:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p119, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11755;

  corral_source_split_11755:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2001} up_read($p136);
    goto corral_source_split_11756;

  corral_source_split_11756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2002} vslice_dummy_var_129 := comedi_dev_put($p119);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_11757;

  corral_source_split_11757:
    assume {:verifier.code 0} true;
    $i138 := $i126;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto corral_source_split_11759;

  corral_source_split_11759:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2003} $p139 := comedi_dev_get_from_minor(5);
    goto corral_source_split_11761;

  corral_source_split_11761:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_11762;

  corral_source_split_11762:
    assume {:verifier.code 0} true;
    $i141 := $eq.i64($i140, 0);
    goto corral_source_split_11763;

  corral_source_split_11763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p139, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11767;

  corral_source_split_11767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2004} down_read($p142);
    goto corral_source_split_11768;

  corral_source_split_11768:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p139, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11769;

  corral_source_split_11769:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.0, $p143);
    goto corral_source_split_11770;

  corral_source_split_11770:
    assume {:verifier.code 0} true;
    $i145 := $trunc.i8.i1($i144);
    goto corral_source_split_11771;

  corral_source_split_11771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i145} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $i138;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto corral_source_split_11784;

  corral_source_split_11784:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p139, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11785;

  corral_source_split_11785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2006} up_read($p156);
    goto corral_source_split_11786;

  corral_source_split_11786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2007} vslice_dummy_var_131 := comedi_dev_put($p139);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_11787;

  corral_source_split_11787:
    assume {:verifier.code 0} true;
    $i158 := $i146;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto corral_source_split_11789;

  corral_source_split_11789:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2008} $p159 := comedi_dev_get_from_minor(6);
    goto corral_source_split_11791;

  corral_source_split_11791:
    assume {:verifier.code 0} true;
    $i160 := $p2i.ref.i64($p159);
    goto corral_source_split_11792;

  corral_source_split_11792:
    assume {:verifier.code 0} true;
    $i161 := $eq.i64($i160, 0);
    goto corral_source_split_11793;

  corral_source_split_11793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p159, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11797;

  corral_source_split_11797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2009} down_read($p162);
    goto corral_source_split_11798;

  corral_source_split_11798:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p159, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11799;

  corral_source_split_11799:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.0, $p163);
    goto corral_source_split_11800;

  corral_source_split_11800:
    assume {:verifier.code 0} true;
    $i165 := $trunc.i8.i1($i164);
    goto corral_source_split_11801;

  corral_source_split_11801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $i166 := $i158;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_11814;

  corral_source_split_11814:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p159, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11815;

  corral_source_split_11815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} up_read($p176);
    goto corral_source_split_11816;

  corral_source_split_11816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2012} vslice_dummy_var_133 := comedi_dev_put($p159);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_11817;

  corral_source_split_11817:
    assume {:verifier.code 0} true;
    $i178 := $i166;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_11819;

  corral_source_split_11819:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2013} $p179 := comedi_dev_get_from_minor(7);
    goto corral_source_split_11821;

  corral_source_split_11821:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p179);
    goto corral_source_split_11822;

  corral_source_split_11822:
    assume {:verifier.code 0} true;
    $i181 := $eq.i64($i180, 0);
    goto corral_source_split_11823;

  corral_source_split_11823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i181 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p179, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11827;

  corral_source_split_11827:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2014} down_read($p182);
    goto corral_source_split_11828;

  corral_source_split_11828:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p179, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11829;

  corral_source_split_11829:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.0, $p183);
    goto corral_source_split_11830;

  corral_source_split_11830:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i8.i1($i184);
    goto corral_source_split_11831;

  corral_source_split_11831:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $i186 := $i178;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto corral_source_split_11844;

  corral_source_split_11844:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p179, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11845;

  corral_source_split_11845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2016} up_read($p196);
    goto corral_source_split_11846;

  corral_source_split_11846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2017} vslice_dummy_var_135 := comedi_dev_put($p179);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_11847;

  corral_source_split_11847:
    assume {:verifier.code 0} true;
    $i198 := $i186;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    goto corral_source_split_11849;

  corral_source_split_11849:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2018} $p199 := comedi_dev_get_from_minor(8);
    goto corral_source_split_11851;

  corral_source_split_11851:
    assume {:verifier.code 0} true;
    $i200 := $p2i.ref.i64($p199);
    goto corral_source_split_11852;

  corral_source_split_11852:
    assume {:verifier.code 0} true;
    $i201 := $eq.i64($i200, 0);
    goto corral_source_split_11853;

  corral_source_split_11853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p199, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11857;

  corral_source_split_11857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2019} down_read($p202);
    goto corral_source_split_11858;

  corral_source_split_11858:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p199, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11859;

  corral_source_split_11859:
    assume {:verifier.code 0} true;
    $i204 := $load.i8($M.0, $p203);
    goto corral_source_split_11860;

  corral_source_split_11860:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i8.i1($i204);
    goto corral_source_split_11861;

  corral_source_split_11861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    $i206 := $i198;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto corral_source_split_11874;

  corral_source_split_11874:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p199, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11875;

  corral_source_split_11875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2021} up_read($p216);
    goto corral_source_split_11876;

  corral_source_split_11876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2022} vslice_dummy_var_137 := comedi_dev_put($p199);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_11877;

  corral_source_split_11877:
    assume {:verifier.code 0} true;
    $i218 := $i206;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto corral_source_split_11879;

  corral_source_split_11879:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2023} $p219 := comedi_dev_get_from_minor(9);
    goto corral_source_split_11881;

  corral_source_split_11881:
    assume {:verifier.code 0} true;
    $i220 := $p2i.ref.i64($p219);
    goto corral_source_split_11882;

  corral_source_split_11882:
    assume {:verifier.code 0} true;
    $i221 := $eq.i64($i220, 0);
    goto corral_source_split_11883;

  corral_source_split_11883:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p219, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11887;

  corral_source_split_11887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2024} down_read($p222);
    goto corral_source_split_11888;

  corral_source_split_11888:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p219, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11889;

  corral_source_split_11889:
    assume {:verifier.code 0} true;
    $i224 := $load.i8($M.0, $p223);
    goto corral_source_split_11890;

  corral_source_split_11890:
    assume {:verifier.code 0} true;
    $i225 := $trunc.i8.i1($i224);
    goto corral_source_split_11891;

  corral_source_split_11891:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    $i226 := $i218;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_11904;

  corral_source_split_11904:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p219, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11905;

  corral_source_split_11905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2026} up_read($p236);
    goto corral_source_split_11906;

  corral_source_split_11906:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2027} vslice_dummy_var_139 := comedi_dev_put($p219);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_11907;

  corral_source_split_11907:
    assume {:verifier.code 0} true;
    $i238 := $i226;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto corral_source_split_11909;

  corral_source_split_11909:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2028} $p239 := comedi_dev_get_from_minor(10);
    goto corral_source_split_11911;

  corral_source_split_11911:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_11912;

  corral_source_split_11912:
    assume {:verifier.code 0} true;
    $i241 := $eq.i64($i240, 0);
    goto corral_source_split_11913;

  corral_source_split_11913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p239, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11917;

  corral_source_split_11917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2029} down_read($p242);
    goto corral_source_split_11918;

  corral_source_split_11918:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p239, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11919;

  corral_source_split_11919:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.0, $p243);
    goto corral_source_split_11920;

  corral_source_split_11920:
    assume {:verifier.code 0} true;
    $i245 := $trunc.i8.i1($i244);
    goto corral_source_split_11921;

  corral_source_split_11921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    $i246 := $i238;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto corral_source_split_11934;

  corral_source_split_11934:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p239, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11935;

  corral_source_split_11935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2031} up_read($p256);
    goto corral_source_split_11936;

  corral_source_split_11936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2032} vslice_dummy_var_141 := comedi_dev_put($p239);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_11937;

  corral_source_split_11937:
    assume {:verifier.code 0} true;
    $i258 := $i246;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto corral_source_split_11939;

  corral_source_split_11939:
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2033} $p259 := comedi_dev_get_from_minor(11);
    goto corral_source_split_11941;

  corral_source_split_11941:
    assume {:verifier.code 0} true;
    $i260 := $p2i.ref.i64($p259);
    goto corral_source_split_11942;

  corral_source_split_11942:
    assume {:verifier.code 0} true;
    $i261 := $eq.i64($i260, 0);
    goto corral_source_split_11943;

  corral_source_split_11943:
    assume {:verifier.code 0} true;
    assume {:branchcond $i261} true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i261 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11947;

  corral_source_split_11947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2034} down_read($p262);
    goto corral_source_split_11948;

  corral_source_split_11948:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11949;

  corral_source_split_11949:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.0, $p263);
    goto corral_source_split_11950;

  corral_source_split_11950:
    assume {:verifier.code 0} true;
    $i265 := $trunc.i8.i1($i264);
    goto corral_source_split_11951;

  corral_source_split_11951:
    assume {:verifier.code 0} true;
    assume {:branchcond $i265} true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $i258;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto corral_source_split_11964;

  corral_source_split_11964:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11965;

  corral_source_split_11965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2036} up_read($p276);
    goto corral_source_split_11966;

  corral_source_split_11966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2037} vslice_dummy_var_143 := comedi_dev_put($p259);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_11967;

  corral_source_split_11967:
    assume {:verifier.code 0} true;
    $i278 := $i266;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto corral_source_split_11969;

  corral_source_split_11969:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2038} $p279 := comedi_dev_get_from_minor(12);
    goto corral_source_split_11971;

  corral_source_split_11971:
    assume {:verifier.code 0} true;
    $i280 := $p2i.ref.i64($p279);
    goto corral_source_split_11972;

  corral_source_split_11972:
    assume {:verifier.code 0} true;
    $i281 := $eq.i64($i280, 0);
    goto corral_source_split_11973;

  corral_source_split_11973:
    assume {:verifier.code 0} true;
    assume {:branchcond $i281} true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p279, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11977;

  corral_source_split_11977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2039} down_read($p282);
    goto corral_source_split_11978;

  corral_source_split_11978:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p279, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_11979;

  corral_source_split_11979:
    assume {:verifier.code 0} true;
    $i284 := $load.i8($M.0, $p283);
    goto corral_source_split_11980;

  corral_source_split_11980:
    assume {:verifier.code 0} true;
    $i285 := $trunc.i8.i1($i284);
    goto corral_source_split_11981;

  corral_source_split_11981:
    assume {:verifier.code 0} true;
    assume {:branchcond $i285} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $i278;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto corral_source_split_11994;

  corral_source_split_11994:
    assume {:verifier.code 0} true;
    $p296 := $add.ref($add.ref($p279, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_11995;

  corral_source_split_11995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2041} up_read($p296);
    goto corral_source_split_11996;

  corral_source_split_11996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2042} vslice_dummy_var_145 := comedi_dev_put($p279);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_11997;

  corral_source_split_11997:
    assume {:verifier.code 0} true;
    $i298 := $i286;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    goto corral_source_split_11999;

  corral_source_split_11999:
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2043} $p299 := comedi_dev_get_from_minor(13);
    goto corral_source_split_12001;

  corral_source_split_12001:
    assume {:verifier.code 0} true;
    $i300 := $p2i.ref.i64($p299);
    goto corral_source_split_12002;

  corral_source_split_12002:
    assume {:verifier.code 0} true;
    $i301 := $eq.i64($i300, 0);
    goto corral_source_split_12003;

  corral_source_split_12003:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p302 := $add.ref($add.ref($p299, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12007;

  corral_source_split_12007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2044} down_read($p302);
    goto corral_source_split_12008;

  corral_source_split_12008:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p299, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12009;

  corral_source_split_12009:
    assume {:verifier.code 0} true;
    $i304 := $load.i8($M.0, $p303);
    goto corral_source_split_12010;

  corral_source_split_12010:
    assume {:verifier.code 0} true;
    $i305 := $trunc.i8.i1($i304);
    goto corral_source_split_12011;

  corral_source_split_12011:
    assume {:verifier.code 0} true;
    assume {:branchcond $i305} true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    $i306 := $i298;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto corral_source_split_12024;

  corral_source_split_12024:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p299, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12025;

  corral_source_split_12025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2046} up_read($p316);
    goto corral_source_split_12026;

  corral_source_split_12026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2047} vslice_dummy_var_147 := comedi_dev_put($p299);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_12027;

  corral_source_split_12027:
    assume {:verifier.code 0} true;
    $i318 := $i306;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_12029;

  corral_source_split_12029:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2048} $p319 := comedi_dev_get_from_minor(14);
    goto corral_source_split_12031;

  corral_source_split_12031:
    assume {:verifier.code 0} true;
    $i320 := $p2i.ref.i64($p319);
    goto corral_source_split_12032;

  corral_source_split_12032:
    assume {:verifier.code 0} true;
    $i321 := $eq.i64($i320, 0);
    goto corral_source_split_12033;

  corral_source_split_12033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p319, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12037;

  corral_source_split_12037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2049} down_read($p322);
    goto corral_source_split_12038;

  corral_source_split_12038:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p319, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12039;

  corral_source_split_12039:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.0, $p323);
    goto corral_source_split_12040;

  corral_source_split_12040:
    assume {:verifier.code 0} true;
    $i325 := $trunc.i8.i1($i324);
    goto corral_source_split_12041;

  corral_source_split_12041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    $i326 := $i318;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    goto corral_source_split_12054;

  corral_source_split_12054:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($p319, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12055;

  corral_source_split_12055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2051} up_read($p336);
    goto corral_source_split_12056;

  corral_source_split_12056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2052} vslice_dummy_var_149 := comedi_dev_put($p319);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_12057;

  corral_source_split_12057:
    assume {:verifier.code 0} true;
    $i338 := $i326;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto corral_source_split_12059;

  corral_source_split_12059:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2053} $p339 := comedi_dev_get_from_minor(15);
    goto corral_source_split_12061;

  corral_source_split_12061:
    assume {:verifier.code 0} true;
    $i340 := $p2i.ref.i64($p339);
    goto corral_source_split_12062;

  corral_source_split_12062:
    assume {:verifier.code 0} true;
    $i341 := $eq.i64($i340, 0);
    goto corral_source_split_12063;

  corral_source_split_12063:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p339, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12067;

  corral_source_split_12067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2054} down_read($p342);
    goto corral_source_split_12068;

  corral_source_split_12068:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p339, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12069;

  corral_source_split_12069:
    assume {:verifier.code 0} true;
    $i344 := $load.i8($M.0, $p343);
    goto corral_source_split_12070;

  corral_source_split_12070:
    assume {:verifier.code 0} true;
    $i345 := $trunc.i8.i1($i344);
    goto corral_source_split_12071;

  corral_source_split_12071:
    assume {:verifier.code 0} true;
    assume {:branchcond $i345} true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i345 == 1);
    assume {:verifier.code 0} true;
    $i346 := $i338;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto corral_source_split_12084;

  corral_source_split_12084:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p339, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12085;

  corral_source_split_12085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2056} up_read($p356);
    goto corral_source_split_12086;

  corral_source_split_12086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2057} vslice_dummy_var_151 := comedi_dev_put($p339);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_12087;

  corral_source_split_12087:
    assume {:verifier.code 0} true;
    $i358 := $i346;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto corral_source_split_12089;

  corral_source_split_12089:
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2058} $p359 := comedi_dev_get_from_minor(16);
    goto corral_source_split_12091;

  corral_source_split_12091:
    assume {:verifier.code 0} true;
    $i360 := $p2i.ref.i64($p359);
    goto corral_source_split_12092;

  corral_source_split_12092:
    assume {:verifier.code 0} true;
    $i361 := $eq.i64($i360, 0);
    goto corral_source_split_12093;

  corral_source_split_12093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i361} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p359, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12097;

  corral_source_split_12097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2059} down_read($p362);
    goto corral_source_split_12098;

  corral_source_split_12098:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p359, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12099;

  corral_source_split_12099:
    assume {:verifier.code 0} true;
    $i364 := $load.i8($M.0, $p363);
    goto corral_source_split_12100;

  corral_source_split_12100:
    assume {:verifier.code 0} true;
    $i365 := $trunc.i8.i1($i364);
    goto corral_source_split_12101;

  corral_source_split_12101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i365} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    $i366 := $i358;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    goto corral_source_split_12114;

  corral_source_split_12114:
    assume {:verifier.code 0} true;
    $p376 := $add.ref($add.ref($p359, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12115;

  corral_source_split_12115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2061} up_read($p376);
    goto corral_source_split_12116;

  corral_source_split_12116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2062} vslice_dummy_var_153 := comedi_dev_put($p359);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_12117;

  corral_source_split_12117:
    assume {:verifier.code 0} true;
    $i378 := $i366;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto corral_source_split_12119;

  corral_source_split_12119:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2063} $p379 := comedi_dev_get_from_minor(17);
    goto corral_source_split_12121;

  corral_source_split_12121:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_12122;

  corral_source_split_12122:
    assume {:verifier.code 0} true;
    $i381 := $eq.i64($i380, 0);
    goto corral_source_split_12123;

  corral_source_split_12123:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p379, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12127;

  corral_source_split_12127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2064} down_read($p382);
    goto corral_source_split_12128;

  corral_source_split_12128:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p379, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12129;

  corral_source_split_12129:
    assume {:verifier.code 0} true;
    $i384 := $load.i8($M.0, $p383);
    goto corral_source_split_12130;

  corral_source_split_12130:
    assume {:verifier.code 0} true;
    $i385 := $trunc.i8.i1($i384);
    goto corral_source_split_12131;

  corral_source_split_12131:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    $i386 := $i378;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    goto corral_source_split_12144;

  corral_source_split_12144:
    assume {:verifier.code 0} true;
    $p396 := $add.ref($add.ref($p379, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12145;

  corral_source_split_12145:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2066} up_read($p396);
    goto corral_source_split_12146;

  corral_source_split_12146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2067} vslice_dummy_var_155 := comedi_dev_put($p379);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_12147;

  corral_source_split_12147:
    assume {:verifier.code 0} true;
    $i398 := $i386;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto corral_source_split_12149;

  corral_source_split_12149:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2068} $p399 := comedi_dev_get_from_minor(18);
    goto corral_source_split_12151;

  corral_source_split_12151:
    assume {:verifier.code 0} true;
    $i400 := $p2i.ref.i64($p399);
    goto corral_source_split_12152;

  corral_source_split_12152:
    assume {:verifier.code 0} true;
    $i401 := $eq.i64($i400, 0);
    goto corral_source_split_12153;

  corral_source_split_12153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i401} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i401 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($p399, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12157;

  corral_source_split_12157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2069} down_read($p402);
    goto corral_source_split_12158;

  corral_source_split_12158:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p399, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12159;

  corral_source_split_12159:
    assume {:verifier.code 0} true;
    $i404 := $load.i8($M.0, $p403);
    goto corral_source_split_12160;

  corral_source_split_12160:
    assume {:verifier.code 0} true;
    $i405 := $trunc.i8.i1($i404);
    goto corral_source_split_12161;

  corral_source_split_12161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    $i406 := $i398;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    goto corral_source_split_12174;

  corral_source_split_12174:
    assume {:verifier.code 0} true;
    $p416 := $add.ref($add.ref($p399, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12175;

  corral_source_split_12175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2071} up_read($p416);
    goto corral_source_split_12176;

  corral_source_split_12176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2072} vslice_dummy_var_157 := comedi_dev_put($p399);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_12177;

  corral_source_split_12177:
    assume {:verifier.code 0} true;
    $i418 := $i406;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto corral_source_split_12179;

  corral_source_split_12179:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2073} $p419 := comedi_dev_get_from_minor(19);
    goto corral_source_split_12181;

  corral_source_split_12181:
    assume {:verifier.code 0} true;
    $i420 := $p2i.ref.i64($p419);
    goto corral_source_split_12182;

  corral_source_split_12182:
    assume {:verifier.code 0} true;
    $i421 := $eq.i64($i420, 0);
    goto corral_source_split_12183;

  corral_source_split_12183:
    assume {:verifier.code 0} true;
    assume {:branchcond $i421} true;
    goto $bb178, $bb179;

  $bb179:
    assume !($i421 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p419, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12187;

  corral_source_split_12187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2074} down_read($p422);
    goto corral_source_split_12188;

  corral_source_split_12188:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p419, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12189;

  corral_source_split_12189:
    assume {:verifier.code 0} true;
    $i424 := $load.i8($M.0, $p423);
    goto corral_source_split_12190;

  corral_source_split_12190:
    assume {:verifier.code 0} true;
    $i425 := $trunc.i8.i1($i424);
    goto corral_source_split_12191;

  corral_source_split_12191:
    assume {:verifier.code 0} true;
    assume {:branchcond $i425} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    $i426 := $i418;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    goto corral_source_split_12204;

  corral_source_split_12204:
    assume {:verifier.code 0} true;
    $p436 := $add.ref($add.ref($p419, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12205;

  corral_source_split_12205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2076} up_read($p436);
    goto corral_source_split_12206;

  corral_source_split_12206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2077} vslice_dummy_var_159 := comedi_dev_put($p419);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_12207;

  corral_source_split_12207:
    assume {:verifier.code 0} true;
    $i438 := $i426;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto corral_source_split_12209;

  corral_source_split_12209:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2078} $p439 := comedi_dev_get_from_minor(20);
    goto corral_source_split_12211;

  corral_source_split_12211:
    assume {:verifier.code 0} true;
    $i440 := $p2i.ref.i64($p439);
    goto corral_source_split_12212;

  corral_source_split_12212:
    assume {:verifier.code 0} true;
    $i441 := $eq.i64($i440, 0);
    goto corral_source_split_12213;

  corral_source_split_12213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($add.ref($p439, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12217;

  corral_source_split_12217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2079} down_read($p442);
    goto corral_source_split_12218;

  corral_source_split_12218:
    assume {:verifier.code 0} true;
    $p443 := $add.ref($add.ref($p439, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12219;

  corral_source_split_12219:
    assume {:verifier.code 0} true;
    $i444 := $load.i8($M.0, $p443);
    goto corral_source_split_12220;

  corral_source_split_12220:
    assume {:verifier.code 0} true;
    $i445 := $trunc.i8.i1($i444);
    goto corral_source_split_12221;

  corral_source_split_12221:
    assume {:verifier.code 0} true;
    assume {:branchcond $i445} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i445 == 1);
    assume {:verifier.code 0} true;
    $i446 := $i438;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    goto corral_source_split_12234;

  corral_source_split_12234:
    assume {:verifier.code 0} true;
    $p456 := $add.ref($add.ref($p439, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12235;

  corral_source_split_12235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2081} up_read($p456);
    goto corral_source_split_12236;

  corral_source_split_12236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2082} vslice_dummy_var_161 := comedi_dev_put($p439);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_12237;

  corral_source_split_12237:
    assume {:verifier.code 0} true;
    $i458 := $i446;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto corral_source_split_12239;

  corral_source_split_12239:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2083} $p459 := comedi_dev_get_from_minor(21);
    goto corral_source_split_12241;

  corral_source_split_12241:
    assume {:verifier.code 0} true;
    $i460 := $p2i.ref.i64($p459);
    goto corral_source_split_12242;

  corral_source_split_12242:
    assume {:verifier.code 0} true;
    $i461 := $eq.i64($i460, 0);
    goto corral_source_split_12243;

  corral_source_split_12243:
    assume {:verifier.code 0} true;
    assume {:branchcond $i461} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i461 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    $p462 := $add.ref($add.ref($p459, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12247;

  corral_source_split_12247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2084} down_read($p462);
    goto corral_source_split_12248;

  corral_source_split_12248:
    assume {:verifier.code 0} true;
    $p463 := $add.ref($add.ref($p459, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12249;

  corral_source_split_12249:
    assume {:verifier.code 0} true;
    $i464 := $load.i8($M.0, $p463);
    goto corral_source_split_12250;

  corral_source_split_12250:
    assume {:verifier.code 0} true;
    $i465 := $trunc.i8.i1($i464);
    goto corral_source_split_12251;

  corral_source_split_12251:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    $i466 := $i458;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    goto corral_source_split_12264;

  corral_source_split_12264:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p459, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12265;

  corral_source_split_12265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2086} up_read($p476);
    goto corral_source_split_12266;

  corral_source_split_12266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2087} vslice_dummy_var_163 := comedi_dev_put($p459);
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto corral_source_split_12267;

  corral_source_split_12267:
    assume {:verifier.code 0} true;
    $i478 := $i466;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto corral_source_split_12269;

  corral_source_split_12269:
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2088} $p479 := comedi_dev_get_from_minor(22);
    goto corral_source_split_12271;

  corral_source_split_12271:
    assume {:verifier.code 0} true;
    $i480 := $p2i.ref.i64($p479);
    goto corral_source_split_12272;

  corral_source_split_12272:
    assume {:verifier.code 0} true;
    $i481 := $eq.i64($i480, 0);
    goto corral_source_split_12273;

  corral_source_split_12273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i481} true;
    goto $bb202, $bb203;

  $bb203:
    assume !($i481 == 1);
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p479, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12277;

  corral_source_split_12277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2089} down_read($p482);
    goto corral_source_split_12278;

  corral_source_split_12278:
    assume {:verifier.code 0} true;
    $p483 := $add.ref($add.ref($p479, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12279;

  corral_source_split_12279:
    assume {:verifier.code 0} true;
    $i484 := $load.i8($M.0, $p483);
    goto corral_source_split_12280;

  corral_source_split_12280:
    assume {:verifier.code 0} true;
    $i485 := $trunc.i8.i1($i484);
    goto corral_source_split_12281;

  corral_source_split_12281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i485} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i485 == 1);
    assume {:verifier.code 0} true;
    $i486 := $i478;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto corral_source_split_12294;

  corral_source_split_12294:
    assume {:verifier.code 0} true;
    $p496 := $add.ref($add.ref($p479, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12295;

  corral_source_split_12295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2091} up_read($p496);
    goto corral_source_split_12296;

  corral_source_split_12296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2092} vslice_dummy_var_165 := comedi_dev_put($p479);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    goto corral_source_split_12297;

  corral_source_split_12297:
    assume {:verifier.code 0} true;
    $i498 := $i486;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto corral_source_split_12299;

  corral_source_split_12299:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2093} $p499 := comedi_dev_get_from_minor(23);
    goto corral_source_split_12301;

  corral_source_split_12301:
    assume {:verifier.code 0} true;
    $i500 := $p2i.ref.i64($p499);
    goto corral_source_split_12302;

  corral_source_split_12302:
    assume {:verifier.code 0} true;
    $i501 := $eq.i64($i500, 0);
    goto corral_source_split_12303;

  corral_source_split_12303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i501} true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i501 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p499, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12307;

  corral_source_split_12307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2094} down_read($p502);
    goto corral_source_split_12308;

  corral_source_split_12308:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p499, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12309;

  corral_source_split_12309:
    assume {:verifier.code 0} true;
    $i504 := $load.i8($M.0, $p503);
    goto corral_source_split_12310;

  corral_source_split_12310:
    assume {:verifier.code 0} true;
    $i505 := $trunc.i8.i1($i504);
    goto corral_source_split_12311;

  corral_source_split_12311:
    assume {:verifier.code 0} true;
    assume {:branchcond $i505} true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i505 == 1);
    assume {:verifier.code 0} true;
    $i506 := $i498;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    goto corral_source_split_12324;

  corral_source_split_12324:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($p499, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12325;

  corral_source_split_12325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2096} up_read($p516);
    goto corral_source_split_12326;

  corral_source_split_12326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2097} vslice_dummy_var_167 := comedi_dev_put($p499);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    goto corral_source_split_12327;

  corral_source_split_12327:
    assume {:verifier.code 0} true;
    $i518 := $i506;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    goto corral_source_split_12329;

  corral_source_split_12329:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2098} $p519 := comedi_dev_get_from_minor(24);
    goto corral_source_split_12331;

  corral_source_split_12331:
    assume {:verifier.code 0} true;
    $i520 := $p2i.ref.i64($p519);
    goto corral_source_split_12332;

  corral_source_split_12332:
    assume {:verifier.code 0} true;
    $i521 := $eq.i64($i520, 0);
    goto corral_source_split_12333;

  corral_source_split_12333:
    assume {:verifier.code 0} true;
    assume {:branchcond $i521} true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i521 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($p519, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12337;

  corral_source_split_12337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2099} down_read($p522);
    goto corral_source_split_12338;

  corral_source_split_12338:
    assume {:verifier.code 0} true;
    $p523 := $add.ref($add.ref($p519, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12339;

  corral_source_split_12339:
    assume {:verifier.code 0} true;
    $i524 := $load.i8($M.0, $p523);
    goto corral_source_split_12340;

  corral_source_split_12340:
    assume {:verifier.code 0} true;
    $i525 := $trunc.i8.i1($i524);
    goto corral_source_split_12341;

  corral_source_split_12341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i525} true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    $i526 := $i518;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto corral_source_split_12354;

  corral_source_split_12354:
    assume {:verifier.code 0} true;
    $p536 := $add.ref($add.ref($p519, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12355;

  corral_source_split_12355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2101} up_read($p536);
    goto corral_source_split_12356;

  corral_source_split_12356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2102} vslice_dummy_var_169 := comedi_dev_put($p519);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    goto corral_source_split_12357;

  corral_source_split_12357:
    assume {:verifier.code 0} true;
    $i538 := $i526;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto corral_source_split_12359;

  corral_source_split_12359:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2103} $p539 := comedi_dev_get_from_minor(25);
    goto corral_source_split_12361;

  corral_source_split_12361:
    assume {:verifier.code 0} true;
    $i540 := $p2i.ref.i64($p539);
    goto corral_source_split_12362;

  corral_source_split_12362:
    assume {:verifier.code 0} true;
    $i541 := $eq.i64($i540, 0);
    goto corral_source_split_12363;

  corral_source_split_12363:
    assume {:verifier.code 0} true;
    assume {:branchcond $i541} true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i541 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p542 := $add.ref($add.ref($p539, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12367;

  corral_source_split_12367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2104} down_read($p542);
    goto corral_source_split_12368;

  corral_source_split_12368:
    assume {:verifier.code 0} true;
    $p543 := $add.ref($add.ref($p539, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12369;

  corral_source_split_12369:
    assume {:verifier.code 0} true;
    $i544 := $load.i8($M.0, $p543);
    goto corral_source_split_12370;

  corral_source_split_12370:
    assume {:verifier.code 0} true;
    $i545 := $trunc.i8.i1($i544);
    goto corral_source_split_12371;

  corral_source_split_12371:
    assume {:verifier.code 0} true;
    assume {:branchcond $i545} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i545 == 1);
    assume {:verifier.code 0} true;
    $i546 := $i538;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    goto corral_source_split_12384;

  corral_source_split_12384:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p539, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12385;

  corral_source_split_12385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2106} up_read($p556);
    goto corral_source_split_12386;

  corral_source_split_12386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2107} vslice_dummy_var_171 := comedi_dev_put($p539);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    goto corral_source_split_12387;

  corral_source_split_12387:
    assume {:verifier.code 0} true;
    $i558 := $i546;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto corral_source_split_12389;

  corral_source_split_12389:
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2108} $p559 := comedi_dev_get_from_minor(26);
    goto corral_source_split_12391;

  corral_source_split_12391:
    assume {:verifier.code 0} true;
    $i560 := $p2i.ref.i64($p559);
    goto corral_source_split_12392;

  corral_source_split_12392:
    assume {:verifier.code 0} true;
    $i561 := $eq.i64($i560, 0);
    goto corral_source_split_12393;

  corral_source_split_12393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i561} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p562 := $add.ref($add.ref($p559, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12397;

  corral_source_split_12397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2109} down_read($p562);
    goto corral_source_split_12398;

  corral_source_split_12398:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p559, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12399;

  corral_source_split_12399:
    assume {:verifier.code 0} true;
    $i564 := $load.i8($M.0, $p563);
    goto corral_source_split_12400;

  corral_source_split_12400:
    assume {:verifier.code 0} true;
    $i565 := $trunc.i8.i1($i564);
    goto corral_source_split_12401;

  corral_source_split_12401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    $i566 := $i558;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    goto corral_source_split_12414;

  corral_source_split_12414:
    assume {:verifier.code 0} true;
    $p576 := $add.ref($add.ref($p559, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12415;

  corral_source_split_12415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2111} up_read($p576);
    goto corral_source_split_12416;

  corral_source_split_12416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2112} vslice_dummy_var_173 := comedi_dev_put($p559);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    goto corral_source_split_12417;

  corral_source_split_12417:
    assume {:verifier.code 0} true;
    $i578 := $i566;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto corral_source_split_12419;

  corral_source_split_12419:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2113} $p579 := comedi_dev_get_from_minor(27);
    goto corral_source_split_12421;

  corral_source_split_12421:
    assume {:verifier.code 0} true;
    $i580 := $p2i.ref.i64($p579);
    goto corral_source_split_12422;

  corral_source_split_12422:
    assume {:verifier.code 0} true;
    $i581 := $eq.i64($i580, 0);
    goto corral_source_split_12423;

  corral_source_split_12423:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i581 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p579, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12427;

  corral_source_split_12427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2114} down_read($p582);
    goto corral_source_split_12428;

  corral_source_split_12428:
    assume {:verifier.code 0} true;
    $p583 := $add.ref($add.ref($p579, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12429;

  corral_source_split_12429:
    assume {:verifier.code 0} true;
    $i584 := $load.i8($M.0, $p583);
    goto corral_source_split_12430;

  corral_source_split_12430:
    assume {:verifier.code 0} true;
    $i585 := $trunc.i8.i1($i584);
    goto corral_source_split_12431;

  corral_source_split_12431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i585} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i585 == 1);
    assume {:verifier.code 0} true;
    $i586 := $i578;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto corral_source_split_12444;

  corral_source_split_12444:
    assume {:verifier.code 0} true;
    $p596 := $add.ref($add.ref($p579, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12445;

  corral_source_split_12445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2116} up_read($p596);
    goto corral_source_split_12446;

  corral_source_split_12446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2117} vslice_dummy_var_175 := comedi_dev_put($p579);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    goto corral_source_split_12447;

  corral_source_split_12447:
    assume {:verifier.code 0} true;
    $i598 := $i586;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    goto corral_source_split_12449;

  corral_source_split_12449:
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2118} $p599 := comedi_dev_get_from_minor(28);
    goto corral_source_split_12451;

  corral_source_split_12451:
    assume {:verifier.code 0} true;
    $i600 := $p2i.ref.i64($p599);
    goto corral_source_split_12452;

  corral_source_split_12452:
    assume {:verifier.code 0} true;
    $i601 := $eq.i64($i600, 0);
    goto corral_source_split_12453;

  corral_source_split_12453:
    assume {:verifier.code 0} true;
    assume {:branchcond $i601} true;
    goto $bb250, $bb251;

  $bb251:
    assume !($i601 == 1);
    assume {:verifier.code 0} true;
    goto $bb252;

  $bb252:
    assume {:verifier.code 0} true;
    $p602 := $add.ref($add.ref($p599, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12457;

  corral_source_split_12457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2119} down_read($p602);
    goto corral_source_split_12458;

  corral_source_split_12458:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($add.ref($p599, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12459;

  corral_source_split_12459:
    assume {:verifier.code 0} true;
    $i604 := $load.i8($M.0, $p603);
    goto corral_source_split_12460;

  corral_source_split_12460:
    assume {:verifier.code 0} true;
    $i605 := $trunc.i8.i1($i604);
    goto corral_source_split_12461;

  corral_source_split_12461:
    assume {:verifier.code 0} true;
    assume {:branchcond $i605} true;
    goto $bb253, $bb254;

  $bb254:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    $i606 := $i598;
    goto $bb255;

  $bb255:
    assume {:verifier.code 0} true;
    goto corral_source_split_12474;

  corral_source_split_12474:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p599, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12475;

  corral_source_split_12475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2121} up_read($p616);
    goto corral_source_split_12476;

  corral_source_split_12476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2122} vslice_dummy_var_177 := comedi_dev_put($p599);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    goto corral_source_split_12477;

  corral_source_split_12477:
    assume {:verifier.code 0} true;
    $i618 := $i606;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto corral_source_split_12479;

  corral_source_split_12479:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2123} $p619 := comedi_dev_get_from_minor(29);
    goto corral_source_split_12481;

  corral_source_split_12481:
    assume {:verifier.code 0} true;
    $i620 := $p2i.ref.i64($p619);
    goto corral_source_split_12482;

  corral_source_split_12482:
    assume {:verifier.code 0} true;
    $i621 := $eq.i64($i620, 0);
    goto corral_source_split_12483;

  corral_source_split_12483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i621} true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i621 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p622 := $add.ref($add.ref($p619, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12487;

  corral_source_split_12487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2124} down_read($p622);
    goto corral_source_split_12488;

  corral_source_split_12488:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p619, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12489;

  corral_source_split_12489:
    assume {:verifier.code 0} true;
    $i624 := $load.i8($M.0, $p623);
    goto corral_source_split_12490;

  corral_source_split_12490:
    assume {:verifier.code 0} true;
    $i625 := $trunc.i8.i1($i624);
    goto corral_source_split_12491;

  corral_source_split_12491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i625} true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i625 == 1);
    assume {:verifier.code 0} true;
    $i626 := $i618;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    goto corral_source_split_12504;

  corral_source_split_12504:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p619, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12505;

  corral_source_split_12505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2126} up_read($p636);
    goto corral_source_split_12506;

  corral_source_split_12506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2127} vslice_dummy_var_179 := comedi_dev_put($p619);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    goto corral_source_split_12507;

  corral_source_split_12507:
    assume {:verifier.code 0} true;
    $i638 := $i626;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto corral_source_split_12509;

  corral_source_split_12509:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2128} $p639 := comedi_dev_get_from_minor(30);
    goto corral_source_split_12511;

  corral_source_split_12511:
    assume {:verifier.code 0} true;
    $i640 := $p2i.ref.i64($p639);
    goto corral_source_split_12512;

  corral_source_split_12512:
    assume {:verifier.code 0} true;
    $i641 := $eq.i64($i640, 0);
    goto corral_source_split_12513;

  corral_source_split_12513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i641} true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i641 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p639, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12517;

  corral_source_split_12517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2129} down_read($p642);
    goto corral_source_split_12518;

  corral_source_split_12518:
    assume {:verifier.code 0} true;
    $p643 := $add.ref($add.ref($p639, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12519;

  corral_source_split_12519:
    assume {:verifier.code 0} true;
    $i644 := $load.i8($M.0, $p643);
    goto corral_source_split_12520;

  corral_source_split_12520:
    assume {:verifier.code 0} true;
    $i645 := $trunc.i8.i1($i644);
    goto corral_source_split_12521;

  corral_source_split_12521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i645} true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    $i646 := $i638;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    goto corral_source_split_12534;

  corral_source_split_12534:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p639, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12535;

  corral_source_split_12535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2131} up_read($p656);
    goto corral_source_split_12536;

  corral_source_split_12536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2132} vslice_dummy_var_181 := comedi_dev_put($p639);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    goto corral_source_split_12537;

  corral_source_split_12537:
    assume {:verifier.code 0} true;
    $i658 := $i646;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    goto corral_source_split_12539;

  corral_source_split_12539:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2133} $p659 := comedi_dev_get_from_minor(31);
    goto corral_source_split_12541;

  corral_source_split_12541:
    assume {:verifier.code 0} true;
    $i660 := $p2i.ref.i64($p659);
    goto corral_source_split_12542;

  corral_source_split_12542:
    assume {:verifier.code 0} true;
    $i661 := $eq.i64($i660, 0);
    goto corral_source_split_12543;

  corral_source_split_12543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i661} true;
    goto $bb274, $bb275;

  $bb275:
    assume !($i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p659, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12547;

  corral_source_split_12547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2134} down_read($p662);
    goto corral_source_split_12548;

  corral_source_split_12548:
    assume {:verifier.code 0} true;
    $p663 := $add.ref($add.ref($p659, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12549;

  corral_source_split_12549:
    assume {:verifier.code 0} true;
    $i664 := $load.i8($M.0, $p663);
    goto corral_source_split_12550;

  corral_source_split_12550:
    assume {:verifier.code 0} true;
    $i665 := $trunc.i8.i1($i664);
    goto corral_source_split_12551;

  corral_source_split_12551:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb277, $bb278;

  $bb278:
    assume !($i665 == 1);
    assume {:verifier.code 0} true;
    $i666 := $i658;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    goto corral_source_split_12564;

  corral_source_split_12564:
    assume {:verifier.code 0} true;
    $p676 := $add.ref($add.ref($p659, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12565;

  corral_source_split_12565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2136} up_read($p676);
    goto corral_source_split_12566;

  corral_source_split_12566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2137} vslice_dummy_var_183 := comedi_dev_put($p659);
    goto SeqInstr_706, SeqInstr_707;

  SeqInstr_707:
    assume assertsPassed;
    goto SeqInstr_708;

  SeqInstr_708:
    goto corral_source_split_12567;

  corral_source_split_12567:
    assume {:verifier.code 0} true;
    $i678 := $i666;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    goto corral_source_split_12569;

  corral_source_split_12569:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2138} $p679 := comedi_dev_get_from_minor(32);
    goto corral_source_split_12571;

  corral_source_split_12571:
    assume {:verifier.code 0} true;
    $i680 := $p2i.ref.i64($p679);
    goto corral_source_split_12572;

  corral_source_split_12572:
    assume {:verifier.code 0} true;
    $i681 := $eq.i64($i680, 0);
    goto corral_source_split_12573;

  corral_source_split_12573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i681} true;
    goto $bb282, $bb283;

  $bb283:
    assume !($i681 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    $p682 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12577;

  corral_source_split_12577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2139} down_read($p682);
    goto corral_source_split_12578;

  corral_source_split_12578:
    assume {:verifier.code 0} true;
    $p683 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12579;

  corral_source_split_12579:
    assume {:verifier.code 0} true;
    $i684 := $load.i8($M.0, $p683);
    goto corral_source_split_12580;

  corral_source_split_12580:
    assume {:verifier.code 0} true;
    $i685 := $trunc.i8.i1($i684);
    goto corral_source_split_12581;

  corral_source_split_12581:
    assume {:verifier.code 0} true;
    assume {:branchcond $i685} true;
    goto $bb285, $bb286;

  $bb286:
    assume !($i685 == 1);
    assume {:verifier.code 0} true;
    $i686 := $i678;
    goto $bb287;

  $bb287:
    assume {:verifier.code 0} true;
    goto corral_source_split_12594;

  corral_source_split_12594:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12595;

  corral_source_split_12595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2141} up_read($p696);
    goto corral_source_split_12596;

  corral_source_split_12596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2142} vslice_dummy_var_185 := comedi_dev_put($p679);
    goto SeqInstr_709, SeqInstr_710;

  SeqInstr_710:
    assume assertsPassed;
    goto SeqInstr_711;

  SeqInstr_711:
    goto corral_source_split_12597;

  corral_source_split_12597:
    assume {:verifier.code 0} true;
    $i698 := $i686;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    goto corral_source_split_12599;

  corral_source_split_12599:
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2143} $p699 := comedi_dev_get_from_minor(33);
    goto corral_source_split_12601;

  corral_source_split_12601:
    assume {:verifier.code 0} true;
    $i700 := $p2i.ref.i64($p699);
    goto corral_source_split_12602;

  corral_source_split_12602:
    assume {:verifier.code 0} true;
    $i701 := $eq.i64($i700, 0);
    goto corral_source_split_12603;

  corral_source_split_12603:
    assume {:verifier.code 0} true;
    assume {:branchcond $i701} true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i701 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $p702 := $add.ref($add.ref($p699, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12607;

  corral_source_split_12607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2144} down_read($p702);
    goto corral_source_split_12608;

  corral_source_split_12608:
    assume {:verifier.code 0} true;
    $p703 := $add.ref($add.ref($p699, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12609;

  corral_source_split_12609:
    assume {:verifier.code 0} true;
    $i704 := $load.i8($M.0, $p703);
    goto corral_source_split_12610;

  corral_source_split_12610:
    assume {:verifier.code 0} true;
    $i705 := $trunc.i8.i1($i704);
    goto corral_source_split_12611;

  corral_source_split_12611:
    assume {:verifier.code 0} true;
    assume {:branchcond $i705} true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i705 == 1);
    assume {:verifier.code 0} true;
    $i706 := $i698;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto corral_source_split_12624;

  corral_source_split_12624:
    assume {:verifier.code 0} true;
    $p716 := $add.ref($add.ref($p699, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12625;

  corral_source_split_12625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2146} up_read($p716);
    goto corral_source_split_12626;

  corral_source_split_12626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2147} vslice_dummy_var_187 := comedi_dev_put($p699);
    goto SeqInstr_712, SeqInstr_713;

  SeqInstr_713:
    assume assertsPassed;
    goto SeqInstr_714;

  SeqInstr_714:
    goto corral_source_split_12627;

  corral_source_split_12627:
    assume {:verifier.code 0} true;
    $i718 := $i706;
    goto $bb296;

  $bb296:
    assume {:verifier.code 0} true;
    goto corral_source_split_12629;

  corral_source_split_12629:
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2148} $p719 := comedi_dev_get_from_minor(34);
    goto corral_source_split_12631;

  corral_source_split_12631:
    assume {:verifier.code 0} true;
    $i720 := $p2i.ref.i64($p719);
    goto corral_source_split_12632;

  corral_source_split_12632:
    assume {:verifier.code 0} true;
    $i721 := $eq.i64($i720, 0);
    goto corral_source_split_12633;

  corral_source_split_12633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb298, $bb299;

  $bb299:
    assume !($i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    $p722 := $add.ref($add.ref($p719, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12637;

  corral_source_split_12637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2149} down_read($p722);
    goto corral_source_split_12638;

  corral_source_split_12638:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p719, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12639;

  corral_source_split_12639:
    assume {:verifier.code 0} true;
    $i724 := $load.i8($M.0, $p723);
    goto corral_source_split_12640;

  corral_source_split_12640:
    assume {:verifier.code 0} true;
    $i725 := $trunc.i8.i1($i724);
    goto corral_source_split_12641;

  corral_source_split_12641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i725} true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i725 == 1);
    assume {:verifier.code 0} true;
    $i726 := $i718;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto corral_source_split_12654;

  corral_source_split_12654:
    assume {:verifier.code 0} true;
    $p736 := $add.ref($add.ref($p719, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12655;

  corral_source_split_12655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2151} up_read($p736);
    goto corral_source_split_12656;

  corral_source_split_12656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2152} vslice_dummy_var_189 := comedi_dev_put($p719);
    goto SeqInstr_715, SeqInstr_716;

  SeqInstr_716:
    assume assertsPassed;
    goto SeqInstr_717;

  SeqInstr_717:
    goto corral_source_split_12657;

  corral_source_split_12657:
    assume {:verifier.code 0} true;
    $i738 := $i726;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto corral_source_split_12659;

  corral_source_split_12659:
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2153} $p739 := comedi_dev_get_from_minor(35);
    goto corral_source_split_12661;

  corral_source_split_12661:
    assume {:verifier.code 0} true;
    $i740 := $p2i.ref.i64($p739);
    goto corral_source_split_12662;

  corral_source_split_12662:
    assume {:verifier.code 0} true;
    $i741 := $eq.i64($i740, 0);
    goto corral_source_split_12663;

  corral_source_split_12663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i741} true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i741 == 1);
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    $p742 := $add.ref($add.ref($p739, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12667;

  corral_source_split_12667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2154} down_read($p742);
    goto corral_source_split_12668;

  corral_source_split_12668:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($p739, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12669;

  corral_source_split_12669:
    assume {:verifier.code 0} true;
    $i744 := $load.i8($M.0, $p743);
    goto corral_source_split_12670;

  corral_source_split_12670:
    assume {:verifier.code 0} true;
    $i745 := $trunc.i8.i1($i744);
    goto corral_source_split_12671;

  corral_source_split_12671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i745} true;
    goto $bb309, $bb310;

  $bb310:
    assume !($i745 == 1);
    assume {:verifier.code 0} true;
    $i746 := $i738;
    goto $bb311;

  $bb311:
    assume {:verifier.code 0} true;
    goto corral_source_split_12684;

  corral_source_split_12684:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p739, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12685;

  corral_source_split_12685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2156} up_read($p756);
    goto corral_source_split_12686;

  corral_source_split_12686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2157} vslice_dummy_var_191 := comedi_dev_put($p739);
    goto SeqInstr_718, SeqInstr_719;

  SeqInstr_719:
    assume assertsPassed;
    goto SeqInstr_720;

  SeqInstr_720:
    goto corral_source_split_12687;

  corral_source_split_12687:
    assume {:verifier.code 0} true;
    $i758 := $i746;
    goto $bb312;

  $bb312:
    assume {:verifier.code 0} true;
    goto corral_source_split_12689;

  corral_source_split_12689:
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2158} $p759 := comedi_dev_get_from_minor(36);
    goto corral_source_split_12691;

  corral_source_split_12691:
    assume {:verifier.code 0} true;
    $i760 := $p2i.ref.i64($p759);
    goto corral_source_split_12692;

  corral_source_split_12692:
    assume {:verifier.code 0} true;
    $i761 := $eq.i64($i760, 0);
    goto corral_source_split_12693;

  corral_source_split_12693:
    assume {:verifier.code 0} true;
    assume {:branchcond $i761} true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i761 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $p762 := $add.ref($add.ref($p759, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12697;

  corral_source_split_12697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2159} down_read($p762);
    goto corral_source_split_12698;

  corral_source_split_12698:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p759, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12699;

  corral_source_split_12699:
    assume {:verifier.code 0} true;
    $i764 := $load.i8($M.0, $p763);
    goto corral_source_split_12700;

  corral_source_split_12700:
    assume {:verifier.code 0} true;
    $i765 := $trunc.i8.i1($i764);
    goto corral_source_split_12701;

  corral_source_split_12701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i765} true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i765 == 1);
    assume {:verifier.code 0} true;
    $i766 := $i758;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto corral_source_split_12714;

  corral_source_split_12714:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p759, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12715;

  corral_source_split_12715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2161} up_read($p776);
    goto corral_source_split_12716;

  corral_source_split_12716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2162} vslice_dummy_var_193 := comedi_dev_put($p759);
    goto SeqInstr_721, SeqInstr_722;

  SeqInstr_722:
    assume assertsPassed;
    goto SeqInstr_723;

  SeqInstr_723:
    goto corral_source_split_12717;

  corral_source_split_12717:
    assume {:verifier.code 0} true;
    $i778 := $i766;
    goto $bb320;

  $bb320:
    assume {:verifier.code 0} true;
    goto corral_source_split_12719;

  corral_source_split_12719:
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2163} $p779 := comedi_dev_get_from_minor(37);
    goto corral_source_split_12721;

  corral_source_split_12721:
    assume {:verifier.code 0} true;
    $i780 := $p2i.ref.i64($p779);
    goto corral_source_split_12722;

  corral_source_split_12722:
    assume {:verifier.code 0} true;
    $i781 := $eq.i64($i780, 0);
    goto corral_source_split_12723;

  corral_source_split_12723:
    assume {:verifier.code 0} true;
    assume {:branchcond $i781} true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i781 == 1);
    assume {:verifier.code 0} true;
    goto $bb324;

  $bb324:
    assume {:verifier.code 0} true;
    $p782 := $add.ref($add.ref($p779, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12727;

  corral_source_split_12727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2164} down_read($p782);
    goto corral_source_split_12728;

  corral_source_split_12728:
    assume {:verifier.code 0} true;
    $p783 := $add.ref($add.ref($p779, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12729;

  corral_source_split_12729:
    assume {:verifier.code 0} true;
    $i784 := $load.i8($M.0, $p783);
    goto corral_source_split_12730;

  corral_source_split_12730:
    assume {:verifier.code 0} true;
    $i785 := $trunc.i8.i1($i784);
    goto corral_source_split_12731;

  corral_source_split_12731:
    assume {:verifier.code 0} true;
    assume {:branchcond $i785} true;
    goto $bb325, $bb326;

  $bb326:
    assume !($i785 == 1);
    assume {:verifier.code 0} true;
    $i786 := $i778;
    goto $bb327;

  $bb327:
    assume {:verifier.code 0} true;
    goto corral_source_split_12744;

  corral_source_split_12744:
    assume {:verifier.code 0} true;
    $p796 := $add.ref($add.ref($p779, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12745;

  corral_source_split_12745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2166} up_read($p796);
    goto corral_source_split_12746;

  corral_source_split_12746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2167} vslice_dummy_var_195 := comedi_dev_put($p779);
    goto SeqInstr_724, SeqInstr_725;

  SeqInstr_725:
    assume assertsPassed;
    goto SeqInstr_726;

  SeqInstr_726:
    goto corral_source_split_12747;

  corral_source_split_12747:
    assume {:verifier.code 0} true;
    $i798 := $i786;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto corral_source_split_12749;

  corral_source_split_12749:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2168} $p799 := comedi_dev_get_from_minor(38);
    goto corral_source_split_12751;

  corral_source_split_12751:
    assume {:verifier.code 0} true;
    $i800 := $p2i.ref.i64($p799);
    goto corral_source_split_12752;

  corral_source_split_12752:
    assume {:verifier.code 0} true;
    $i801 := $eq.i64($i800, 0);
    goto corral_source_split_12753;

  corral_source_split_12753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i801} true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb332;

  $bb332:
    assume {:verifier.code 0} true;
    $p802 := $add.ref($add.ref($p799, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12757;

  corral_source_split_12757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2169} down_read($p802);
    goto corral_source_split_12758;

  corral_source_split_12758:
    assume {:verifier.code 0} true;
    $p803 := $add.ref($add.ref($p799, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12759;

  corral_source_split_12759:
    assume {:verifier.code 0} true;
    $i804 := $load.i8($M.0, $p803);
    goto corral_source_split_12760;

  corral_source_split_12760:
    assume {:verifier.code 0} true;
    $i805 := $trunc.i8.i1($i804);
    goto corral_source_split_12761;

  corral_source_split_12761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i805} true;
    goto $bb333, $bb334;

  $bb334:
    assume !($i805 == 1);
    assume {:verifier.code 0} true;
    $i806 := $i798;
    goto $bb335;

  $bb335:
    assume {:verifier.code 0} true;
    goto corral_source_split_12774;

  corral_source_split_12774:
    assume {:verifier.code 0} true;
    $p816 := $add.ref($add.ref($p799, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12775;

  corral_source_split_12775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2171} up_read($p816);
    goto corral_source_split_12776;

  corral_source_split_12776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2172} vslice_dummy_var_197 := comedi_dev_put($p799);
    goto SeqInstr_727, SeqInstr_728;

  SeqInstr_728:
    assume assertsPassed;
    goto SeqInstr_729;

  SeqInstr_729:
    goto corral_source_split_12777;

  corral_source_split_12777:
    assume {:verifier.code 0} true;
    $i818 := $i806;
    goto $bb336;

  $bb336:
    assume {:verifier.code 0} true;
    goto corral_source_split_12779;

  corral_source_split_12779:
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2173} $p819 := comedi_dev_get_from_minor(39);
    goto corral_source_split_12781;

  corral_source_split_12781:
    assume {:verifier.code 0} true;
    $i820 := $p2i.ref.i64($p819);
    goto corral_source_split_12782;

  corral_source_split_12782:
    assume {:verifier.code 0} true;
    $i821 := $eq.i64($i820, 0);
    goto corral_source_split_12783;

  corral_source_split_12783:
    assume {:verifier.code 0} true;
    assume {:branchcond $i821} true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i821 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $p822 := $add.ref($add.ref($p819, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12787;

  corral_source_split_12787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2174} down_read($p822);
    goto corral_source_split_12788;

  corral_source_split_12788:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($p819, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12789;

  corral_source_split_12789:
    assume {:verifier.code 0} true;
    $i824 := $load.i8($M.0, $p823);
    goto corral_source_split_12790;

  corral_source_split_12790:
    assume {:verifier.code 0} true;
    $i825 := $trunc.i8.i1($i824);
    goto corral_source_split_12791;

  corral_source_split_12791:
    assume {:verifier.code 0} true;
    assume {:branchcond $i825} true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i825 == 1);
    assume {:verifier.code 0} true;
    $i826 := $i818;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto corral_source_split_12804;

  corral_source_split_12804:
    assume {:verifier.code 0} true;
    $p836 := $add.ref($add.ref($p819, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12805;

  corral_source_split_12805:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2176} up_read($p836);
    goto corral_source_split_12806;

  corral_source_split_12806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2177} vslice_dummy_var_199 := comedi_dev_put($p819);
    goto SeqInstr_730, SeqInstr_731;

  SeqInstr_731:
    assume assertsPassed;
    goto SeqInstr_732;

  SeqInstr_732:
    goto corral_source_split_12807;

  corral_source_split_12807:
    assume {:verifier.code 0} true;
    $i838 := $i826;
    goto $bb344;

  $bb344:
    assume {:verifier.code 0} true;
    goto corral_source_split_12809;

  corral_source_split_12809:
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2178} $p839 := comedi_dev_get_from_minor(40);
    goto corral_source_split_12811;

  corral_source_split_12811:
    assume {:verifier.code 0} true;
    $i840 := $p2i.ref.i64($p839);
    goto corral_source_split_12812;

  corral_source_split_12812:
    assume {:verifier.code 0} true;
    $i841 := $eq.i64($i840, 0);
    goto corral_source_split_12813;

  corral_source_split_12813:
    assume {:verifier.code 0} true;
    assume {:branchcond $i841} true;
    goto $bb346, $bb347;

  $bb347:
    assume !($i841 == 1);
    assume {:verifier.code 0} true;
    goto $bb348;

  $bb348:
    assume {:verifier.code 0} true;
    $p842 := $add.ref($add.ref($p839, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12817;

  corral_source_split_12817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2179} down_read($p842);
    goto corral_source_split_12818;

  corral_source_split_12818:
    assume {:verifier.code 0} true;
    $p843 := $add.ref($add.ref($p839, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12819;

  corral_source_split_12819:
    assume {:verifier.code 0} true;
    $i844 := $load.i8($M.0, $p843);
    goto corral_source_split_12820;

  corral_source_split_12820:
    assume {:verifier.code 0} true;
    $i845 := $trunc.i8.i1($i844);
    goto corral_source_split_12821;

  corral_source_split_12821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i845} true;
    goto $bb349, $bb350;

  $bb350:
    assume !($i845 == 1);
    assume {:verifier.code 0} true;
    $i846 := $i838;
    goto $bb351;

  $bb351:
    assume {:verifier.code 0} true;
    goto corral_source_split_12834;

  corral_source_split_12834:
    assume {:verifier.code 0} true;
    $p856 := $add.ref($add.ref($p839, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12835;

  corral_source_split_12835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2181} up_read($p856);
    goto corral_source_split_12836;

  corral_source_split_12836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2182} vslice_dummy_var_201 := comedi_dev_put($p839);
    goto SeqInstr_733, SeqInstr_734;

  SeqInstr_734:
    assume assertsPassed;
    goto SeqInstr_735;

  SeqInstr_735:
    goto corral_source_split_12837;

  corral_source_split_12837:
    assume {:verifier.code 0} true;
    $i858 := $i846;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto corral_source_split_12839;

  corral_source_split_12839:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2183} $p859 := comedi_dev_get_from_minor(41);
    goto corral_source_split_12841;

  corral_source_split_12841:
    assume {:verifier.code 0} true;
    $i860 := $p2i.ref.i64($p859);
    goto corral_source_split_12842;

  corral_source_split_12842:
    assume {:verifier.code 0} true;
    $i861 := $eq.i64($i860, 0);
    goto corral_source_split_12843;

  corral_source_split_12843:
    assume {:verifier.code 0} true;
    assume {:branchcond $i861} true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $p862 := $add.ref($add.ref($p859, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12847;

  corral_source_split_12847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2184} down_read($p862);
    goto corral_source_split_12848;

  corral_source_split_12848:
    assume {:verifier.code 0} true;
    $p863 := $add.ref($add.ref($p859, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12849;

  corral_source_split_12849:
    assume {:verifier.code 0} true;
    $i864 := $load.i8($M.0, $p863);
    goto corral_source_split_12850;

  corral_source_split_12850:
    assume {:verifier.code 0} true;
    $i865 := $trunc.i8.i1($i864);
    goto corral_source_split_12851;

  corral_source_split_12851:
    assume {:verifier.code 0} true;
    assume {:branchcond $i865} true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i865 == 1);
    assume {:verifier.code 0} true;
    $i866 := $i858;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    goto corral_source_split_12864;

  corral_source_split_12864:
    assume {:verifier.code 0} true;
    $p876 := $add.ref($add.ref($p859, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12865;

  corral_source_split_12865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2186} up_read($p876);
    goto corral_source_split_12866;

  corral_source_split_12866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2187} vslice_dummy_var_203 := comedi_dev_put($p859);
    goto SeqInstr_736, SeqInstr_737;

  SeqInstr_737:
    assume assertsPassed;
    goto SeqInstr_738;

  SeqInstr_738:
    goto corral_source_split_12867;

  corral_source_split_12867:
    assume {:verifier.code 0} true;
    $i878 := $i866;
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto corral_source_split_12869;

  corral_source_split_12869:
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2188} $p879 := comedi_dev_get_from_minor(42);
    goto corral_source_split_12871;

  corral_source_split_12871:
    assume {:verifier.code 0} true;
    $i880 := $p2i.ref.i64($p879);
    goto corral_source_split_12872;

  corral_source_split_12872:
    assume {:verifier.code 0} true;
    $i881 := $eq.i64($i880, 0);
    goto corral_source_split_12873;

  corral_source_split_12873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i881} true;
    goto $bb362, $bb363;

  $bb363:
    assume !($i881 == 1);
    assume {:verifier.code 0} true;
    goto $bb364;

  $bb364:
    assume {:verifier.code 0} true;
    $p882 := $add.ref($add.ref($p879, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12877;

  corral_source_split_12877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2189} down_read($p882);
    goto corral_source_split_12878;

  corral_source_split_12878:
    assume {:verifier.code 0} true;
    $p883 := $add.ref($add.ref($p879, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12879;

  corral_source_split_12879:
    assume {:verifier.code 0} true;
    $i884 := $load.i8($M.0, $p883);
    goto corral_source_split_12880;

  corral_source_split_12880:
    assume {:verifier.code 0} true;
    $i885 := $trunc.i8.i1($i884);
    goto corral_source_split_12881;

  corral_source_split_12881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i885} true;
    goto $bb365, $bb366;

  $bb366:
    assume !($i885 == 1);
    assume {:verifier.code 0} true;
    $i886 := $i878;
    goto $bb367;

  $bb367:
    assume {:verifier.code 0} true;
    goto corral_source_split_12894;

  corral_source_split_12894:
    assume {:verifier.code 0} true;
    $p896 := $add.ref($add.ref($p879, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12895;

  corral_source_split_12895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2191} up_read($p896);
    goto corral_source_split_12896;

  corral_source_split_12896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2192} vslice_dummy_var_205 := comedi_dev_put($p879);
    goto SeqInstr_739, SeqInstr_740;

  SeqInstr_740:
    assume assertsPassed;
    goto SeqInstr_741;

  SeqInstr_741:
    goto corral_source_split_12897;

  corral_source_split_12897:
    assume {:verifier.code 0} true;
    $i898 := $i886;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    goto corral_source_split_12899;

  corral_source_split_12899:
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2193} $p899 := comedi_dev_get_from_minor(43);
    goto corral_source_split_12901;

  corral_source_split_12901:
    assume {:verifier.code 0} true;
    $i900 := $p2i.ref.i64($p899);
    goto corral_source_split_12902;

  corral_source_split_12902:
    assume {:verifier.code 0} true;
    $i901 := $eq.i64($i900, 0);
    goto corral_source_split_12903;

  corral_source_split_12903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i901} true;
    goto $bb370, $bb371;

  $bb371:
    assume !($i901 == 1);
    assume {:verifier.code 0} true;
    goto $bb372;

  $bb372:
    assume {:verifier.code 0} true;
    $p902 := $add.ref($add.ref($p899, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12907;

  corral_source_split_12907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2194} down_read($p902);
    goto corral_source_split_12908;

  corral_source_split_12908:
    assume {:verifier.code 0} true;
    $p903 := $add.ref($add.ref($p899, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12909;

  corral_source_split_12909:
    assume {:verifier.code 0} true;
    $i904 := $load.i8($M.0, $p903);
    goto corral_source_split_12910;

  corral_source_split_12910:
    assume {:verifier.code 0} true;
    $i905 := $trunc.i8.i1($i904);
    goto corral_source_split_12911;

  corral_source_split_12911:
    assume {:verifier.code 0} true;
    assume {:branchcond $i905} true;
    goto $bb373, $bb374;

  $bb374:
    assume !($i905 == 1);
    assume {:verifier.code 0} true;
    $i906 := $i898;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto corral_source_split_12924;

  corral_source_split_12924:
    assume {:verifier.code 0} true;
    $p916 := $add.ref($add.ref($p899, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12925;

  corral_source_split_12925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2196} up_read($p916);
    goto corral_source_split_12926;

  corral_source_split_12926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2197} vslice_dummy_var_207 := comedi_dev_put($p899);
    goto SeqInstr_742, SeqInstr_743;

  SeqInstr_743:
    assume assertsPassed;
    goto SeqInstr_744;

  SeqInstr_744:
    goto corral_source_split_12927;

  corral_source_split_12927:
    assume {:verifier.code 0} true;
    $i918 := $i906;
    goto $bb376;

  $bb376:
    assume {:verifier.code 0} true;
    goto corral_source_split_12929;

  corral_source_split_12929:
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2198} $p919 := comedi_dev_get_from_minor(44);
    goto corral_source_split_12931;

  corral_source_split_12931:
    assume {:verifier.code 0} true;
    $i920 := $p2i.ref.i64($p919);
    goto corral_source_split_12932;

  corral_source_split_12932:
    assume {:verifier.code 0} true;
    $i921 := $eq.i64($i920, 0);
    goto corral_source_split_12933;

  corral_source_split_12933:
    assume {:verifier.code 0} true;
    assume {:branchcond $i921} true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i921 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    $p922 := $add.ref($add.ref($p919, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12937;

  corral_source_split_12937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2199} down_read($p922);
    goto corral_source_split_12938;

  corral_source_split_12938:
    assume {:verifier.code 0} true;
    $p923 := $add.ref($add.ref($p919, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12939;

  corral_source_split_12939:
    assume {:verifier.code 0} true;
    $i924 := $load.i8($M.0, $p923);
    goto corral_source_split_12940;

  corral_source_split_12940:
    assume {:verifier.code 0} true;
    $i925 := $trunc.i8.i1($i924);
    goto corral_source_split_12941;

  corral_source_split_12941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i925} true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i925 == 1);
    assume {:verifier.code 0} true;
    $i926 := $i918;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    goto corral_source_split_12954;

  corral_source_split_12954:
    assume {:verifier.code 0} true;
    $p936 := $add.ref($add.ref($p919, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12955;

  corral_source_split_12955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2201} up_read($p936);
    goto corral_source_split_12956;

  corral_source_split_12956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2202} vslice_dummy_var_209 := comedi_dev_put($p919);
    goto SeqInstr_745, SeqInstr_746;

  SeqInstr_746:
    assume assertsPassed;
    goto SeqInstr_747;

  SeqInstr_747:
    goto corral_source_split_12957;

  corral_source_split_12957:
    assume {:verifier.code 0} true;
    $i938 := $i926;
    goto $bb384;

  $bb384:
    assume {:verifier.code 0} true;
    goto corral_source_split_12959;

  corral_source_split_12959:
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2203} $p939 := comedi_dev_get_from_minor(45);
    goto corral_source_split_12961;

  corral_source_split_12961:
    assume {:verifier.code 0} true;
    $i940 := $p2i.ref.i64($p939);
    goto corral_source_split_12962;

  corral_source_split_12962:
    assume {:verifier.code 0} true;
    $i941 := $eq.i64($i940, 0);
    goto corral_source_split_12963;

  corral_source_split_12963:
    assume {:verifier.code 0} true;
    assume {:branchcond $i941} true;
    goto $bb386, $bb387;

  $bb387:
    assume !($i941 == 1);
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    $p942 := $add.ref($add.ref($p939, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12967;

  corral_source_split_12967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2204} down_read($p942);
    goto corral_source_split_12968;

  corral_source_split_12968:
    assume {:verifier.code 0} true;
    $p943 := $add.ref($add.ref($p939, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12969;

  corral_source_split_12969:
    assume {:verifier.code 0} true;
    $i944 := $load.i8($M.0, $p943);
    goto corral_source_split_12970;

  corral_source_split_12970:
    assume {:verifier.code 0} true;
    $i945 := $trunc.i8.i1($i944);
    goto corral_source_split_12971;

  corral_source_split_12971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb389, $bb390;

  $bb390:
    assume !($i945 == 1);
    assume {:verifier.code 0} true;
    $i946 := $i938;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    goto corral_source_split_12984;

  corral_source_split_12984:
    assume {:verifier.code 0} true;
    $p956 := $add.ref($add.ref($p939, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12985;

  corral_source_split_12985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2206} up_read($p956);
    goto corral_source_split_12986;

  corral_source_split_12986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2207} vslice_dummy_var_211 := comedi_dev_put($p939);
    goto SeqInstr_748, SeqInstr_749;

  SeqInstr_749:
    assume assertsPassed;
    goto SeqInstr_750;

  SeqInstr_750:
    goto corral_source_split_12987;

  corral_source_split_12987:
    assume {:verifier.code 0} true;
    $i958 := $i946;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto corral_source_split_12989;

  corral_source_split_12989:
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2208} $p959 := comedi_dev_get_from_minor(46);
    goto corral_source_split_12991;

  corral_source_split_12991:
    assume {:verifier.code 0} true;
    $i960 := $p2i.ref.i64($p959);
    goto corral_source_split_12992;

  corral_source_split_12992:
    assume {:verifier.code 0} true;
    $i961 := $eq.i64($i960, 0);
    goto corral_source_split_12993;

  corral_source_split_12993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i961} true;
    goto $bb394, $bb395;

  $bb395:
    assume !($i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb396;

  $bb396:
    assume {:verifier.code 0} true;
    $p962 := $add.ref($add.ref($p959, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_12997;

  corral_source_split_12997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2209} down_read($p962);
    goto corral_source_split_12998;

  corral_source_split_12998:
    assume {:verifier.code 0} true;
    $p963 := $add.ref($add.ref($p959, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_12999;

  corral_source_split_12999:
    assume {:verifier.code 0} true;
    $i964 := $load.i8($M.0, $p963);
    goto corral_source_split_13000;

  corral_source_split_13000:
    assume {:verifier.code 0} true;
    $i965 := $trunc.i8.i1($i964);
    goto corral_source_split_13001;

  corral_source_split_13001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i965} true;
    goto $bb397, $bb398;

  $bb398:
    assume !($i965 == 1);
    assume {:verifier.code 0} true;
    $i966 := $i958;
    goto $bb399;

  $bb399:
    assume {:verifier.code 0} true;
    goto corral_source_split_13014;

  corral_source_split_13014:
    assume {:verifier.code 0} true;
    $p976 := $add.ref($add.ref($p959, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_13015;

  corral_source_split_13015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2211} up_read($p976);
    goto corral_source_split_13016;

  corral_source_split_13016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2212} vslice_dummy_var_213 := comedi_dev_put($p959);
    goto SeqInstr_751, SeqInstr_752;

  SeqInstr_752:
    assume assertsPassed;
    goto SeqInstr_753;

  SeqInstr_753:
    goto corral_source_split_13017;

  corral_source_split_13017:
    assume {:verifier.code 0} true;
    $i978 := $i966;
    goto $bb400;

  $bb400:
    assume {:verifier.code 0} true;
    goto corral_source_split_13019;

  corral_source_split_13019:
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2213} $p979 := comedi_dev_get_from_minor(47);
    goto corral_source_split_13021;

  corral_source_split_13021:
    assume {:verifier.code 0} true;
    $i980 := $p2i.ref.i64($p979);
    goto corral_source_split_13022;

  corral_source_split_13022:
    assume {:verifier.code 0} true;
    $i981 := $eq.i64($i980, 0);
    goto corral_source_split_13023;

  corral_source_split_13023:
    assume {:verifier.code 0} true;
    assume {:branchcond $i981} true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i981 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    $p982 := $add.ref($add.ref($p979, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_13027;

  corral_source_split_13027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2214} down_read($p982);
    goto corral_source_split_13028;

  corral_source_split_13028:
    assume {:verifier.code 0} true;
    $p983 := $add.ref($add.ref($p979, $mul.ref(0, 560)), $mul.ref(72, 1));
    goto corral_source_split_13029;

  corral_source_split_13029:
    assume {:verifier.code 0} true;
    $i984 := $load.i8($M.0, $p983);
    goto corral_source_split_13030;

  corral_source_split_13030:
    assume {:verifier.code 0} true;
    $i985 := $trunc.i8.i1($i984);
    goto corral_source_split_13031;

  corral_source_split_13031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i985} true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i985 == 1);
    assume {:verifier.code 0} true;
    $i986 := $i978;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto corral_source_split_13044;

  corral_source_split_13044:
    assume {:verifier.code 0} true;
    $p996 := $add.ref($add.ref($p979, $mul.ref(0, 560)), $mul.ref(312, 1));
    goto corral_source_split_13045;

  corral_source_split_13045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2216} up_read($p996);
    goto corral_source_split_13046;

  corral_source_split_13046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2217} vslice_dummy_var_215 := comedi_dev_put($p979);
    goto SeqInstr_754, SeqInstr_755;

  SeqInstr_755:
    assume assertsPassed;
    goto SeqInstr_756;

  SeqInstr_756:
    goto corral_source_split_13047;

  corral_source_split_13047:
    assume {:verifier.code 0} true;
    $i24 := $i986;
    goto $bb408;

  $bb408:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i24, 0);
    goto corral_source_split_11587;

  corral_source_split_11587:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1978} mutex_lock_nested(comedi_drivers_list_lock, 0);
    goto corral_source_split_11592;

  corral_source_split_11592:
    assume {:verifier.code 0} true;
    $p26 := $M.28;
    goto corral_source_split_11593;

  corral_source_split_11593:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_11594;

  corral_source_split_11594:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_11595;

  corral_source_split_11595:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1983} mutex_unlock(comedi_drivers_list_lock);
    goto corral_source_split_11643;

  corral_source_split_11643:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb15:
    assume $i28 == 1;
    goto corral_source_split_11597;

  corral_source_split_11597:
    assume {:verifier.code 0} true;
    $p29 := $p26;
    goto $bb18;

  $bb18:
    call $p30, $p31, $p33, $i34, $i35, $p37, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $i46, $i47, $i48, $i36, $p49, $i50, $i51, $p52, $p53, $p55, $p56, $i57, $i58, $p29, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121 := comedi_read___0_loop_$bb18($p0, $p30, $p31, $p33, $i34, $i35, $p37, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $i46, $i47, $i48, $i36, $p49, $i50, $i51, $p52, $p53, $p55, $p56, $i57, $i58, $p29, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121);
    goto $bb18_last;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11601;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_11602;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} vslice_dummy_var_119 := seq_printf.ref.ref.ref($p0, .str.104, $p31);
    goto corral_source_split_11603;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_11604;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_11605;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    $i35 := $ult.i32(0, $i34);
    goto corral_source_split_11606;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_11627;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_11628;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 0);
    goto corral_source_split_11629;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_11636;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_11637;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    $i57 := $p2i.ref.i64($p56);
    goto corral_source_split_11638;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_11639;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i58 == 1);
    goto corral_source_split_11641;

  corral_source_split_11641:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb31:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $p29 := $p56;
    goto $bb31_dummy;

  $bb28:
    assume $i51 == 1;
    goto corral_source_split_11631;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11632;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_11633;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} vslice_dummy_var_121 := seq_printf.ref.ref.ref($p0, .str.105, $p53);
    goto corral_source_split_11634;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb20:
    assume $i35 == 1;
    goto corral_source_split_11608;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb23;

  $bb23:
    call $p37, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $i46, $i47, $i48, $i36, vslice_dummy_var_120 := comedi_read___0_loop_$bb23($p0, $p33, $p37, $p38, $p39, $i40, $i41, $i42, $p43, $p44, $i46, $i47, $i48, $i36, $p29, vslice_dummy_var_120);
    goto $bb23_last;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_11612;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_11613;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p29, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_11614;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_11615;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    $i41 := $mul.i32($i40, $i36);
    goto corral_source_split_11616;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_11617;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($p38, $mul.ref($i42, 8));
    goto corral_source_split_11618;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_11619;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} vslice_dummy_var_120 := seq_printf.ref.ref.ref($p0, .str.105, $p44);
    goto corral_source_split_11620;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i36, 1);
    call {:si_unique_call 1981} {:cexpr "i"} boogie_si_record_i32($i46);
    goto corral_source_split_11621;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p33);
    goto corral_source_split_11622;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    $i48 := $ult.i32($i46, $i47);
    goto corral_source_split_11623;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    goto corral_source_split_11625;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb25:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    $i36 := $i46;
    goto $bb25_dummy;

  $bb12:
    assume $i23 == 1;
    goto corral_source_split_11589;

  corral_source_split_11589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1977} vslice_dummy_var_118 := seq_puts($p0, .str.103);
    goto corral_source_split_11590;

  corral_source_split_11590:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_754:
    assume !assertsPassed;
    return;

  $bb405:
    assume $i985 == 1;
    goto corral_source_split_13033;

  corral_source_split_13033:
    assume {:verifier.code 0} true;
    $p987 := $add.ref($add.ref($p979, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_13034;

  corral_source_split_13034:
    assume {:verifier.code 0} true;
    $p988 := $load.ref($M.0, $p987);
    goto corral_source_split_13035;

  corral_source_split_13035:
    assume {:verifier.code 0} true;
    $p989 := $add.ref($add.ref($p988, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_13036;

  corral_source_split_13036:
    assume {:verifier.code 0} true;
    $p990 := $load.ref($M.0, $p989);
    goto corral_source_split_13037;

  corral_source_split_13037:
    assume {:verifier.code 0} true;
    $p991 := $add.ref($add.ref($p979, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_13038;

  corral_source_split_13038:
    assume {:verifier.code 0} true;
    $p992 := $load.ref($M.0, $p991);
    goto corral_source_split_13039;

  corral_source_split_13039:
    assume {:verifier.code 0} true;
    $p993 := $add.ref($add.ref($p979, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_13040;

  corral_source_split_13040:
    assume {:verifier.code 0} true;
    $i994 := $load.i32($M.0, $p993);
    goto corral_source_split_13041;

  corral_source_split_13041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2215} vslice_dummy_var_214 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 47, $p990, $p992, $i994);
    goto corral_source_split_13042;

  corral_source_split_13042:
    assume {:verifier.code 0} true;
    $i986 := 1;
    goto $bb407;

  $bb402:
    assume $i981 == 1;
    goto corral_source_split_13025;

  corral_source_split_13025:
    assume {:verifier.code 0} true;
    $i24 := $i978;
    goto $bb408;

  SeqInstr_751:
    assume !assertsPassed;
    return;

  $bb397:
    assume $i965 == 1;
    goto corral_source_split_13003;

  corral_source_split_13003:
    assume {:verifier.code 0} true;
    $p967 := $add.ref($add.ref($p959, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_13004;

  corral_source_split_13004:
    assume {:verifier.code 0} true;
    $p968 := $load.ref($M.0, $p967);
    goto corral_source_split_13005;

  corral_source_split_13005:
    assume {:verifier.code 0} true;
    $p969 := $add.ref($add.ref($p968, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_13006;

  corral_source_split_13006:
    assume {:verifier.code 0} true;
    $p970 := $load.ref($M.0, $p969);
    goto corral_source_split_13007;

  corral_source_split_13007:
    assume {:verifier.code 0} true;
    $p971 := $add.ref($add.ref($p959, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_13008;

  corral_source_split_13008:
    assume {:verifier.code 0} true;
    $p972 := $load.ref($M.0, $p971);
    goto corral_source_split_13009;

  corral_source_split_13009:
    assume {:verifier.code 0} true;
    $p973 := $add.ref($add.ref($p959, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_13010;

  corral_source_split_13010:
    assume {:verifier.code 0} true;
    $i974 := $load.i32($M.0, $p973);
    goto corral_source_split_13011;

  corral_source_split_13011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2210} vslice_dummy_var_212 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 46, $p970, $p972, $i974);
    goto corral_source_split_13012;

  corral_source_split_13012:
    assume {:verifier.code 0} true;
    $i966 := 1;
    goto $bb399;

  $bb394:
    assume $i961 == 1;
    goto corral_source_split_12995;

  corral_source_split_12995:
    assume {:verifier.code 0} true;
    $i978 := $i958;
    goto $bb400;

  SeqInstr_748:
    assume !assertsPassed;
    return;

  $bb389:
    assume $i945 == 1;
    goto corral_source_split_12973;

  corral_source_split_12973:
    assume {:verifier.code 0} true;
    $p947 := $add.ref($add.ref($p939, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12974;

  corral_source_split_12974:
    assume {:verifier.code 0} true;
    $p948 := $load.ref($M.0, $p947);
    goto corral_source_split_12975;

  corral_source_split_12975:
    assume {:verifier.code 0} true;
    $p949 := $add.ref($add.ref($p948, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12976;

  corral_source_split_12976:
    assume {:verifier.code 0} true;
    $p950 := $load.ref($M.0, $p949);
    goto corral_source_split_12977;

  corral_source_split_12977:
    assume {:verifier.code 0} true;
    $p951 := $add.ref($add.ref($p939, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12978;

  corral_source_split_12978:
    assume {:verifier.code 0} true;
    $p952 := $load.ref($M.0, $p951);
    goto corral_source_split_12979;

  corral_source_split_12979:
    assume {:verifier.code 0} true;
    $p953 := $add.ref($add.ref($p939, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12980;

  corral_source_split_12980:
    assume {:verifier.code 0} true;
    $i954 := $load.i32($M.0, $p953);
    goto corral_source_split_12981;

  corral_source_split_12981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2205} vslice_dummy_var_210 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 45, $p950, $p952, $i954);
    goto corral_source_split_12982;

  corral_source_split_12982:
    assume {:verifier.code 0} true;
    $i946 := 1;
    goto $bb391;

  $bb386:
    assume $i941 == 1;
    goto corral_source_split_12965;

  corral_source_split_12965:
    assume {:verifier.code 0} true;
    $i958 := $i938;
    goto $bb392;

  SeqInstr_745:
    assume !assertsPassed;
    return;

  $bb381:
    assume $i925 == 1;
    goto corral_source_split_12943;

  corral_source_split_12943:
    assume {:verifier.code 0} true;
    $p927 := $add.ref($add.ref($p919, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12944;

  corral_source_split_12944:
    assume {:verifier.code 0} true;
    $p928 := $load.ref($M.0, $p927);
    goto corral_source_split_12945;

  corral_source_split_12945:
    assume {:verifier.code 0} true;
    $p929 := $add.ref($add.ref($p928, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12946;

  corral_source_split_12946:
    assume {:verifier.code 0} true;
    $p930 := $load.ref($M.0, $p929);
    goto corral_source_split_12947;

  corral_source_split_12947:
    assume {:verifier.code 0} true;
    $p931 := $add.ref($add.ref($p919, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12948;

  corral_source_split_12948:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.0, $p931);
    goto corral_source_split_12949;

  corral_source_split_12949:
    assume {:verifier.code 0} true;
    $p933 := $add.ref($add.ref($p919, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12950;

  corral_source_split_12950:
    assume {:verifier.code 0} true;
    $i934 := $load.i32($M.0, $p933);
    goto corral_source_split_12951;

  corral_source_split_12951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2200} vslice_dummy_var_208 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 44, $p930, $p932, $i934);
    goto corral_source_split_12952;

  corral_source_split_12952:
    assume {:verifier.code 0} true;
    $i926 := 1;
    goto $bb383;

  $bb378:
    assume $i921 == 1;
    goto corral_source_split_12935;

  corral_source_split_12935:
    assume {:verifier.code 0} true;
    $i938 := $i918;
    goto $bb384;

  SeqInstr_742:
    assume !assertsPassed;
    return;

  $bb373:
    assume $i905 == 1;
    goto corral_source_split_12913;

  corral_source_split_12913:
    assume {:verifier.code 0} true;
    $p907 := $add.ref($add.ref($p899, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12914;

  corral_source_split_12914:
    assume {:verifier.code 0} true;
    $p908 := $load.ref($M.0, $p907);
    goto corral_source_split_12915;

  corral_source_split_12915:
    assume {:verifier.code 0} true;
    $p909 := $add.ref($add.ref($p908, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12916;

  corral_source_split_12916:
    assume {:verifier.code 0} true;
    $p910 := $load.ref($M.0, $p909);
    goto corral_source_split_12917;

  corral_source_split_12917:
    assume {:verifier.code 0} true;
    $p911 := $add.ref($add.ref($p899, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12918;

  corral_source_split_12918:
    assume {:verifier.code 0} true;
    $p912 := $load.ref($M.0, $p911);
    goto corral_source_split_12919;

  corral_source_split_12919:
    assume {:verifier.code 0} true;
    $p913 := $add.ref($add.ref($p899, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12920;

  corral_source_split_12920:
    assume {:verifier.code 0} true;
    $i914 := $load.i32($M.0, $p913);
    goto corral_source_split_12921;

  corral_source_split_12921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2195} vslice_dummy_var_206 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 43, $p910, $p912, $i914);
    goto corral_source_split_12922;

  corral_source_split_12922:
    assume {:verifier.code 0} true;
    $i906 := 1;
    goto $bb375;

  $bb370:
    assume $i901 == 1;
    goto corral_source_split_12905;

  corral_source_split_12905:
    assume {:verifier.code 0} true;
    $i918 := $i898;
    goto $bb376;

  SeqInstr_739:
    assume !assertsPassed;
    return;

  $bb365:
    assume $i885 == 1;
    goto corral_source_split_12883;

  corral_source_split_12883:
    assume {:verifier.code 0} true;
    $p887 := $add.ref($add.ref($p879, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12884;

  corral_source_split_12884:
    assume {:verifier.code 0} true;
    $p888 := $load.ref($M.0, $p887);
    goto corral_source_split_12885;

  corral_source_split_12885:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($p888, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12886;

  corral_source_split_12886:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.0, $p889);
    goto corral_source_split_12887;

  corral_source_split_12887:
    assume {:verifier.code 0} true;
    $p891 := $add.ref($add.ref($p879, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12888;

  corral_source_split_12888:
    assume {:verifier.code 0} true;
    $p892 := $load.ref($M.0, $p891);
    goto corral_source_split_12889;

  corral_source_split_12889:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($p879, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12890;

  corral_source_split_12890:
    assume {:verifier.code 0} true;
    $i894 := $load.i32($M.0, $p893);
    goto corral_source_split_12891;

  corral_source_split_12891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2190} vslice_dummy_var_204 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 42, $p890, $p892, $i894);
    goto corral_source_split_12892;

  corral_source_split_12892:
    assume {:verifier.code 0} true;
    $i886 := 1;
    goto $bb367;

  $bb362:
    assume $i881 == 1;
    goto corral_source_split_12875;

  corral_source_split_12875:
    assume {:verifier.code 0} true;
    $i898 := $i878;
    goto $bb368;

  SeqInstr_736:
    assume !assertsPassed;
    return;

  $bb357:
    assume $i865 == 1;
    goto corral_source_split_12853;

  corral_source_split_12853:
    assume {:verifier.code 0} true;
    $p867 := $add.ref($add.ref($p859, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12854;

  corral_source_split_12854:
    assume {:verifier.code 0} true;
    $p868 := $load.ref($M.0, $p867);
    goto corral_source_split_12855;

  corral_source_split_12855:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($p868, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12856;

  corral_source_split_12856:
    assume {:verifier.code 0} true;
    $p870 := $load.ref($M.0, $p869);
    goto corral_source_split_12857;

  corral_source_split_12857:
    assume {:verifier.code 0} true;
    $p871 := $add.ref($add.ref($p859, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12858;

  corral_source_split_12858:
    assume {:verifier.code 0} true;
    $p872 := $load.ref($M.0, $p871);
    goto corral_source_split_12859;

  corral_source_split_12859:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($p859, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12860;

  corral_source_split_12860:
    assume {:verifier.code 0} true;
    $i874 := $load.i32($M.0, $p873);
    goto corral_source_split_12861;

  corral_source_split_12861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2185} vslice_dummy_var_202 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 41, $p870, $p872, $i874);
    goto corral_source_split_12862;

  corral_source_split_12862:
    assume {:verifier.code 0} true;
    $i866 := 1;
    goto $bb359;

  $bb354:
    assume $i861 == 1;
    goto corral_source_split_12845;

  corral_source_split_12845:
    assume {:verifier.code 0} true;
    $i878 := $i858;
    goto $bb360;

  SeqInstr_733:
    assume !assertsPassed;
    return;

  $bb349:
    assume $i845 == 1;
    goto corral_source_split_12823;

  corral_source_split_12823:
    assume {:verifier.code 0} true;
    $p847 := $add.ref($add.ref($p839, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12824;

  corral_source_split_12824:
    assume {:verifier.code 0} true;
    $p848 := $load.ref($M.0, $p847);
    goto corral_source_split_12825;

  corral_source_split_12825:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($p848, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12826;

  corral_source_split_12826:
    assume {:verifier.code 0} true;
    $p850 := $load.ref($M.0, $p849);
    goto corral_source_split_12827;

  corral_source_split_12827:
    assume {:verifier.code 0} true;
    $p851 := $add.ref($add.ref($p839, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12828;

  corral_source_split_12828:
    assume {:verifier.code 0} true;
    $p852 := $load.ref($M.0, $p851);
    goto corral_source_split_12829;

  corral_source_split_12829:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($p839, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12830;

  corral_source_split_12830:
    assume {:verifier.code 0} true;
    $i854 := $load.i32($M.0, $p853);
    goto corral_source_split_12831;

  corral_source_split_12831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2180} vslice_dummy_var_200 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 40, $p850, $p852, $i854);
    goto corral_source_split_12832;

  corral_source_split_12832:
    assume {:verifier.code 0} true;
    $i846 := 1;
    goto $bb351;

  $bb346:
    assume $i841 == 1;
    goto corral_source_split_12815;

  corral_source_split_12815:
    assume {:verifier.code 0} true;
    $i858 := $i838;
    goto $bb352;

  SeqInstr_730:
    assume !assertsPassed;
    return;

  $bb341:
    assume $i825 == 1;
    goto corral_source_split_12793;

  corral_source_split_12793:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($p819, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12794;

  corral_source_split_12794:
    assume {:verifier.code 0} true;
    $p828 := $load.ref($M.0, $p827);
    goto corral_source_split_12795;

  corral_source_split_12795:
    assume {:verifier.code 0} true;
    $p829 := $add.ref($add.ref($p828, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12796;

  corral_source_split_12796:
    assume {:verifier.code 0} true;
    $p830 := $load.ref($M.0, $p829);
    goto corral_source_split_12797;

  corral_source_split_12797:
    assume {:verifier.code 0} true;
    $p831 := $add.ref($add.ref($p819, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12798;

  corral_source_split_12798:
    assume {:verifier.code 0} true;
    $p832 := $load.ref($M.0, $p831);
    goto corral_source_split_12799;

  corral_source_split_12799:
    assume {:verifier.code 0} true;
    $p833 := $add.ref($add.ref($p819, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12800;

  corral_source_split_12800:
    assume {:verifier.code 0} true;
    $i834 := $load.i32($M.0, $p833);
    goto corral_source_split_12801;

  corral_source_split_12801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2175} vslice_dummy_var_198 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 39, $p830, $p832, $i834);
    goto corral_source_split_12802;

  corral_source_split_12802:
    assume {:verifier.code 0} true;
    $i826 := 1;
    goto $bb343;

  $bb338:
    assume $i821 == 1;
    goto corral_source_split_12785;

  corral_source_split_12785:
    assume {:verifier.code 0} true;
    $i838 := $i818;
    goto $bb344;

  SeqInstr_727:
    assume !assertsPassed;
    return;

  $bb333:
    assume $i805 == 1;
    goto corral_source_split_12763;

  corral_source_split_12763:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p799, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12764;

  corral_source_split_12764:
    assume {:verifier.code 0} true;
    $p808 := $load.ref($M.0, $p807);
    goto corral_source_split_12765;

  corral_source_split_12765:
    assume {:verifier.code 0} true;
    $p809 := $add.ref($add.ref($p808, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12766;

  corral_source_split_12766:
    assume {:verifier.code 0} true;
    $p810 := $load.ref($M.0, $p809);
    goto corral_source_split_12767;

  corral_source_split_12767:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($p799, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12768;

  corral_source_split_12768:
    assume {:verifier.code 0} true;
    $p812 := $load.ref($M.0, $p811);
    goto corral_source_split_12769;

  corral_source_split_12769:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p799, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12770;

  corral_source_split_12770:
    assume {:verifier.code 0} true;
    $i814 := $load.i32($M.0, $p813);
    goto corral_source_split_12771;

  corral_source_split_12771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2170} vslice_dummy_var_196 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 38, $p810, $p812, $i814);
    goto corral_source_split_12772;

  corral_source_split_12772:
    assume {:verifier.code 0} true;
    $i806 := 1;
    goto $bb335;

  $bb330:
    assume $i801 == 1;
    goto corral_source_split_12755;

  corral_source_split_12755:
    assume {:verifier.code 0} true;
    $i818 := $i798;
    goto $bb336;

  SeqInstr_724:
    assume !assertsPassed;
    return;

  $bb325:
    assume $i785 == 1;
    goto corral_source_split_12733;

  corral_source_split_12733:
    assume {:verifier.code 0} true;
    $p787 := $add.ref($add.ref($p779, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12734;

  corral_source_split_12734:
    assume {:verifier.code 0} true;
    $p788 := $load.ref($M.0, $p787);
    goto corral_source_split_12735;

  corral_source_split_12735:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p788, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12736;

  corral_source_split_12736:
    assume {:verifier.code 0} true;
    $p790 := $load.ref($M.0, $p789);
    goto corral_source_split_12737;

  corral_source_split_12737:
    assume {:verifier.code 0} true;
    $p791 := $add.ref($add.ref($p779, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12738;

  corral_source_split_12738:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.0, $p791);
    goto corral_source_split_12739;

  corral_source_split_12739:
    assume {:verifier.code 0} true;
    $p793 := $add.ref($add.ref($p779, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12740;

  corral_source_split_12740:
    assume {:verifier.code 0} true;
    $i794 := $load.i32($M.0, $p793);
    goto corral_source_split_12741;

  corral_source_split_12741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2165} vslice_dummy_var_194 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 37, $p790, $p792, $i794);
    goto corral_source_split_12742;

  corral_source_split_12742:
    assume {:verifier.code 0} true;
    $i786 := 1;
    goto $bb327;

  $bb322:
    assume $i781 == 1;
    goto corral_source_split_12725;

  corral_source_split_12725:
    assume {:verifier.code 0} true;
    $i798 := $i778;
    goto $bb328;

  SeqInstr_721:
    assume !assertsPassed;
    return;

  $bb317:
    assume $i765 == 1;
    goto corral_source_split_12703;

  corral_source_split_12703:
    assume {:verifier.code 0} true;
    $p767 := $add.ref($add.ref($p759, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12704;

  corral_source_split_12704:
    assume {:verifier.code 0} true;
    $p768 := $load.ref($M.0, $p767);
    goto corral_source_split_12705;

  corral_source_split_12705:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p768, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12706;

  corral_source_split_12706:
    assume {:verifier.code 0} true;
    $p770 := $load.ref($M.0, $p769);
    goto corral_source_split_12707;

  corral_source_split_12707:
    assume {:verifier.code 0} true;
    $p771 := $add.ref($add.ref($p759, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12708;

  corral_source_split_12708:
    assume {:verifier.code 0} true;
    $p772 := $load.ref($M.0, $p771);
    goto corral_source_split_12709;

  corral_source_split_12709:
    assume {:verifier.code 0} true;
    $p773 := $add.ref($add.ref($p759, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12710;

  corral_source_split_12710:
    assume {:verifier.code 0} true;
    $i774 := $load.i32($M.0, $p773);
    goto corral_source_split_12711;

  corral_source_split_12711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2160} vslice_dummy_var_192 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 36, $p770, $p772, $i774);
    goto corral_source_split_12712;

  corral_source_split_12712:
    assume {:verifier.code 0} true;
    $i766 := 1;
    goto $bb319;

  $bb314:
    assume $i761 == 1;
    goto corral_source_split_12695;

  corral_source_split_12695:
    assume {:verifier.code 0} true;
    $i778 := $i758;
    goto $bb320;

  SeqInstr_718:
    assume !assertsPassed;
    return;

  $bb309:
    assume $i745 == 1;
    goto corral_source_split_12673;

  corral_source_split_12673:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p739, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12674;

  corral_source_split_12674:
    assume {:verifier.code 0} true;
    $p748 := $load.ref($M.0, $p747);
    goto corral_source_split_12675;

  corral_source_split_12675:
    assume {:verifier.code 0} true;
    $p749 := $add.ref($add.ref($p748, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12676;

  corral_source_split_12676:
    assume {:verifier.code 0} true;
    $p750 := $load.ref($M.0, $p749);
    goto corral_source_split_12677;

  corral_source_split_12677:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p739, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12678;

  corral_source_split_12678:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $p751);
    goto corral_source_split_12679;

  corral_source_split_12679:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($p739, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12680;

  corral_source_split_12680:
    assume {:verifier.code 0} true;
    $i754 := $load.i32($M.0, $p753);
    goto corral_source_split_12681;

  corral_source_split_12681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2155} vslice_dummy_var_190 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 35, $p750, $p752, $i754);
    goto corral_source_split_12682;

  corral_source_split_12682:
    assume {:verifier.code 0} true;
    $i746 := 1;
    goto $bb311;

  $bb306:
    assume $i741 == 1;
    goto corral_source_split_12665;

  corral_source_split_12665:
    assume {:verifier.code 0} true;
    $i758 := $i738;
    goto $bb312;

  SeqInstr_715:
    assume !assertsPassed;
    return;

  $bb301:
    assume $i725 == 1;
    goto corral_source_split_12643;

  corral_source_split_12643:
    assume {:verifier.code 0} true;
    $p727 := $add.ref($add.ref($p719, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12644;

  corral_source_split_12644:
    assume {:verifier.code 0} true;
    $p728 := $load.ref($M.0, $p727);
    goto corral_source_split_12645;

  corral_source_split_12645:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p728, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12646;

  corral_source_split_12646:
    assume {:verifier.code 0} true;
    $p730 := $load.ref($M.0, $p729);
    goto corral_source_split_12647;

  corral_source_split_12647:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($p719, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12648;

  corral_source_split_12648:
    assume {:verifier.code 0} true;
    $p732 := $load.ref($M.0, $p731);
    goto corral_source_split_12649;

  corral_source_split_12649:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p719, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12650;

  corral_source_split_12650:
    assume {:verifier.code 0} true;
    $i734 := $load.i32($M.0, $p733);
    goto corral_source_split_12651;

  corral_source_split_12651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2150} vslice_dummy_var_188 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 34, $p730, $p732, $i734);
    goto corral_source_split_12652;

  corral_source_split_12652:
    assume {:verifier.code 0} true;
    $i726 := 1;
    goto $bb303;

  $bb298:
    assume $i721 == 1;
    goto corral_source_split_12635;

  corral_source_split_12635:
    assume {:verifier.code 0} true;
    $i738 := $i718;
    goto $bb304;

  SeqInstr_712:
    assume !assertsPassed;
    return;

  $bb293:
    assume $i705 == 1;
    goto corral_source_split_12613;

  corral_source_split_12613:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p699, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12614;

  corral_source_split_12614:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.0, $p707);
    goto corral_source_split_12615;

  corral_source_split_12615:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p708, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12616;

  corral_source_split_12616:
    assume {:verifier.code 0} true;
    $p710 := $load.ref($M.0, $p709);
    goto corral_source_split_12617;

  corral_source_split_12617:
    assume {:verifier.code 0} true;
    $p711 := $add.ref($add.ref($p699, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12618;

  corral_source_split_12618:
    assume {:verifier.code 0} true;
    $p712 := $load.ref($M.0, $p711);
    goto corral_source_split_12619;

  corral_source_split_12619:
    assume {:verifier.code 0} true;
    $p713 := $add.ref($add.ref($p699, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12620;

  corral_source_split_12620:
    assume {:verifier.code 0} true;
    $i714 := $load.i32($M.0, $p713);
    goto corral_source_split_12621;

  corral_source_split_12621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2145} vslice_dummy_var_186 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 33, $p710, $p712, $i714);
    goto corral_source_split_12622;

  corral_source_split_12622:
    assume {:verifier.code 0} true;
    $i706 := 1;
    goto $bb295;

  $bb290:
    assume $i701 == 1;
    goto corral_source_split_12605;

  corral_source_split_12605:
    assume {:verifier.code 0} true;
    $i718 := $i698;
    goto $bb296;

  SeqInstr_709:
    assume !assertsPassed;
    return;

  $bb285:
    assume $i685 == 1;
    goto corral_source_split_12583;

  corral_source_split_12583:
    assume {:verifier.code 0} true;
    $p687 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12584;

  corral_source_split_12584:
    assume {:verifier.code 0} true;
    $p688 := $load.ref($M.0, $p687);
    goto corral_source_split_12585;

  corral_source_split_12585:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p688, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12586;

  corral_source_split_12586:
    assume {:verifier.code 0} true;
    $p690 := $load.ref($M.0, $p689);
    goto corral_source_split_12587;

  corral_source_split_12587:
    assume {:verifier.code 0} true;
    $p691 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12588;

  corral_source_split_12588:
    assume {:verifier.code 0} true;
    $p692 := $load.ref($M.0, $p691);
    goto corral_source_split_12589;

  corral_source_split_12589:
    assume {:verifier.code 0} true;
    $p693 := $add.ref($add.ref($p679, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12590;

  corral_source_split_12590:
    assume {:verifier.code 0} true;
    $i694 := $load.i32($M.0, $p693);
    goto corral_source_split_12591;

  corral_source_split_12591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2140} vslice_dummy_var_184 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 32, $p690, $p692, $i694);
    goto corral_source_split_12592;

  corral_source_split_12592:
    assume {:verifier.code 0} true;
    $i686 := 1;
    goto $bb287;

  $bb282:
    assume $i681 == 1;
    goto corral_source_split_12575;

  corral_source_split_12575:
    assume {:verifier.code 0} true;
    $i698 := $i678;
    goto $bb288;

  SeqInstr_706:
    assume !assertsPassed;
    return;

  $bb277:
    assume $i665 == 1;
    goto corral_source_split_12553;

  corral_source_split_12553:
    assume {:verifier.code 0} true;
    $p667 := $add.ref($add.ref($p659, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12554;

  corral_source_split_12554:
    assume {:verifier.code 0} true;
    $p668 := $load.ref($M.0, $p667);
    goto corral_source_split_12555;

  corral_source_split_12555:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p668, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12556;

  corral_source_split_12556:
    assume {:verifier.code 0} true;
    $p670 := $load.ref($M.0, $p669);
    goto corral_source_split_12557;

  corral_source_split_12557:
    assume {:verifier.code 0} true;
    $p671 := $add.ref($add.ref($p659, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12558;

  corral_source_split_12558:
    assume {:verifier.code 0} true;
    $p672 := $load.ref($M.0, $p671);
    goto corral_source_split_12559;

  corral_source_split_12559:
    assume {:verifier.code 0} true;
    $p673 := $add.ref($add.ref($p659, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12560;

  corral_source_split_12560:
    assume {:verifier.code 0} true;
    $i674 := $load.i32($M.0, $p673);
    goto corral_source_split_12561;

  corral_source_split_12561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2135} vslice_dummy_var_182 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 31, $p670, $p672, $i674);
    goto corral_source_split_12562;

  corral_source_split_12562:
    assume {:verifier.code 0} true;
    $i666 := 1;
    goto $bb279;

  $bb274:
    assume $i661 == 1;
    goto corral_source_split_12545;

  corral_source_split_12545:
    assume {:verifier.code 0} true;
    $i678 := $i658;
    goto $bb280;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb269:
    assume $i645 == 1;
    goto corral_source_split_12523;

  corral_source_split_12523:
    assume {:verifier.code 0} true;
    $p647 := $add.ref($add.ref($p639, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12524;

  corral_source_split_12524:
    assume {:verifier.code 0} true;
    $p648 := $load.ref($M.0, $p647);
    goto corral_source_split_12525;

  corral_source_split_12525:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p648, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12526;

  corral_source_split_12526:
    assume {:verifier.code 0} true;
    $p650 := $load.ref($M.0, $p649);
    goto corral_source_split_12527;

  corral_source_split_12527:
    assume {:verifier.code 0} true;
    $p651 := $add.ref($add.ref($p639, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12528;

  corral_source_split_12528:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.0, $p651);
    goto corral_source_split_12529;

  corral_source_split_12529:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p639, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12530;

  corral_source_split_12530:
    assume {:verifier.code 0} true;
    $i654 := $load.i32($M.0, $p653);
    goto corral_source_split_12531;

  corral_source_split_12531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2130} vslice_dummy_var_180 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 30, $p650, $p652, $i654);
    goto corral_source_split_12532;

  corral_source_split_12532:
    assume {:verifier.code 0} true;
    $i646 := 1;
    goto $bb271;

  $bb266:
    assume $i641 == 1;
    goto corral_source_split_12515;

  corral_source_split_12515:
    assume {:verifier.code 0} true;
    $i658 := $i638;
    goto $bb272;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb261:
    assume $i625 == 1;
    goto corral_source_split_12493;

  corral_source_split_12493:
    assume {:verifier.code 0} true;
    $p627 := $add.ref($add.ref($p619, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12494;

  corral_source_split_12494:
    assume {:verifier.code 0} true;
    $p628 := $load.ref($M.0, $p627);
    goto corral_source_split_12495;

  corral_source_split_12495:
    assume {:verifier.code 0} true;
    $p629 := $add.ref($add.ref($p628, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12496;

  corral_source_split_12496:
    assume {:verifier.code 0} true;
    $p630 := $load.ref($M.0, $p629);
    goto corral_source_split_12497;

  corral_source_split_12497:
    assume {:verifier.code 0} true;
    $p631 := $add.ref($add.ref($p619, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12498;

  corral_source_split_12498:
    assume {:verifier.code 0} true;
    $p632 := $load.ref($M.0, $p631);
    goto corral_source_split_12499;

  corral_source_split_12499:
    assume {:verifier.code 0} true;
    $p633 := $add.ref($add.ref($p619, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12500;

  corral_source_split_12500:
    assume {:verifier.code 0} true;
    $i634 := $load.i32($M.0, $p633);
    goto corral_source_split_12501;

  corral_source_split_12501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2125} vslice_dummy_var_178 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 29, $p630, $p632, $i634);
    goto corral_source_split_12502;

  corral_source_split_12502:
    assume {:verifier.code 0} true;
    $i626 := 1;
    goto $bb263;

  $bb258:
    assume $i621 == 1;
    goto corral_source_split_12485;

  corral_source_split_12485:
    assume {:verifier.code 0} true;
    $i638 := $i618;
    goto $bb264;

  SeqInstr_697:
    assume !assertsPassed;
    return;

  $bb253:
    assume $i605 == 1;
    goto corral_source_split_12463;

  corral_source_split_12463:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p599, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12464;

  corral_source_split_12464:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_12465;

  corral_source_split_12465:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p608, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12466;

  corral_source_split_12466:
    assume {:verifier.code 0} true;
    $p610 := $load.ref($M.0, $p609);
    goto corral_source_split_12467;

  corral_source_split_12467:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p599, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12468;

  corral_source_split_12468:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_12469;

  corral_source_split_12469:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p599, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12470;

  corral_source_split_12470:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.0, $p613);
    goto corral_source_split_12471;

  corral_source_split_12471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2120} vslice_dummy_var_176 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 28, $p610, $p612, $i614);
    goto corral_source_split_12472;

  corral_source_split_12472:
    assume {:verifier.code 0} true;
    $i606 := 1;
    goto $bb255;

  $bb250:
    assume $i601 == 1;
    goto corral_source_split_12455;

  corral_source_split_12455:
    assume {:verifier.code 0} true;
    $i618 := $i598;
    goto $bb256;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb245:
    assume $i585 == 1;
    goto corral_source_split_12433;

  corral_source_split_12433:
    assume {:verifier.code 0} true;
    $p587 := $add.ref($add.ref($p579, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12434;

  corral_source_split_12434:
    assume {:verifier.code 0} true;
    $p588 := $load.ref($M.0, $p587);
    goto corral_source_split_12435;

  corral_source_split_12435:
    assume {:verifier.code 0} true;
    $p589 := $add.ref($add.ref($p588, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12436;

  corral_source_split_12436:
    assume {:verifier.code 0} true;
    $p590 := $load.ref($M.0, $p589);
    goto corral_source_split_12437;

  corral_source_split_12437:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p579, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12438;

  corral_source_split_12438:
    assume {:verifier.code 0} true;
    $p592 := $load.ref($M.0, $p591);
    goto corral_source_split_12439;

  corral_source_split_12439:
    assume {:verifier.code 0} true;
    $p593 := $add.ref($add.ref($p579, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12440;

  corral_source_split_12440:
    assume {:verifier.code 0} true;
    $i594 := $load.i32($M.0, $p593);
    goto corral_source_split_12441;

  corral_source_split_12441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2115} vslice_dummy_var_174 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 27, $p590, $p592, $i594);
    goto corral_source_split_12442;

  corral_source_split_12442:
    assume {:verifier.code 0} true;
    $i586 := 1;
    goto $bb247;

  $bb242:
    assume $i581 == 1;
    goto corral_source_split_12425;

  corral_source_split_12425:
    assume {:verifier.code 0} true;
    $i598 := $i578;
    goto $bb248;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb237:
    assume $i565 == 1;
    goto corral_source_split_12403;

  corral_source_split_12403:
    assume {:verifier.code 0} true;
    $p567 := $add.ref($add.ref($p559, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12404;

  corral_source_split_12404:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.0, $p567);
    goto corral_source_split_12405;

  corral_source_split_12405:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p568, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12406;

  corral_source_split_12406:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.0, $p569);
    goto corral_source_split_12407;

  corral_source_split_12407:
    assume {:verifier.code 0} true;
    $p571 := $add.ref($add.ref($p559, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12408;

  corral_source_split_12408:
    assume {:verifier.code 0} true;
    $p572 := $load.ref($M.0, $p571);
    goto corral_source_split_12409;

  corral_source_split_12409:
    assume {:verifier.code 0} true;
    $p573 := $add.ref($add.ref($p559, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12410;

  corral_source_split_12410:
    assume {:verifier.code 0} true;
    $i574 := $load.i32($M.0, $p573);
    goto corral_source_split_12411;

  corral_source_split_12411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2110} vslice_dummy_var_172 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 26, $p570, $p572, $i574);
    goto corral_source_split_12412;

  corral_source_split_12412:
    assume {:verifier.code 0} true;
    $i566 := 1;
    goto $bb239;

  $bb234:
    assume $i561 == 1;
    goto corral_source_split_12395;

  corral_source_split_12395:
    assume {:verifier.code 0} true;
    $i578 := $i558;
    goto $bb240;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb229:
    assume $i545 == 1;
    goto corral_source_split_12373;

  corral_source_split_12373:
    assume {:verifier.code 0} true;
    $p547 := $add.ref($add.ref($p539, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12374;

  corral_source_split_12374:
    assume {:verifier.code 0} true;
    $p548 := $load.ref($M.0, $p547);
    goto corral_source_split_12375;

  corral_source_split_12375:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p548, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12376;

  corral_source_split_12376:
    assume {:verifier.code 0} true;
    $p550 := $load.ref($M.0, $p549);
    goto corral_source_split_12377;

  corral_source_split_12377:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p539, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12378;

  corral_source_split_12378:
    assume {:verifier.code 0} true;
    $p552 := $load.ref($M.0, $p551);
    goto corral_source_split_12379;

  corral_source_split_12379:
    assume {:verifier.code 0} true;
    $p553 := $add.ref($add.ref($p539, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12380;

  corral_source_split_12380:
    assume {:verifier.code 0} true;
    $i554 := $load.i32($M.0, $p553);
    goto corral_source_split_12381;

  corral_source_split_12381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2105} vslice_dummy_var_170 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 25, $p550, $p552, $i554);
    goto corral_source_split_12382;

  corral_source_split_12382:
    assume {:verifier.code 0} true;
    $i546 := 1;
    goto $bb231;

  $bb226:
    assume $i541 == 1;
    goto corral_source_split_12365;

  corral_source_split_12365:
    assume {:verifier.code 0} true;
    $i558 := $i538;
    goto $bb232;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb221:
    assume $i525 == 1;
    goto corral_source_split_12343;

  corral_source_split_12343:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($p519, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12344;

  corral_source_split_12344:
    assume {:verifier.code 0} true;
    $p528 := $load.ref($M.0, $p527);
    goto corral_source_split_12345;

  corral_source_split_12345:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p528, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12346;

  corral_source_split_12346:
    assume {:verifier.code 0} true;
    $p530 := $load.ref($M.0, $p529);
    goto corral_source_split_12347;

  corral_source_split_12347:
    assume {:verifier.code 0} true;
    $p531 := $add.ref($add.ref($p519, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12348;

  corral_source_split_12348:
    assume {:verifier.code 0} true;
    $p532 := $load.ref($M.0, $p531);
    goto corral_source_split_12349;

  corral_source_split_12349:
    assume {:verifier.code 0} true;
    $p533 := $add.ref($add.ref($p519, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12350;

  corral_source_split_12350:
    assume {:verifier.code 0} true;
    $i534 := $load.i32($M.0, $p533);
    goto corral_source_split_12351;

  corral_source_split_12351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2100} vslice_dummy_var_168 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 24, $p530, $p532, $i534);
    goto corral_source_split_12352;

  corral_source_split_12352:
    assume {:verifier.code 0} true;
    $i526 := 1;
    goto $bb223;

  $bb218:
    assume $i521 == 1;
    goto corral_source_split_12335;

  corral_source_split_12335:
    assume {:verifier.code 0} true;
    $i538 := $i518;
    goto $bb224;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb213:
    assume $i505 == 1;
    goto corral_source_split_12313;

  corral_source_split_12313:
    assume {:verifier.code 0} true;
    $p507 := $add.ref($add.ref($p499, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12314;

  corral_source_split_12314:
    assume {:verifier.code 0} true;
    $p508 := $load.ref($M.0, $p507);
    goto corral_source_split_12315;

  corral_source_split_12315:
    assume {:verifier.code 0} true;
    $p509 := $add.ref($add.ref($p508, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12316;

  corral_source_split_12316:
    assume {:verifier.code 0} true;
    $p510 := $load.ref($M.0, $p509);
    goto corral_source_split_12317;

  corral_source_split_12317:
    assume {:verifier.code 0} true;
    $p511 := $add.ref($add.ref($p499, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12318;

  corral_source_split_12318:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.0, $p511);
    goto corral_source_split_12319;

  corral_source_split_12319:
    assume {:verifier.code 0} true;
    $p513 := $add.ref($add.ref($p499, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12320;

  corral_source_split_12320:
    assume {:verifier.code 0} true;
    $i514 := $load.i32($M.0, $p513);
    goto corral_source_split_12321;

  corral_source_split_12321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2095} vslice_dummy_var_166 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 23, $p510, $p512, $i514);
    goto corral_source_split_12322;

  corral_source_split_12322:
    assume {:verifier.code 0} true;
    $i506 := 1;
    goto $bb215;

  $bb210:
    assume $i501 == 1;
    goto corral_source_split_12305;

  corral_source_split_12305:
    assume {:verifier.code 0} true;
    $i518 := $i498;
    goto $bb216;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb205:
    assume $i485 == 1;
    goto corral_source_split_12283;

  corral_source_split_12283:
    assume {:verifier.code 0} true;
    $p487 := $add.ref($add.ref($p479, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12284;

  corral_source_split_12284:
    assume {:verifier.code 0} true;
    $p488 := $load.ref($M.0, $p487);
    goto corral_source_split_12285;

  corral_source_split_12285:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p488, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12286;

  corral_source_split_12286:
    assume {:verifier.code 0} true;
    $p490 := $load.ref($M.0, $p489);
    goto corral_source_split_12287;

  corral_source_split_12287:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p479, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12288;

  corral_source_split_12288:
    assume {:verifier.code 0} true;
    $p492 := $load.ref($M.0, $p491);
    goto corral_source_split_12289;

  corral_source_split_12289:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p479, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12290;

  corral_source_split_12290:
    assume {:verifier.code 0} true;
    $i494 := $load.i32($M.0, $p493);
    goto corral_source_split_12291;

  corral_source_split_12291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2090} vslice_dummy_var_164 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 22, $p490, $p492, $i494);
    goto corral_source_split_12292;

  corral_source_split_12292:
    assume {:verifier.code 0} true;
    $i486 := 1;
    goto $bb207;

  $bb202:
    assume $i481 == 1;
    goto corral_source_split_12275;

  corral_source_split_12275:
    assume {:verifier.code 0} true;
    $i498 := $i478;
    goto $bb208;

  SeqInstr_676:
    assume !assertsPassed;
    return;

  $bb197:
    assume $i465 == 1;
    goto corral_source_split_12253;

  corral_source_split_12253:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p459, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12254;

  corral_source_split_12254:
    assume {:verifier.code 0} true;
    $p468 := $load.ref($M.0, $p467);
    goto corral_source_split_12255;

  corral_source_split_12255:
    assume {:verifier.code 0} true;
    $p469 := $add.ref($add.ref($p468, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12256;

  corral_source_split_12256:
    assume {:verifier.code 0} true;
    $p470 := $load.ref($M.0, $p469);
    goto corral_source_split_12257;

  corral_source_split_12257:
    assume {:verifier.code 0} true;
    $p471 := $add.ref($add.ref($p459, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12258;

  corral_source_split_12258:
    assume {:verifier.code 0} true;
    $p472 := $load.ref($M.0, $p471);
    goto corral_source_split_12259;

  corral_source_split_12259:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p459, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12260;

  corral_source_split_12260:
    assume {:verifier.code 0} true;
    $i474 := $load.i32($M.0, $p473);
    goto corral_source_split_12261;

  corral_source_split_12261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2085} vslice_dummy_var_162 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 21, $p470, $p472, $i474);
    goto corral_source_split_12262;

  corral_source_split_12262:
    assume {:verifier.code 0} true;
    $i466 := 1;
    goto $bb199;

  $bb194:
    assume $i461 == 1;
    goto corral_source_split_12245;

  corral_source_split_12245:
    assume {:verifier.code 0} true;
    $i478 := $i458;
    goto $bb200;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb189:
    assume $i445 == 1;
    goto corral_source_split_12223;

  corral_source_split_12223:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p439, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12224;

  corral_source_split_12224:
    assume {:verifier.code 0} true;
    $p448 := $load.ref($M.0, $p447);
    goto corral_source_split_12225;

  corral_source_split_12225:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p448, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12226;

  corral_source_split_12226:
    assume {:verifier.code 0} true;
    $p450 := $load.ref($M.0, $p449);
    goto corral_source_split_12227;

  corral_source_split_12227:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p439, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12228;

  corral_source_split_12228:
    assume {:verifier.code 0} true;
    $p452 := $load.ref($M.0, $p451);
    goto corral_source_split_12229;

  corral_source_split_12229:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p439, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12230;

  corral_source_split_12230:
    assume {:verifier.code 0} true;
    $i454 := $load.i32($M.0, $p453);
    goto corral_source_split_12231;

  corral_source_split_12231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2080} vslice_dummy_var_160 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 20, $p450, $p452, $i454);
    goto corral_source_split_12232;

  corral_source_split_12232:
    assume {:verifier.code 0} true;
    $i446 := 1;
    goto $bb191;

  $bb186:
    assume $i441 == 1;
    goto corral_source_split_12215;

  corral_source_split_12215:
    assume {:verifier.code 0} true;
    $i458 := $i438;
    goto $bb192;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb181:
    assume $i425 == 1;
    goto corral_source_split_12193;

  corral_source_split_12193:
    assume {:verifier.code 0} true;
    $p427 := $add.ref($add.ref($p419, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12194;

  corral_source_split_12194:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.0, $p427);
    goto corral_source_split_12195;

  corral_source_split_12195:
    assume {:verifier.code 0} true;
    $p429 := $add.ref($add.ref($p428, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12196;

  corral_source_split_12196:
    assume {:verifier.code 0} true;
    $p430 := $load.ref($M.0, $p429);
    goto corral_source_split_12197;

  corral_source_split_12197:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p419, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12198;

  corral_source_split_12198:
    assume {:verifier.code 0} true;
    $p432 := $load.ref($M.0, $p431);
    goto corral_source_split_12199;

  corral_source_split_12199:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p419, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12200;

  corral_source_split_12200:
    assume {:verifier.code 0} true;
    $i434 := $load.i32($M.0, $p433);
    goto corral_source_split_12201;

  corral_source_split_12201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2075} vslice_dummy_var_158 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 19, $p430, $p432, $i434);
    goto corral_source_split_12202;

  corral_source_split_12202:
    assume {:verifier.code 0} true;
    $i426 := 1;
    goto $bb183;

  $bb178:
    assume $i421 == 1;
    goto corral_source_split_12185;

  corral_source_split_12185:
    assume {:verifier.code 0} true;
    $i438 := $i418;
    goto $bb184;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb173:
    assume $i405 == 1;
    goto corral_source_split_12163;

  corral_source_split_12163:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p399, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12164;

  corral_source_split_12164:
    assume {:verifier.code 0} true;
    $p408 := $load.ref($M.0, $p407);
    goto corral_source_split_12165;

  corral_source_split_12165:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($p408, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12166;

  corral_source_split_12166:
    assume {:verifier.code 0} true;
    $p410 := $load.ref($M.0, $p409);
    goto corral_source_split_12167;

  corral_source_split_12167:
    assume {:verifier.code 0} true;
    $p411 := $add.ref($add.ref($p399, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12168;

  corral_source_split_12168:
    assume {:verifier.code 0} true;
    $p412 := $load.ref($M.0, $p411);
    goto corral_source_split_12169;

  corral_source_split_12169:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p399, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12170;

  corral_source_split_12170:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.0, $p413);
    goto corral_source_split_12171;

  corral_source_split_12171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2070} vslice_dummy_var_156 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 18, $p410, $p412, $i414);
    goto corral_source_split_12172;

  corral_source_split_12172:
    assume {:verifier.code 0} true;
    $i406 := 1;
    goto $bb175;

  $bb170:
    assume $i401 == 1;
    goto corral_source_split_12155;

  corral_source_split_12155:
    assume {:verifier.code 0} true;
    $i418 := $i398;
    goto $bb176;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb165:
    assume $i385 == 1;
    goto corral_source_split_12133;

  corral_source_split_12133:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p379, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12134;

  corral_source_split_12134:
    assume {:verifier.code 0} true;
    $p388 := $load.ref($M.0, $p387);
    goto corral_source_split_12135;

  corral_source_split_12135:
    assume {:verifier.code 0} true;
    $p389 := $add.ref($add.ref($p388, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12136;

  corral_source_split_12136:
    assume {:verifier.code 0} true;
    $p390 := $load.ref($M.0, $p389);
    goto corral_source_split_12137;

  corral_source_split_12137:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p379, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12138;

  corral_source_split_12138:
    assume {:verifier.code 0} true;
    $p392 := $load.ref($M.0, $p391);
    goto corral_source_split_12139;

  corral_source_split_12139:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p379, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12140;

  corral_source_split_12140:
    assume {:verifier.code 0} true;
    $i394 := $load.i32($M.0, $p393);
    goto corral_source_split_12141;

  corral_source_split_12141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2065} vslice_dummy_var_154 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 17, $p390, $p392, $i394);
    goto corral_source_split_12142;

  corral_source_split_12142:
    assume {:verifier.code 0} true;
    $i386 := 1;
    goto $bb167;

  $bb162:
    assume $i381 == 1;
    goto corral_source_split_12125;

  corral_source_split_12125:
    assume {:verifier.code 0} true;
    $i398 := $i378;
    goto $bb168;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb157:
    assume $i365 == 1;
    goto corral_source_split_12103;

  corral_source_split_12103:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p359, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12104;

  corral_source_split_12104:
    assume {:verifier.code 0} true;
    $p368 := $load.ref($M.0, $p367);
    goto corral_source_split_12105;

  corral_source_split_12105:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p368, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12106;

  corral_source_split_12106:
    assume {:verifier.code 0} true;
    $p370 := $load.ref($M.0, $p369);
    goto corral_source_split_12107;

  corral_source_split_12107:
    assume {:verifier.code 0} true;
    $p371 := $add.ref($add.ref($p359, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12108;

  corral_source_split_12108:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.0, $p371);
    goto corral_source_split_12109;

  corral_source_split_12109:
    assume {:verifier.code 0} true;
    $p373 := $add.ref($add.ref($p359, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12110;

  corral_source_split_12110:
    assume {:verifier.code 0} true;
    $i374 := $load.i32($M.0, $p373);
    goto corral_source_split_12111;

  corral_source_split_12111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2060} vslice_dummy_var_152 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 16, $p370, $p372, $i374);
    goto corral_source_split_12112;

  corral_source_split_12112:
    assume {:verifier.code 0} true;
    $i366 := 1;
    goto $bb159;

  $bb154:
    assume $i361 == 1;
    goto corral_source_split_12095;

  corral_source_split_12095:
    assume {:verifier.code 0} true;
    $i378 := $i358;
    goto $bb160;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb149:
    assume $i345 == 1;
    goto corral_source_split_12073;

  corral_source_split_12073:
    assume {:verifier.code 0} true;
    $p347 := $add.ref($add.ref($p339, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12074;

  corral_source_split_12074:
    assume {:verifier.code 0} true;
    $p348 := $load.ref($M.0, $p347);
    goto corral_source_split_12075;

  corral_source_split_12075:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p348, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12076;

  corral_source_split_12076:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_12077;

  corral_source_split_12077:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p339, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12078;

  corral_source_split_12078:
    assume {:verifier.code 0} true;
    $p352 := $load.ref($M.0, $p351);
    goto corral_source_split_12079;

  corral_source_split_12079:
    assume {:verifier.code 0} true;
    $p353 := $add.ref($add.ref($p339, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12080;

  corral_source_split_12080:
    assume {:verifier.code 0} true;
    $i354 := $load.i32($M.0, $p353);
    goto corral_source_split_12081;

  corral_source_split_12081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2055} vslice_dummy_var_150 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 15, $p350, $p352, $i354);
    goto corral_source_split_12082;

  corral_source_split_12082:
    assume {:verifier.code 0} true;
    $i346 := 1;
    goto $bb151;

  $bb146:
    assume $i341 == 1;
    goto corral_source_split_12065;

  corral_source_split_12065:
    assume {:verifier.code 0} true;
    $i358 := $i338;
    goto $bb152;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb141:
    assume $i325 == 1;
    goto corral_source_split_12043;

  corral_source_split_12043:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($p319, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12044;

  corral_source_split_12044:
    assume {:verifier.code 0} true;
    $p328 := $load.ref($M.0, $p327);
    goto corral_source_split_12045;

  corral_source_split_12045:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p328, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12046;

  corral_source_split_12046:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.0, $p329);
    goto corral_source_split_12047;

  corral_source_split_12047:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($p319, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12048;

  corral_source_split_12048:
    assume {:verifier.code 0} true;
    $p332 := $load.ref($M.0, $p331);
    goto corral_source_split_12049;

  corral_source_split_12049:
    assume {:verifier.code 0} true;
    $p333 := $add.ref($add.ref($p319, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12050;

  corral_source_split_12050:
    assume {:verifier.code 0} true;
    $i334 := $load.i32($M.0, $p333);
    goto corral_source_split_12051;

  corral_source_split_12051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2050} vslice_dummy_var_148 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 14, $p330, $p332, $i334);
    goto corral_source_split_12052;

  corral_source_split_12052:
    assume {:verifier.code 0} true;
    $i326 := 1;
    goto $bb143;

  $bb138:
    assume $i321 == 1;
    goto corral_source_split_12035;

  corral_source_split_12035:
    assume {:verifier.code 0} true;
    $i338 := $i318;
    goto $bb144;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb133:
    assume $i305 == 1;
    goto corral_source_split_12013;

  corral_source_split_12013:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p299, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_12014;

  corral_source_split_12014:
    assume {:verifier.code 0} true;
    $p308 := $load.ref($M.0, $p307);
    goto corral_source_split_12015;

  corral_source_split_12015:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p308, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_12016;

  corral_source_split_12016:
    assume {:verifier.code 0} true;
    $p310 := $load.ref($M.0, $p309);
    goto corral_source_split_12017;

  corral_source_split_12017:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p299, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_12018;

  corral_source_split_12018:
    assume {:verifier.code 0} true;
    $p312 := $load.ref($M.0, $p311);
    goto corral_source_split_12019;

  corral_source_split_12019:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p299, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_12020;

  corral_source_split_12020:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.0, $p313);
    goto corral_source_split_12021;

  corral_source_split_12021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2045} vslice_dummy_var_146 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 13, $p310, $p312, $i314);
    goto corral_source_split_12022;

  corral_source_split_12022:
    assume {:verifier.code 0} true;
    $i306 := 1;
    goto $bb135;

  $bb130:
    assume $i301 == 1;
    goto corral_source_split_12005;

  corral_source_split_12005:
    assume {:verifier.code 0} true;
    $i318 := $i298;
    goto $bb136;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb125:
    assume $i285 == 1;
    goto corral_source_split_11983;

  corral_source_split_11983:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p279, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11984;

  corral_source_split_11984:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.0, $p287);
    goto corral_source_split_11985;

  corral_source_split_11985:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p288, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11986;

  corral_source_split_11986:
    assume {:verifier.code 0} true;
    $p290 := $load.ref($M.0, $p289);
    goto corral_source_split_11987;

  corral_source_split_11987:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p279, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11988;

  corral_source_split_11988:
    assume {:verifier.code 0} true;
    $p292 := $load.ref($M.0, $p291);
    goto corral_source_split_11989;

  corral_source_split_11989:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p279, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11990;

  corral_source_split_11990:
    assume {:verifier.code 0} true;
    $i294 := $load.i32($M.0, $p293);
    goto corral_source_split_11991;

  corral_source_split_11991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2040} vslice_dummy_var_144 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 12, $p290, $p292, $i294);
    goto corral_source_split_11992;

  corral_source_split_11992:
    assume {:verifier.code 0} true;
    $i286 := 1;
    goto $bb127;

  $bb122:
    assume $i281 == 1;
    goto corral_source_split_11975;

  corral_source_split_11975:
    assume {:verifier.code 0} true;
    $i298 := $i278;
    goto $bb128;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i265 == 1;
    goto corral_source_split_11953;

  corral_source_split_11953:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11954;

  corral_source_split_11954:
    assume {:verifier.code 0} true;
    $p268 := $load.ref($M.0, $p267);
    goto corral_source_split_11955;

  corral_source_split_11955:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p268, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11956;

  corral_source_split_11956:
    assume {:verifier.code 0} true;
    $p270 := $load.ref($M.0, $p269);
    goto corral_source_split_11957;

  corral_source_split_11957:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11958;

  corral_source_split_11958:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_11959;

  corral_source_split_11959:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p259, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11960;

  corral_source_split_11960:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.0, $p273);
    goto corral_source_split_11961;

  corral_source_split_11961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2035} vslice_dummy_var_142 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 11, $p270, $p272, $i274);
    goto corral_source_split_11962;

  corral_source_split_11962:
    assume {:verifier.code 0} true;
    $i266 := 1;
    goto $bb119;

  $bb114:
    assume $i261 == 1;
    goto corral_source_split_11945;

  corral_source_split_11945:
    assume {:verifier.code 0} true;
    $i278 := $i258;
    goto $bb120;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb109:
    assume $i245 == 1;
    goto corral_source_split_11923;

  corral_source_split_11923:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p239, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11924;

  corral_source_split_11924:
    assume {:verifier.code 0} true;
    $p248 := $load.ref($M.0, $p247);
    goto corral_source_split_11925;

  corral_source_split_11925:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($add.ref($p248, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11926;

  corral_source_split_11926:
    assume {:verifier.code 0} true;
    $p250 := $load.ref($M.0, $p249);
    goto corral_source_split_11927;

  corral_source_split_11927:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p239, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11928;

  corral_source_split_11928:
    assume {:verifier.code 0} true;
    $p252 := $load.ref($M.0, $p251);
    goto corral_source_split_11929;

  corral_source_split_11929:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p239, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11930;

  corral_source_split_11930:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.0, $p253);
    goto corral_source_split_11931;

  corral_source_split_11931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2030} vslice_dummy_var_140 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 10, $p250, $p252, $i254);
    goto corral_source_split_11932;

  corral_source_split_11932:
    assume {:verifier.code 0} true;
    $i246 := 1;
    goto $bb111;

  $bb106:
    assume $i241 == 1;
    goto corral_source_split_11915;

  corral_source_split_11915:
    assume {:verifier.code 0} true;
    $i258 := $i238;
    goto $bb112;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb101:
    assume $i225 == 1;
    goto corral_source_split_11893;

  corral_source_split_11893:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p219, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11894;

  corral_source_split_11894:
    assume {:verifier.code 0} true;
    $p228 := $load.ref($M.0, $p227);
    goto corral_source_split_11895;

  corral_source_split_11895:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p228, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11896;

  corral_source_split_11896:
    assume {:verifier.code 0} true;
    $p230 := $load.ref($M.0, $p229);
    goto corral_source_split_11897;

  corral_source_split_11897:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p219, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11898;

  corral_source_split_11898:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.0, $p231);
    goto corral_source_split_11899;

  corral_source_split_11899:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p219, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11900;

  corral_source_split_11900:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_11901;

  corral_source_split_11901:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2025} vslice_dummy_var_138 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 9, $p230, $p232, $i234);
    goto corral_source_split_11902;

  corral_source_split_11902:
    assume {:verifier.code 0} true;
    $i226 := 1;
    goto $bb103;

  $bb98:
    assume $i221 == 1;
    goto corral_source_split_11885;

  corral_source_split_11885:
    assume {:verifier.code 0} true;
    $i238 := $i218;
    goto $bb104;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i205 == 1;
    goto corral_source_split_11863;

  corral_source_split_11863:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p199, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11864;

  corral_source_split_11864:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_11865;

  corral_source_split_11865:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11866;

  corral_source_split_11866:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_11867;

  corral_source_split_11867:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p199, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11868;

  corral_source_split_11868:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_11869;

  corral_source_split_11869:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p199, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11870;

  corral_source_split_11870:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_11871;

  corral_source_split_11871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2020} vslice_dummy_var_136 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 8, $p210, $p212, $i214);
    goto corral_source_split_11872;

  corral_source_split_11872:
    assume {:verifier.code 0} true;
    $i206 := 1;
    goto $bb95;

  $bb90:
    assume $i201 == 1;
    goto corral_source_split_11855;

  corral_source_split_11855:
    assume {:verifier.code 0} true;
    $i218 := $i198;
    goto $bb96;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i185 == 1;
    goto corral_source_split_11833;

  corral_source_split_11833:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p179, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11834;

  corral_source_split_11834:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_11835;

  corral_source_split_11835:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p188, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11836;

  corral_source_split_11836:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_11837;

  corral_source_split_11837:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p179, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11838;

  corral_source_split_11838:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_11839;

  corral_source_split_11839:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p179, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11840;

  corral_source_split_11840:
    assume {:verifier.code 0} true;
    $i194 := $load.i32($M.0, $p193);
    goto corral_source_split_11841;

  corral_source_split_11841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2015} vslice_dummy_var_134 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 7, $p190, $p192, $i194);
    goto corral_source_split_11842;

  corral_source_split_11842:
    assume {:verifier.code 0} true;
    $i186 := 1;
    goto $bb87;

  $bb82:
    assume $i181 == 1;
    goto corral_source_split_11825;

  corral_source_split_11825:
    assume {:verifier.code 0} true;
    $i198 := $i178;
    goto $bb88;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb77:
    assume $i165 == 1;
    goto corral_source_split_11803;

  corral_source_split_11803:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p159, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11804;

  corral_source_split_11804:
    assume {:verifier.code 0} true;
    $p168 := $load.ref($M.0, $p167);
    goto corral_source_split_11805;

  corral_source_split_11805:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p168, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11806;

  corral_source_split_11806:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_11807;

  corral_source_split_11807:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p159, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11808;

  corral_source_split_11808:
    assume {:verifier.code 0} true;
    $p172 := $load.ref($M.0, $p171);
    goto corral_source_split_11809;

  corral_source_split_11809:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p159, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11810;

  corral_source_split_11810:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_11811;

  corral_source_split_11811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2010} vslice_dummy_var_132 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 6, $p170, $p172, $i174);
    goto corral_source_split_11812;

  corral_source_split_11812:
    assume {:verifier.code 0} true;
    $i166 := 1;
    goto $bb79;

  $bb74:
    assume $i161 == 1;
    goto corral_source_split_11795;

  corral_source_split_11795:
    assume {:verifier.code 0} true;
    $i178 := $i158;
    goto $bb80;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb69:
    assume $i145 == 1;
    goto corral_source_split_11773;

  corral_source_split_11773:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p139, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11774;

  corral_source_split_11774:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.0, $p147);
    goto corral_source_split_11775;

  corral_source_split_11775:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p148, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11776;

  corral_source_split_11776:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_11777;

  corral_source_split_11777:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p139, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11778;

  corral_source_split_11778:
    assume {:verifier.code 0} true;
    $p152 := $load.ref($M.0, $p151);
    goto corral_source_split_11779;

  corral_source_split_11779:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p139, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11780;

  corral_source_split_11780:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_11781;

  corral_source_split_11781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2005} vslice_dummy_var_130 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 5, $p150, $p152, $i154);
    goto corral_source_split_11782;

  corral_source_split_11782:
    assume {:verifier.code 0} true;
    $i146 := 1;
    goto $bb71;

  $bb66:
    assume $i141 == 1;
    goto corral_source_split_11765;

  corral_source_split_11765:
    assume {:verifier.code 0} true;
    $i158 := $i138;
    goto $bb72;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i125 == 1;
    goto corral_source_split_11743;

  corral_source_split_11743:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p119, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11744;

  corral_source_split_11744:
    assume {:verifier.code 0} true;
    $p128 := $load.ref($M.0, $p127);
    goto corral_source_split_11745;

  corral_source_split_11745:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p128, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11746;

  corral_source_split_11746:
    assume {:verifier.code 0} true;
    $p130 := $load.ref($M.0, $p129);
    goto corral_source_split_11747;

  corral_source_split_11747:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p119, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11748;

  corral_source_split_11748:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_11749;

  corral_source_split_11749:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p119, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11750;

  corral_source_split_11750:
    assume {:verifier.code 0} true;
    $i134 := $load.i32($M.0, $p133);
    goto corral_source_split_11751;

  corral_source_split_11751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2000} vslice_dummy_var_128 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 4, $p130, $p132, $i134);
    goto corral_source_split_11752;

  corral_source_split_11752:
    assume {:verifier.code 0} true;
    $i126 := 1;
    goto $bb63;

  $bb58:
    assume $i121 == 1;
    goto corral_source_split_11735;

  corral_source_split_11735:
    assume {:verifier.code 0} true;
    $i138 := $i118;
    goto $bb64;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i105 == 1;
    goto corral_source_split_11713;

  corral_source_split_11713:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p99, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11714;

  corral_source_split_11714:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_11715;

  corral_source_split_11715:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11716;

  corral_source_split_11716:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_11717;

  corral_source_split_11717:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p99, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11718;

  corral_source_split_11718:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_11719;

  corral_source_split_11719:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p99, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11720;

  corral_source_split_11720:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_11721;

  corral_source_split_11721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1995} vslice_dummy_var_126 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 3, $p110, $p112, $i114);
    goto corral_source_split_11722;

  corral_source_split_11722:
    assume {:verifier.code 0} true;
    $i106 := 1;
    goto $bb55;

  $bb50:
    assume $i101 == 1;
    goto corral_source_split_11705;

  corral_source_split_11705:
    assume {:verifier.code 0} true;
    $i118 := $i98;
    goto $bb56;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb45:
    assume $i85 == 1;
    goto corral_source_split_11683;

  corral_source_split_11683:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p79, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11684;

  corral_source_split_11684:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_11685;

  corral_source_split_11685:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11686;

  corral_source_split_11686:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_11687;

  corral_source_split_11687:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p79, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11688;

  corral_source_split_11688:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_11689;

  corral_source_split_11689:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p79, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11690;

  corral_source_split_11690:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_11691;

  corral_source_split_11691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1990} vslice_dummy_var_124 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 2, $p90, $p92, $i94);
    goto corral_source_split_11692;

  corral_source_split_11692:
    assume {:verifier.code 0} true;
    $i86 := 1;
    goto $bb47;

  $bb42:
    assume $i81 == 1;
    goto corral_source_split_11675;

  corral_source_split_11675:
    assume {:verifier.code 0} true;
    $i98 := $i78;
    goto $bb48;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i65 == 1;
    goto corral_source_split_11653;

  corral_source_split_11653:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p59, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11654;

  corral_source_split_11654:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_11655;

  corral_source_split_11655:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11656;

  corral_source_split_11656:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.0, $p69);
    goto corral_source_split_11657;

  corral_source_split_11657:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p59, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11658;

  corral_source_split_11658:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_11659;

  corral_source_split_11659:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p59, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11660;

  corral_source_split_11660:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_11661;

  corral_source_split_11661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1985} vslice_dummy_var_122 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 1, $p70, $p72, $i74);
    goto corral_source_split_11662;

  corral_source_split_11662:
    assume {:verifier.code 0} true;
    $i66 := 1;
    goto $bb39;

  $bb34:
    assume $i61 == 1;
    goto corral_source_split_11645;

  corral_source_split_11645:
    assume {:verifier.code 0} true;
    $i78 := $i6;
    goto $bb40;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i10 == 1;
    goto corral_source_split_11567;

  corral_source_split_11567:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 560)), $mul.ref(8, 1));
    goto corral_source_split_11568;

  corral_source_split_11568:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_11569;

  corral_source_split_11569:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11570;

  corral_source_split_11570:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_11571;

  corral_source_split_11571:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 560)), $mul.ref(56, 1));
    goto corral_source_split_11572;

  corral_source_split_11572:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_11573;

  corral_source_split_11573:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 560)), $mul.ref(476, 1));
    goto corral_source_split_11574;

  corral_source_split_11574:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_11575;

  corral_source_split_11575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1973} vslice_dummy_var_116 := seq_printf.ref.ref.i32.ref.ref.i32($p0, .str.102, 0, $p14, $p16, $i18);
    goto corral_source_split_11576;

  corral_source_split_11576:
    assume {:verifier.code 0} true;
    $i20 := 1;
    goto $bb9;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_11557;

  corral_source_split_11557:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb5;

  $bb25_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11610;

  $bb31_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11599;
}



const single_open: ref;

axiom single_open == $sub.ref(0, 571588);

procedure single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation single_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13049;

  corral_source_split_13049:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2218} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2219} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_13050;

  corral_source_split_13050:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const seq_printf: ref;

axiom seq_printf == $sub.ref(0, 572620);

procedure seq_printf.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.i32.ref.ref.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13052;

  corral_source_split_13052:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2220} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2221} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13053;

  corral_source_split_13053:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_printf.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_13055;

  corral_source_split_13055:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2222} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2223} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13056;

  corral_source_split_13056:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const seq_puts: ref;

axiom seq_puts == $sub.ref(0, 573652);

procedure seq_puts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation seq_puts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_13058;

  corral_source_split_13058:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2224} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2225} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_13059;

  corral_source_split_13059:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 574684);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 2226} $r := $malloc($i0);
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 575716);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2227} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_13061;

  corral_source_split_13061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2228} $p1 := calloc(1, $i0);
    goto corral_source_split_13062;

  corral_source_split_13062:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_13063;

  corral_source_split_13063:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_13064;

  corral_source_split_13064:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_13065;

  corral_source_split_13065:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2229} __VERIFIER_assume($i4);
    goto corral_source_split_13066;

  corral_source_split_13066:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 576748);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.62;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2230} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 2231} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_13068;

  corral_source_split_13068:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_13069;

  corral_source_split_13069:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.62;
    call {:si_unique_call 2232} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.62 := cmdloc_dummy_var_19;
    goto corral_source_split_13070;

  corral_source_split_13070:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_vm_operations_struct_3: ref;

axiom ldv_initialize_vm_operations_struct_3 == $sub.ref(0, 577780);

procedure ldv_initialize_vm_operations_struct_3();
  free requires assertsPassed;
  modifies $M.63, $M.0, $CurrAddr;



implementation ldv_initialize_vm_operations_struct_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13072;

  corral_source_split_13072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2233} $p0 := ldv_init_zalloc(184);
    goto corral_source_split_13073;

  corral_source_split_13073:
    assume {:verifier.code 0} true;
    goto corral_source_split_13074;

  corral_source_split_13074:
    assume {:verifier.code 0} true;
    $M.63 := $p0;
    goto corral_source_split_13075;

  corral_source_split_13075:
    assume {:verifier.code 0} true;
    return;
}



const ldv_file_operations_2: ref;

axiom ldv_file_operations_2 == $sub.ref(0, 578812);

procedure ldv_file_operations_2();
  free requires assertsPassed;
  modifies $M.64, $M.65, $M.0, $CurrAddr;



implementation ldv_file_operations_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13077;

  corral_source_split_13077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2234} $p0 := ldv_init_zalloc(1000);
    goto corral_source_split_13078;

  corral_source_split_13078:
    assume {:verifier.code 0} true;
    goto corral_source_split_13079;

  corral_source_split_13079:
    assume {:verifier.code 0} true;
    $M.64 := $p0;
    goto corral_source_split_13080;

  corral_source_split_13080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2235} $p2 := ldv_init_zalloc(504);
    goto corral_source_split_13081;

  corral_source_split_13081:
    assume {:verifier.code 0} true;
    goto corral_source_split_13082;

  corral_source_split_13082:
    assume {:verifier.code 0} true;
    $M.65 := $p2;
    goto corral_source_split_13083;

  corral_source_split_13083:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_5: ref;

axiom ldv_initialize_device_attribute_5 == $sub.ref(0, 579844);

procedure ldv_initialize_device_attribute_5();
  free requires assertsPassed;
  modifies $M.66, $M.67, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_5()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13085;

  corral_source_split_13085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2236} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_13086;

  corral_source_split_13086:
    assume {:verifier.code 0} true;
    goto corral_source_split_13087;

  corral_source_split_13087:
    assume {:verifier.code 0} true;
    $M.66 := $p0;
    goto corral_source_split_13088;

  corral_source_split_13088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2237} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_13089;

  corral_source_split_13089:
    assume {:verifier.code 0} true;
    goto corral_source_split_13090;

  corral_source_split_13090:
    assume {:verifier.code 0} true;
    $M.67 := $p2;
    goto corral_source_split_13091;

  corral_source_split_13091:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_7: ref;

axiom ldv_initialize_device_attribute_7 == $sub.ref(0, 580876);

procedure ldv_initialize_device_attribute_7();
  free requires assertsPassed;
  modifies $M.68, $M.69, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_7()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13093;

  corral_source_split_13093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2238} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_13094;

  corral_source_split_13094:
    assume {:verifier.code 0} true;
    goto corral_source_split_13095;

  corral_source_split_13095:
    assume {:verifier.code 0} true;
    $M.68 := $p0;
    goto corral_source_split_13096;

  corral_source_split_13096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2239} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_13097;

  corral_source_split_13097:
    assume {:verifier.code 0} true;
    goto corral_source_split_13098;

  corral_source_split_13098:
    assume {:verifier.code 0} true;
    $M.69 := $p2;
    goto corral_source_split_13099;

  corral_source_split_13099:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_4: ref;

axiom ldv_initialize_device_attribute_4 == $sub.ref(0, 581908);

procedure ldv_initialize_device_attribute_4();
  free requires assertsPassed;
  modifies $M.70, $M.71, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13101;

  corral_source_split_13101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2240} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_13102;

  corral_source_split_13102:
    assume {:verifier.code 0} true;
    goto corral_source_split_13103;

  corral_source_split_13103:
    assume {:verifier.code 0} true;
    $M.70 := $p0;
    goto corral_source_split_13104;

  corral_source_split_13104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2241} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_13105;

  corral_source_split_13105:
    assume {:verifier.code 0} true;
    goto corral_source_split_13106;

  corral_source_split_13106:
    assume {:verifier.code 0} true;
    $M.71 := $p2;
    goto corral_source_split_13107;

  corral_source_split_13107:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_device_attribute_6: ref;

axiom ldv_initialize_device_attribute_6 == $sub.ref(0, 582940);

procedure ldv_initialize_device_attribute_6();
  free requires assertsPassed;
  modifies $M.72, $M.73, $M.0, $CurrAddr;



implementation ldv_initialize_device_attribute_6()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13109;

  corral_source_split_13109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2242} $p0 := ldv_init_zalloc(48);
    goto corral_source_split_13110;

  corral_source_split_13110:
    assume {:verifier.code 0} true;
    goto corral_source_split_13111;

  corral_source_split_13111:
    assume {:verifier.code 0} true;
    $M.72 := $p0;
    goto corral_source_split_13112;

  corral_source_split_13112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2243} $p2 := ldv_init_zalloc(1416);
    goto corral_source_split_13113;

  corral_source_split_13113:
    assume {:verifier.code 0} true;
    goto corral_source_split_13114;

  corral_source_split_13114:
    assume {:verifier.code 0} true;
    $M.73 := $p2;
    goto corral_source_split_13115;

  corral_source_split_13115:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 583972);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.62, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.61, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.29, $M.43, $M.44, $M.41, $M.42, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.83, $M.46, $M.84, $M.66, $M.67, $M.68, $M.69, $M.63, $M.70, $M.71, $M.72, $M.73, $M.27, $M.26, $M.92, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.88, $M.188, $M.189, $M.190, $M.191, $M.192, $M.87, $M.28, $M.22, $M.3, $M.2, $M.21, $M.86, $M.65, $M.85, $M.64, $M.23, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.290, $CurrAddr, $M.24, $M.55, $M.56, $M.54, $M.25, $M.58, $M.57, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $i60: i32;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i1;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i1;
  var $i91: i1;
  var $i92: i1;
  var $i93: i32;
  var $i94: i1;
  var $p95: ref;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $i99: i32;
  var $i100: i32;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i1;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $i111: i64;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i118: i32;
  var $i119: i1;
  var $i120: i32;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $i140: i64;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i145: i64;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i1;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $p170: ref;
  var $i171: i32;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $p193: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $p199: ref;
  var $i200: i64;
  var $i201: i32;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i64;
  var $i209: i32;
  var $i210: i1;
  var $i211: i32;
  var $i212: i1;
  var $i213: i32;
  var $i214: i1;
  var $i215: i1;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $p220: ref;
  var $i221: i64;
  var $i223: i32;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i228: i32;
  var $i229: i1;
  var $i230: i32;
  var $i231: i1;
  var $i232: i1;
  var $i233: i1;
  var $i234: i32;
  var $i235: i1;
  var $i236: i32;
  var $i237: i1;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $i245: i32;
  var $i246: i1;
  var $i247: i32;
  var $i248: i1;
  var $i249: i1;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $i257: i32;
  var $i258: i1;
  var $p259: ref;
  var $p260: ref;
  var vslice_dummy_var_216: ref;
  var vslice_dummy_var_217: ref;
  var vslice_dummy_var_218: ref;
  var vslice_dummy_var_219: ref;
  var vslice_dummy_var_220: ref;
  var vslice_dummy_var_221: ref;
  var vslice_dummy_var_222: ref;
  var vslice_dummy_var_223: ref;
  var vslice_dummy_var_224: ref;
  var vslice_dummy_var_225: ref;
  var vslice_dummy_var_226: ref;
  var vslice_dummy_var_227: ref;
  var vslice_dummy_var_228: ref;
  var vslice_dummy_var_229: ref;
  var vslice_dummy_var_230: i64;
  var vslice_dummy_var_231: i64;
  var vslice_dummy_var_232: i64;
  var vslice_dummy_var_233: i64;
  var vslice_dummy_var_234: i64;
  var vslice_dummy_var_235: i64;
  var vslice_dummy_var_236: i64;
  var vslice_dummy_var_237: i64;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;
  var vslice_dummy_var_245: i64;
  var vslice_dummy_var_246: i64;
  var vslice_dummy_var_247: i64;
  var vslice_dummy_var_248: i64;
  var vslice_dummy_var_249: i64;
  var vslice_dummy_var_250: i64;

  $bb0:
    call {:si_unique_call 2244} $initialize();
    goto corral_source_split_13117;

  corral_source_split_13117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2245} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 2246} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2247} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2248} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2249} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2250} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2251} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2252} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2253} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2254} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2255} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2256} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2257} $p11 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2258} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2259} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13118;

  corral_source_split_13118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2260} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_13119;

  corral_source_split_13119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2261} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_13120;

  corral_source_split_13120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2262} $p16 := ldv_init_zalloc(1);
    goto corral_source_split_13121;

  corral_source_split_13121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2263} $p17 := ldv_init_zalloc(1);
    goto corral_source_split_13122;

  corral_source_split_13122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2264} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_13123;

  corral_source_split_13123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2265} $p19 := ldv_init_zalloc(16);
    goto corral_source_split_13124;

  corral_source_split_13124:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_13125;

  corral_source_split_13125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2266} $p21 := ldv_init_zalloc(184);
    goto corral_source_split_13126;

  corral_source_split_13126:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_13127;

  corral_source_split_13127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2267} $p23 := ldv_init_zalloc(8);
    goto corral_source_split_13128;

  corral_source_split_13128:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_13129;

  corral_source_split_13129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2268} $p25 := ldv_init_zalloc(1);
    goto corral_source_split_13130;

  corral_source_split_13130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2269} $p26 := ldv_init_zalloc(8);
    goto corral_source_split_13131;

  corral_source_split_13131:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_13132;

  corral_source_split_13132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2270} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_13133;

  corral_source_split_13133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2271} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_13134;

  corral_source_split_13134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2272} $p30 := ldv_init_zalloc(1);
    goto corral_source_split_13135;

  corral_source_split_13135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2273} $p31 := ldv_init_zalloc(1);
    goto corral_source_split_13136;

  corral_source_split_13136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2274} ldv_initialize();
    goto corral_source_split_13137;

  corral_source_split_13137:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_13138;

  corral_source_split_13138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2275} vslice_dummy_var_216 := ldv_memset($p32, 0, 8);
    goto corral_source_split_13139;

  corral_source_split_13139:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_13140;

  corral_source_split_13140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2276} vslice_dummy_var_217 := ldv_memset($p34, 0, 8);
    goto corral_source_split_13141;

  corral_source_split_13141:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_13142;

  corral_source_split_13142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2277} vslice_dummy_var_218 := ldv_memset($p36, 0, 4);
    goto corral_source_split_13143;

  corral_source_split_13143:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_13144;

  corral_source_split_13144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2278} vslice_dummy_var_219 := ldv_memset($p38, 0, 8);
    goto corral_source_split_13145;

  corral_source_split_13145:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_13146;

  corral_source_split_13146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2279} vslice_dummy_var_220 := ldv_memset($p40, 0, 4);
    goto corral_source_split_13147;

  corral_source_split_13147:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p5);
    goto corral_source_split_13148;

  corral_source_split_13148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2280} vslice_dummy_var_221 := ldv_memset($p42, 0, 4);
    goto corral_source_split_13149;

  corral_source_split_13149:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p6);
    goto corral_source_split_13150;

  corral_source_split_13150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2281} vslice_dummy_var_222 := ldv_memset($p44, 0, 4);
    goto corral_source_split_13151;

  corral_source_split_13151:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p7);
    goto corral_source_split_13152;

  corral_source_split_13152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2282} vslice_dummy_var_223 := ldv_memset($p46, 0, 8);
    goto corral_source_split_13153;

  corral_source_split_13153:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p8);
    goto corral_source_split_13154;

  corral_source_split_13154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2283} vslice_dummy_var_224 := ldv_memset($p48, 0, 8);
    goto corral_source_split_13155;

  corral_source_split_13155:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p9);
    goto corral_source_split_13156;

  corral_source_split_13156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2284} vslice_dummy_var_225 := ldv_memset($p50, 0, 4);
    goto corral_source_split_13157;

  corral_source_split_13157:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p10);
    goto corral_source_split_13158;

  corral_source_split_13158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2285} vslice_dummy_var_226 := ldv_memset($p52, 0, 8);
    goto corral_source_split_13159;

  corral_source_split_13159:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p11);
    goto corral_source_split_13160;

  corral_source_split_13160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2286} vslice_dummy_var_227 := ldv_memset($p54, 0, 8);
    goto corral_source_split_13161;

  corral_source_split_13161:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p12);
    goto corral_source_split_13162;

  corral_source_split_13162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2287} vslice_dummy_var_228 := ldv_memset($p56, 0, 8);
    goto corral_source_split_13163;

  corral_source_split_13163:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p13);
    goto corral_source_split_13164;

  corral_source_split_13164:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2288} vslice_dummy_var_229 := ldv_memset($p58, 0, 8);
    goto corral_source_split_13165;

  corral_source_split_13165:
    assume {:verifier.code 0} true;
    $M.74 := 0;
    call {:si_unique_call 2289} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_13166;

  corral_source_split_13166:
    assume {:verifier.code 0} true;
    $M.75 := 0;
    call {:si_unique_call 2290} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_13167;

  corral_source_split_13167:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 2291} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_13168;

  corral_source_split_13168:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2292} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_13169;

  corral_source_split_13169:
    assume {:verifier.code 0} true;
    $M.78 := 0;
    call {:si_unique_call 2293} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_13170;

  corral_source_split_13170:
    assume {:verifier.code 0} true;
    $M.79 := 0;
    call {:si_unique_call 2294} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_13171;

  corral_source_split_13171:
    assume {:verifier.code 0} true;
    $M.80 := 0;
    call {:si_unique_call 2295} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_13172;

  corral_source_split_13172:
    assume {:verifier.code 0} true;
    $M.81 := 1;
    call {:si_unique_call 2296} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_13173;

  corral_source_split_13173:
    assume {:verifier.code 0} true;
    $M.82 := 0;
    call {:si_unique_call 2297} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_13174;

  corral_source_split_13174:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $i80, $i82, $i83, $p84, $p85, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $p110, $i111, $i113, $i114, $p115, $p116, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i137, $i138, $p139, $i140, $i142, $i143, $p144, $i145, $i147, $i148, $p149, $i150, $i151, $i153, $i154, $p155, $i157, $i158, $p159, $i161, $i162, $i163, $p164, $i165, $i167, $i168, $i169, $p170, $i171, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $p184, $i186, $i187, $p188, $i190, $i191, $p192, $p193, $i195, $i196, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $p205, $i206, $i207, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $p219, $p220, $i221, $i223, $i224, $p225, $p226, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $p253, $p254, $i255, $i257, $i258, $p259, $p260, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p20, $p22, $p24, $p25, $p27, $p28, $p29, $p30, $p31, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $i80, $i82, $i83, $p84, $p85, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $p95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $p109, $p110, $i111, $i113, $i114, $p115, $p116, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $p134, $i135, $i137, $i138, $p139, $i140, $i142, $i143, $p144, $i145, $i147, $i148, $p149, $i150, $i151, $i153, $i154, $p155, $i157, $i158, $p159, $i161, $i162, $i163, $p164, $i165, $i167, $i168, $i169, $p170, $i171, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $p184, $i186, $i187, $p188, $i190, $i191, $p192, $p193, $i195, $i196, $i197, $i198, $p199, $i200, $i201, $i203, $i204, $p205, $i206, $i207, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $p219, $p220, $i221, $i223, $i224, $p225, $p226, $i228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i241, $i242, $i243, $i244, $i245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $p253, $p254, $i255, $i257, $i258, $p259, $p260, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243, vslice_dummy_var_244, vslice_dummy_var_245, vslice_dummy_var_246, vslice_dummy_var_247, vslice_dummy_var_248, vslice_dummy_var_249, vslice_dummy_var_250);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i60, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i60, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} ldv_stop();
    goto corral_source_split_13535;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb9:
    assume $i64 == 1;
    goto corral_source_split_13180;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    $i245 := $M.82;
    goto corral_source_split_13181;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    $i246 := $ne.i32($i245, 0);
    goto corral_source_split_13182;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb211:
    assume $i246 == 1;
    goto corral_source_split_13510;

  corral_source_split_13510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2391} $i247 := __VERIFIER_nondet_int();
    call {:si_unique_call 2392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i247);
    call {:si_unique_call 2393} {:cexpr "tmp___20"} boogie_si_record_i32($i247);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i248 := $slt.i32($i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    assume !($i249 == 1);
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} ldv_stop();
    goto corral_source_split_13533;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb216:
    assume $i249 == 1;
    goto corral_source_split_13512;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    $i257 := $M.82;
    goto corral_source_split_13513;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    $i258 := $eq.i32($i257, 1);
    goto corral_source_split_13514;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb225:
    assume $i258 == 1;
    goto corral_source_split_13527;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    $p259 := $M.67;
    goto corral_source_split_13528;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    $p260 := $M.66;
    goto corral_source_split_13529;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} vslice_dummy_var_250 := max_write_buffer_kb_show($p259, $p260, $p31);
    goto SeqInstr_808, SeqInstr_809;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  SeqInstr_810:
    goto corral_source_split_13530;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2397} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13531;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_808:
    assume !assertsPassed;
    return;

  $bb214:
    assume $i248 == 1;
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i247, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    assume !($i250 == 1);
    goto $bb218;

  $bb219:
    assume $i250 == 1;
    goto corral_source_split_13516;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    $i251 := $M.82;
    goto corral_source_split_13517;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    $i252 := $eq.i32($i251, 1);
    goto corral_source_split_13518;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb221:
    assume $i252 == 1;
    goto corral_source_split_13520;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    $p253 := $M.67;
    goto corral_source_split_13521;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    $p254 := $M.66;
    goto corral_source_split_13522;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    $i255 := $load.i64($M.62, $p13);
    goto corral_source_split_13523;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} vslice_dummy_var_249 := max_write_buffer_kb_store($p253, $p254, $p30, $i255);
    goto SeqInstr_805, SeqInstr_806;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  SeqInstr_807:
    goto corral_source_split_13524;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2395} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13525;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    goto $bb223;

  SeqInstr_805:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i63 == 1;
    goto corral_source_split_13176;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    $i228 := $M.81;
    goto corral_source_split_13177;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_13178;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb181:
    assume $i229 == 1;
    goto corral_source_split_13463;

  corral_source_split_13463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2370} $i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 2371} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i230);
    call {:si_unique_call 2372} {:cexpr "tmp___19"} boogie_si_record_i32($i230);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i231 := $slt.i32($i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    assume !($i232 == 1);
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} ldv_stop();
    goto corral_source_split_13508;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb186:
    assume $i232 == 1;
    goto corral_source_split_13465;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    $i238 := $M.81;
    goto corral_source_split_13466;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 1);
    goto corral_source_split_13467;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb199:
    assume $i239 == 1;
    goto corral_source_split_13483;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} $i240 := comedi_init();
    goto SeqInstr_802, SeqInstr_803;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  SeqInstr_804:
    goto corral_source_split_13484;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $M.84 := $i240;
    call {:si_unique_call 2377} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i240);
    goto corral_source_split_13485;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    $i241 := $M.84;
    goto corral_source_split_13486;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    $i242 := $ne.i32($i241, 0);
    goto corral_source_split_13487;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $i243 := $M.84;
    goto corral_source_split_13492;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    $i244 := $eq.i32($i243, 0);
    goto corral_source_split_13493;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb204:
    assume $i244 == 1;
    goto corral_source_split_13495;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2379} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_13496;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2380} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13497;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} ldv_initialize_device_attribute_5();
    goto corral_source_split_13498;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2382} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_13499;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} ldv_initialize_device_attribute_7();
    goto corral_source_split_13500;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2384} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13501;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} ldv_initialize_vm_operations_struct_3();
    goto corral_source_split_13502;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2386} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13503;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} ldv_initialize_device_attribute_4();
    goto corral_source_split_13504;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2388} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13505;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} ldv_initialize_device_attribute_6();
    goto corral_source_split_13506;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb201:
    assume $i242 == 1;
    goto corral_source_split_13489;

  corral_source_split_13489:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2378} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_13490;

  corral_source_split_13490:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2375} ldv_check_final_state();
    goto SeqInstr_799, SeqInstr_800;

  SeqInstr_800:
    assume assertsPassed;
    goto SeqInstr_801;

  SeqInstr_801:
    goto corral_source_split_13481;

  corral_source_split_13481:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_799:
    assume !assertsPassed;
    return;

  SeqInstr_802:
    assume !assertsPassed;
    return;

  $bb184:
    assume $i231 == 1;
    assume {:verifier.code 0} true;
    $i233 := $eq.i32($i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    assume !($i233 == 1);
    goto $bb188;

  $bb189:
    assume $i233 == 1;
    goto corral_source_split_13469;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    $i234 := $M.81;
    goto corral_source_split_13470;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 2);
    goto corral_source_split_13471;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i235 == 1);
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb191:
    assume $i235 == 1;
    goto corral_source_split_13473;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    $i236 := $M.80;
    goto corral_source_split_13474;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 0);
    goto corral_source_split_13475;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume {:verifier.code 0} true;
    assume !($i237 == 1);
    goto $bb193;

  $bb194:
    assume $i237 == 1;
    goto corral_source_split_13477;

  corral_source_split_13477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2373} comedi_cleanup();
    goto SeqInstr_796, SeqInstr_797;

  SeqInstr_797:
    assume assertsPassed;
    goto SeqInstr_798;

  SeqInstr_798:
    goto corral_source_split_13478;

  corral_source_split_13478:
    assume {:verifier.code 0} true;
    $M.81 := 3;
    call {:si_unique_call 2374} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_13479;

  corral_source_split_13479:
    assume {:verifier.code 0} true;
    goto $bb196;

  SeqInstr_796:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i60, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i65 == 1);
    goto corral_source_split_13188;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    $i211 := $M.79;
    goto corral_source_split_13189;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i211, 0);
    goto corral_source_split_13190;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb161:
    assume $i212 == 1;
    goto corral_source_split_13438;

  corral_source_split_13438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2362} $i213 := __VERIFIER_nondet_int();
    call {:si_unique_call 2363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i213);
    call {:si_unique_call 2364} {:cexpr "tmp___18"} boogie_si_record_i32($i213);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i214 := $slt.i32($i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i215 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} ldv_stop();
    goto corral_source_split_13461;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb166:
    assume $i215 == 1;
    goto corral_source_split_13440;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    $i223 := $M.79;
    goto corral_source_split_13441;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    $i224 := $eq.i32($i223, 1);
    goto corral_source_split_13442;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb175:
    assume $i224 == 1;
    goto corral_source_split_13455;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    $p225 := $M.71;
    goto corral_source_split_13456;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    $p226 := $M.70;
    goto corral_source_split_13457;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} vslice_dummy_var_248 := write_buffer_kb_show($p225, $p226, $p28);
    goto SeqInstr_793, SeqInstr_794;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  SeqInstr_795:
    goto corral_source_split_13458;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2368} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13459;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    goto $bb177;

  SeqInstr_793:
    assume !assertsPassed;
    return;

  $bb164:
    assume $i214 == 1;
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i213, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb168;

  $bb169:
    assume $i216 == 1;
    goto corral_source_split_13444;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    $i217 := $M.79;
    goto corral_source_split_13445;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_13446;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb171:
    assume $i218 == 1;
    goto corral_source_split_13448;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    $p219 := $M.71;
    goto corral_source_split_13449;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    $p220 := $M.70;
    goto corral_source_split_13450;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    $i221 := $load.i64($M.62, $p12);
    goto corral_source_split_13451;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} vslice_dummy_var_247 := write_buffer_kb_store($p219, $p220, $p29, $i221);
    goto SeqInstr_790, SeqInstr_791;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  SeqInstr_792:
    goto corral_source_split_13452;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2366} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13453;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    goto $bb173;

  SeqInstr_790:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i65 == 1;
    goto corral_source_split_13184;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    $i209 := $M.78;
    goto corral_source_split_13185;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    $i210 := $ne.i32($i209, 0);
    goto corral_source_split_13186;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb158:
    assume $i210 == 1;
    goto corral_source_split_13435;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} ldv_main_exported_1();
    goto corral_source_split_13436;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb3:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i60, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i60, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i67 == 1);
    goto corral_source_split_13196;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    $i118 := $M.77;
    goto corral_source_split_13197;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_13198;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb83:
    assume $i119 == 1;
    goto corral_source_split_13283;

  corral_source_split_13283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2326} $i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 2327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i120);
    call {:si_unique_call 2328} {:cexpr "tmp___17"} boogie_si_record_i32($i120);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i120, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i120, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i120, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i120, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i120, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    assume !($i125 == 1);
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} ldv_stop();
    goto corral_source_split_13433;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb94:
    assume $i125 == 1;
    goto corral_source_split_13293;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    $i203 := $M.77;
    goto corral_source_split_13294;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 2);
    goto corral_source_split_13295;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb152:
    assume $i204 == 1;
    goto corral_source_split_13426;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    $p205 := $M.65;
    goto corral_source_split_13427;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    $i206 := $load.i32($M.62, $p4);
    goto corral_source_split_13428;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    $i207 := $load.i64($M.62, $p8);
    goto corral_source_split_13429;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} vslice_dummy_var_246 := comedi_unlocked_ioctl($p205, $i206, $i207);
    goto SeqInstr_787, SeqInstr_788;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  SeqInstr_789:
    goto corral_source_split_13430;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2359} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13431;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    goto $bb154;

  SeqInstr_787:
    assume !assertsPassed;
    return;

  $bb92:
    assume $i124 == 1;
    goto corral_source_split_13289;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    $i197 := $M.77;
    goto corral_source_split_13290;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    $i198 := $eq.i32($i197, 2);
    goto corral_source_split_13291;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb149:
    assume $i198 == 1;
    goto corral_source_split_13419;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    $p199 := $M.65;
    goto corral_source_split_13420;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    $i200 := $load.i64($M.62, $p7);
    goto corral_source_split_13421;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    $i201 := $load.i32($M.62, $p6);
    goto corral_source_split_13422;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} vslice_dummy_var_245 := noop_llseek($p199, $i200, $i201);
    goto corral_source_split_13423;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2357} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13424;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb90:
    assume $i123 == 1;
    goto corral_source_split_13285;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    $i190 := $M.77;
    goto corral_source_split_13286;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 2);
    goto corral_source_split_13287;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb146:
    assume $i191 == 1;
    goto corral_source_split_13410;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    $p192 := $M.64;
    goto corral_source_split_13411;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    $p193 := $M.65;
    goto corral_source_split_13412;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} vslice_dummy_var_244 := comedi_close($p192, $p193);
    goto SeqInstr_784, SeqInstr_785;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  SeqInstr_786:
    goto corral_source_split_13413;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2354} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13414;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    $i195 := $M.80;
    goto corral_source_split_13415;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    $i196 := $sub.i32($i195, 1);
    goto corral_source_split_13416;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $M.80 := $i196;
    call {:si_unique_call 2355} {:cexpr "ref_cnt"} boogie_si_record_i32($i196);
    goto corral_source_split_13417;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    goto $bb148;

  SeqInstr_784:
    assume !assertsPassed;
    return;

  $bb88:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i120, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i126 == 1);
    goto corral_source_split_13301;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    $i182 := $M.77;
    goto corral_source_split_13302;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_13303;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i186 := $M.77;
    goto corral_source_split_13402;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_13403;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb143:
    assume $i187 == 1;
    goto corral_source_split_13405;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    $p188 := $M.65;
    goto corral_source_split_13406;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} vslice_dummy_var_243 := comedi_mmap($p188, $p22);
    goto SeqInstr_781, SeqInstr_782;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  SeqInstr_783:
    goto corral_source_split_13407;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2352} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13408;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    goto $bb145;

  SeqInstr_781:
    assume !assertsPassed;
    return;

  $bb140:
    assume $i183 == 1;
    goto corral_source_split_13397;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    $p184 := $M.65;
    goto corral_source_split_13398;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} vslice_dummy_var_242 := comedi_mmap($p184, $p22);
    goto SeqInstr_778, SeqInstr_779;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  SeqInstr_780:
    goto corral_source_split_13399;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2350} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13400;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    goto $bb142;

  SeqInstr_778:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i126 == 1;
    goto corral_source_split_13297;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    $i173 := $M.77;
    goto corral_source_split_13298;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 1);
    goto corral_source_split_13299;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb134:
    assume $i174 == 1;
    goto corral_source_split_13383;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    $p175 := $M.64;
    goto corral_source_split_13384;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    $p176 := $M.65;
    goto corral_source_split_13385;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} $i177 := comedi_open($p175, $p176);
    goto SeqInstr_775, SeqInstr_776;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  SeqInstr_777:
    goto corral_source_split_13386;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $M.83 := $i177;
    call {:si_unique_call 2346} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i177);
    goto corral_source_split_13387;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    $i178 := $M.83;
    goto corral_source_split_13388;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 0);
    goto corral_source_split_13389;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i179 == 1;
    goto corral_source_split_13391;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2347} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13392;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    $i180 := $M.80;
    goto corral_source_split_13393;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i180, 1);
    goto corral_source_split_13394;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $M.80 := $i181;
    call {:si_unique_call 2348} {:cexpr "ref_cnt"} boogie_si_record_i32($i181);
    goto corral_source_split_13395;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_775:
    assume !assertsPassed;
    return;

  $bb86:
    assume $i121 == 1;
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i120, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i120, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i120, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i129 == 1);
    goto corral_source_split_13313;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    $i161 := $M.77;
    goto corral_source_split_13314;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_13315;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i167 := $M.77;
    goto corral_source_split_13373;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 2);
    goto corral_source_split_13374;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb131:
    assume $i168 == 1;
    goto corral_source_split_13376;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.62, $p2);
    goto corral_source_split_13377;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    $p170 := $M.65;
    goto corral_source_split_13378;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    $i171 := $load.i32($M.62, $p5);
    goto corral_source_split_13379;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} vslice_dummy_var_241 := comedi_fasync($i169, $p170, $i171);
    goto corral_source_split_13380;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2344} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13381;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i162 == 1;
    goto corral_source_split_13366;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    $i163 := $load.i32($M.62, $p2);
    goto corral_source_split_13367;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    $p164 := $M.65;
    goto corral_source_split_13368;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.62, $p5);
    goto corral_source_split_13369;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} vslice_dummy_var_240 := comedi_fasync($i163, $p164, $i165);
    goto corral_source_split_13370;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2342} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13371;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb103:
    assume $i129 == 1;
    goto corral_source_split_13309;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    $i153 := $M.77;
    goto corral_source_split_13310;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 1);
    goto corral_source_split_13311;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $i157 := $M.77;
    goto corral_source_split_13358;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 2);
    goto corral_source_split_13359;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb125:
    assume $i158 == 1;
    goto corral_source_split_13361;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    $p159 := $M.65;
    goto corral_source_split_13362;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} vslice_dummy_var_239 := comedi_poll($p159, $p20);
    goto corral_source_split_13363;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2340} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13364;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb122:
    assume $i154 == 1;
    goto corral_source_split_13353;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    $p155 := $M.65;
    goto corral_source_split_13354;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} vslice_dummy_var_238 := comedi_poll($p155, $p20);
    goto corral_source_split_13355;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2338} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13356;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb101:
    assume $i128 == 1;
    goto corral_source_split_13305;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    $i147 := $M.77;
    goto corral_source_split_13306;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_13307;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb119:
    assume $i148 == 1;
    goto corral_source_split_13346;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    $p149 := $M.65;
    goto corral_source_split_13347;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    $i150 := $load.i32($M.62, $p9);
    goto corral_source_split_13348;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    $i151 := $load.i64($M.62, $p10);
    goto corral_source_split_13349;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} vslice_dummy_var_237 := comedi_compat_ioctl($p149, $i150, $i151);
    goto SeqInstr_772, SeqInstr_773;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  SeqInstr_774:
    goto corral_source_split_13350;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2336} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13351;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    goto $bb121;

  SeqInstr_772:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i120, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i130 == 1);
    goto corral_source_split_13317;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    $i142 := $M.77;
    goto corral_source_split_13318;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 2);
    goto corral_source_split_13319;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb116:
    assume $i143 == 1;
    goto corral_source_split_13340;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    $p144 := $M.65;
    goto corral_source_split_13341;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.62, $p11);
    goto corral_source_split_13342;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} vslice_dummy_var_236 := comedi_read($p144, $p18, $i145, $p24);
    goto corral_source_split_13343;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2334} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13344;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb105:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb96;

  $bb107:
    assume $i131 == 1;
    goto corral_source_split_13321;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    $i132 := $M.77;
    goto corral_source_split_13322;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 1);
    goto corral_source_split_13323;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    $i137 := $M.77;
    goto corral_source_split_13331;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 2);
    goto corral_source_split_13332;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb112:
    assume $i138 == 1;
    goto corral_source_split_13334;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    $p139 := $M.65;
    goto corral_source_split_13335;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.62, $p3);
    goto corral_source_split_13336;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} vslice_dummy_var_235 := comedi_write($p139, $p25, $i140, $p27);
    goto corral_source_split_13337;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2332} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13338;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb109:
    assume $i133 == 1;
    goto corral_source_split_13325;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    $p134 := $M.65;
    goto corral_source_split_13326;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.62, $p3);
    goto corral_source_split_13327;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} vslice_dummy_var_234 := comedi_write($p134, $p25, $i135, $p27);
    goto corral_source_split_13328;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2330} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13329;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb16:
    assume $i67 == 1;
    goto corral_source_split_13192;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    $i101 := $M.76;
    goto corral_source_split_13193;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i101, 0);
    goto corral_source_split_13194;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb63:
    assume $i102 == 1;
    goto corral_source_split_13258;

  corral_source_split_13258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2318} $i103 := __VERIFIER_nondet_int();
    call {:si_unique_call 2319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i103);
    call {:si_unique_call 2320} {:cexpr "tmp___16"} boogie_si_record_i32($i103);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i104 := $slt.i32($i103, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    $i105 := $eq.i32($i103, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i105 == 1);
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} ldv_stop();
    goto corral_source_split_13281;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb68:
    assume $i105 == 1;
    goto corral_source_split_13260;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    $i113 := $M.76;
    goto corral_source_split_13261;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i113, 1);
    goto corral_source_split_13262;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb77:
    assume $i114 == 1;
    goto corral_source_split_13275;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    $p115 := $M.69;
    goto corral_source_split_13276;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    $p116 := $M.68;
    goto corral_source_split_13277;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} vslice_dummy_var_233 := max_read_buffer_kb_show($p115, $p116, $p16);
    goto SeqInstr_769, SeqInstr_770;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  SeqInstr_771:
    goto corral_source_split_13278;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2324} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_13279;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_769:
    assume !assertsPassed;
    return;

  $bb66:
    assume $i104 == 1;
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i103, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb70;

  $bb71:
    assume $i106 == 1;
    goto corral_source_split_13264;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    $i107 := $M.76;
    goto corral_source_split_13265;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_13266;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb73:
    assume $i108 == 1;
    goto corral_source_split_13268;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    $p109 := $M.69;
    goto corral_source_split_13269;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    $p110 := $M.68;
    goto corral_source_split_13270;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    $i111 := $load.i64($M.62, $p1);
    goto corral_source_split_13271;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} vslice_dummy_var_232 := max_read_buffer_kb_store($p109, $p110, $p17, $i111);
    goto SeqInstr_766, SeqInstr_767;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  SeqInstr_768:
    goto corral_source_split_13272;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2322} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_13273;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_766:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i66 == 1;
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i68 == 1);
    goto corral_source_split_13200;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    $i87 := $M.75;
    goto corral_source_split_13201;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    $i88 := $ne.i32($i87, 0);
    goto corral_source_split_13202;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb43:
    assume $i88 == 1;
    goto corral_source_split_13233;

  corral_source_split_13233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2309} $i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 2310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i89);
    call {:si_unique_call 2311} {:cexpr "tmp___15"} boogie_si_record_i32($i89);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i90 := $slt.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} ldv_stop();
    goto corral_source_split_13256;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb48:
    assume $i91 == 1;
    goto corral_source_split_13235;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    $i96 := $M.75;
    goto corral_source_split_13236;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    $i97 := $eq.i32($i96, 1);
    goto corral_source_split_13237;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb57:
    assume $i97 == 1;
    goto corral_source_split_13248;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    $p98 := $M.63;
    goto corral_source_split_13249;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} comedi_vm_open($p98);
    goto corral_source_split_13250;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 2315} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13251;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    $i99 := $M.80;
    goto corral_source_split_13252;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i99, 1);
    goto corral_source_split_13253;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $M.80 := $i100;
    call {:si_unique_call 2316} {:cexpr "ref_cnt"} boogie_si_record_i32($i100);
    goto corral_source_split_13254;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb46:
    assume $i90 == 1;
    assume {:verifier.code 0} true;
    $i92 := $eq.i32($i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i92 == 1);
    goto $bb50;

  $bb51:
    assume $i92 == 1;
    goto corral_source_split_13239;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    $i93 := $M.75;
    goto corral_source_split_13240;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    $i94 := $eq.i32($i93, 2);
    goto corral_source_split_13241;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i94 == 1;
    goto corral_source_split_13243;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    $p95 := $M.63;
    goto corral_source_split_13244;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} comedi_vm_close($p95);
    goto SeqInstr_763, SeqInstr_764;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  SeqInstr_765:
    goto corral_source_split_13245;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2313} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13246;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_763:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb11;

  $bb20:
    assume $i69 == 1;
    goto corral_source_split_13204;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    $i70 := $M.74;
    goto corral_source_split_13205;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i70, 0);
    goto corral_source_split_13206;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb22:
    assume $i71 == 1;
    goto corral_source_split_13208;

  corral_source_split_13208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2301} $i72 := __VERIFIER_nondet_int();
    call {:si_unique_call 2302} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i72);
    call {:si_unique_call 2303} {:cexpr "tmp___14"} boogie_si_record_i32($i72);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i72, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i72, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} ldv_stop();
    goto corral_source_split_13231;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb27:
    assume $i74 == 1;
    goto corral_source_split_13210;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    $i82 := $M.74;
    goto corral_source_split_13211;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 1);
    goto corral_source_split_13212;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb36:
    assume $i83 == 1;
    goto corral_source_split_13225;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    $p84 := $M.73;
    goto corral_source_split_13226;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    $p85 := $M.72;
    goto corral_source_split_13227;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} vslice_dummy_var_231 := read_buffer_kb_show($p84, $p85, $p14);
    goto SeqInstr_760, SeqInstr_761;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  SeqInstr_762:
    goto corral_source_split_13228;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2307} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13229;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    goto $bb38;

  SeqInstr_760:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i72, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb29;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_13214;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    $i76 := $M.74;
    goto corral_source_split_13215;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_13216;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb32:
    assume $i77 == 1;
    goto corral_source_split_13218;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    $p78 := $M.73;
    goto corral_source_split_13219;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    $p79 := $M.72;
    goto corral_source_split_13220;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    $i80 := $load.i64($M.62, $p0);
    goto corral_source_split_13221;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} vslice_dummy_var_230 := read_buffer_kb_store($p78, $p79, $p15, $i80);
    goto SeqInstr_757, SeqInstr_758;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  SeqInstr_759:
    goto corral_source_split_13222;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2305} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13223;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_757:
    assume !assertsPassed;
    return;

  $bb42_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2298} $i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 2299} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i60);
    call {:si_unique_call 2300} {:cexpr "tmp___13"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 585004);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13537;

  corral_source_split_13537:
    assume {:verifier.code 0} true;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 586036);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13539;

  corral_source_split_13539:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_main_exported_1: ref;

axiom ldv_main_exported_1 == $sub.ref(0, 587068);

procedure ldv_main_exported_1();
  free requires assertsPassed;
  modifies $M.62, $M.78, $M.87, $M.80, $M.0, $CurrAddr;



implementation ldv_main_exported_1()
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i64;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $p41: ref;
  var $i42: i64;
  var $i43: i32;
  var vslice_dummy_var_251: ref;
  var vslice_dummy_var_252: ref;
  var vslice_dummy_var_253: ref;
  var vslice_dummy_var_254: i64;
  var vslice_dummy_var_255: i32;
  var vslice_dummy_var_256: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2400} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2401} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2402} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_13541;

  corral_source_split_13541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2403} $p3 := ldv_init_zalloc(1);
    goto corral_source_split_13542;

  corral_source_split_13542:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2404} $p4 := ldv_init_zalloc(8);
    goto corral_source_split_13543;

  corral_source_split_13543:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_13544;

  corral_source_split_13544:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_13545;

  corral_source_split_13545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2405} vslice_dummy_var_251 := ldv_memset($p6, 0, 4);
    goto corral_source_split_13546;

  corral_source_split_13546:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p1);
    goto corral_source_split_13547;

  corral_source_split_13547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2406} vslice_dummy_var_252 := ldv_memset($p8, 0, 8);
    goto corral_source_split_13548;

  corral_source_split_13548:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p2);
    goto corral_source_split_13549;

  corral_source_split_13549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2407} vslice_dummy_var_253 := ldv_memset($p10, 0, 8);
    goto corral_source_split_13550;

  corral_source_split_13550:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2408} $i12 := __VERIFIER_nondet_int();
    call {:si_unique_call 2409} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i12);
    call {:si_unique_call 2410} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i12, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2422} ldv_stop();
    goto corral_source_split_13604;

  corral_source_split_13604:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_13556;

  corral_source_split_13556:
    assume {:verifier.code 0} true;
    $i39 := $M.78;
    goto corral_source_split_13557;

  corral_source_split_13557:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 2);
    goto corral_source_split_13558;

  corral_source_split_13558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb26:
    assume $i40 == 1;
    goto corral_source_split_13597;

  corral_source_split_13597:
    assume {:verifier.code 0} true;
    $p41 := $M.85;
    goto corral_source_split_13598;

  corral_source_split_13598:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.62, $p1);
    goto corral_source_split_13599;

  corral_source_split_13599:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.62, $p0);
    goto corral_source_split_13600;

  corral_source_split_13600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2420} vslice_dummy_var_256 := seq_lseek($p41, $i42, $i43);
    goto corral_source_split_13601;

  corral_source_split_13601:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2421} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_13602;

  corral_source_split_13602:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_13552;

  corral_source_split_13552:
    assume {:verifier.code 0} true;
    $i32 := $M.78;
    goto corral_source_split_13553;

  corral_source_split_13553:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 2);
    goto corral_source_split_13554;

  corral_source_split_13554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i33 == 1;
    goto corral_source_split_13588;

  corral_source_split_13588:
    assume {:verifier.code 0} true;
    $p34 := $M.86;
    goto corral_source_split_13589;

  corral_source_split_13589:
    assume {:verifier.code 0} true;
    $p35 := $M.85;
    goto corral_source_split_13590;

  corral_source_split_13590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2417} vslice_dummy_var_255 := single_release($p34, $p35);
    goto corral_source_split_13591;

  corral_source_split_13591:
    assume {:verifier.code 0} true;
    $M.78 := 1;
    call {:si_unique_call 2418} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_13592;

  corral_source_split_13592:
    assume {:verifier.code 0} true;
    $i37 := $M.80;
    goto corral_source_split_13593;

  corral_source_split_13593:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32($i37, 1);
    goto corral_source_split_13594;

  corral_source_split_13594:
    assume {:verifier.code 0} true;
    $M.80 := $i38;
    call {:si_unique_call 2419} {:cexpr "ref_cnt"} boogie_si_record_i32($i38);
    goto corral_source_split_13595;

  corral_source_split_13595:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb2:
    assume $i13 == 1;
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i12, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_13560;

  corral_source_split_13560:
    assume {:verifier.code 0} true;
    $i23 := $M.78;
    goto corral_source_split_13561;

  corral_source_split_13561:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 1);
    goto corral_source_split_13562;

  corral_source_split_13562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i24 == 1;
    goto corral_source_split_13574;

  corral_source_split_13574:
    assume {:verifier.code 0} true;
    $p25 := $M.86;
    goto corral_source_split_13575;

  corral_source_split_13575:
    assume {:verifier.code 0} true;
    $p26 := $M.85;
    goto corral_source_split_13576;

  corral_source_split_13576:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2413} $i27 := comedi_proc_open($p25, $p26);
    goto corral_source_split_13577;

  corral_source_split_13577:
    assume {:verifier.code 0} true;
    $M.87 := $i27;
    call {:si_unique_call 2414} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i27);
    goto corral_source_split_13578;

  corral_source_split_13578:
    assume {:verifier.code 0} true;
    $i28 := $M.87;
    goto corral_source_split_13579;

  corral_source_split_13579:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, 0);
    goto corral_source_split_13580;

  corral_source_split_13580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i29 == 1;
    goto corral_source_split_13582;

  corral_source_split_13582:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2415} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_13583;

  corral_source_split_13583:
    assume {:verifier.code 0} true;
    $i30 := $M.80;
    goto corral_source_split_13584;

  corral_source_split_13584:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 1);
    goto corral_source_split_13585;

  corral_source_split_13585:
    assume {:verifier.code 0} true;
    $M.80 := $i31;
    call {:si_unique_call 2416} {:cexpr "ref_cnt"} boogie_si_record_i32($i31);
    goto corral_source_split_13586;

  corral_source_split_13586:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i12, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb11:
    assume $i17 == 1;
    goto corral_source_split_13564;

  corral_source_split_13564:
    assume {:verifier.code 0} true;
    $i18 := $M.78;
    goto corral_source_split_13565;

  corral_source_split_13565:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 2);
    goto corral_source_split_13566;

  corral_source_split_13566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i19 == 1;
    goto corral_source_split_13568;

  corral_source_split_13568:
    assume {:verifier.code 0} true;
    $p20 := $M.85;
    goto corral_source_split_13569;

  corral_source_split_13569:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.62, $p2);
    goto corral_source_split_13570;

  corral_source_split_13570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2411} vslice_dummy_var_254 := seq_read($p20, $p3, $i21, $p5);
    goto corral_source_split_13571;

  corral_source_split_13571:
    assume {:verifier.code 0} true;
    $M.78 := 2;
    call {:si_unique_call 2412} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_13572;

  corral_source_split_13572:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const comedi_cleanup: ref;

axiom comedi_cleanup == $sub.ref(0, 588100);

procedure comedi_cleanup();
  free requires assertsPassed;
  modifies $M.77, $M.2, $M.0, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $CurrAddr, $M.54, $M.25;



implementation comedi_cleanup()
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i64;
  var $i52: i1;
  var $i53: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i64;
  var $i62: i64;
  var $i63: i1;
  var $p64: ref;
  var $i65: i64;
  var $i66: i1;
  var $i67: i32;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i64;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $i81: i32;
  var $i82: i64;
  var $i83: i64;
  var $i84: i1;
  var $p85: ref;
  var $i86: i64;
  var $i87: i1;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $i93: i64;
  var $i94: i1;
  var $i95: i32;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $p99: ref;
  var $i100: i64;
  var $i101: i1;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $i107: i64;
  var $i108: i1;
  var $i109: i32;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i64;
  var $i115: i1;
  var $i116: i32;
  var $i117: i64;
  var $i118: i64;
  var $i119: i1;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $i123: i32;
  var $i124: i64;
  var $i125: i64;
  var $i126: i1;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $i130: i32;
  var $i131: i64;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $i135: i64;
  var $i136: i1;
  var $i137: i32;
  var $i138: i64;
  var $i139: i64;
  var $i140: i1;
  var $p141: ref;
  var $i142: i64;
  var $i143: i1;
  var $i144: i32;
  var $i145: i64;
  var $i146: i64;
  var $i147: i1;
  var $p148: ref;
  var $i149: i64;
  var $i150: i1;
  var $i151: i32;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $p155: ref;
  var $i156: i64;
  var $i157: i1;
  var $i158: i32;
  var $i159: i64;
  var $i160: i64;
  var $i161: i1;
  var $p162: ref;
  var $i163: i64;
  var $i164: i1;
  var $i165: i32;
  var $i166: i64;
  var $i167: i64;
  var $i168: i1;
  var $p169: ref;
  var $i170: i64;
  var $i171: i1;
  var $i172: i32;
  var $i173: i64;
  var $i174: i64;
  var $i175: i1;
  var $p176: ref;
  var $i177: i64;
  var $i178: i1;
  var $i179: i32;
  var $i180: i64;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $i184: i64;
  var $i185: i1;
  var $i186: i32;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $i191: i64;
  var $i192: i1;
  var $i193: i32;
  var $i194: i64;
  var $i195: i64;
  var $i196: i1;
  var $p197: ref;
  var $i198: i64;
  var $i199: i1;
  var $i200: i32;
  var $i201: i64;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $i205: i64;
  var $i206: i1;
  var $i207: i32;
  var $i208: i64;
  var $i209: i64;
  var $i210: i1;
  var $p211: ref;
  var $i212: i64;
  var $i213: i1;
  var $i214: i32;
  var $i215: i64;
  var $i216: i64;
  var $i217: i1;
  var $p218: ref;
  var $i219: i64;
  var $i220: i1;
  var $i221: i32;
  var $i222: i64;
  var $i223: i64;
  var $i224: i1;
  var $p225: ref;
  var $i226: i64;
  var $i227: i1;
  var $i228: i32;
  var $i229: i64;
  var $i230: i64;
  var $i231: i1;
  var $p232: ref;
  var $i233: i64;
  var $i234: i1;
  var $i235: i32;
  var $i236: i64;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $i240: i64;
  var $i241: i1;
  var $i242: i32;
  var $i243: i64;
  var $i244: i64;
  var $i245: i1;
  var $p246: ref;
  var $i247: i64;
  var $i248: i1;
  var $i249: i32;
  var $i250: i64;
  var $i251: i64;
  var $i252: i1;
  var $p253: ref;
  var $i254: i64;
  var $i255: i1;
  var $i256: i32;
  var $i257: i64;
  var $i258: i64;
  var $i259: i1;
  var $p260: ref;
  var $i261: i64;
  var $i262: i1;
  var $i263: i32;
  var $i264: i64;
  var $i265: i64;
  var $i266: i1;
  var $p267: ref;
  var $i268: i64;
  var $i269: i1;
  var $i270: i32;
  var $i271: i64;
  var $i272: i64;
  var $i273: i1;
  var $p274: ref;
  var $i275: i64;
  var $i276: i1;
  var $i277: i32;
  var $i278: i64;
  var $i279: i64;
  var $i280: i1;
  var $p281: ref;
  var $i282: i64;
  var $i283: i1;
  var $i284: i32;
  var $i285: i64;
  var $i286: i64;
  var $i287: i1;
  var $p288: ref;
  var $i289: i64;
  var $i290: i1;
  var $i291: i32;
  var $i292: i64;
  var $i293: i64;
  var $i294: i1;
  var $p295: ref;
  var $i296: i64;
  var $i297: i1;
  var $i298: i32;
  var $i299: i64;
  var $i300: i64;
  var $i301: i1;
  var $p302: ref;
  var $i303: i64;
  var $i304: i1;
  var $i305: i32;
  var $i306: i64;
  var $i307: i64;
  var $i308: i1;
  var $p309: ref;
  var $i310: i64;
  var $i311: i1;
  var $i312: i32;
  var $i313: i64;
  var $i314: i64;
  var $i315: i1;
  var $p316: ref;
  var $i317: i64;
  var $i318: i1;
  var $i319: i32;
  var $i320: i64;
  var $i321: i64;
  var $i322: i1;
  var $p323: ref;
  var $i324: i64;
  var $i325: i1;
  var $i326: i32;
  var $i327: i64;
  var $i328: i64;
  var $i329: i1;
  var $p330: ref;
  var $i331: i64;
  var $i332: i1;
  var $i333: i32;
  var $i334: i64;
  var $i335: i64;
  var $i336: i1;
  var $p337: ref;
  var $i338: i64;
  var $i339: i1;
  var $i340: i32;
  var $i341: i64;
  var $i342: i64;
  var $i343: i1;
  var $p344: ref;
  var $i345: i64;
  var $i346: i1;
  var $i347: i32;
  var $i348: i64;
  var $i349: i64;
  var $i350: i1;
  var $p351: ref;
  var $i352: i64;
  var $i353: i1;
  var $i354: i32;
  var $i355: i64;
  var $i356: i64;
  var $i357: i1;
  var $p358: ref;
  var $i359: i64;
  var $i360: i1;
  var $i361: i32;
  var $i362: i64;
  var $i363: i64;
  var $i364: i1;
  var $p365: ref;
  var $i366: i64;
  var $i367: i1;
  var $i368: i32;
  var $i369: i64;
  var $i370: i64;
  var $i371: i1;
  var $p372: ref;
  var $i373: i64;
  var $i374: i1;
  var $i375: i32;
  var $i376: i64;
  var $i377: i64;
  var $i378: i1;
  var $p379: ref;
  var $i380: i64;
  var $i381: i1;
  var $i382: i32;
  var $i383: i64;
  var $i384: i64;
  var $i385: i1;
  var $p386: ref;
  var $i387: i64;
  var $i388: i1;
  var $i389: i32;
  var $i390: i64;
  var $i391: i64;
  var $i392: i1;
  var $p393: ref;
  var $i394: i64;
  var $i395: i1;
  var $i396: i32;
  var $i397: i64;
  var $i398: i64;
  var $i399: i1;
  var $p400: ref;
  var $i401: i64;
  var $i402: i1;
  var $i403: i32;
  var $i404: i64;
  var $i405: i64;
  var $i406: i1;
  var $p407: ref;
  var $i408: i64;
  var $i409: i1;
  var $i410: i32;
  var $i411: i64;
  var $i412: i64;
  var $i413: i1;
  var $p414: ref;
  var $i415: i64;
  var $i416: i1;
  var $i417: i32;
  var $i418: i64;
  var $i419: i64;
  var $i420: i1;
  var $p421: ref;
  var $i422: i64;
  var $i423: i1;
  var $i424: i32;
  var $i425: i64;
  var $i426: i64;
  var $i427: i1;
  var $p428: ref;
  var $i429: i64;
  var $i430: i1;
  var $i431: i32;
  var $i432: i64;
  var $i433: i64;
  var $i434: i1;
  var $p435: ref;
  var $i436: i64;
  var $i437: i1;
  var $i438: i32;
  var $i439: i64;
  var $i440: i64;
  var $i441: i1;
  var $p442: ref;
  var $i443: i64;
  var $i444: i1;
  var $i445: i32;
  var $i446: i64;
  var $i447: i64;
  var $i448: i1;
  var $p449: ref;
  var $i450: i64;
  var $i451: i1;
  var $i452: i32;
  var $i453: i64;
  var $i454: i64;
  var $i455: i1;
  var $p456: ref;
  var $i457: i64;
  var $i458: i1;
  var $i459: i32;
  var $i460: i64;
  var $i461: i64;
  var $i462: i1;
  var $p463: ref;
  var $i464: i64;
  var $i465: i1;
  var $i466: i32;
  var $i467: i64;
  var $i468: i64;
  var $i469: i1;
  var $p470: ref;
  var $i471: i64;
  var $i472: i1;
  var $i473: i32;
  var $i474: i64;
  var $i475: i64;
  var $i476: i1;
  var $p477: ref;
  var $i478: i64;
  var $i479: i1;
  var $i480: i32;
  var $i481: i64;
  var $i482: i64;
  var $i483: i1;
  var $p484: ref;
  var $i485: i64;
  var $i486: i1;
  var $i487: i32;
  var $i488: i64;
  var $i489: i64;
  var $i490: i1;
  var $p491: ref;
  var $i492: i64;
  var $i493: i1;
  var $i494: i32;
  var $i495: i64;
  var $i496: i64;
  var $i497: i1;
  var $p498: ref;
  var $i499: i64;
  var $i500: i1;
  var $i501: i32;
  var $i502: i64;
  var $i503: i64;
  var $i504: i1;
  var $p505: ref;
  var $i506: i64;
  var $i507: i1;
  var $i508: i32;
  var $i509: i64;
  var $i510: i64;
  var $i511: i1;
  var $p512: ref;
  var $i513: i64;
  var $i514: i1;
  var $i515: i32;
  var $i516: i64;
  var $i517: i64;
  var $i518: i1;
  var $p519: ref;
  var $i520: i64;
  var $i521: i1;
  var $i522: i32;
  var $i523: i64;
  var $i524: i64;
  var $i525: i1;
  var $p526: ref;
  var $i527: i64;
  var $i528: i1;
  var $i529: i32;
  var $i530: i64;
  var $i531: i64;
  var $i532: i1;
  var $p533: ref;
  var $i534: i64;
  var $i535: i1;
  var $i536: i32;
  var $i537: i64;
  var $i538: i64;
  var $i539: i1;
  var $p540: ref;
  var $i541: i64;
  var $i542: i1;
  var $i543: i32;
  var $i544: i64;
  var $i545: i64;
  var $i546: i1;
  var $p547: ref;
  var $i548: i64;
  var $i549: i1;
  var $i550: i32;
  var $i551: i64;
  var $i552: i64;
  var $i553: i1;
  var $p554: ref;
  var $i555: i64;
  var $i556: i1;
  var $i557: i32;
  var $i558: i64;
  var $i559: i64;
  var $i560: i1;
  var $p561: ref;
  var $i562: i64;
  var $i563: i1;
  var $i564: i32;
  var $i565: i64;
  var $i566: i64;
  var $i567: i1;
  var $p568: ref;
  var $i569: i64;
  var $i570: i1;
  var $i571: i32;
  var $i572: i64;
  var $i573: i64;
  var $i574: i1;
  var $p575: ref;
  var $i576: i64;
  var $i577: i1;
  var $i578: i32;
  var $i579: i64;
  var $i580: i64;
  var $i581: i1;
  var $p582: ref;
  var $i583: i64;
  var $i584: i1;
  var $i585: i32;
  var $i586: i64;
  var $i587: i64;
  var $i588: i1;
  var $p589: ref;
  var $i590: i64;
  var $i591: i1;
  var $i592: i32;
  var $i593: i64;
  var $i594: i64;
  var $i595: i1;
  var $p596: ref;
  var $i597: i64;
  var $i598: i1;
  var $i599: i32;
  var $i600: i64;
  var $i601: i64;
  var $i602: i1;
  var $p603: ref;
  var $i604: i64;
  var $i605: i1;
  var $i606: i32;
  var $i607: i64;
  var $i608: i64;
  var $i609: i1;
  var $p610: ref;
  var $i611: i64;
  var $i612: i1;
  var $i613: i32;
  var $i614: i64;
  var $i615: i64;
  var $i616: i1;
  var $p617: ref;
  var $i618: i64;
  var $i619: i1;
  var $i620: i32;
  var $i621: i64;
  var $i622: i64;
  var $i623: i1;
  var $p624: ref;
  var $i625: i64;
  var $i626: i1;
  var $i627: i32;
  var $i628: i64;
  var $i629: i64;
  var $i630: i1;
  var $p631: ref;
  var $i632: i64;
  var $i633: i1;
  var $i634: i32;
  var $i635: i64;
  var $i636: i64;
  var $i637: i1;
  var $p638: ref;
  var $i639: i64;
  var $i640: i1;
  var $i641: i32;
  var $i642: i64;
  var $i643: i64;
  var $i644: i1;
  var $p645: ref;
  var $i646: i64;
  var $i647: i1;
  var $i648: i32;
  var $i649: i64;
  var $i650: i64;
  var $i651: i1;
  var $p652: ref;
  var $i653: i64;
  var $i654: i1;
  var $i655: i32;
  var $i656: i64;
  var $i657: i64;
  var $i658: i1;
  var $p659: ref;
  var $i660: i64;
  var $i661: i1;
  var $i662: i32;
  var $i663: i64;
  var $i664: i64;
  var $i665: i1;
  var $p666: ref;
  var $i667: i64;
  var $i668: i1;
  var $i669: i32;
  var $i670: i64;
  var $i671: i64;
  var $i672: i1;
  var $p673: ref;
  var $i674: i64;
  var $i675: i1;
  var $i676: i32;
  var $i677: i64;
  var $i678: i64;
  var $i679: i1;
  var $p680: ref;
  var $i681: i64;
  var $i682: i1;
  var $i683: i32;
  var $i684: i64;
  var $i685: i64;
  var $i686: i1;
  var $p687: ref;
  var $i688: i64;
  var $i689: i1;
  var $i690: i32;
  var $i691: i64;
  var $i692: i64;
  var $i693: i1;
  var $p694: ref;
  var $i695: i64;
  var $i696: i1;
  var $i697: i32;
  var $i698: i64;
  var $i699: i64;
  var $i700: i1;
  var $p701: ref;
  var $i702: i64;
  var $i703: i1;
  var $i704: i32;
  var $i705: i64;
  var $i706: i64;
  var $i707: i1;
  var $p708: ref;
  var $i709: i64;
  var $i710: i1;
  var $i711: i32;
  var $i712: i64;
  var $i713: i64;
  var $i714: i1;
  var $p715: ref;
  var $i716: i64;
  var $i717: i1;
  var $i718: i32;
  var $i719: i64;
  var $i720: i64;
  var $i721: i1;
  var $p722: ref;
  var $i723: i64;
  var $i724: i1;
  var $i725: i32;
  var $i726: i64;
  var $i727: i64;
  var $i728: i1;
  var $p729: ref;
  var $i730: i64;
  var $i731: i1;
  var $i732: i32;
  var $i733: i64;
  var $i734: i64;
  var $i735: i1;
  var $p736: ref;
  var $i737: i64;
  var $i738: i1;
  var $i739: i32;
  var $i740: i64;
  var $i741: i64;
  var $i742: i1;
  var $p743: ref;
  var $i744: i64;
  var $i745: i1;
  var $i746: i32;
  var $i747: i64;
  var $i748: i64;
  var $i749: i1;
  var $p750: ref;
  var $i751: i64;
  var $i752: i1;
  var $i753: i32;
  var $i754: i64;
  var $i755: i64;
  var $i756: i1;
  var $p757: ref;
  var $i758: i64;
  var $i759: i1;
  var $i760: i32;
  var $i761: i64;
  var $i762: i64;
  var $i763: i1;
  var $p764: ref;
  var $i765: i64;
  var $i766: i1;
  var $i767: i32;
  var $i768: i64;
  var $i769: i64;
  var $i770: i1;
  var $p771: ref;
  var $i772: i64;
  var $i773: i1;
  var $i774: i32;
  var $i775: i64;
  var $i776: i64;
  var $i777: i1;
  var $p778: ref;
  var $i779: i64;
  var $i780: i1;
  var $i781: i32;
  var $i782: i64;
  var $i783: i64;
  var $i784: i1;
  var $p785: ref;
  var $i786: i64;
  var $i787: i1;
  var $i788: i32;
  var $i789: i64;
  var $i790: i64;
  var $i791: i1;
  var $p792: ref;
  var $i793: i64;
  var $i794: i1;
  var $i795: i32;
  var $i796: i64;
  var $i797: i64;
  var $i798: i1;
  var $p799: ref;
  var $i800: i64;
  var $i801: i1;
  var $i802: i32;
  var $i803: i64;
  var $i804: i64;
  var $i805: i1;
  var $p806: ref;
  var $i807: i64;
  var $i808: i1;
  var $i809: i32;
  var $i810: i64;
  var $i811: i64;
  var $i812: i1;
  var $p813: ref;
  var $i814: i64;
  var $i815: i1;
  var $i816: i32;
  var $i817: i64;
  var $i818: i64;
  var $i819: i1;
  var $p820: ref;
  var $i821: i64;
  var $i822: i1;
  var $i823: i32;
  var $i824: i64;
  var $i825: i64;
  var $i826: i1;
  var $p827: ref;
  var $i828: i64;
  var $i829: i1;
  var $i830: i32;
  var $i831: i64;
  var $i832: i64;
  var $i833: i1;
  var $p834: ref;
  var $i835: i64;
  var $i836: i1;
  var $i837: i32;
  var $i838: i64;
  var $i839: i64;
  var $i840: i1;
  var $p841: ref;
  var $i842: i64;
  var $i843: i1;
  var $i844: i32;
  var $i845: i64;
  var $i846: i64;
  var $i847: i1;
  var $p848: ref;
  var $i849: i64;
  var $i850: i1;
  var $i851: i32;
  var $i852: i64;
  var $i853: i64;
  var $i854: i1;
  var $p855: ref;
  var $i856: i64;
  var $i857: i1;
  var $i858: i32;
  var $i859: i64;
  var $i860: i64;
  var $i861: i1;
  var $p862: ref;
  var $i863: i64;
  var $i864: i1;
  var $i865: i32;
  var $i866: i64;
  var $i867: i64;
  var $i868: i1;
  var $p869: ref;
  var $i870: i64;
  var $i871: i1;
  var $i872: i32;
  var $i873: i64;
  var $i874: i64;
  var $i875: i1;
  var $p876: ref;
  var $i877: i64;
  var $i878: i1;
  var $i879: i32;
  var $i880: i64;
  var $i881: i64;
  var $i882: i1;
  var $p883: ref;
  var $i884: i64;
  var $i885: i1;
  var $i886: i32;
  var $i887: i64;
  var $i888: i64;
  var $i889: i1;
  var $p890: ref;
  var $i891: i64;
  var $i892: i1;
  var $i893: i32;
  var $i894: i64;
  var $i895: i64;
  var $i896: i1;
  var $p897: ref;
  var $i898: i64;
  var $i899: i1;
  var $i900: i32;
  var $i901: i64;
  var $i902: i64;
  var $i903: i1;
  var $p904: ref;
  var $i905: i64;
  var $i906: i1;
  var $i907: i32;
  var $i908: i64;
  var $i909: i64;
  var $i910: i1;
  var $p911: ref;
  var $i912: i64;
  var $i913: i1;
  var $i914: i32;
  var $i915: i64;
  var $i916: i64;
  var $i917: i1;
  var $p918: ref;
  var $i919: i64;
  var $i920: i1;
  var $i921: i32;
  var $i922: i64;
  var $i923: i64;
  var $i924: i1;
  var $p925: ref;
  var $i926: i64;
  var $i927: i1;
  var $i928: i32;
  var $i929: i64;
  var $i930: i64;
  var $i931: i1;
  var $p932: ref;
  var $i933: i64;
  var $i934: i1;
  var $i935: i32;
  var $i936: i64;
  var $i937: i64;
  var $i938: i1;
  var $p939: ref;
  var $i940: i64;
  var $i941: i1;
  var $i942: i32;
  var $i943: i64;
  var $i944: i64;
  var $i945: i1;
  var $p946: ref;
  var $i947: i64;
  var $i948: i1;
  var $i949: i32;
  var $i950: i64;
  var $i951: i64;
  var $i952: i1;
  var $p953: ref;
  var $i954: i64;
  var $i955: i1;
  var $i956: i32;
  var $i957: i64;
  var $i958: i64;
  var $i959: i1;
  var $p960: ref;
  var $i961: i64;
  var $i962: i1;
  var $i963: i32;
  var $i964: i64;
  var $i965: i64;
  var $i966: i1;
  var $p967: ref;
  var $i968: i64;
  var $i969: i1;
  var $i970: i32;
  var $i971: i64;
  var $i972: i64;
  var $i973: i1;
  var $p974: ref;
  var $i975: i64;
  var $i976: i1;
  var $i977: i32;
  var $i978: i64;
  var $i979: i64;
  var $i980: i1;
  var $p981: ref;
  var $i982: i64;
  var $i983: i1;
  var $i984: i32;
  var $i985: i64;
  var $i986: i64;
  var $i987: i1;
  var $p988: ref;
  var $i989: i64;
  var $i990: i1;
  var $i991: i32;
  var $i992: i64;
  var $i993: i64;
  var $i994: i1;
  var $p995: ref;
  var $i996: i64;
  var $i997: i1;
  var $i998: i32;
  var $i999: i64;
  var $i1000: i64;
  var $i1001: i1;
  var $p1002: ref;
  var $i1003: i64;
  var $i1004: i1;
  var $i1005: i32;
  var $i1006: i64;
  var $i1007: i64;
  var $i1008: i1;
  var $p1009: ref;
  var $i1010: i64;
  var $i1011: i1;
  var $i1012: i32;
  var $i1013: i64;
  var $i1014: i64;
  var $i1015: i1;
  var $p1016: ref;
  var $i1017: i64;
  var $i1018: i1;
  var $i1019: i32;
  var $i1020: i64;
  var $i1021: i64;
  var $i1022: i1;
  var $p1023: ref;
  var $i1024: i64;
  var $i1025: i1;
  var $i1026: i32;
  var $i1027: i64;
  var $i1028: i64;
  var $i1029: i1;
  var $p1030: ref;
  var $i1031: i64;
  var $i1032: i1;
  var $i1033: i32;
  var $i1034: i64;
  var $i1035: i64;
  var $i1036: i1;
  var $p1037: ref;
  var $i1038: i64;
  var $i1039: i1;
  var $i1040: i32;
  var $i1041: i64;
  var $i1042: i64;
  var $i1043: i1;
  var $p1044: ref;
  var $i1045: i64;
  var $i1046: i1;
  var $i1047: i32;
  var $i1048: i64;
  var $i1049: i64;
  var $i1050: i1;
  var $p1051: ref;
  var $i1052: i64;
  var $i1053: i1;
  var $i1054: i32;
  var $i1055: i64;
  var $i1056: i64;
  var $i1057: i1;
  var $p1058: ref;
  var $i1059: i64;
  var $i1060: i1;
  var $i1061: i32;
  var $i1062: i64;
  var $i1063: i64;
  var $i1064: i1;
  var $p1065: ref;
  var $i1066: i64;
  var $i1067: i1;
  var $i1068: i32;
  var $i1069: i64;
  var $i1070: i64;
  var $i1071: i1;
  var $p1072: ref;
  var $i1073: i64;
  var $i1074: i1;
  var $i1075: i32;
  var $i1076: i64;
  var $i1077: i64;
  var $i1078: i1;
  var $p1079: ref;
  var $i1080: i64;
  var $i1081: i1;
  var $i1082: i32;
  var $i1083: i64;
  var $i1084: i64;
  var $i1085: i1;
  var $p1086: ref;
  var $i1087: i64;
  var $i1088: i1;
  var $i1089: i32;
  var $i1090: i64;
  var $i1091: i64;
  var $i1092: i1;
  var $p1093: ref;
  var $i1094: i64;
  var $i1095: i1;
  var $i1096: i32;
  var $i1097: i64;
  var $i1098: i64;
  var $i1099: i1;
  var $p1100: ref;
  var $i1101: i64;
  var $i1102: i1;
  var $i1103: i32;
  var $i1104: i64;
  var $i1105: i64;
  var $i1106: i1;
  var $p1107: ref;
  var $i1108: i64;
  var $i1109: i1;
  var $i1110: i32;
  var $i1111: i64;
  var $i1112: i64;
  var $i1113: i1;
  var $p1114: ref;
  var $i1115: i64;
  var $i1116: i1;
  var $i1117: i32;
  var $i1118: i64;
  var $i1119: i64;
  var $i1120: i1;
  var $p1121: ref;
  var $i1122: i64;
  var $i1123: i1;
  var $i1124: i32;
  var $i1125: i64;
  var $i1126: i64;
  var $i1127: i1;
  var $p1128: ref;
  var $i1129: i64;
  var $i1130: i1;
  var $i1131: i32;
  var $i1132: i64;
  var $i1133: i64;
  var $i1134: i1;
  var $p1135: ref;
  var $i1136: i64;
  var $i1137: i1;
  var $i1138: i32;
  var $i1139: i64;
  var $i1140: i64;
  var $i1141: i1;
  var $p1142: ref;
  var $i1143: i64;
  var $i1144: i1;
  var $i1145: i32;
  var $i1146: i64;
  var $i1147: i64;
  var $i1148: i1;
  var $p1149: ref;
  var $i1150: i64;
  var $i1151: i1;
  var $i1152: i32;
  var $i1153: i64;
  var $i1154: i64;
  var $i1155: i1;
  var $p1156: ref;
  var $i1157: i64;
  var $i1158: i1;
  var $i1159: i32;
  var $i1160: i64;
  var $i1161: i64;
  var $i1162: i1;
  var $p1163: ref;
  var $i1164: i64;
  var $i1165: i1;
  var $i1166: i32;
  var $i1167: i64;
  var $i1168: i64;
  var $i1169: i1;
  var $p1170: ref;
  var $i1171: i64;
  var $i1172: i1;
  var $i1173: i32;
  var $i1174: i64;
  var $i1175: i64;
  var $i1176: i1;
  var $p1177: ref;
  var $i1178: i64;
  var $i1179: i1;
  var $i1180: i32;
  var $i1181: i64;
  var $i1182: i64;
  var $i1183: i1;
  var $p1184: ref;
  var $i1185: i64;
  var $i1186: i1;
  var $i1187: i32;
  var $i1188: i64;
  var $i1189: i64;
  var $i1190: i1;
  var $p1191: ref;
  var $i1192: i64;
  var $i1193: i1;
  var $i1194: i32;
  var $i1195: i64;
  var $i1196: i64;
  var $i1197: i1;
  var $p1198: ref;
  var $i1199: i64;
  var $i1200: i1;
  var $i1201: i32;
  var $i1202: i64;
  var $i1203: i64;
  var $i1204: i1;
  var $p1205: ref;
  var $i1206: i64;
  var $i1207: i1;
  var $i1208: i32;
  var $i1209: i64;
  var $i1210: i64;
  var $i1211: i1;
  var $p1212: ref;
  var $i1213: i64;
  var $i1214: i1;
  var $i1215: i32;
  var $i1216: i64;
  var $i1217: i64;
  var $i1218: i1;
  var $p1219: ref;
  var $i1220: i64;
  var $i1221: i1;
  var $i1222: i32;
  var $i1223: i64;
  var $i1224: i64;
  var $i1225: i1;
  var $p1226: ref;
  var $i1227: i64;
  var $i1228: i1;
  var $i1229: i32;
  var $i1230: i64;
  var $i1231: i64;
  var $i1232: i1;
  var $p1233: ref;
  var $i1234: i64;
  var $i1235: i1;
  var $i1236: i32;
  var $i1237: i64;
  var $i1238: i64;
  var $i1239: i1;
  var $p1240: ref;
  var $i1241: i64;
  var $i1242: i1;
  var $i1243: i32;
  var $i1244: i64;
  var $i1245: i64;
  var $i1246: i1;
  var $p1247: ref;
  var $i1248: i64;
  var $i1249: i1;
  var $i1250: i32;
  var $i1251: i64;
  var $i1252: i64;
  var $i1253: i1;
  var $p1254: ref;
  var $i1255: i64;
  var $i1256: i1;
  var $i1257: i32;
  var $i1258: i64;
  var $i1259: i64;
  var $i1260: i1;
  var $p1261: ref;
  var $i1262: i64;
  var $i1263: i1;
  var $i1264: i32;
  var $i1265: i64;
  var $i1266: i64;
  var $i1267: i1;
  var $p1268: ref;
  var $i1269: i64;
  var $i1270: i1;
  var $i1271: i32;
  var $i1272: i64;
  var $i1273: i64;
  var $i1274: i1;
  var $p1275: ref;
  var $i1276: i64;
  var $i1277: i1;
  var $i1278: i32;
  var $i1279: i64;
  var $i1280: i64;
  var $i1281: i1;
  var $p1282: ref;
  var $i1283: i64;
  var $i1284: i1;
  var $i1285: i32;
  var $i1286: i64;
  var $i1287: i64;
  var $i1288: i1;
  var $p1289: ref;
  var $i1290: i64;
  var $i1291: i1;
  var $i1292: i32;
  var $i1293: i64;
  var $i1294: i64;
  var $i1295: i1;
  var $p1296: ref;
  var $i1297: i64;
  var $i1298: i1;
  var $i1299: i32;
  var $i1300: i64;
  var $i1301: i64;
  var $i1302: i1;
  var $p1303: ref;
  var $i1304: i64;
  var $i1305: i1;
  var $i1306: i32;
  var $i1307: i64;
  var $i1308: i64;
  var $i1309: i1;
  var $p1310: ref;
  var $i1311: i64;
  var $i1312: i1;
  var $i1313: i32;
  var $i1314: i64;
  var $i1315: i64;
  var $i1316: i1;
  var $p1317: ref;
  var $i1318: i64;
  var $i1319: i1;
  var $i1320: i32;
  var $i1321: i64;
  var $i1322: i64;
  var $i1323: i1;
  var $p1324: ref;
  var $i1325: i64;
  var $i1326: i1;
  var $i1327: i32;
  var $i1328: i64;
  var $i1329: i64;
  var $i1330: i1;
  var $p1331: ref;
  var $i1332: i64;
  var $i1333: i1;
  var $i1334: i32;
  var $i1335: i64;
  var $i1336: i64;
  var $i1337: i1;
  var $p1338: ref;
  var $i1339: i64;
  var $i1340: i1;
  var $i1341: i32;
  var $i1342: i64;
  var $i1343: i64;
  var $i1344: i1;
  var $p1345: ref;
  var $i1346: i64;
  var $i1347: i1;
  var $i1348: i32;
  var $i1349: i64;
  var $i1350: i64;
  var $i1351: i1;
  var $p1352: ref;
  var $i1353: i64;
  var $i1354: i1;
  var $i1355: i32;
  var $i1356: i64;
  var $i1357: i64;
  var $i1358: i1;
  var $p1359: ref;
  var $i1360: i64;
  var $i1361: i1;
  var $i1362: i32;
  var $i1363: i64;
  var $i1364: i64;
  var $i1365: i1;
  var $p1366: ref;
  var $i1367: i64;
  var $i1368: i1;
  var $i1369: i32;
  var $i1370: i64;
  var $i1371: i64;
  var $i1372: i1;
  var $p1373: ref;
  var $i1374: i64;
  var $i1375: i1;
  var $i1376: i32;
  var $i1377: i64;
  var $i1378: i64;
  var $i1379: i1;
  var $p1380: ref;
  var $i1381: i64;
  var $i1382: i1;
  var $i1383: i32;
  var $i1384: i64;
  var $i1385: i64;
  var $i1386: i1;
  var $p1387: ref;
  var $i1388: i64;
  var $i1389: i1;
  var $i1390: i32;
  var $i1391: i64;
  var $i1392: i64;
  var $i1393: i1;
  var $p1394: ref;
  var $i1395: i64;
  var $i1396: i1;
  var $i1397: i32;
  var $i1398: i64;
  var $i1399: i64;
  var $i1400: i1;
  var $p1401: ref;
  var $i1402: i64;
  var $i1403: i1;
  var $i1404: i32;
  var $i1405: i64;
  var $i1406: i64;
  var $i1407: i1;
  var $p1408: ref;
  var $i1409: i64;
  var $i1410: i1;
  var $i1411: i32;
  var $i1412: i64;
  var $i1413: i64;
  var $i1414: i1;
  var $p1415: ref;
  var $i1416: i64;
  var $i1417: i1;
  var $i1418: i32;
  var $i1419: i64;
  var $i1420: i64;
  var $i1421: i1;
  var $p1422: ref;
  var $i1423: i64;
  var $i1424: i1;
  var $i1425: i32;
  var $i1426: i64;
  var $i1427: i64;
  var $i1428: i1;
  var $p1429: ref;
  var $i1430: i64;
  var $i1431: i1;
  var $i1432: i32;
  var $i1433: i64;
  var $i1434: i64;
  var $i1435: i1;
  var $p1436: ref;
  var $i1437: i64;
  var $i1438: i1;
  var $i1439: i32;
  var $i1440: i64;
  var $i1441: i64;
  var $i1442: i1;
  var $p1443: ref;
  var $i1444: i64;
  var $i1445: i1;
  var $i1446: i32;
  var $i1447: i64;
  var $i1448: i64;
  var $i1449: i1;
  var $p1450: ref;
  var $i1451: i64;
  var $i1452: i1;
  var $i1453: i32;
  var $i1454: i64;
  var $i1455: i64;
  var $i1456: i1;
  var $p1457: ref;
  var $i1458: i64;
  var $i1459: i1;
  var $i1460: i32;
  var $i1461: i64;
  var $i1462: i64;
  var $i1463: i1;
  var $p1464: ref;
  var $i1465: i64;
  var $i1466: i1;
  var $i1467: i32;
  var $i1468: i64;
  var $i1469: i64;
  var $i1470: i1;
  var $p1471: ref;
  var $i1472: i64;
  var $i1473: i1;
  var $i1474: i32;
  var $i1475: i64;
  var $i1476: i64;
  var $i1477: i1;
  var $p1478: ref;
  var $i1479: i64;
  var $i1480: i1;
  var $i1481: i32;
  var $i1482: i64;
  var $i1483: i64;
  var $i1484: i1;
  var $p1485: ref;
  var $i1486: i64;
  var $i1487: i1;
  var $i1488: i32;
  var $i1489: i64;
  var $i1490: i64;
  var $i1491: i1;
  var $p1492: ref;
  var $i1493: i64;
  var $i1494: i1;
  var $i1495: i32;
  var $i1496: i64;
  var $i1497: i64;
  var $i1498: i1;
  var $p1499: ref;
  var $i1500: i64;
  var $i1501: i1;
  var $i1502: i32;
  var $i1503: i64;
  var $i1504: i64;
  var $i1505: i1;
  var $p1506: ref;
  var $i1507: i64;
  var $i1508: i1;
  var $i1509: i32;
  var $i1510: i64;
  var $i1511: i64;
  var $i1512: i1;
  var $p1513: ref;
  var $i1514: i64;
  var $i1515: i1;
  var $i1516: i32;
  var $i1517: i64;
  var $i1518: i64;
  var $i1519: i1;
  var $p1520: ref;
  var $i1521: i64;
  var $i1522: i1;
  var $i1523: i32;
  var $i1524: i64;
  var $i1525: i64;
  var $i1526: i1;
  var $p1527: ref;
  var $i1528: i64;
  var $i1529: i1;
  var $i1530: i32;
  var $i1531: i64;
  var $i1532: i64;
  var $i1533: i1;
  var $p1534: ref;
  var $i1535: i64;
  var $i1536: i1;
  var $i1537: i32;
  var $i1538: i64;
  var $i1539: i64;
  var $i1540: i1;
  var $p1541: ref;
  var $i1542: i64;
  var $i1543: i1;
  var $i1544: i32;
  var $i1545: i64;
  var $i1546: i64;
  var $i1547: i1;
  var $p1548: ref;
  var $i1549: i64;
  var $i1550: i1;
  var $i1551: i32;
  var $i1552: i64;
  var $i1553: i64;
  var $i1554: i1;
  var $p1555: ref;
  var $i1556: i64;
  var $i1557: i1;
  var $i1558: i32;
  var $i1559: i64;
  var $i1560: i64;
  var $i1561: i1;
  var $p1562: ref;
  var $i1563: i64;
  var $i1564: i1;
  var $i1565: i32;
  var $i1566: i64;
  var $i1567: i64;
  var $i1568: i1;
  var $p1569: ref;
  var $i1570: i64;
  var $i1571: i1;
  var $i1572: i32;
  var $i1573: i64;
  var $i1574: i64;
  var $i1575: i1;
  var $p1576: ref;
  var $i1577: i64;
  var $i1578: i1;
  var $i1579: i32;
  var $i1580: i64;
  var $i1581: i64;
  var $i1582: i1;
  var $p1583: ref;
  var $i1584: i64;
  var $i1585: i1;
  var $i1586: i32;
  var $i1587: i64;
  var $i1588: i64;
  var $i1589: i1;
  var $p1590: ref;
  var $i1591: i64;
  var $i1592: i1;
  var $i1593: i32;
  var $i1594: i64;
  var $i1595: i64;
  var $i1596: i1;
  var $p1597: ref;
  var $i1598: i64;
  var $i1599: i1;
  var $i1600: i32;
  var $i1601: i64;
  var $i1602: i64;
  var $i1603: i1;
  var $p1604: ref;
  var $i1605: i64;
  var $i1606: i1;
  var $i1607: i32;
  var $i1608: i64;
  var $i1609: i64;
  var $i1610: i1;
  var $p1611: ref;
  var $i1612: i64;
  var $i1613: i1;
  var $i1614: i32;
  var $i1615: i64;
  var $i1616: i64;
  var $i1617: i1;
  var $p1618: ref;
  var $i1619: i64;
  var $i1620: i1;
  var $i1621: i32;
  var $i1622: i64;
  var $i1623: i64;
  var $i1624: i1;
  var $p1625: ref;
  var $i1626: i64;
  var $i1627: i1;
  var $i1628: i32;
  var $i1629: i64;
  var $i1630: i64;
  var $i1631: i1;
  var $p1632: ref;
  var $i1633: i64;
  var $i1634: i1;
  var $i1635: i32;
  var $i1636: i64;
  var $i1637: i64;
  var $i1638: i1;
  var $p1639: ref;
  var $i1640: i64;
  var $i1641: i1;
  var $i1642: i32;
  var $i1643: i64;
  var $i1644: i64;
  var $i1645: i1;
  var $p1646: ref;
  var $i1647: i64;
  var $i1648: i1;
  var $i1649: i32;
  var $i1650: i64;
  var $i1651: i64;
  var $i1652: i1;
  var $p1653: ref;
  var $i1654: i64;
  var $i1655: i1;
  var $i1656: i32;
  var $i1657: i64;
  var $i1658: i64;
  var $i1659: i1;
  var $p1660: ref;
  var $i1661: i64;
  var $i1662: i1;
  var $i1663: i32;
  var $i1664: i64;
  var $i1665: i64;
  var $i1666: i1;
  var $p1667: ref;
  var $i1668: i64;
  var $i1669: i1;
  var $i1670: i32;
  var $i1671: i64;
  var $i1672: i64;
  var $i1673: i1;
  var $p1674: ref;
  var $i1675: i64;
  var $i1676: i1;
  var $i1677: i32;
  var $i1678: i64;
  var $i1679: i64;
  var $i1680: i1;
  var $p1681: ref;
  var $i1682: i64;
  var $i1683: i1;
  var $i1684: i32;
  var $i1685: i64;
  var $i1686: i64;
  var $i1687: i1;
  var $p1688: ref;
  var $i1689: i64;
  var $i1690: i1;
  var $i1691: i32;
  var $i1692: i64;
  var $i1693: i64;
  var $i1694: i1;
  var $p1695: ref;
  var $i1696: i64;
  var $i1697: i1;
  var $i1698: i32;
  var $i1699: i64;
  var $i1700: i64;
  var $i1701: i1;
  var $p1702: ref;
  var $i1703: i64;
  var $i1704: i1;
  var $i1705: i32;
  var $i1706: i64;
  var $i1707: i64;
  var $i1708: i1;
  var $p1709: ref;
  var $i1710: i64;
  var $i1711: i1;
  var $i1712: i32;
  var $i1713: i64;
  var $i1714: i64;
  var $i1715: i1;
  var $p1716: ref;
  var $i1717: i64;
  var $i1718: i1;
  var $i1719: i32;
  var $i1720: i64;
  var $i1721: i64;
  var $i1722: i1;
  var $p1723: ref;
  var $i1724: i64;
  var $i1725: i1;
  var $i1726: i32;
  var $i1727: i64;
  var $i1728: i64;
  var $i1729: i1;
  var $p1730: ref;
  var $i1731: i64;
  var $i1732: i1;
  var $i1733: i32;
  var $i1734: i64;
  var $i1735: i64;
  var $i1736: i1;
  var $p1737: ref;
  var $i1738: i64;
  var $i1739: i1;
  var $i1740: i32;
  var $i1741: i64;
  var $i1742: i64;
  var $i1743: i1;
  var $p1744: ref;
  var $i1745: i64;
  var $i1746: i1;
  var $i1747: i32;
  var $i1748: i64;
  var $i1749: i64;
  var $i1750: i1;
  var $p1751: ref;
  var $i1752: i64;
  var $i1753: i1;
  var $i1754: i32;
  var $i1755: i64;
  var $i1756: i64;
  var $i1757: i1;
  var $p1758: ref;
  var $i1759: i64;
  var $i1760: i1;
  var $i1761: i32;
  var $i1762: i64;
  var $i1763: i64;
  var $i1764: i1;
  var $p1765: ref;
  var $i1766: i64;
  var $i1767: i1;
  var $i1768: i32;
  var $i1769: i64;
  var $i1770: i64;
  var $i1771: i1;
  var $p1772: ref;
  var $i1773: i64;
  var $i1774: i1;
  var $i1775: i32;
  var $i1776: i64;
  var $i1777: i64;
  var $i1778: i1;
  var $p1779: ref;
  var $i1780: i64;
  var $i1781: i1;
  var $i1782: i32;
  var $i1783: i64;
  var $i1784: i64;
  var $i1785: i1;
  var $p1786: ref;
  var $i1787: i64;
  var $i1788: i1;
  var $i1789: i32;
  var $i1790: i64;
  var $i1791: i64;
  var $i1792: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_13606;

  corral_source_split_13606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2423} comedi_cleanup_board_minors();
    goto SeqInstr_811, SeqInstr_812;

  SeqInstr_812:
    assume assertsPassed;
    goto SeqInstr_813;

  SeqInstr_813:
    goto corral_source_split_13607;

  corral_source_split_13607:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.2, comedi_board_minor_table);
    goto corral_source_split_13609;

  corral_source_split_13609:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_13610;

  corral_source_split_13610:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_13611;

  corral_source_split_13611:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_13612;

  corral_source_split_13612:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_13613;

  corral_source_split_13613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2424} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 2425} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_13614;

  corral_source_split_13614:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13615;

  corral_source_split_13615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p1464 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(1, 8)));
    goto corral_source_split_13619;

  corral_source_split_13619:
    assume {:verifier.code 0} true;
    $i1465 := $p2i.ref.i64($p1464);
    goto corral_source_split_13620;

  corral_source_split_13620:
    assume {:verifier.code 0} true;
    $i1466 := $ne.i64($i1465, 0);
    goto corral_source_split_13621;

  corral_source_split_13621:
    assume {:verifier.code 0} true;
    $i1467 := $zext.i1.i32($i1466);
    goto corral_source_split_13622;

  corral_source_split_13622:
    assume {:verifier.code 0} true;
    $i1468 := $sext.i32.i64($i1467);
    goto corral_source_split_13623;

  corral_source_split_13623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2427} $i1469 := ldv__builtin_expect($i1468, 0);
    goto corral_source_split_13624;

  corral_source_split_13624:
    assume {:verifier.code 0} true;
    $i1470 := $ne.i64($i1469, 0);
    goto corral_source_split_13625;

  corral_source_split_13625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1470} true;
    goto $bb846, $bb847;

  $bb847:
    assume !($i1470 == 1);
    assume {:verifier.code 0} true;
    goto $bb848;

  $bb848:
    assume {:verifier.code 0} true;
    goto $bb849;

  $bb849:
    assume {:verifier.code 0} true;
    $p1471 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(2, 8)));
    goto corral_source_split_15299;

  corral_source_split_15299:
    assume {:verifier.code 0} true;
    $i1472 := $p2i.ref.i64($p1471);
    goto corral_source_split_15300;

  corral_source_split_15300:
    assume {:verifier.code 0} true;
    $i1473 := $ne.i64($i1472, 0);
    goto corral_source_split_15301;

  corral_source_split_15301:
    assume {:verifier.code 0} true;
    $i1474 := $zext.i1.i32($i1473);
    goto corral_source_split_15302;

  corral_source_split_15302:
    assume {:verifier.code 0} true;
    $i1475 := $sext.i32.i64($i1474);
    goto corral_source_split_15303;

  corral_source_split_15303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2642} $i1476 := ldv__builtin_expect($i1475, 0);
    goto corral_source_split_15304;

  corral_source_split_15304:
    assume {:verifier.code 0} true;
    $i1477 := $ne.i64($i1476, 0);
    goto corral_source_split_15305;

  corral_source_split_15305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1477} true;
    goto $bb850, $bb851;

  $bb851:
    assume !($i1477 == 1);
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    $p1478 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(3, 8)));
    goto corral_source_split_15307;

  corral_source_split_15307:
    assume {:verifier.code 0} true;
    $i1479 := $p2i.ref.i64($p1478);
    goto corral_source_split_15308;

  corral_source_split_15308:
    assume {:verifier.code 0} true;
    $i1480 := $ne.i64($i1479, 0);
    goto corral_source_split_15309;

  corral_source_split_15309:
    assume {:verifier.code 0} true;
    $i1481 := $zext.i1.i32($i1480);
    goto corral_source_split_15310;

  corral_source_split_15310:
    assume {:verifier.code 0} true;
    $i1482 := $sext.i32.i64($i1481);
    goto corral_source_split_15311;

  corral_source_split_15311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2643} $i1483 := ldv__builtin_expect($i1482, 0);
    goto corral_source_split_15312;

  corral_source_split_15312:
    assume {:verifier.code 0} true;
    $i1484 := $ne.i64($i1483, 0);
    goto corral_source_split_15313;

  corral_source_split_15313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1484} true;
    goto $bb854, $bb855;

  $bb855:
    assume !($i1484 == 1);
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    goto $bb857;

  $bb857:
    assume {:verifier.code 0} true;
    $p1485 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(4, 8)));
    goto corral_source_split_15315;

  corral_source_split_15315:
    assume {:verifier.code 0} true;
    $i1486 := $p2i.ref.i64($p1485);
    goto corral_source_split_15316;

  corral_source_split_15316:
    assume {:verifier.code 0} true;
    $i1487 := $ne.i64($i1486, 0);
    goto corral_source_split_15317;

  corral_source_split_15317:
    assume {:verifier.code 0} true;
    $i1488 := $zext.i1.i32($i1487);
    goto corral_source_split_15318;

  corral_source_split_15318:
    assume {:verifier.code 0} true;
    $i1489 := $sext.i32.i64($i1488);
    goto corral_source_split_15319;

  corral_source_split_15319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2644} $i1490 := ldv__builtin_expect($i1489, 0);
    goto corral_source_split_15320;

  corral_source_split_15320:
    assume {:verifier.code 0} true;
    $i1491 := $ne.i64($i1490, 0);
    goto corral_source_split_15321;

  corral_source_split_15321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1491} true;
    goto $bb858, $bb859;

  $bb859:
    assume !($i1491 == 1);
    assume {:verifier.code 0} true;
    goto $bb860;

  $bb860:
    assume {:verifier.code 0} true;
    goto $bb861;

  $bb861:
    assume {:verifier.code 0} true;
    $p1492 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(5, 8)));
    goto corral_source_split_15323;

  corral_source_split_15323:
    assume {:verifier.code 0} true;
    $i1493 := $p2i.ref.i64($p1492);
    goto corral_source_split_15324;

  corral_source_split_15324:
    assume {:verifier.code 0} true;
    $i1494 := $ne.i64($i1493, 0);
    goto corral_source_split_15325;

  corral_source_split_15325:
    assume {:verifier.code 0} true;
    $i1495 := $zext.i1.i32($i1494);
    goto corral_source_split_15326;

  corral_source_split_15326:
    assume {:verifier.code 0} true;
    $i1496 := $sext.i32.i64($i1495);
    goto corral_source_split_15327;

  corral_source_split_15327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2645} $i1497 := ldv__builtin_expect($i1496, 0);
    goto corral_source_split_15328;

  corral_source_split_15328:
    assume {:verifier.code 0} true;
    $i1498 := $ne.i64($i1497, 0);
    goto corral_source_split_15329;

  corral_source_split_15329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1498} true;
    goto $bb862, $bb863;

  $bb863:
    assume !($i1498 == 1);
    assume {:verifier.code 0} true;
    goto $bb864;

  $bb864:
    assume {:verifier.code 0} true;
    goto $bb865;

  $bb865:
    assume {:verifier.code 0} true;
    $p1499 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(6, 8)));
    goto corral_source_split_15331;

  corral_source_split_15331:
    assume {:verifier.code 0} true;
    $i1500 := $p2i.ref.i64($p1499);
    goto corral_source_split_15332;

  corral_source_split_15332:
    assume {:verifier.code 0} true;
    $i1501 := $ne.i64($i1500, 0);
    goto corral_source_split_15333;

  corral_source_split_15333:
    assume {:verifier.code 0} true;
    $i1502 := $zext.i1.i32($i1501);
    goto corral_source_split_15334;

  corral_source_split_15334:
    assume {:verifier.code 0} true;
    $i1503 := $sext.i32.i64($i1502);
    goto corral_source_split_15335;

  corral_source_split_15335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2646} $i1504 := ldv__builtin_expect($i1503, 0);
    goto corral_source_split_15336;

  corral_source_split_15336:
    assume {:verifier.code 0} true;
    $i1505 := $ne.i64($i1504, 0);
    goto corral_source_split_15337;

  corral_source_split_15337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1505} true;
    goto $bb866, $bb867;

  $bb867:
    assume !($i1505 == 1);
    assume {:verifier.code 0} true;
    goto $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    $p1506 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(7, 8)));
    goto corral_source_split_15339;

  corral_source_split_15339:
    assume {:verifier.code 0} true;
    $i1507 := $p2i.ref.i64($p1506);
    goto corral_source_split_15340;

  corral_source_split_15340:
    assume {:verifier.code 0} true;
    $i1508 := $ne.i64($i1507, 0);
    goto corral_source_split_15341;

  corral_source_split_15341:
    assume {:verifier.code 0} true;
    $i1509 := $zext.i1.i32($i1508);
    goto corral_source_split_15342;

  corral_source_split_15342:
    assume {:verifier.code 0} true;
    $i1510 := $sext.i32.i64($i1509);
    goto corral_source_split_15343;

  corral_source_split_15343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2647} $i1511 := ldv__builtin_expect($i1510, 0);
    goto corral_source_split_15344;

  corral_source_split_15344:
    assume {:verifier.code 0} true;
    $i1512 := $ne.i64($i1511, 0);
    goto corral_source_split_15345;

  corral_source_split_15345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1512} true;
    goto $bb870, $bb871;

  $bb871:
    assume !($i1512 == 1);
    assume {:verifier.code 0} true;
    goto $bb872;

  $bb872:
    assume {:verifier.code 0} true;
    goto $bb873;

  $bb873:
    assume {:verifier.code 0} true;
    $p1513 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(8, 8)));
    goto corral_source_split_15347;

  corral_source_split_15347:
    assume {:verifier.code 0} true;
    $i1514 := $p2i.ref.i64($p1513);
    goto corral_source_split_15348;

  corral_source_split_15348:
    assume {:verifier.code 0} true;
    $i1515 := $ne.i64($i1514, 0);
    goto corral_source_split_15349;

  corral_source_split_15349:
    assume {:verifier.code 0} true;
    $i1516 := $zext.i1.i32($i1515);
    goto corral_source_split_15350;

  corral_source_split_15350:
    assume {:verifier.code 0} true;
    $i1517 := $sext.i32.i64($i1516);
    goto corral_source_split_15351;

  corral_source_split_15351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2648} $i1518 := ldv__builtin_expect($i1517, 0);
    goto corral_source_split_15352;

  corral_source_split_15352:
    assume {:verifier.code 0} true;
    $i1519 := $ne.i64($i1518, 0);
    goto corral_source_split_15353;

  corral_source_split_15353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1519} true;
    goto $bb874, $bb875;

  $bb875:
    assume !($i1519 == 1);
    assume {:verifier.code 0} true;
    goto $bb876;

  $bb876:
    assume {:verifier.code 0} true;
    goto $bb877;

  $bb877:
    assume {:verifier.code 0} true;
    $p1520 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(9, 8)));
    goto corral_source_split_15355;

  corral_source_split_15355:
    assume {:verifier.code 0} true;
    $i1521 := $p2i.ref.i64($p1520);
    goto corral_source_split_15356;

  corral_source_split_15356:
    assume {:verifier.code 0} true;
    $i1522 := $ne.i64($i1521, 0);
    goto corral_source_split_15357;

  corral_source_split_15357:
    assume {:verifier.code 0} true;
    $i1523 := $zext.i1.i32($i1522);
    goto corral_source_split_15358;

  corral_source_split_15358:
    assume {:verifier.code 0} true;
    $i1524 := $sext.i32.i64($i1523);
    goto corral_source_split_15359;

  corral_source_split_15359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2649} $i1525 := ldv__builtin_expect($i1524, 0);
    goto corral_source_split_15360;

  corral_source_split_15360:
    assume {:verifier.code 0} true;
    $i1526 := $ne.i64($i1525, 0);
    goto corral_source_split_15361;

  corral_source_split_15361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1526} true;
    goto $bb878, $bb879;

  $bb879:
    assume !($i1526 == 1);
    assume {:verifier.code 0} true;
    goto $bb880;

  $bb880:
    assume {:verifier.code 0} true;
    goto $bb881;

  $bb881:
    assume {:verifier.code 0} true;
    $p1527 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(10, 8)));
    goto corral_source_split_15363;

  corral_source_split_15363:
    assume {:verifier.code 0} true;
    $i1528 := $p2i.ref.i64($p1527);
    goto corral_source_split_15364;

  corral_source_split_15364:
    assume {:verifier.code 0} true;
    $i1529 := $ne.i64($i1528, 0);
    goto corral_source_split_15365;

  corral_source_split_15365:
    assume {:verifier.code 0} true;
    $i1530 := $zext.i1.i32($i1529);
    goto corral_source_split_15366;

  corral_source_split_15366:
    assume {:verifier.code 0} true;
    $i1531 := $sext.i32.i64($i1530);
    goto corral_source_split_15367;

  corral_source_split_15367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2650} $i1532 := ldv__builtin_expect($i1531, 0);
    goto corral_source_split_15368;

  corral_source_split_15368:
    assume {:verifier.code 0} true;
    $i1533 := $ne.i64($i1532, 0);
    goto corral_source_split_15369;

  corral_source_split_15369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1533} true;
    goto $bb882, $bb883;

  $bb883:
    assume !($i1533 == 1);
    assume {:verifier.code 0} true;
    goto $bb884;

  $bb884:
    assume {:verifier.code 0} true;
    goto $bb885;

  $bb885:
    assume {:verifier.code 0} true;
    $p1534 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(11, 8)));
    goto corral_source_split_15371;

  corral_source_split_15371:
    assume {:verifier.code 0} true;
    $i1535 := $p2i.ref.i64($p1534);
    goto corral_source_split_15372;

  corral_source_split_15372:
    assume {:verifier.code 0} true;
    $i1536 := $ne.i64($i1535, 0);
    goto corral_source_split_15373;

  corral_source_split_15373:
    assume {:verifier.code 0} true;
    $i1537 := $zext.i1.i32($i1536);
    goto corral_source_split_15374;

  corral_source_split_15374:
    assume {:verifier.code 0} true;
    $i1538 := $sext.i32.i64($i1537);
    goto corral_source_split_15375;

  corral_source_split_15375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2651} $i1539 := ldv__builtin_expect($i1538, 0);
    goto corral_source_split_15376;

  corral_source_split_15376:
    assume {:verifier.code 0} true;
    $i1540 := $ne.i64($i1539, 0);
    goto corral_source_split_15377;

  corral_source_split_15377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1540} true;
    goto $bb886, $bb887;

  $bb887:
    assume !($i1540 == 1);
    assume {:verifier.code 0} true;
    goto $bb888;

  $bb888:
    assume {:verifier.code 0} true;
    goto $bb889;

  $bb889:
    assume {:verifier.code 0} true;
    $p1541 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(12, 8)));
    goto corral_source_split_15379;

  corral_source_split_15379:
    assume {:verifier.code 0} true;
    $i1542 := $p2i.ref.i64($p1541);
    goto corral_source_split_15380;

  corral_source_split_15380:
    assume {:verifier.code 0} true;
    $i1543 := $ne.i64($i1542, 0);
    goto corral_source_split_15381;

  corral_source_split_15381:
    assume {:verifier.code 0} true;
    $i1544 := $zext.i1.i32($i1543);
    goto corral_source_split_15382;

  corral_source_split_15382:
    assume {:verifier.code 0} true;
    $i1545 := $sext.i32.i64($i1544);
    goto corral_source_split_15383;

  corral_source_split_15383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2652} $i1546 := ldv__builtin_expect($i1545, 0);
    goto corral_source_split_15384;

  corral_source_split_15384:
    assume {:verifier.code 0} true;
    $i1547 := $ne.i64($i1546, 0);
    goto corral_source_split_15385;

  corral_source_split_15385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1547} true;
    goto $bb890, $bb891;

  $bb891:
    assume !($i1547 == 1);
    assume {:verifier.code 0} true;
    goto $bb892;

  $bb892:
    assume {:verifier.code 0} true;
    goto $bb893;

  $bb893:
    assume {:verifier.code 0} true;
    $p1548 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(13, 8)));
    goto corral_source_split_15387;

  corral_source_split_15387:
    assume {:verifier.code 0} true;
    $i1549 := $p2i.ref.i64($p1548);
    goto corral_source_split_15388;

  corral_source_split_15388:
    assume {:verifier.code 0} true;
    $i1550 := $ne.i64($i1549, 0);
    goto corral_source_split_15389;

  corral_source_split_15389:
    assume {:verifier.code 0} true;
    $i1551 := $zext.i1.i32($i1550);
    goto corral_source_split_15390;

  corral_source_split_15390:
    assume {:verifier.code 0} true;
    $i1552 := $sext.i32.i64($i1551);
    goto corral_source_split_15391;

  corral_source_split_15391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2653} $i1553 := ldv__builtin_expect($i1552, 0);
    goto corral_source_split_15392;

  corral_source_split_15392:
    assume {:verifier.code 0} true;
    $i1554 := $ne.i64($i1553, 0);
    goto corral_source_split_15393;

  corral_source_split_15393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1554} true;
    goto $bb894, $bb895;

  $bb895:
    assume !($i1554 == 1);
    assume {:verifier.code 0} true;
    goto $bb896;

  $bb896:
    assume {:verifier.code 0} true;
    goto $bb897;

  $bb897:
    assume {:verifier.code 0} true;
    $p1555 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(14, 8)));
    goto corral_source_split_15395;

  corral_source_split_15395:
    assume {:verifier.code 0} true;
    $i1556 := $p2i.ref.i64($p1555);
    goto corral_source_split_15396;

  corral_source_split_15396:
    assume {:verifier.code 0} true;
    $i1557 := $ne.i64($i1556, 0);
    goto corral_source_split_15397;

  corral_source_split_15397:
    assume {:verifier.code 0} true;
    $i1558 := $zext.i1.i32($i1557);
    goto corral_source_split_15398;

  corral_source_split_15398:
    assume {:verifier.code 0} true;
    $i1559 := $sext.i32.i64($i1558);
    goto corral_source_split_15399;

  corral_source_split_15399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2654} $i1560 := ldv__builtin_expect($i1559, 0);
    goto corral_source_split_15400;

  corral_source_split_15400:
    assume {:verifier.code 0} true;
    $i1561 := $ne.i64($i1560, 0);
    goto corral_source_split_15401;

  corral_source_split_15401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1561} true;
    goto $bb898, $bb899;

  $bb899:
    assume !($i1561 == 1);
    assume {:verifier.code 0} true;
    goto $bb900;

  $bb900:
    assume {:verifier.code 0} true;
    goto $bb901;

  $bb901:
    assume {:verifier.code 0} true;
    $p1562 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(15, 8)));
    goto corral_source_split_15403;

  corral_source_split_15403:
    assume {:verifier.code 0} true;
    $i1563 := $p2i.ref.i64($p1562);
    goto corral_source_split_15404;

  corral_source_split_15404:
    assume {:verifier.code 0} true;
    $i1564 := $ne.i64($i1563, 0);
    goto corral_source_split_15405;

  corral_source_split_15405:
    assume {:verifier.code 0} true;
    $i1565 := $zext.i1.i32($i1564);
    goto corral_source_split_15406;

  corral_source_split_15406:
    assume {:verifier.code 0} true;
    $i1566 := $sext.i32.i64($i1565);
    goto corral_source_split_15407;

  corral_source_split_15407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2655} $i1567 := ldv__builtin_expect($i1566, 0);
    goto corral_source_split_15408;

  corral_source_split_15408:
    assume {:verifier.code 0} true;
    $i1568 := $ne.i64($i1567, 0);
    goto corral_source_split_15409;

  corral_source_split_15409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1568} true;
    goto $bb902, $bb903;

  $bb903:
    assume !($i1568 == 1);
    assume {:verifier.code 0} true;
    goto $bb904;

  $bb904:
    assume {:verifier.code 0} true;
    goto $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    $p1569 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(16, 8)));
    goto corral_source_split_15411;

  corral_source_split_15411:
    assume {:verifier.code 0} true;
    $i1570 := $p2i.ref.i64($p1569);
    goto corral_source_split_15412;

  corral_source_split_15412:
    assume {:verifier.code 0} true;
    $i1571 := $ne.i64($i1570, 0);
    goto corral_source_split_15413;

  corral_source_split_15413:
    assume {:verifier.code 0} true;
    $i1572 := $zext.i1.i32($i1571);
    goto corral_source_split_15414;

  corral_source_split_15414:
    assume {:verifier.code 0} true;
    $i1573 := $sext.i32.i64($i1572);
    goto corral_source_split_15415;

  corral_source_split_15415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2656} $i1574 := ldv__builtin_expect($i1573, 0);
    goto corral_source_split_15416;

  corral_source_split_15416:
    assume {:verifier.code 0} true;
    $i1575 := $ne.i64($i1574, 0);
    goto corral_source_split_15417;

  corral_source_split_15417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1575} true;
    goto $bb906, $bb907;

  $bb907:
    assume !($i1575 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    goto $bb909;

  $bb909:
    assume {:verifier.code 0} true;
    $p1576 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(17, 8)));
    goto corral_source_split_15419;

  corral_source_split_15419:
    assume {:verifier.code 0} true;
    $i1577 := $p2i.ref.i64($p1576);
    goto corral_source_split_15420;

  corral_source_split_15420:
    assume {:verifier.code 0} true;
    $i1578 := $ne.i64($i1577, 0);
    goto corral_source_split_15421;

  corral_source_split_15421:
    assume {:verifier.code 0} true;
    $i1579 := $zext.i1.i32($i1578);
    goto corral_source_split_15422;

  corral_source_split_15422:
    assume {:verifier.code 0} true;
    $i1580 := $sext.i32.i64($i1579);
    goto corral_source_split_15423;

  corral_source_split_15423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2657} $i1581 := ldv__builtin_expect($i1580, 0);
    goto corral_source_split_15424;

  corral_source_split_15424:
    assume {:verifier.code 0} true;
    $i1582 := $ne.i64($i1581, 0);
    goto corral_source_split_15425;

  corral_source_split_15425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1582} true;
    goto $bb910, $bb911;

  $bb911:
    assume !($i1582 == 1);
    assume {:verifier.code 0} true;
    goto $bb912;

  $bb912:
    assume {:verifier.code 0} true;
    goto $bb913;

  $bb913:
    assume {:verifier.code 0} true;
    $p1583 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(18, 8)));
    goto corral_source_split_15427;

  corral_source_split_15427:
    assume {:verifier.code 0} true;
    $i1584 := $p2i.ref.i64($p1583);
    goto corral_source_split_15428;

  corral_source_split_15428:
    assume {:verifier.code 0} true;
    $i1585 := $ne.i64($i1584, 0);
    goto corral_source_split_15429;

  corral_source_split_15429:
    assume {:verifier.code 0} true;
    $i1586 := $zext.i1.i32($i1585);
    goto corral_source_split_15430;

  corral_source_split_15430:
    assume {:verifier.code 0} true;
    $i1587 := $sext.i32.i64($i1586);
    goto corral_source_split_15431;

  corral_source_split_15431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2658} $i1588 := ldv__builtin_expect($i1587, 0);
    goto corral_source_split_15432;

  corral_source_split_15432:
    assume {:verifier.code 0} true;
    $i1589 := $ne.i64($i1588, 0);
    goto corral_source_split_15433;

  corral_source_split_15433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1589} true;
    goto $bb914, $bb915;

  $bb915:
    assume !($i1589 == 1);
    assume {:verifier.code 0} true;
    goto $bb916;

  $bb916:
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    $p1590 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(19, 8)));
    goto corral_source_split_15435;

  corral_source_split_15435:
    assume {:verifier.code 0} true;
    $i1591 := $p2i.ref.i64($p1590);
    goto corral_source_split_15436;

  corral_source_split_15436:
    assume {:verifier.code 0} true;
    $i1592 := $ne.i64($i1591, 0);
    goto corral_source_split_15437;

  corral_source_split_15437:
    assume {:verifier.code 0} true;
    $i1593 := $zext.i1.i32($i1592);
    goto corral_source_split_15438;

  corral_source_split_15438:
    assume {:verifier.code 0} true;
    $i1594 := $sext.i32.i64($i1593);
    goto corral_source_split_15439;

  corral_source_split_15439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2659} $i1595 := ldv__builtin_expect($i1594, 0);
    goto corral_source_split_15440;

  corral_source_split_15440:
    assume {:verifier.code 0} true;
    $i1596 := $ne.i64($i1595, 0);
    goto corral_source_split_15441;

  corral_source_split_15441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1596} true;
    goto $bb918, $bb919;

  $bb919:
    assume !($i1596 == 1);
    assume {:verifier.code 0} true;
    goto $bb920;

  $bb920:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    $p1597 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(20, 8)));
    goto corral_source_split_15443;

  corral_source_split_15443:
    assume {:verifier.code 0} true;
    $i1598 := $p2i.ref.i64($p1597);
    goto corral_source_split_15444;

  corral_source_split_15444:
    assume {:verifier.code 0} true;
    $i1599 := $ne.i64($i1598, 0);
    goto corral_source_split_15445;

  corral_source_split_15445:
    assume {:verifier.code 0} true;
    $i1600 := $zext.i1.i32($i1599);
    goto corral_source_split_15446;

  corral_source_split_15446:
    assume {:verifier.code 0} true;
    $i1601 := $sext.i32.i64($i1600);
    goto corral_source_split_15447;

  corral_source_split_15447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2660} $i1602 := ldv__builtin_expect($i1601, 0);
    goto corral_source_split_15448;

  corral_source_split_15448:
    assume {:verifier.code 0} true;
    $i1603 := $ne.i64($i1602, 0);
    goto corral_source_split_15449;

  corral_source_split_15449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1603} true;
    goto $bb922, $bb923;

  $bb923:
    assume !($i1603 == 1);
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    goto $bb925;

  $bb925:
    assume {:verifier.code 0} true;
    $p1604 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(21, 8)));
    goto corral_source_split_15451;

  corral_source_split_15451:
    assume {:verifier.code 0} true;
    $i1605 := $p2i.ref.i64($p1604);
    goto corral_source_split_15452;

  corral_source_split_15452:
    assume {:verifier.code 0} true;
    $i1606 := $ne.i64($i1605, 0);
    goto corral_source_split_15453;

  corral_source_split_15453:
    assume {:verifier.code 0} true;
    $i1607 := $zext.i1.i32($i1606);
    goto corral_source_split_15454;

  corral_source_split_15454:
    assume {:verifier.code 0} true;
    $i1608 := $sext.i32.i64($i1607);
    goto corral_source_split_15455;

  corral_source_split_15455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2661} $i1609 := ldv__builtin_expect($i1608, 0);
    goto corral_source_split_15456;

  corral_source_split_15456:
    assume {:verifier.code 0} true;
    $i1610 := $ne.i64($i1609, 0);
    goto corral_source_split_15457;

  corral_source_split_15457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1610} true;
    goto $bb926, $bb927;

  $bb927:
    assume !($i1610 == 1);
    assume {:verifier.code 0} true;
    goto $bb928;

  $bb928:
    assume {:verifier.code 0} true;
    goto $bb929;

  $bb929:
    assume {:verifier.code 0} true;
    $p1611 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(22, 8)));
    goto corral_source_split_15459;

  corral_source_split_15459:
    assume {:verifier.code 0} true;
    $i1612 := $p2i.ref.i64($p1611);
    goto corral_source_split_15460;

  corral_source_split_15460:
    assume {:verifier.code 0} true;
    $i1613 := $ne.i64($i1612, 0);
    goto corral_source_split_15461;

  corral_source_split_15461:
    assume {:verifier.code 0} true;
    $i1614 := $zext.i1.i32($i1613);
    goto corral_source_split_15462;

  corral_source_split_15462:
    assume {:verifier.code 0} true;
    $i1615 := $sext.i32.i64($i1614);
    goto corral_source_split_15463;

  corral_source_split_15463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2662} $i1616 := ldv__builtin_expect($i1615, 0);
    goto corral_source_split_15464;

  corral_source_split_15464:
    assume {:verifier.code 0} true;
    $i1617 := $ne.i64($i1616, 0);
    goto corral_source_split_15465;

  corral_source_split_15465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1617} true;
    goto $bb930, $bb931;

  $bb931:
    assume !($i1617 == 1);
    assume {:verifier.code 0} true;
    goto $bb932;

  $bb932:
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    $p1618 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(23, 8)));
    goto corral_source_split_15467;

  corral_source_split_15467:
    assume {:verifier.code 0} true;
    $i1619 := $p2i.ref.i64($p1618);
    goto corral_source_split_15468;

  corral_source_split_15468:
    assume {:verifier.code 0} true;
    $i1620 := $ne.i64($i1619, 0);
    goto corral_source_split_15469;

  corral_source_split_15469:
    assume {:verifier.code 0} true;
    $i1621 := $zext.i1.i32($i1620);
    goto corral_source_split_15470;

  corral_source_split_15470:
    assume {:verifier.code 0} true;
    $i1622 := $sext.i32.i64($i1621);
    goto corral_source_split_15471;

  corral_source_split_15471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2663} $i1623 := ldv__builtin_expect($i1622, 0);
    goto corral_source_split_15472;

  corral_source_split_15472:
    assume {:verifier.code 0} true;
    $i1624 := $ne.i64($i1623, 0);
    goto corral_source_split_15473;

  corral_source_split_15473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1624} true;
    goto $bb934, $bb935;

  $bb935:
    assume !($i1624 == 1);
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    goto $bb937;

  $bb937:
    assume {:verifier.code 0} true;
    $p1625 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(24, 8)));
    goto corral_source_split_15475;

  corral_source_split_15475:
    assume {:verifier.code 0} true;
    $i1626 := $p2i.ref.i64($p1625);
    goto corral_source_split_15476;

  corral_source_split_15476:
    assume {:verifier.code 0} true;
    $i1627 := $ne.i64($i1626, 0);
    goto corral_source_split_15477;

  corral_source_split_15477:
    assume {:verifier.code 0} true;
    $i1628 := $zext.i1.i32($i1627);
    goto corral_source_split_15478;

  corral_source_split_15478:
    assume {:verifier.code 0} true;
    $i1629 := $sext.i32.i64($i1628);
    goto corral_source_split_15479;

  corral_source_split_15479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2664} $i1630 := ldv__builtin_expect($i1629, 0);
    goto corral_source_split_15480;

  corral_source_split_15480:
    assume {:verifier.code 0} true;
    $i1631 := $ne.i64($i1630, 0);
    goto corral_source_split_15481;

  corral_source_split_15481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1631} true;
    goto $bb938, $bb939;

  $bb939:
    assume !($i1631 == 1);
    assume {:verifier.code 0} true;
    goto $bb940;

  $bb940:
    assume {:verifier.code 0} true;
    goto $bb941;

  $bb941:
    assume {:verifier.code 0} true;
    $p1632 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(25, 8)));
    goto corral_source_split_15483;

  corral_source_split_15483:
    assume {:verifier.code 0} true;
    $i1633 := $p2i.ref.i64($p1632);
    goto corral_source_split_15484;

  corral_source_split_15484:
    assume {:verifier.code 0} true;
    $i1634 := $ne.i64($i1633, 0);
    goto corral_source_split_15485;

  corral_source_split_15485:
    assume {:verifier.code 0} true;
    $i1635 := $zext.i1.i32($i1634);
    goto corral_source_split_15486;

  corral_source_split_15486:
    assume {:verifier.code 0} true;
    $i1636 := $sext.i32.i64($i1635);
    goto corral_source_split_15487;

  corral_source_split_15487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2665} $i1637 := ldv__builtin_expect($i1636, 0);
    goto corral_source_split_15488;

  corral_source_split_15488:
    assume {:verifier.code 0} true;
    $i1638 := $ne.i64($i1637, 0);
    goto corral_source_split_15489;

  corral_source_split_15489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1638} true;
    goto $bb942, $bb943;

  $bb943:
    assume !($i1638 == 1);
    assume {:verifier.code 0} true;
    goto $bb944;

  $bb944:
    assume {:verifier.code 0} true;
    goto $bb945;

  $bb945:
    assume {:verifier.code 0} true;
    $p1639 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(26, 8)));
    goto corral_source_split_15491;

  corral_source_split_15491:
    assume {:verifier.code 0} true;
    $i1640 := $p2i.ref.i64($p1639);
    goto corral_source_split_15492;

  corral_source_split_15492:
    assume {:verifier.code 0} true;
    $i1641 := $ne.i64($i1640, 0);
    goto corral_source_split_15493;

  corral_source_split_15493:
    assume {:verifier.code 0} true;
    $i1642 := $zext.i1.i32($i1641);
    goto corral_source_split_15494;

  corral_source_split_15494:
    assume {:verifier.code 0} true;
    $i1643 := $sext.i32.i64($i1642);
    goto corral_source_split_15495;

  corral_source_split_15495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2666} $i1644 := ldv__builtin_expect($i1643, 0);
    goto corral_source_split_15496;

  corral_source_split_15496:
    assume {:verifier.code 0} true;
    $i1645 := $ne.i64($i1644, 0);
    goto corral_source_split_15497;

  corral_source_split_15497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1645} true;
    goto $bb946, $bb947;

  $bb947:
    assume !($i1645 == 1);
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    goto $bb949;

  $bb949:
    assume {:verifier.code 0} true;
    $p1646 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(27, 8)));
    goto corral_source_split_15499;

  corral_source_split_15499:
    assume {:verifier.code 0} true;
    $i1647 := $p2i.ref.i64($p1646);
    goto corral_source_split_15500;

  corral_source_split_15500:
    assume {:verifier.code 0} true;
    $i1648 := $ne.i64($i1647, 0);
    goto corral_source_split_15501;

  corral_source_split_15501:
    assume {:verifier.code 0} true;
    $i1649 := $zext.i1.i32($i1648);
    goto corral_source_split_15502;

  corral_source_split_15502:
    assume {:verifier.code 0} true;
    $i1650 := $sext.i32.i64($i1649);
    goto corral_source_split_15503;

  corral_source_split_15503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2667} $i1651 := ldv__builtin_expect($i1650, 0);
    goto corral_source_split_15504;

  corral_source_split_15504:
    assume {:verifier.code 0} true;
    $i1652 := $ne.i64($i1651, 0);
    goto corral_source_split_15505;

  corral_source_split_15505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1652} true;
    goto $bb950, $bb951;

  $bb951:
    assume !($i1652 == 1);
    assume {:verifier.code 0} true;
    goto $bb952;

  $bb952:
    assume {:verifier.code 0} true;
    goto $bb953;

  $bb953:
    assume {:verifier.code 0} true;
    $p1653 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(28, 8)));
    goto corral_source_split_15507;

  corral_source_split_15507:
    assume {:verifier.code 0} true;
    $i1654 := $p2i.ref.i64($p1653);
    goto corral_source_split_15508;

  corral_source_split_15508:
    assume {:verifier.code 0} true;
    $i1655 := $ne.i64($i1654, 0);
    goto corral_source_split_15509;

  corral_source_split_15509:
    assume {:verifier.code 0} true;
    $i1656 := $zext.i1.i32($i1655);
    goto corral_source_split_15510;

  corral_source_split_15510:
    assume {:verifier.code 0} true;
    $i1657 := $sext.i32.i64($i1656);
    goto corral_source_split_15511;

  corral_source_split_15511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2668} $i1658 := ldv__builtin_expect($i1657, 0);
    goto corral_source_split_15512;

  corral_source_split_15512:
    assume {:verifier.code 0} true;
    $i1659 := $ne.i64($i1658, 0);
    goto corral_source_split_15513;

  corral_source_split_15513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1659} true;
    goto $bb954, $bb955;

  $bb955:
    assume !($i1659 == 1);
    assume {:verifier.code 0} true;
    goto $bb956;

  $bb956:
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    $p1660 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(29, 8)));
    goto corral_source_split_15515;

  corral_source_split_15515:
    assume {:verifier.code 0} true;
    $i1661 := $p2i.ref.i64($p1660);
    goto corral_source_split_15516;

  corral_source_split_15516:
    assume {:verifier.code 0} true;
    $i1662 := $ne.i64($i1661, 0);
    goto corral_source_split_15517;

  corral_source_split_15517:
    assume {:verifier.code 0} true;
    $i1663 := $zext.i1.i32($i1662);
    goto corral_source_split_15518;

  corral_source_split_15518:
    assume {:verifier.code 0} true;
    $i1664 := $sext.i32.i64($i1663);
    goto corral_source_split_15519;

  corral_source_split_15519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2669} $i1665 := ldv__builtin_expect($i1664, 0);
    goto corral_source_split_15520;

  corral_source_split_15520:
    assume {:verifier.code 0} true;
    $i1666 := $ne.i64($i1665, 0);
    goto corral_source_split_15521;

  corral_source_split_15521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1666} true;
    goto $bb958, $bb959;

  $bb959:
    assume !($i1666 == 1);
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    goto $bb961;

  $bb961:
    assume {:verifier.code 0} true;
    $p1667 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(30, 8)));
    goto corral_source_split_15523;

  corral_source_split_15523:
    assume {:verifier.code 0} true;
    $i1668 := $p2i.ref.i64($p1667);
    goto corral_source_split_15524;

  corral_source_split_15524:
    assume {:verifier.code 0} true;
    $i1669 := $ne.i64($i1668, 0);
    goto corral_source_split_15525;

  corral_source_split_15525:
    assume {:verifier.code 0} true;
    $i1670 := $zext.i1.i32($i1669);
    goto corral_source_split_15526;

  corral_source_split_15526:
    assume {:verifier.code 0} true;
    $i1671 := $sext.i32.i64($i1670);
    goto corral_source_split_15527;

  corral_source_split_15527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2670} $i1672 := ldv__builtin_expect($i1671, 0);
    goto corral_source_split_15528;

  corral_source_split_15528:
    assume {:verifier.code 0} true;
    $i1673 := $ne.i64($i1672, 0);
    goto corral_source_split_15529;

  corral_source_split_15529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1673} true;
    goto $bb962, $bb963;

  $bb963:
    assume !($i1673 == 1);
    assume {:verifier.code 0} true;
    goto $bb964;

  $bb964:
    assume {:verifier.code 0} true;
    goto $bb965;

  $bb965:
    assume {:verifier.code 0} true;
    $p1674 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(31, 8)));
    goto corral_source_split_15531;

  corral_source_split_15531:
    assume {:verifier.code 0} true;
    $i1675 := $p2i.ref.i64($p1674);
    goto corral_source_split_15532;

  corral_source_split_15532:
    assume {:verifier.code 0} true;
    $i1676 := $ne.i64($i1675, 0);
    goto corral_source_split_15533;

  corral_source_split_15533:
    assume {:verifier.code 0} true;
    $i1677 := $zext.i1.i32($i1676);
    goto corral_source_split_15534;

  corral_source_split_15534:
    assume {:verifier.code 0} true;
    $i1678 := $sext.i32.i64($i1677);
    goto corral_source_split_15535;

  corral_source_split_15535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2671} $i1679 := ldv__builtin_expect($i1678, 0);
    goto corral_source_split_15536;

  corral_source_split_15536:
    assume {:verifier.code 0} true;
    $i1680 := $ne.i64($i1679, 0);
    goto corral_source_split_15537;

  corral_source_split_15537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1680} true;
    goto $bb966, $bb967;

  $bb967:
    assume !($i1680 == 1);
    assume {:verifier.code 0} true;
    goto $bb968;

  $bb968:
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    $p1681 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(32, 8)));
    goto corral_source_split_15539;

  corral_source_split_15539:
    assume {:verifier.code 0} true;
    $i1682 := $p2i.ref.i64($p1681);
    goto corral_source_split_15540;

  corral_source_split_15540:
    assume {:verifier.code 0} true;
    $i1683 := $ne.i64($i1682, 0);
    goto corral_source_split_15541;

  corral_source_split_15541:
    assume {:verifier.code 0} true;
    $i1684 := $zext.i1.i32($i1683);
    goto corral_source_split_15542;

  corral_source_split_15542:
    assume {:verifier.code 0} true;
    $i1685 := $sext.i32.i64($i1684);
    goto corral_source_split_15543;

  corral_source_split_15543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2672} $i1686 := ldv__builtin_expect($i1685, 0);
    goto corral_source_split_15544;

  corral_source_split_15544:
    assume {:verifier.code 0} true;
    $i1687 := $ne.i64($i1686, 0);
    goto corral_source_split_15545;

  corral_source_split_15545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1687} true;
    goto $bb970, $bb971;

  $bb971:
    assume !($i1687 == 1);
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    goto $bb973;

  $bb973:
    assume {:verifier.code 0} true;
    $p1688 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(33, 8)));
    goto corral_source_split_15547;

  corral_source_split_15547:
    assume {:verifier.code 0} true;
    $i1689 := $p2i.ref.i64($p1688);
    goto corral_source_split_15548;

  corral_source_split_15548:
    assume {:verifier.code 0} true;
    $i1690 := $ne.i64($i1689, 0);
    goto corral_source_split_15549;

  corral_source_split_15549:
    assume {:verifier.code 0} true;
    $i1691 := $zext.i1.i32($i1690);
    goto corral_source_split_15550;

  corral_source_split_15550:
    assume {:verifier.code 0} true;
    $i1692 := $sext.i32.i64($i1691);
    goto corral_source_split_15551;

  corral_source_split_15551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2673} $i1693 := ldv__builtin_expect($i1692, 0);
    goto corral_source_split_15552;

  corral_source_split_15552:
    assume {:verifier.code 0} true;
    $i1694 := $ne.i64($i1693, 0);
    goto corral_source_split_15553;

  corral_source_split_15553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1694} true;
    goto $bb974, $bb975;

  $bb975:
    assume !($i1694 == 1);
    assume {:verifier.code 0} true;
    goto $bb976;

  $bb976:
    assume {:verifier.code 0} true;
    goto $bb977;

  $bb977:
    assume {:verifier.code 0} true;
    $p1695 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(34, 8)));
    goto corral_source_split_15555;

  corral_source_split_15555:
    assume {:verifier.code 0} true;
    $i1696 := $p2i.ref.i64($p1695);
    goto corral_source_split_15556;

  corral_source_split_15556:
    assume {:verifier.code 0} true;
    $i1697 := $ne.i64($i1696, 0);
    goto corral_source_split_15557;

  corral_source_split_15557:
    assume {:verifier.code 0} true;
    $i1698 := $zext.i1.i32($i1697);
    goto corral_source_split_15558;

  corral_source_split_15558:
    assume {:verifier.code 0} true;
    $i1699 := $sext.i32.i64($i1698);
    goto corral_source_split_15559;

  corral_source_split_15559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2674} $i1700 := ldv__builtin_expect($i1699, 0);
    goto corral_source_split_15560;

  corral_source_split_15560:
    assume {:verifier.code 0} true;
    $i1701 := $ne.i64($i1700, 0);
    goto corral_source_split_15561;

  corral_source_split_15561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1701} true;
    goto $bb978, $bb979;

  $bb979:
    assume !($i1701 == 1);
    assume {:verifier.code 0} true;
    goto $bb980;

  $bb980:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    $p1702 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(35, 8)));
    goto corral_source_split_15563;

  corral_source_split_15563:
    assume {:verifier.code 0} true;
    $i1703 := $p2i.ref.i64($p1702);
    goto corral_source_split_15564;

  corral_source_split_15564:
    assume {:verifier.code 0} true;
    $i1704 := $ne.i64($i1703, 0);
    goto corral_source_split_15565;

  corral_source_split_15565:
    assume {:verifier.code 0} true;
    $i1705 := $zext.i1.i32($i1704);
    goto corral_source_split_15566;

  corral_source_split_15566:
    assume {:verifier.code 0} true;
    $i1706 := $sext.i32.i64($i1705);
    goto corral_source_split_15567;

  corral_source_split_15567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2675} $i1707 := ldv__builtin_expect($i1706, 0);
    goto corral_source_split_15568;

  corral_source_split_15568:
    assume {:verifier.code 0} true;
    $i1708 := $ne.i64($i1707, 0);
    goto corral_source_split_15569;

  corral_source_split_15569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1708} true;
    goto $bb982, $bb983;

  $bb983:
    assume !($i1708 == 1);
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    goto $bb985;

  $bb985:
    assume {:verifier.code 0} true;
    $p1709 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(36, 8)));
    goto corral_source_split_15571;

  corral_source_split_15571:
    assume {:verifier.code 0} true;
    $i1710 := $p2i.ref.i64($p1709);
    goto corral_source_split_15572;

  corral_source_split_15572:
    assume {:verifier.code 0} true;
    $i1711 := $ne.i64($i1710, 0);
    goto corral_source_split_15573;

  corral_source_split_15573:
    assume {:verifier.code 0} true;
    $i1712 := $zext.i1.i32($i1711);
    goto corral_source_split_15574;

  corral_source_split_15574:
    assume {:verifier.code 0} true;
    $i1713 := $sext.i32.i64($i1712);
    goto corral_source_split_15575;

  corral_source_split_15575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2676} $i1714 := ldv__builtin_expect($i1713, 0);
    goto corral_source_split_15576;

  corral_source_split_15576:
    assume {:verifier.code 0} true;
    $i1715 := $ne.i64($i1714, 0);
    goto corral_source_split_15577;

  corral_source_split_15577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1715} true;
    goto $bb986, $bb987;

  $bb987:
    assume !($i1715 == 1);
    assume {:verifier.code 0} true;
    goto $bb988;

  $bb988:
    assume {:verifier.code 0} true;
    goto $bb989;

  $bb989:
    assume {:verifier.code 0} true;
    $p1716 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(37, 8)));
    goto corral_source_split_15579;

  corral_source_split_15579:
    assume {:verifier.code 0} true;
    $i1717 := $p2i.ref.i64($p1716);
    goto corral_source_split_15580;

  corral_source_split_15580:
    assume {:verifier.code 0} true;
    $i1718 := $ne.i64($i1717, 0);
    goto corral_source_split_15581;

  corral_source_split_15581:
    assume {:verifier.code 0} true;
    $i1719 := $zext.i1.i32($i1718);
    goto corral_source_split_15582;

  corral_source_split_15582:
    assume {:verifier.code 0} true;
    $i1720 := $sext.i32.i64($i1719);
    goto corral_source_split_15583;

  corral_source_split_15583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2677} $i1721 := ldv__builtin_expect($i1720, 0);
    goto corral_source_split_15584;

  corral_source_split_15584:
    assume {:verifier.code 0} true;
    $i1722 := $ne.i64($i1721, 0);
    goto corral_source_split_15585;

  corral_source_split_15585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1722} true;
    goto $bb990, $bb991;

  $bb991:
    assume !($i1722 == 1);
    assume {:verifier.code 0} true;
    goto $bb992;

  $bb992:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    $p1723 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(38, 8)));
    goto corral_source_split_15587;

  corral_source_split_15587:
    assume {:verifier.code 0} true;
    $i1724 := $p2i.ref.i64($p1723);
    goto corral_source_split_15588;

  corral_source_split_15588:
    assume {:verifier.code 0} true;
    $i1725 := $ne.i64($i1724, 0);
    goto corral_source_split_15589;

  corral_source_split_15589:
    assume {:verifier.code 0} true;
    $i1726 := $zext.i1.i32($i1725);
    goto corral_source_split_15590;

  corral_source_split_15590:
    assume {:verifier.code 0} true;
    $i1727 := $sext.i32.i64($i1726);
    goto corral_source_split_15591;

  corral_source_split_15591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2678} $i1728 := ldv__builtin_expect($i1727, 0);
    goto corral_source_split_15592;

  corral_source_split_15592:
    assume {:verifier.code 0} true;
    $i1729 := $ne.i64($i1728, 0);
    goto corral_source_split_15593;

  corral_source_split_15593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1729} true;
    goto $bb994, $bb995;

  $bb995:
    assume !($i1729 == 1);
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    goto $bb997;

  $bb997:
    assume {:verifier.code 0} true;
    $p1730 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(39, 8)));
    goto corral_source_split_15595;

  corral_source_split_15595:
    assume {:verifier.code 0} true;
    $i1731 := $p2i.ref.i64($p1730);
    goto corral_source_split_15596;

  corral_source_split_15596:
    assume {:verifier.code 0} true;
    $i1732 := $ne.i64($i1731, 0);
    goto corral_source_split_15597;

  corral_source_split_15597:
    assume {:verifier.code 0} true;
    $i1733 := $zext.i1.i32($i1732);
    goto corral_source_split_15598;

  corral_source_split_15598:
    assume {:verifier.code 0} true;
    $i1734 := $sext.i32.i64($i1733);
    goto corral_source_split_15599;

  corral_source_split_15599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2679} $i1735 := ldv__builtin_expect($i1734, 0);
    goto corral_source_split_15600;

  corral_source_split_15600:
    assume {:verifier.code 0} true;
    $i1736 := $ne.i64($i1735, 0);
    goto corral_source_split_15601;

  corral_source_split_15601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1736} true;
    goto $bb998, $bb999;

  $bb999:
    assume !($i1736 == 1);
    assume {:verifier.code 0} true;
    goto $bb1000;

  $bb1000:
    assume {:verifier.code 0} true;
    goto $bb1001;

  $bb1001:
    assume {:verifier.code 0} true;
    $p1737 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(40, 8)));
    goto corral_source_split_15603;

  corral_source_split_15603:
    assume {:verifier.code 0} true;
    $i1738 := $p2i.ref.i64($p1737);
    goto corral_source_split_15604;

  corral_source_split_15604:
    assume {:verifier.code 0} true;
    $i1739 := $ne.i64($i1738, 0);
    goto corral_source_split_15605;

  corral_source_split_15605:
    assume {:verifier.code 0} true;
    $i1740 := $zext.i1.i32($i1739);
    goto corral_source_split_15606;

  corral_source_split_15606:
    assume {:verifier.code 0} true;
    $i1741 := $sext.i32.i64($i1740);
    goto corral_source_split_15607;

  corral_source_split_15607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2680} $i1742 := ldv__builtin_expect($i1741, 0);
    goto corral_source_split_15608;

  corral_source_split_15608:
    assume {:verifier.code 0} true;
    $i1743 := $ne.i64($i1742, 0);
    goto corral_source_split_15609;

  corral_source_split_15609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1743} true;
    goto $bb1002, $bb1003;

  $bb1003:
    assume !($i1743 == 1);
    assume {:verifier.code 0} true;
    goto $bb1004;

  $bb1004:
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    $p1744 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(41, 8)));
    goto corral_source_split_15611;

  corral_source_split_15611:
    assume {:verifier.code 0} true;
    $i1745 := $p2i.ref.i64($p1744);
    goto corral_source_split_15612;

  corral_source_split_15612:
    assume {:verifier.code 0} true;
    $i1746 := $ne.i64($i1745, 0);
    goto corral_source_split_15613;

  corral_source_split_15613:
    assume {:verifier.code 0} true;
    $i1747 := $zext.i1.i32($i1746);
    goto corral_source_split_15614;

  corral_source_split_15614:
    assume {:verifier.code 0} true;
    $i1748 := $sext.i32.i64($i1747);
    goto corral_source_split_15615;

  corral_source_split_15615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2681} $i1749 := ldv__builtin_expect($i1748, 0);
    goto corral_source_split_15616;

  corral_source_split_15616:
    assume {:verifier.code 0} true;
    $i1750 := $ne.i64($i1749, 0);
    goto corral_source_split_15617;

  corral_source_split_15617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1750} true;
    goto $bb1006, $bb1007;

  $bb1007:
    assume !($i1750 == 1);
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    goto $bb1009;

  $bb1009:
    assume {:verifier.code 0} true;
    $p1751 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(42, 8)));
    goto corral_source_split_15619;

  corral_source_split_15619:
    assume {:verifier.code 0} true;
    $i1752 := $p2i.ref.i64($p1751);
    goto corral_source_split_15620;

  corral_source_split_15620:
    assume {:verifier.code 0} true;
    $i1753 := $ne.i64($i1752, 0);
    goto corral_source_split_15621;

  corral_source_split_15621:
    assume {:verifier.code 0} true;
    $i1754 := $zext.i1.i32($i1753);
    goto corral_source_split_15622;

  corral_source_split_15622:
    assume {:verifier.code 0} true;
    $i1755 := $sext.i32.i64($i1754);
    goto corral_source_split_15623;

  corral_source_split_15623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2682} $i1756 := ldv__builtin_expect($i1755, 0);
    goto corral_source_split_15624;

  corral_source_split_15624:
    assume {:verifier.code 0} true;
    $i1757 := $ne.i64($i1756, 0);
    goto corral_source_split_15625;

  corral_source_split_15625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1757} true;
    goto $bb1010, $bb1011;

  $bb1011:
    assume !($i1757 == 1);
    assume {:verifier.code 0} true;
    goto $bb1012;

  $bb1012:
    assume {:verifier.code 0} true;
    goto $bb1013;

  $bb1013:
    assume {:verifier.code 0} true;
    $p1758 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(43, 8)));
    goto corral_source_split_15627;

  corral_source_split_15627:
    assume {:verifier.code 0} true;
    $i1759 := $p2i.ref.i64($p1758);
    goto corral_source_split_15628;

  corral_source_split_15628:
    assume {:verifier.code 0} true;
    $i1760 := $ne.i64($i1759, 0);
    goto corral_source_split_15629;

  corral_source_split_15629:
    assume {:verifier.code 0} true;
    $i1761 := $zext.i1.i32($i1760);
    goto corral_source_split_15630;

  corral_source_split_15630:
    assume {:verifier.code 0} true;
    $i1762 := $sext.i32.i64($i1761);
    goto corral_source_split_15631;

  corral_source_split_15631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2683} $i1763 := ldv__builtin_expect($i1762, 0);
    goto corral_source_split_15632;

  corral_source_split_15632:
    assume {:verifier.code 0} true;
    $i1764 := $ne.i64($i1763, 0);
    goto corral_source_split_15633;

  corral_source_split_15633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1764} true;
    goto $bb1014, $bb1015;

  $bb1015:
    assume !($i1764 == 1);
    assume {:verifier.code 0} true;
    goto $bb1016;

  $bb1016:
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    $p1765 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(44, 8)));
    goto corral_source_split_15635;

  corral_source_split_15635:
    assume {:verifier.code 0} true;
    $i1766 := $p2i.ref.i64($p1765);
    goto corral_source_split_15636;

  corral_source_split_15636:
    assume {:verifier.code 0} true;
    $i1767 := $ne.i64($i1766, 0);
    goto corral_source_split_15637;

  corral_source_split_15637:
    assume {:verifier.code 0} true;
    $i1768 := $zext.i1.i32($i1767);
    goto corral_source_split_15638;

  corral_source_split_15638:
    assume {:verifier.code 0} true;
    $i1769 := $sext.i32.i64($i1768);
    goto corral_source_split_15639;

  corral_source_split_15639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2684} $i1770 := ldv__builtin_expect($i1769, 0);
    goto corral_source_split_15640;

  corral_source_split_15640:
    assume {:verifier.code 0} true;
    $i1771 := $ne.i64($i1770, 0);
    goto corral_source_split_15641;

  corral_source_split_15641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1771} true;
    goto $bb1018, $bb1019;

  $bb1019:
    assume !($i1771 == 1);
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    goto $bb1021;

  $bb1021:
    assume {:verifier.code 0} true;
    $p1772 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(45, 8)));
    goto corral_source_split_15643;

  corral_source_split_15643:
    assume {:verifier.code 0} true;
    $i1773 := $p2i.ref.i64($p1772);
    goto corral_source_split_15644;

  corral_source_split_15644:
    assume {:verifier.code 0} true;
    $i1774 := $ne.i64($i1773, 0);
    goto corral_source_split_15645;

  corral_source_split_15645:
    assume {:verifier.code 0} true;
    $i1775 := $zext.i1.i32($i1774);
    goto corral_source_split_15646;

  corral_source_split_15646:
    assume {:verifier.code 0} true;
    $i1776 := $sext.i32.i64($i1775);
    goto corral_source_split_15647;

  corral_source_split_15647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2685} $i1777 := ldv__builtin_expect($i1776, 0);
    goto corral_source_split_15648;

  corral_source_split_15648:
    assume {:verifier.code 0} true;
    $i1778 := $ne.i64($i1777, 0);
    goto corral_source_split_15649;

  corral_source_split_15649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1778} true;
    goto $bb1022, $bb1023;

  $bb1023:
    assume !($i1778 == 1);
    assume {:verifier.code 0} true;
    goto $bb1024;

  $bb1024:
    assume {:verifier.code 0} true;
    goto $bb1025;

  $bb1025:
    assume {:verifier.code 0} true;
    $p1779 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(46, 8)));
    goto corral_source_split_15651;

  corral_source_split_15651:
    assume {:verifier.code 0} true;
    $i1780 := $p2i.ref.i64($p1779);
    goto corral_source_split_15652;

  corral_source_split_15652:
    assume {:verifier.code 0} true;
    $i1781 := $ne.i64($i1780, 0);
    goto corral_source_split_15653;

  corral_source_split_15653:
    assume {:verifier.code 0} true;
    $i1782 := $zext.i1.i32($i1781);
    goto corral_source_split_15654;

  corral_source_split_15654:
    assume {:verifier.code 0} true;
    $i1783 := $sext.i32.i64($i1782);
    goto corral_source_split_15655;

  corral_source_split_15655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2686} $i1784 := ldv__builtin_expect($i1783, 0);
    goto corral_source_split_15656;

  corral_source_split_15656:
    assume {:verifier.code 0} true;
    $i1785 := $ne.i64($i1784, 0);
    goto corral_source_split_15657;

  corral_source_split_15657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1785} true;
    goto $bb1026, $bb1027;

  $bb1027:
    assume !($i1785 == 1);
    assume {:verifier.code 0} true;
    goto $bb1028;

  $bb1028:
    assume {:verifier.code 0} true;
    goto $bb1029;

  $bb1029:
    assume {:verifier.code 0} true;
    $p1786 := $load.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(47, 8)));
    goto corral_source_split_15659;

  corral_source_split_15659:
    assume {:verifier.code 0} true;
    $i1787 := $p2i.ref.i64($p1786);
    goto corral_source_split_15660;

  corral_source_split_15660:
    assume {:verifier.code 0} true;
    $i1788 := $ne.i64($i1787, 0);
    goto corral_source_split_15661;

  corral_source_split_15661:
    assume {:verifier.code 0} true;
    $i1789 := $zext.i1.i32($i1788);
    goto corral_source_split_15662;

  corral_source_split_15662:
    assume {:verifier.code 0} true;
    $i1790 := $sext.i32.i64($i1789);
    goto corral_source_split_15663;

  corral_source_split_15663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2687} $i1791 := ldv__builtin_expect($i1790, 0);
    goto corral_source_split_15664;

  corral_source_split_15664:
    assume {:verifier.code 0} true;
    $i1792 := $ne.i64($i1791, 0);
    goto corral_source_split_15665;

  corral_source_split_15665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1792} true;
    goto $bb1030, $bb1031;

  $bb1031:
    assume !($i1792 == 1);
    assume {:verifier.code 0} true;
    goto $bb1032;

  $bb1032:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.3, comedi_subdevice_minor_table);
    goto corral_source_split_13627;

  corral_source_split_13627:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_13628;

  corral_source_split_13628:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_13629;

  corral_source_split_13629:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_13630;

  corral_source_split_13630:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_13631;

  corral_source_split_13631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2428} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 2429} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_13632;

  corral_source_split_13632:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_13633;

  corral_source_split_13633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(1, 8)));
    goto corral_source_split_13637;

  corral_source_split_13637:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_13638;

  corral_source_split_13638:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_13639;

  corral_source_split_13639:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_13640;

  corral_source_split_13640:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_13641;

  corral_source_split_13641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2431} $i20 := ldv__builtin_expect($i19, 0);
    goto corral_source_split_13642;

  corral_source_split_13642:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_13643;

  corral_source_split_13643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(2, 8)));
    goto corral_source_split_13651;

  corral_source_split_13651:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_13652;

  corral_source_split_13652:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, 0);
    goto corral_source_split_13653;

  corral_source_split_13653:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    goto corral_source_split_13654;

  corral_source_split_13654:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i25);
    goto corral_source_split_13655;

  corral_source_split_13655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2436} $i27 := ldv__builtin_expect($i26, 0);
    goto corral_source_split_13656;

  corral_source_split_13656:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_13657;

  corral_source_split_13657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(3, 8)));
    goto corral_source_split_13659;

  corral_source_split_13659:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_13660;

  corral_source_split_13660:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_13661;

  corral_source_split_13661:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_13662;

  corral_source_split_13662:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_13663;

  corral_source_split_13663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2437} $i34 := ldv__builtin_expect($i33, 0);
    goto corral_source_split_13664;

  corral_source_split_13664:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_13665;

  corral_source_split_13665:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(4, 8)));
    goto corral_source_split_13667;

  corral_source_split_13667:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_13668;

  corral_source_split_13668:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_13669;

  corral_source_split_13669:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_13670;

  corral_source_split_13670:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i39);
    goto corral_source_split_13671;

  corral_source_split_13671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2438} $i41 := ldv__builtin_expect($i40, 0);
    goto corral_source_split_13672;

  corral_source_split_13672:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_13673;

  corral_source_split_13673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(5, 8)));
    goto corral_source_split_13675;

  corral_source_split_13675:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_13676;

  corral_source_split_13676:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_13677;

  corral_source_split_13677:
    assume {:verifier.code 0} true;
    $i46 := $zext.i1.i32($i45);
    goto corral_source_split_13678;

  corral_source_split_13678:
    assume {:verifier.code 0} true;
    $i47 := $sext.i32.i64($i46);
    goto corral_source_split_13679;

  corral_source_split_13679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2439} $i48 := ldv__builtin_expect($i47, 0);
    goto corral_source_split_13680;

  corral_source_split_13680:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_13681;

  corral_source_split_13681:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p50 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(6, 8)));
    goto corral_source_split_13683;

  corral_source_split_13683:
    assume {:verifier.code 0} true;
    $i51 := $p2i.ref.i64($p50);
    goto corral_source_split_13684;

  corral_source_split_13684:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_13685;

  corral_source_split_13685:
    assume {:verifier.code 0} true;
    $i53 := $zext.i1.i32($i52);
    goto corral_source_split_13686;

  corral_source_split_13686:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i53);
    goto corral_source_split_13687;

  corral_source_split_13687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2440} $i55 := ldv__builtin_expect($i54, 0);
    goto corral_source_split_13688;

  corral_source_split_13688:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_13689;

  corral_source_split_13689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(7, 8)));
    goto corral_source_split_13691;

  corral_source_split_13691:
    assume {:verifier.code 0} true;
    $i58 := $p2i.ref.i64($p57);
    goto corral_source_split_13692;

  corral_source_split_13692:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_13693;

  corral_source_split_13693:
    assume {:verifier.code 0} true;
    $i60 := $zext.i1.i32($i59);
    goto corral_source_split_13694;

  corral_source_split_13694:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i60);
    goto corral_source_split_13695;

  corral_source_split_13695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2441} $i62 := ldv__builtin_expect($i61, 0);
    goto corral_source_split_13696;

  corral_source_split_13696:
    assume {:verifier.code 0} true;
    $i63 := $ne.i64($i62, 0);
    goto corral_source_split_13697;

  corral_source_split_13697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(8, 8)));
    goto corral_source_split_13699;

  corral_source_split_13699:
    assume {:verifier.code 0} true;
    $i65 := $p2i.ref.i64($p64);
    goto corral_source_split_13700;

  corral_source_split_13700:
    assume {:verifier.code 0} true;
    $i66 := $ne.i64($i65, 0);
    goto corral_source_split_13701;

  corral_source_split_13701:
    assume {:verifier.code 0} true;
    $i67 := $zext.i1.i32($i66);
    goto corral_source_split_13702;

  corral_source_split_13702:
    assume {:verifier.code 0} true;
    $i68 := $sext.i32.i64($i67);
    goto corral_source_split_13703;

  corral_source_split_13703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2442} $i69 := ldv__builtin_expect($i68, 0);
    goto corral_source_split_13704;

  corral_source_split_13704:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_13705;

  corral_source_split_13705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(9, 8)));
    goto corral_source_split_13707;

  corral_source_split_13707:
    assume {:verifier.code 0} true;
    $i72 := $p2i.ref.i64($p71);
    goto corral_source_split_13708;

  corral_source_split_13708:
    assume {:verifier.code 0} true;
    $i73 := $ne.i64($i72, 0);
    goto corral_source_split_13709;

  corral_source_split_13709:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_13710;

  corral_source_split_13710:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_13711;

  corral_source_split_13711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2443} $i76 := ldv__builtin_expect($i75, 0);
    goto corral_source_split_13712;

  corral_source_split_13712:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_13713;

  corral_source_split_13713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(10, 8)));
    goto corral_source_split_13715;

  corral_source_split_13715:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_13716;

  corral_source_split_13716:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_13717;

  corral_source_split_13717:
    assume {:verifier.code 0} true;
    $i81 := $zext.i1.i32($i80);
    goto corral_source_split_13718;

  corral_source_split_13718:
    assume {:verifier.code 0} true;
    $i82 := $sext.i32.i64($i81);
    goto corral_source_split_13719;

  corral_source_split_13719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2444} $i83 := ldv__builtin_expect($i82, 0);
    goto corral_source_split_13720;

  corral_source_split_13720:
    assume {:verifier.code 0} true;
    $i84 := $ne.i64($i83, 0);
    goto corral_source_split_13721;

  corral_source_split_13721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i84} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(11, 8)));
    goto corral_source_split_13723;

  corral_source_split_13723:
    assume {:verifier.code 0} true;
    $i86 := $p2i.ref.i64($p85);
    goto corral_source_split_13724;

  corral_source_split_13724:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_13725;

  corral_source_split_13725:
    assume {:verifier.code 0} true;
    $i88 := $zext.i1.i32($i87);
    goto corral_source_split_13726;

  corral_source_split_13726:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i88);
    goto corral_source_split_13727;

  corral_source_split_13727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2445} $i90 := ldv__builtin_expect($i89, 0);
    goto corral_source_split_13728;

  corral_source_split_13728:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_13729;

  corral_source_split_13729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(12, 8)));
    goto corral_source_split_13731;

  corral_source_split_13731:
    assume {:verifier.code 0} true;
    $i93 := $p2i.ref.i64($p92);
    goto corral_source_split_13732;

  corral_source_split_13732:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_13733;

  corral_source_split_13733:
    assume {:verifier.code 0} true;
    $i95 := $zext.i1.i32($i94);
    goto corral_source_split_13734;

  corral_source_split_13734:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_13735;

  corral_source_split_13735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2446} $i97 := ldv__builtin_expect($i96, 0);
    goto corral_source_split_13736;

  corral_source_split_13736:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_13737;

  corral_source_split_13737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(13, 8)));
    goto corral_source_split_13739;

  corral_source_split_13739:
    assume {:verifier.code 0} true;
    $i100 := $p2i.ref.i64($p99);
    goto corral_source_split_13740;

  corral_source_split_13740:
    assume {:verifier.code 0} true;
    $i101 := $ne.i64($i100, 0);
    goto corral_source_split_13741;

  corral_source_split_13741:
    assume {:verifier.code 0} true;
    $i102 := $zext.i1.i32($i101);
    goto corral_source_split_13742;

  corral_source_split_13742:
    assume {:verifier.code 0} true;
    $i103 := $sext.i32.i64($i102);
    goto corral_source_split_13743;

  corral_source_split_13743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2447} $i104 := ldv__builtin_expect($i103, 0);
    goto corral_source_split_13744;

  corral_source_split_13744:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_13745;

  corral_source_split_13745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p106 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(14, 8)));
    goto corral_source_split_13747;

  corral_source_split_13747:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_13748;

  corral_source_split_13748:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_13749;

  corral_source_split_13749:
    assume {:verifier.code 0} true;
    $i109 := $zext.i1.i32($i108);
    goto corral_source_split_13750;

  corral_source_split_13750:
    assume {:verifier.code 0} true;
    $i110 := $sext.i32.i64($i109);
    goto corral_source_split_13751;

  corral_source_split_13751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2448} $i111 := ldv__builtin_expect($i110, 0);
    goto corral_source_split_13752;

  corral_source_split_13752:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_13753;

  corral_source_split_13753:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(15, 8)));
    goto corral_source_split_13755;

  corral_source_split_13755:
    assume {:verifier.code 0} true;
    $i114 := $p2i.ref.i64($p113);
    goto corral_source_split_13756;

  corral_source_split_13756:
    assume {:verifier.code 0} true;
    $i115 := $ne.i64($i114, 0);
    goto corral_source_split_13757;

  corral_source_split_13757:
    assume {:verifier.code 0} true;
    $i116 := $zext.i1.i32($i115);
    goto corral_source_split_13758;

  corral_source_split_13758:
    assume {:verifier.code 0} true;
    $i117 := $sext.i32.i64($i116);
    goto corral_source_split_13759;

  corral_source_split_13759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2449} $i118 := ldv__builtin_expect($i117, 0);
    goto corral_source_split_13760;

  corral_source_split_13760:
    assume {:verifier.code 0} true;
    $i119 := $ne.i64($i118, 0);
    goto corral_source_split_13761;

  corral_source_split_13761:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(16, 8)));
    goto corral_source_split_13763;

  corral_source_split_13763:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_13764;

  corral_source_split_13764:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_13765;

  corral_source_split_13765:
    assume {:verifier.code 0} true;
    $i123 := $zext.i1.i32($i122);
    goto corral_source_split_13766;

  corral_source_split_13766:
    assume {:verifier.code 0} true;
    $i124 := $sext.i32.i64($i123);
    goto corral_source_split_13767;

  corral_source_split_13767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2450} $i125 := ldv__builtin_expect($i124, 0);
    goto corral_source_split_13768;

  corral_source_split_13768:
    assume {:verifier.code 0} true;
    $i126 := $ne.i64($i125, 0);
    goto corral_source_split_13769;

  corral_source_split_13769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(17, 8)));
    goto corral_source_split_13771;

  corral_source_split_13771:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_13772;

  corral_source_split_13772:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_13773;

  corral_source_split_13773:
    assume {:verifier.code 0} true;
    $i130 := $zext.i1.i32($i129);
    goto corral_source_split_13774;

  corral_source_split_13774:
    assume {:verifier.code 0} true;
    $i131 := $sext.i32.i64($i130);
    goto corral_source_split_13775;

  corral_source_split_13775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2451} $i132 := ldv__builtin_expect($i131, 0);
    goto corral_source_split_13776;

  corral_source_split_13776:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_13777;

  corral_source_split_13777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(18, 8)));
    goto corral_source_split_13779;

  corral_source_split_13779:
    assume {:verifier.code 0} true;
    $i135 := $p2i.ref.i64($p134);
    goto corral_source_split_13780;

  corral_source_split_13780:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_13781;

  corral_source_split_13781:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i136);
    goto corral_source_split_13782;

  corral_source_split_13782:
    assume {:verifier.code 0} true;
    $i138 := $sext.i32.i64($i137);
    goto corral_source_split_13783;

  corral_source_split_13783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2452} $i139 := ldv__builtin_expect($i138, 0);
    goto corral_source_split_13784;

  corral_source_split_13784:
    assume {:verifier.code 0} true;
    $i140 := $ne.i64($i139, 0);
    goto corral_source_split_13785;

  corral_source_split_13785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p141 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(19, 8)));
    goto corral_source_split_13787;

  corral_source_split_13787:
    assume {:verifier.code 0} true;
    $i142 := $p2i.ref.i64($p141);
    goto corral_source_split_13788;

  corral_source_split_13788:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_13789;

  corral_source_split_13789:
    assume {:verifier.code 0} true;
    $i144 := $zext.i1.i32($i143);
    goto corral_source_split_13790;

  corral_source_split_13790:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i144);
    goto corral_source_split_13791;

  corral_source_split_13791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2453} $i146 := ldv__builtin_expect($i145, 0);
    goto corral_source_split_13792;

  corral_source_split_13792:
    assume {:verifier.code 0} true;
    $i147 := $ne.i64($i146, 0);
    goto corral_source_split_13793;

  corral_source_split_13793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i147} true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $p148 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(20, 8)));
    goto corral_source_split_13795;

  corral_source_split_13795:
    assume {:verifier.code 0} true;
    $i149 := $p2i.ref.i64($p148);
    goto corral_source_split_13796;

  corral_source_split_13796:
    assume {:verifier.code 0} true;
    $i150 := $ne.i64($i149, 0);
    goto corral_source_split_13797;

  corral_source_split_13797:
    assume {:verifier.code 0} true;
    $i151 := $zext.i1.i32($i150);
    goto corral_source_split_13798;

  corral_source_split_13798:
    assume {:verifier.code 0} true;
    $i152 := $sext.i32.i64($i151);
    goto corral_source_split_13799;

  corral_source_split_13799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2454} $i153 := ldv__builtin_expect($i152, 0);
    goto corral_source_split_13800;

  corral_source_split_13800:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_13801;

  corral_source_split_13801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(21, 8)));
    goto corral_source_split_13803;

  corral_source_split_13803:
    assume {:verifier.code 0} true;
    $i156 := $p2i.ref.i64($p155);
    goto corral_source_split_13804;

  corral_source_split_13804:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_13805;

  corral_source_split_13805:
    assume {:verifier.code 0} true;
    $i158 := $zext.i1.i32($i157);
    goto corral_source_split_13806;

  corral_source_split_13806:
    assume {:verifier.code 0} true;
    $i159 := $sext.i32.i64($i158);
    goto corral_source_split_13807;

  corral_source_split_13807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2455} $i160 := ldv__builtin_expect($i159, 0);
    goto corral_source_split_13808;

  corral_source_split_13808:
    assume {:verifier.code 0} true;
    $i161 := $ne.i64($i160, 0);
    goto corral_source_split_13809;

  corral_source_split_13809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i161} true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(22, 8)));
    goto corral_source_split_13811;

  corral_source_split_13811:
    assume {:verifier.code 0} true;
    $i163 := $p2i.ref.i64($p162);
    goto corral_source_split_13812;

  corral_source_split_13812:
    assume {:verifier.code 0} true;
    $i164 := $ne.i64($i163, 0);
    goto corral_source_split_13813;

  corral_source_split_13813:
    assume {:verifier.code 0} true;
    $i165 := $zext.i1.i32($i164);
    goto corral_source_split_13814;

  corral_source_split_13814:
    assume {:verifier.code 0} true;
    $i166 := $sext.i32.i64($i165);
    goto corral_source_split_13815;

  corral_source_split_13815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2456} $i167 := ldv__builtin_expect($i166, 0);
    goto corral_source_split_13816;

  corral_source_split_13816:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_13817;

  corral_source_split_13817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    $p169 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(23, 8)));
    goto corral_source_split_13819;

  corral_source_split_13819:
    assume {:verifier.code 0} true;
    $i170 := $p2i.ref.i64($p169);
    goto corral_source_split_13820;

  corral_source_split_13820:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_13821;

  corral_source_split_13821:
    assume {:verifier.code 0} true;
    $i172 := $zext.i1.i32($i171);
    goto corral_source_split_13822;

  corral_source_split_13822:
    assume {:verifier.code 0} true;
    $i173 := $sext.i32.i64($i172);
    goto corral_source_split_13823;

  corral_source_split_13823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2457} $i174 := ldv__builtin_expect($i173, 0);
    goto corral_source_split_13824;

  corral_source_split_13824:
    assume {:verifier.code 0} true;
    $i175 := $ne.i64($i174, 0);
    goto corral_source_split_13825;

  corral_source_split_13825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    $p176 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(24, 8)));
    goto corral_source_split_13827;

  corral_source_split_13827:
    assume {:verifier.code 0} true;
    $i177 := $p2i.ref.i64($p176);
    goto corral_source_split_13828;

  corral_source_split_13828:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, 0);
    goto corral_source_split_13829;

  corral_source_split_13829:
    assume {:verifier.code 0} true;
    $i179 := $zext.i1.i32($i178);
    goto corral_source_split_13830;

  corral_source_split_13830:
    assume {:verifier.code 0} true;
    $i180 := $sext.i32.i64($i179);
    goto corral_source_split_13831;

  corral_source_split_13831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2458} $i181 := ldv__builtin_expect($i180, 0);
    goto corral_source_split_13832;

  corral_source_split_13832:
    assume {:verifier.code 0} true;
    $i182 := $ne.i64($i181, 0);
    goto corral_source_split_13833;

  corral_source_split_13833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $p183 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(25, 8)));
    goto corral_source_split_13835;

  corral_source_split_13835:
    assume {:verifier.code 0} true;
    $i184 := $p2i.ref.i64($p183);
    goto corral_source_split_13836;

  corral_source_split_13836:
    assume {:verifier.code 0} true;
    $i185 := $ne.i64($i184, 0);
    goto corral_source_split_13837;

  corral_source_split_13837:
    assume {:verifier.code 0} true;
    $i186 := $zext.i1.i32($i185);
    goto corral_source_split_13838;

  corral_source_split_13838:
    assume {:verifier.code 0} true;
    $i187 := $sext.i32.i64($i186);
    goto corral_source_split_13839;

  corral_source_split_13839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2459} $i188 := ldv__builtin_expect($i187, 0);
    goto corral_source_split_13840;

  corral_source_split_13840:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_13841;

  corral_source_split_13841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i189} true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(26, 8)));
    goto corral_source_split_13843;

  corral_source_split_13843:
    assume {:verifier.code 0} true;
    $i191 := $p2i.ref.i64($p190);
    goto corral_source_split_13844;

  corral_source_split_13844:
    assume {:verifier.code 0} true;
    $i192 := $ne.i64($i191, 0);
    goto corral_source_split_13845;

  corral_source_split_13845:
    assume {:verifier.code 0} true;
    $i193 := $zext.i1.i32($i192);
    goto corral_source_split_13846;

  corral_source_split_13846:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i193);
    goto corral_source_split_13847;

  corral_source_split_13847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2460} $i195 := ldv__builtin_expect($i194, 0);
    goto corral_source_split_13848;

  corral_source_split_13848:
    assume {:verifier.code 0} true;
    $i196 := $ne.i64($i195, 0);
    goto corral_source_split_13849;

  corral_source_split_13849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(27, 8)));
    goto corral_source_split_13851;

  corral_source_split_13851:
    assume {:verifier.code 0} true;
    $i198 := $p2i.ref.i64($p197);
    goto corral_source_split_13852;

  corral_source_split_13852:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_13853;

  corral_source_split_13853:
    assume {:verifier.code 0} true;
    $i200 := $zext.i1.i32($i199);
    goto corral_source_split_13854;

  corral_source_split_13854:
    assume {:verifier.code 0} true;
    $i201 := $sext.i32.i64($i200);
    goto corral_source_split_13855;

  corral_source_split_13855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2461} $i202 := ldv__builtin_expect($i201, 0);
    goto corral_source_split_13856;

  corral_source_split_13856:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_13857;

  corral_source_split_13857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i203} true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(28, 8)));
    goto corral_source_split_13859;

  corral_source_split_13859:
    assume {:verifier.code 0} true;
    $i205 := $p2i.ref.i64($p204);
    goto corral_source_split_13860;

  corral_source_split_13860:
    assume {:verifier.code 0} true;
    $i206 := $ne.i64($i205, 0);
    goto corral_source_split_13861;

  corral_source_split_13861:
    assume {:verifier.code 0} true;
    $i207 := $zext.i1.i32($i206);
    goto corral_source_split_13862;

  corral_source_split_13862:
    assume {:verifier.code 0} true;
    $i208 := $sext.i32.i64($i207);
    goto corral_source_split_13863;

  corral_source_split_13863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2462} $i209 := ldv__builtin_expect($i208, 0);
    goto corral_source_split_13864;

  corral_source_split_13864:
    assume {:verifier.code 0} true;
    $i210 := $ne.i64($i209, 0);
    goto corral_source_split_13865;

  corral_source_split_13865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $p211 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(29, 8)));
    goto corral_source_split_13867;

  corral_source_split_13867:
    assume {:verifier.code 0} true;
    $i212 := $p2i.ref.i64($p211);
    goto corral_source_split_13868;

  corral_source_split_13868:
    assume {:verifier.code 0} true;
    $i213 := $ne.i64($i212, 0);
    goto corral_source_split_13869;

  corral_source_split_13869:
    assume {:verifier.code 0} true;
    $i214 := $zext.i1.i32($i213);
    goto corral_source_split_13870;

  corral_source_split_13870:
    assume {:verifier.code 0} true;
    $i215 := $sext.i32.i64($i214);
    goto corral_source_split_13871;

  corral_source_split_13871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2463} $i216 := ldv__builtin_expect($i215, 0);
    goto corral_source_split_13872;

  corral_source_split_13872:
    assume {:verifier.code 0} true;
    $i217 := $ne.i64($i216, 0);
    goto corral_source_split_13873;

  corral_source_split_13873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i217} true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i217 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    $p218 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(30, 8)));
    goto corral_source_split_13875;

  corral_source_split_13875:
    assume {:verifier.code 0} true;
    $i219 := $p2i.ref.i64($p218);
    goto corral_source_split_13876;

  corral_source_split_13876:
    assume {:verifier.code 0} true;
    $i220 := $ne.i64($i219, 0);
    goto corral_source_split_13877;

  corral_source_split_13877:
    assume {:verifier.code 0} true;
    $i221 := $zext.i1.i32($i220);
    goto corral_source_split_13878;

  corral_source_split_13878:
    assume {:verifier.code 0} true;
    $i222 := $sext.i32.i64($i221);
    goto corral_source_split_13879;

  corral_source_split_13879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2464} $i223 := ldv__builtin_expect($i222, 0);
    goto corral_source_split_13880;

  corral_source_split_13880:
    assume {:verifier.code 0} true;
    $i224 := $ne.i64($i223, 0);
    goto corral_source_split_13881;

  corral_source_split_13881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $p225 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(31, 8)));
    goto corral_source_split_13883;

  corral_source_split_13883:
    assume {:verifier.code 0} true;
    $i226 := $p2i.ref.i64($p225);
    goto corral_source_split_13884;

  corral_source_split_13884:
    assume {:verifier.code 0} true;
    $i227 := $ne.i64($i226, 0);
    goto corral_source_split_13885;

  corral_source_split_13885:
    assume {:verifier.code 0} true;
    $i228 := $zext.i1.i32($i227);
    goto corral_source_split_13886;

  corral_source_split_13886:
    assume {:verifier.code 0} true;
    $i229 := $sext.i32.i64($i228);
    goto corral_source_split_13887;

  corral_source_split_13887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2465} $i230 := ldv__builtin_expect($i229, 0);
    goto corral_source_split_13888;

  corral_source_split_13888:
    assume {:verifier.code 0} true;
    $i231 := $ne.i64($i230, 0);
    goto corral_source_split_13889;

  corral_source_split_13889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $p232 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(32, 8)));
    goto corral_source_split_13891;

  corral_source_split_13891:
    assume {:verifier.code 0} true;
    $i233 := $p2i.ref.i64($p232);
    goto corral_source_split_13892;

  corral_source_split_13892:
    assume {:verifier.code 0} true;
    $i234 := $ne.i64($i233, 0);
    goto corral_source_split_13893;

  corral_source_split_13893:
    assume {:verifier.code 0} true;
    $i235 := $zext.i1.i32($i234);
    goto corral_source_split_13894;

  corral_source_split_13894:
    assume {:verifier.code 0} true;
    $i236 := $sext.i32.i64($i235);
    goto corral_source_split_13895;

  corral_source_split_13895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2466} $i237 := ldv__builtin_expect($i236, 0);
    goto corral_source_split_13896;

  corral_source_split_13896:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_13897;

  corral_source_split_13897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    $p239 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(33, 8)));
    goto corral_source_split_13899;

  corral_source_split_13899:
    assume {:verifier.code 0} true;
    $i240 := $p2i.ref.i64($p239);
    goto corral_source_split_13900;

  corral_source_split_13900:
    assume {:verifier.code 0} true;
    $i241 := $ne.i64($i240, 0);
    goto corral_source_split_13901;

  corral_source_split_13901:
    assume {:verifier.code 0} true;
    $i242 := $zext.i1.i32($i241);
    goto corral_source_split_13902;

  corral_source_split_13902:
    assume {:verifier.code 0} true;
    $i243 := $sext.i32.i64($i242);
    goto corral_source_split_13903;

  corral_source_split_13903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2467} $i244 := ldv__builtin_expect($i243, 0);
    goto corral_source_split_13904;

  corral_source_split_13904:
    assume {:verifier.code 0} true;
    $i245 := $ne.i64($i244, 0);
    goto corral_source_split_13905;

  corral_source_split_13905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i245} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $p246 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(34, 8)));
    goto corral_source_split_13907;

  corral_source_split_13907:
    assume {:verifier.code 0} true;
    $i247 := $p2i.ref.i64($p246);
    goto corral_source_split_13908;

  corral_source_split_13908:
    assume {:verifier.code 0} true;
    $i248 := $ne.i64($i247, 0);
    goto corral_source_split_13909;

  corral_source_split_13909:
    assume {:verifier.code 0} true;
    $i249 := $zext.i1.i32($i248);
    goto corral_source_split_13910;

  corral_source_split_13910:
    assume {:verifier.code 0} true;
    $i250 := $sext.i32.i64($i249);
    goto corral_source_split_13911;

  corral_source_split_13911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2468} $i251 := ldv__builtin_expect($i250, 0);
    goto corral_source_split_13912;

  corral_source_split_13912:
    assume {:verifier.code 0} true;
    $i252 := $ne.i64($i251, 0);
    goto corral_source_split_13913;

  corral_source_split_13913:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $p253 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(35, 8)));
    goto corral_source_split_13915;

  corral_source_split_13915:
    assume {:verifier.code 0} true;
    $i254 := $p2i.ref.i64($p253);
    goto corral_source_split_13916;

  corral_source_split_13916:
    assume {:verifier.code 0} true;
    $i255 := $ne.i64($i254, 0);
    goto corral_source_split_13917;

  corral_source_split_13917:
    assume {:verifier.code 0} true;
    $i256 := $zext.i1.i32($i255);
    goto corral_source_split_13918;

  corral_source_split_13918:
    assume {:verifier.code 0} true;
    $i257 := $sext.i32.i64($i256);
    goto corral_source_split_13919;

  corral_source_split_13919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2469} $i258 := ldv__builtin_expect($i257, 0);
    goto corral_source_split_13920;

  corral_source_split_13920:
    assume {:verifier.code 0} true;
    $i259 := $ne.i64($i258, 0);
    goto corral_source_split_13921;

  corral_source_split_13921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i259} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $p260 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(36, 8)));
    goto corral_source_split_13923;

  corral_source_split_13923:
    assume {:verifier.code 0} true;
    $i261 := $p2i.ref.i64($p260);
    goto corral_source_split_13924;

  corral_source_split_13924:
    assume {:verifier.code 0} true;
    $i262 := $ne.i64($i261, 0);
    goto corral_source_split_13925;

  corral_source_split_13925:
    assume {:verifier.code 0} true;
    $i263 := $zext.i1.i32($i262);
    goto corral_source_split_13926;

  corral_source_split_13926:
    assume {:verifier.code 0} true;
    $i264 := $sext.i32.i64($i263);
    goto corral_source_split_13927;

  corral_source_split_13927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2470} $i265 := ldv__builtin_expect($i264, 0);
    goto corral_source_split_13928;

  corral_source_split_13928:
    assume {:verifier.code 0} true;
    $i266 := $ne.i64($i265, 0);
    goto corral_source_split_13929;

  corral_source_split_13929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    goto $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    $p267 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(37, 8)));
    goto corral_source_split_13931;

  corral_source_split_13931:
    assume {:verifier.code 0} true;
    $i268 := $p2i.ref.i64($p267);
    goto corral_source_split_13932;

  corral_source_split_13932:
    assume {:verifier.code 0} true;
    $i269 := $ne.i64($i268, 0);
    goto corral_source_split_13933;

  corral_source_split_13933:
    assume {:verifier.code 0} true;
    $i270 := $zext.i1.i32($i269);
    goto corral_source_split_13934;

  corral_source_split_13934:
    assume {:verifier.code 0} true;
    $i271 := $sext.i32.i64($i270);
    goto corral_source_split_13935;

  corral_source_split_13935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2471} $i272 := ldv__builtin_expect($i271, 0);
    goto corral_source_split_13936;

  corral_source_split_13936:
    assume {:verifier.code 0} true;
    $i273 := $ne.i64($i272, 0);
    goto corral_source_split_13937;

  corral_source_split_13937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i273} true;
    goto $bb163, $bb164;

  $bb164:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    $p274 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(38, 8)));
    goto corral_source_split_13939;

  corral_source_split_13939:
    assume {:verifier.code 0} true;
    $i275 := $p2i.ref.i64($p274);
    goto corral_source_split_13940;

  corral_source_split_13940:
    assume {:verifier.code 0} true;
    $i276 := $ne.i64($i275, 0);
    goto corral_source_split_13941;

  corral_source_split_13941:
    assume {:verifier.code 0} true;
    $i277 := $zext.i1.i32($i276);
    goto corral_source_split_13942;

  corral_source_split_13942:
    assume {:verifier.code 0} true;
    $i278 := $sext.i32.i64($i277);
    goto corral_source_split_13943;

  corral_source_split_13943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2472} $i279 := ldv__builtin_expect($i278, 0);
    goto corral_source_split_13944;

  corral_source_split_13944:
    assume {:verifier.code 0} true;
    $i280 := $ne.i64($i279, 0);
    goto corral_source_split_13945;

  corral_source_split_13945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i280} true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i280 == 1);
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $p281 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(39, 8)));
    goto corral_source_split_13947;

  corral_source_split_13947:
    assume {:verifier.code 0} true;
    $i282 := $p2i.ref.i64($p281);
    goto corral_source_split_13948;

  corral_source_split_13948:
    assume {:verifier.code 0} true;
    $i283 := $ne.i64($i282, 0);
    goto corral_source_split_13949;

  corral_source_split_13949:
    assume {:verifier.code 0} true;
    $i284 := $zext.i1.i32($i283);
    goto corral_source_split_13950;

  corral_source_split_13950:
    assume {:verifier.code 0} true;
    $i285 := $sext.i32.i64($i284);
    goto corral_source_split_13951;

  corral_source_split_13951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2473} $i286 := ldv__builtin_expect($i285, 0);
    goto corral_source_split_13952;

  corral_source_split_13952:
    assume {:verifier.code 0} true;
    $i287 := $ne.i64($i286, 0);
    goto corral_source_split_13953;

  corral_source_split_13953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i287} true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb174:
    assume {:verifier.code 0} true;
    $p288 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(40, 8)));
    goto corral_source_split_13955;

  corral_source_split_13955:
    assume {:verifier.code 0} true;
    $i289 := $p2i.ref.i64($p288);
    goto corral_source_split_13956;

  corral_source_split_13956:
    assume {:verifier.code 0} true;
    $i290 := $ne.i64($i289, 0);
    goto corral_source_split_13957;

  corral_source_split_13957:
    assume {:verifier.code 0} true;
    $i291 := $zext.i1.i32($i290);
    goto corral_source_split_13958;

  corral_source_split_13958:
    assume {:verifier.code 0} true;
    $i292 := $sext.i32.i64($i291);
    goto corral_source_split_13959;

  corral_source_split_13959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2474} $i293 := ldv__builtin_expect($i292, 0);
    goto corral_source_split_13960;

  corral_source_split_13960:
    assume {:verifier.code 0} true;
    $i294 := $ne.i64($i293, 0);
    goto corral_source_split_13961;

  corral_source_split_13961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i294} true;
    goto $bb175, $bb176;

  $bb176:
    assume !($i294 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $p295 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(41, 8)));
    goto corral_source_split_13963;

  corral_source_split_13963:
    assume {:verifier.code 0} true;
    $i296 := $p2i.ref.i64($p295);
    goto corral_source_split_13964;

  corral_source_split_13964:
    assume {:verifier.code 0} true;
    $i297 := $ne.i64($i296, 0);
    goto corral_source_split_13965;

  corral_source_split_13965:
    assume {:verifier.code 0} true;
    $i298 := $zext.i1.i32($i297);
    goto corral_source_split_13966;

  corral_source_split_13966:
    assume {:verifier.code 0} true;
    $i299 := $sext.i32.i64($i298);
    goto corral_source_split_13967;

  corral_source_split_13967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2475} $i300 := ldv__builtin_expect($i299, 0);
    goto corral_source_split_13968;

  corral_source_split_13968:
    assume {:verifier.code 0} true;
    $i301 := $ne.i64($i300, 0);
    goto corral_source_split_13969;

  corral_source_split_13969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i301} true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i301 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $p302 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(42, 8)));
    goto corral_source_split_13971;

  corral_source_split_13971:
    assume {:verifier.code 0} true;
    $i303 := $p2i.ref.i64($p302);
    goto corral_source_split_13972;

  corral_source_split_13972:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_13973;

  corral_source_split_13973:
    assume {:verifier.code 0} true;
    $i305 := $zext.i1.i32($i304);
    goto corral_source_split_13974;

  corral_source_split_13974:
    assume {:verifier.code 0} true;
    $i306 := $sext.i32.i64($i305);
    goto corral_source_split_13975;

  corral_source_split_13975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2476} $i307 := ldv__builtin_expect($i306, 0);
    goto corral_source_split_13976;

  corral_source_split_13976:
    assume {:verifier.code 0} true;
    $i308 := $ne.i64($i307, 0);
    goto corral_source_split_13977;

  corral_source_split_13977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i308} true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p309 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(43, 8)));
    goto corral_source_split_13979;

  corral_source_split_13979:
    assume {:verifier.code 0} true;
    $i310 := $p2i.ref.i64($p309);
    goto corral_source_split_13980;

  corral_source_split_13980:
    assume {:verifier.code 0} true;
    $i311 := $ne.i64($i310, 0);
    goto corral_source_split_13981;

  corral_source_split_13981:
    assume {:verifier.code 0} true;
    $i312 := $zext.i1.i32($i311);
    goto corral_source_split_13982;

  corral_source_split_13982:
    assume {:verifier.code 0} true;
    $i313 := $sext.i32.i64($i312);
    goto corral_source_split_13983;

  corral_source_split_13983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2477} $i314 := ldv__builtin_expect($i313, 0);
    goto corral_source_split_13984;

  corral_source_split_13984:
    assume {:verifier.code 0} true;
    $i315 := $ne.i64($i314, 0);
    goto corral_source_split_13985;

  corral_source_split_13985:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    $p316 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(44, 8)));
    goto corral_source_split_13987;

  corral_source_split_13987:
    assume {:verifier.code 0} true;
    $i317 := $p2i.ref.i64($p316);
    goto corral_source_split_13988;

  corral_source_split_13988:
    assume {:verifier.code 0} true;
    $i318 := $ne.i64($i317, 0);
    goto corral_source_split_13989;

  corral_source_split_13989:
    assume {:verifier.code 0} true;
    $i319 := $zext.i1.i32($i318);
    goto corral_source_split_13990;

  corral_source_split_13990:
    assume {:verifier.code 0} true;
    $i320 := $sext.i32.i64($i319);
    goto corral_source_split_13991;

  corral_source_split_13991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2478} $i321 := ldv__builtin_expect($i320, 0);
    goto corral_source_split_13992;

  corral_source_split_13992:
    assume {:verifier.code 0} true;
    $i322 := $ne.i64($i321, 0);
    goto corral_source_split_13993;

  corral_source_split_13993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i322} true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i322 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $p323 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(45, 8)));
    goto corral_source_split_13995;

  corral_source_split_13995:
    assume {:verifier.code 0} true;
    $i324 := $p2i.ref.i64($p323);
    goto corral_source_split_13996;

  corral_source_split_13996:
    assume {:verifier.code 0} true;
    $i325 := $ne.i64($i324, 0);
    goto corral_source_split_13997;

  corral_source_split_13997:
    assume {:verifier.code 0} true;
    $i326 := $zext.i1.i32($i325);
    goto corral_source_split_13998;

  corral_source_split_13998:
    assume {:verifier.code 0} true;
    $i327 := $sext.i32.i64($i326);
    goto corral_source_split_13999;

  corral_source_split_13999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2479} $i328 := ldv__builtin_expect($i327, 0);
    goto corral_source_split_14000;

  corral_source_split_14000:
    assume {:verifier.code 0} true;
    $i329 := $ne.i64($i328, 0);
    goto corral_source_split_14001;

  corral_source_split_14001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb198:
    assume {:verifier.code 0} true;
    $p330 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(46, 8)));
    goto corral_source_split_14003;

  corral_source_split_14003:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p330);
    goto corral_source_split_14004;

  corral_source_split_14004:
    assume {:verifier.code 0} true;
    $i332 := $ne.i64($i331, 0);
    goto corral_source_split_14005;

  corral_source_split_14005:
    assume {:verifier.code 0} true;
    $i333 := $zext.i1.i32($i332);
    goto corral_source_split_14006;

  corral_source_split_14006:
    assume {:verifier.code 0} true;
    $i334 := $sext.i32.i64($i333);
    goto corral_source_split_14007;

  corral_source_split_14007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2480} $i335 := ldv__builtin_expect($i334, 0);
    goto corral_source_split_14008;

  corral_source_split_14008:
    assume {:verifier.code 0} true;
    $i336 := $ne.i64($i335, 0);
    goto corral_source_split_14009;

  corral_source_split_14009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb199, $bb200;

  $bb200:
    assume !($i336 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(47, 8)));
    goto corral_source_split_14011;

  corral_source_split_14011:
    assume {:verifier.code 0} true;
    $i338 := $p2i.ref.i64($p337);
    goto corral_source_split_14012;

  corral_source_split_14012:
    assume {:verifier.code 0} true;
    $i339 := $ne.i64($i338, 0);
    goto corral_source_split_14013;

  corral_source_split_14013:
    assume {:verifier.code 0} true;
    $i340 := $zext.i1.i32($i339);
    goto corral_source_split_14014;

  corral_source_split_14014:
    assume {:verifier.code 0} true;
    $i341 := $sext.i32.i64($i340);
    goto corral_source_split_14015;

  corral_source_split_14015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2481} $i342 := ldv__builtin_expect($i341, 0);
    goto corral_source_split_14016;

  corral_source_split_14016:
    assume {:verifier.code 0} true;
    $i343 := $ne.i64($i342, 0);
    goto corral_source_split_14017;

  corral_source_split_14017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i343} true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    $p344 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(48, 8)));
    goto corral_source_split_14019;

  corral_source_split_14019:
    assume {:verifier.code 0} true;
    $i345 := $p2i.ref.i64($p344);
    goto corral_source_split_14020;

  corral_source_split_14020:
    assume {:verifier.code 0} true;
    $i346 := $ne.i64($i345, 0);
    goto corral_source_split_14021;

  corral_source_split_14021:
    assume {:verifier.code 0} true;
    $i347 := $zext.i1.i32($i346);
    goto corral_source_split_14022;

  corral_source_split_14022:
    assume {:verifier.code 0} true;
    $i348 := $sext.i32.i64($i347);
    goto corral_source_split_14023;

  corral_source_split_14023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2482} $i349 := ldv__builtin_expect($i348, 0);
    goto corral_source_split_14024;

  corral_source_split_14024:
    assume {:verifier.code 0} true;
    $i350 := $ne.i64($i349, 0);
    goto corral_source_split_14025;

  corral_source_split_14025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i350} true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p351 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(49, 8)));
    goto corral_source_split_14027;

  corral_source_split_14027:
    assume {:verifier.code 0} true;
    $i352 := $p2i.ref.i64($p351);
    goto corral_source_split_14028;

  corral_source_split_14028:
    assume {:verifier.code 0} true;
    $i353 := $ne.i64($i352, 0);
    goto corral_source_split_14029;

  corral_source_split_14029:
    assume {:verifier.code 0} true;
    $i354 := $zext.i1.i32($i353);
    goto corral_source_split_14030;

  corral_source_split_14030:
    assume {:verifier.code 0} true;
    $i355 := $sext.i32.i64($i354);
    goto corral_source_split_14031;

  corral_source_split_14031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2483} $i356 := ldv__builtin_expect($i355, 0);
    goto corral_source_split_14032;

  corral_source_split_14032:
    assume {:verifier.code 0} true;
    $i357 := $ne.i64($i356, 0);
    goto corral_source_split_14033;

  corral_source_split_14033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i357} true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $p358 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(50, 8)));
    goto corral_source_split_14035;

  corral_source_split_14035:
    assume {:verifier.code 0} true;
    $i359 := $p2i.ref.i64($p358);
    goto corral_source_split_14036;

  corral_source_split_14036:
    assume {:verifier.code 0} true;
    $i360 := $ne.i64($i359, 0);
    goto corral_source_split_14037;

  corral_source_split_14037:
    assume {:verifier.code 0} true;
    $i361 := $zext.i1.i32($i360);
    goto corral_source_split_14038;

  corral_source_split_14038:
    assume {:verifier.code 0} true;
    $i362 := $sext.i32.i64($i361);
    goto corral_source_split_14039;

  corral_source_split_14039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2484} $i363 := ldv__builtin_expect($i362, 0);
    goto corral_source_split_14040;

  corral_source_split_14040:
    assume {:verifier.code 0} true;
    $i364 := $ne.i64($i363, 0);
    goto corral_source_split_14041;

  corral_source_split_14041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i364 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p365 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(51, 8)));
    goto corral_source_split_14043;

  corral_source_split_14043:
    assume {:verifier.code 0} true;
    $i366 := $p2i.ref.i64($p365);
    goto corral_source_split_14044;

  corral_source_split_14044:
    assume {:verifier.code 0} true;
    $i367 := $ne.i64($i366, 0);
    goto corral_source_split_14045;

  corral_source_split_14045:
    assume {:verifier.code 0} true;
    $i368 := $zext.i1.i32($i367);
    goto corral_source_split_14046;

  corral_source_split_14046:
    assume {:verifier.code 0} true;
    $i369 := $sext.i32.i64($i368);
    goto corral_source_split_14047;

  corral_source_split_14047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2485} $i370 := ldv__builtin_expect($i369, 0);
    goto corral_source_split_14048;

  corral_source_split_14048:
    assume {:verifier.code 0} true;
    $i371 := $ne.i64($i370, 0);
    goto corral_source_split_14049;

  corral_source_split_14049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    $p372 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(52, 8)));
    goto corral_source_split_14051;

  corral_source_split_14051:
    assume {:verifier.code 0} true;
    $i373 := $p2i.ref.i64($p372);
    goto corral_source_split_14052;

  corral_source_split_14052:
    assume {:verifier.code 0} true;
    $i374 := $ne.i64($i373, 0);
    goto corral_source_split_14053;

  corral_source_split_14053:
    assume {:verifier.code 0} true;
    $i375 := $zext.i1.i32($i374);
    goto corral_source_split_14054;

  corral_source_split_14054:
    assume {:verifier.code 0} true;
    $i376 := $sext.i32.i64($i375);
    goto corral_source_split_14055;

  corral_source_split_14055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2486} $i377 := ldv__builtin_expect($i376, 0);
    goto corral_source_split_14056;

  corral_source_split_14056:
    assume {:verifier.code 0} true;
    $i378 := $ne.i64($i377, 0);
    goto corral_source_split_14057;

  corral_source_split_14057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $p379 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(53, 8)));
    goto corral_source_split_14059;

  corral_source_split_14059:
    assume {:verifier.code 0} true;
    $i380 := $p2i.ref.i64($p379);
    goto corral_source_split_14060;

  corral_source_split_14060:
    assume {:verifier.code 0} true;
    $i381 := $ne.i64($i380, 0);
    goto corral_source_split_14061;

  corral_source_split_14061:
    assume {:verifier.code 0} true;
    $i382 := $zext.i1.i32($i381);
    goto corral_source_split_14062;

  corral_source_split_14062:
    assume {:verifier.code 0} true;
    $i383 := $sext.i32.i64($i382);
    goto corral_source_split_14063;

  corral_source_split_14063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2487} $i384 := ldv__builtin_expect($i383, 0);
    goto corral_source_split_14064;

  corral_source_split_14064:
    assume {:verifier.code 0} true;
    $i385 := $ne.i64($i384, 0);
    goto corral_source_split_14065;

  corral_source_split_14065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i385} true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $p386 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(54, 8)));
    goto corral_source_split_14067;

  corral_source_split_14067:
    assume {:verifier.code 0} true;
    $i387 := $p2i.ref.i64($p386);
    goto corral_source_split_14068;

  corral_source_split_14068:
    assume {:verifier.code 0} true;
    $i388 := $ne.i64($i387, 0);
    goto corral_source_split_14069;

  corral_source_split_14069:
    assume {:verifier.code 0} true;
    $i389 := $zext.i1.i32($i388);
    goto corral_source_split_14070;

  corral_source_split_14070:
    assume {:verifier.code 0} true;
    $i390 := $sext.i32.i64($i389);
    goto corral_source_split_14071;

  corral_source_split_14071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2488} $i391 := ldv__builtin_expect($i390, 0);
    goto corral_source_split_14072;

  corral_source_split_14072:
    assume {:verifier.code 0} true;
    $i392 := $ne.i64($i391, 0);
    goto corral_source_split_14073;

  corral_source_split_14073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i392} true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    goto $bb234;

  $bb234:
    assume {:verifier.code 0} true;
    $p393 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(55, 8)));
    goto corral_source_split_14075;

  corral_source_split_14075:
    assume {:verifier.code 0} true;
    $i394 := $p2i.ref.i64($p393);
    goto corral_source_split_14076;

  corral_source_split_14076:
    assume {:verifier.code 0} true;
    $i395 := $ne.i64($i394, 0);
    goto corral_source_split_14077;

  corral_source_split_14077:
    assume {:verifier.code 0} true;
    $i396 := $zext.i1.i32($i395);
    goto corral_source_split_14078;

  corral_source_split_14078:
    assume {:verifier.code 0} true;
    $i397 := $sext.i32.i64($i396);
    goto corral_source_split_14079;

  corral_source_split_14079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2489} $i398 := ldv__builtin_expect($i397, 0);
    goto corral_source_split_14080;

  corral_source_split_14080:
    assume {:verifier.code 0} true;
    $i399 := $ne.i64($i398, 0);
    goto corral_source_split_14081;

  corral_source_split_14081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(56, 8)));
    goto corral_source_split_14083;

  corral_source_split_14083:
    assume {:verifier.code 0} true;
    $i401 := $p2i.ref.i64($p400);
    goto corral_source_split_14084;

  corral_source_split_14084:
    assume {:verifier.code 0} true;
    $i402 := $ne.i64($i401, 0);
    goto corral_source_split_14085;

  corral_source_split_14085:
    assume {:verifier.code 0} true;
    $i403 := $zext.i1.i32($i402);
    goto corral_source_split_14086;

  corral_source_split_14086:
    assume {:verifier.code 0} true;
    $i404 := $sext.i32.i64($i403);
    goto corral_source_split_14087;

  corral_source_split_14087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2490} $i405 := ldv__builtin_expect($i404, 0);
    goto corral_source_split_14088;

  corral_source_split_14088:
    assume {:verifier.code 0} true;
    $i406 := $ne.i64($i405, 0);
    goto corral_source_split_14089;

  corral_source_split_14089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i406} true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i406 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    $p407 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(57, 8)));
    goto corral_source_split_14091;

  corral_source_split_14091:
    assume {:verifier.code 0} true;
    $i408 := $p2i.ref.i64($p407);
    goto corral_source_split_14092;

  corral_source_split_14092:
    assume {:verifier.code 0} true;
    $i409 := $ne.i64($i408, 0);
    goto corral_source_split_14093;

  corral_source_split_14093:
    assume {:verifier.code 0} true;
    $i410 := $zext.i1.i32($i409);
    goto corral_source_split_14094;

  corral_source_split_14094:
    assume {:verifier.code 0} true;
    $i411 := $sext.i32.i64($i410);
    goto corral_source_split_14095;

  corral_source_split_14095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2491} $i412 := ldv__builtin_expect($i411, 0);
    goto corral_source_split_14096;

  corral_source_split_14096:
    assume {:verifier.code 0} true;
    $i413 := $ne.i64($i412, 0);
    goto corral_source_split_14097;

  corral_source_split_14097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i413} true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i413 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(58, 8)));
    goto corral_source_split_14099;

  corral_source_split_14099:
    assume {:verifier.code 0} true;
    $i415 := $p2i.ref.i64($p414);
    goto corral_source_split_14100;

  corral_source_split_14100:
    assume {:verifier.code 0} true;
    $i416 := $ne.i64($i415, 0);
    goto corral_source_split_14101;

  corral_source_split_14101:
    assume {:verifier.code 0} true;
    $i417 := $zext.i1.i32($i416);
    goto corral_source_split_14102;

  corral_source_split_14102:
    assume {:verifier.code 0} true;
    $i418 := $sext.i32.i64($i417);
    goto corral_source_split_14103;

  corral_source_split_14103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2492} $i419 := ldv__builtin_expect($i418, 0);
    goto corral_source_split_14104;

  corral_source_split_14104:
    assume {:verifier.code 0} true;
    $i420 := $ne.i64($i419, 0);
    goto corral_source_split_14105;

  corral_source_split_14105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i420} true;
    goto $bb247, $bb248;

  $bb248:
    assume !($i420 == 1);
    assume {:verifier.code 0} true;
    goto $bb249;

  $bb249:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(59, 8)));
    goto corral_source_split_14107;

  corral_source_split_14107:
    assume {:verifier.code 0} true;
    $i422 := $p2i.ref.i64($p421);
    goto corral_source_split_14108;

  corral_source_split_14108:
    assume {:verifier.code 0} true;
    $i423 := $ne.i64($i422, 0);
    goto corral_source_split_14109;

  corral_source_split_14109:
    assume {:verifier.code 0} true;
    $i424 := $zext.i1.i32($i423);
    goto corral_source_split_14110;

  corral_source_split_14110:
    assume {:verifier.code 0} true;
    $i425 := $sext.i32.i64($i424);
    goto corral_source_split_14111;

  corral_source_split_14111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2493} $i426 := ldv__builtin_expect($i425, 0);
    goto corral_source_split_14112;

  corral_source_split_14112:
    assume {:verifier.code 0} true;
    $i427 := $ne.i64($i426, 0);
    goto corral_source_split_14113;

  corral_source_split_14113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i427} true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i427 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $p428 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(60, 8)));
    goto corral_source_split_14115;

  corral_source_split_14115:
    assume {:verifier.code 0} true;
    $i429 := $p2i.ref.i64($p428);
    goto corral_source_split_14116;

  corral_source_split_14116:
    assume {:verifier.code 0} true;
    $i430 := $ne.i64($i429, 0);
    goto corral_source_split_14117;

  corral_source_split_14117:
    assume {:verifier.code 0} true;
    $i431 := $zext.i1.i32($i430);
    goto corral_source_split_14118;

  corral_source_split_14118:
    assume {:verifier.code 0} true;
    $i432 := $sext.i32.i64($i431);
    goto corral_source_split_14119;

  corral_source_split_14119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2494} $i433 := ldv__builtin_expect($i432, 0);
    goto corral_source_split_14120;

  corral_source_split_14120:
    assume {:verifier.code 0} true;
    $i434 := $ne.i64($i433, 0);
    goto corral_source_split_14121;

  corral_source_split_14121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i434} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i434 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    $p435 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(61, 8)));
    goto corral_source_split_14123;

  corral_source_split_14123:
    assume {:verifier.code 0} true;
    $i436 := $p2i.ref.i64($p435);
    goto corral_source_split_14124;

  corral_source_split_14124:
    assume {:verifier.code 0} true;
    $i437 := $ne.i64($i436, 0);
    goto corral_source_split_14125;

  corral_source_split_14125:
    assume {:verifier.code 0} true;
    $i438 := $zext.i1.i32($i437);
    goto corral_source_split_14126;

  corral_source_split_14126:
    assume {:verifier.code 0} true;
    $i439 := $sext.i32.i64($i438);
    goto corral_source_split_14127;

  corral_source_split_14127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2495} $i440 := ldv__builtin_expect($i439, 0);
    goto corral_source_split_14128;

  corral_source_split_14128:
    assume {:verifier.code 0} true;
    $i441 := $ne.i64($i440, 0);
    goto corral_source_split_14129;

  corral_source_split_14129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i441} true;
    goto $bb259, $bb260;

  $bb260:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $p442 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(62, 8)));
    goto corral_source_split_14131;

  corral_source_split_14131:
    assume {:verifier.code 0} true;
    $i443 := $p2i.ref.i64($p442);
    goto corral_source_split_14132;

  corral_source_split_14132:
    assume {:verifier.code 0} true;
    $i444 := $ne.i64($i443, 0);
    goto corral_source_split_14133;

  corral_source_split_14133:
    assume {:verifier.code 0} true;
    $i445 := $zext.i1.i32($i444);
    goto corral_source_split_14134;

  corral_source_split_14134:
    assume {:verifier.code 0} true;
    $i446 := $sext.i32.i64($i445);
    goto corral_source_split_14135;

  corral_source_split_14135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2496} $i447 := ldv__builtin_expect($i446, 0);
    goto corral_source_split_14136;

  corral_source_split_14136:
    assume {:verifier.code 0} true;
    $i448 := $ne.i64($i447, 0);
    goto corral_source_split_14137;

  corral_source_split_14137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i448} true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    $p449 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(63, 8)));
    goto corral_source_split_14139;

  corral_source_split_14139:
    assume {:verifier.code 0} true;
    $i450 := $p2i.ref.i64($p449);
    goto corral_source_split_14140;

  corral_source_split_14140:
    assume {:verifier.code 0} true;
    $i451 := $ne.i64($i450, 0);
    goto corral_source_split_14141;

  corral_source_split_14141:
    assume {:verifier.code 0} true;
    $i452 := $zext.i1.i32($i451);
    goto corral_source_split_14142;

  corral_source_split_14142:
    assume {:verifier.code 0} true;
    $i453 := $sext.i32.i64($i452);
    goto corral_source_split_14143;

  corral_source_split_14143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2497} $i454 := ldv__builtin_expect($i453, 0);
    goto corral_source_split_14144;

  corral_source_split_14144:
    assume {:verifier.code 0} true;
    $i455 := $ne.i64($i454, 0);
    goto corral_source_split_14145;

  corral_source_split_14145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i455} true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p456 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(64, 8)));
    goto corral_source_split_14147;

  corral_source_split_14147:
    assume {:verifier.code 0} true;
    $i457 := $p2i.ref.i64($p456);
    goto corral_source_split_14148;

  corral_source_split_14148:
    assume {:verifier.code 0} true;
    $i458 := $ne.i64($i457, 0);
    goto corral_source_split_14149;

  corral_source_split_14149:
    assume {:verifier.code 0} true;
    $i459 := $zext.i1.i32($i458);
    goto corral_source_split_14150;

  corral_source_split_14150:
    assume {:verifier.code 0} true;
    $i460 := $sext.i32.i64($i459);
    goto corral_source_split_14151;

  corral_source_split_14151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2498} $i461 := ldv__builtin_expect($i460, 0);
    goto corral_source_split_14152;

  corral_source_split_14152:
    assume {:verifier.code 0} true;
    $i462 := $ne.i64($i461, 0);
    goto corral_source_split_14153;

  corral_source_split_14153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i462} true;
    goto $bb271, $bb272;

  $bb272:
    assume !($i462 == 1);
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p463 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(65, 8)));
    goto corral_source_split_14155;

  corral_source_split_14155:
    assume {:verifier.code 0} true;
    $i464 := $p2i.ref.i64($p463);
    goto corral_source_split_14156;

  corral_source_split_14156:
    assume {:verifier.code 0} true;
    $i465 := $ne.i64($i464, 0);
    goto corral_source_split_14157;

  corral_source_split_14157:
    assume {:verifier.code 0} true;
    $i466 := $zext.i1.i32($i465);
    goto corral_source_split_14158;

  corral_source_split_14158:
    assume {:verifier.code 0} true;
    $i467 := $sext.i32.i64($i466);
    goto corral_source_split_14159;

  corral_source_split_14159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2499} $i468 := ldv__builtin_expect($i467, 0);
    goto corral_source_split_14160;

  corral_source_split_14160:
    assume {:verifier.code 0} true;
    $i469 := $ne.i64($i468, 0);
    goto corral_source_split_14161;

  corral_source_split_14161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i469} true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p470 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(66, 8)));
    goto corral_source_split_14163;

  corral_source_split_14163:
    assume {:verifier.code 0} true;
    $i471 := $p2i.ref.i64($p470);
    goto corral_source_split_14164;

  corral_source_split_14164:
    assume {:verifier.code 0} true;
    $i472 := $ne.i64($i471, 0);
    goto corral_source_split_14165;

  corral_source_split_14165:
    assume {:verifier.code 0} true;
    $i473 := $zext.i1.i32($i472);
    goto corral_source_split_14166;

  corral_source_split_14166:
    assume {:verifier.code 0} true;
    $i474 := $sext.i32.i64($i473);
    goto corral_source_split_14167;

  corral_source_split_14167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2500} $i475 := ldv__builtin_expect($i474, 0);
    goto corral_source_split_14168;

  corral_source_split_14168:
    assume {:verifier.code 0} true;
    $i476 := $ne.i64($i475, 0);
    goto corral_source_split_14169;

  corral_source_split_14169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i476} true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    $p477 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(67, 8)));
    goto corral_source_split_14171;

  corral_source_split_14171:
    assume {:verifier.code 0} true;
    $i478 := $p2i.ref.i64($p477);
    goto corral_source_split_14172;

  corral_source_split_14172:
    assume {:verifier.code 0} true;
    $i479 := $ne.i64($i478, 0);
    goto corral_source_split_14173;

  corral_source_split_14173:
    assume {:verifier.code 0} true;
    $i480 := $zext.i1.i32($i479);
    goto corral_source_split_14174;

  corral_source_split_14174:
    assume {:verifier.code 0} true;
    $i481 := $sext.i32.i64($i480);
    goto corral_source_split_14175;

  corral_source_split_14175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2501} $i482 := ldv__builtin_expect($i481, 0);
    goto corral_source_split_14176;

  corral_source_split_14176:
    assume {:verifier.code 0} true;
    $i483 := $ne.i64($i482, 0);
    goto corral_source_split_14177;

  corral_source_split_14177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i483} true;
    goto $bb283, $bb284;

  $bb284:
    assume !($i483 == 1);
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    $p484 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(68, 8)));
    goto corral_source_split_14179;

  corral_source_split_14179:
    assume {:verifier.code 0} true;
    $i485 := $p2i.ref.i64($p484);
    goto corral_source_split_14180;

  corral_source_split_14180:
    assume {:verifier.code 0} true;
    $i486 := $ne.i64($i485, 0);
    goto corral_source_split_14181;

  corral_source_split_14181:
    assume {:verifier.code 0} true;
    $i487 := $zext.i1.i32($i486);
    goto corral_source_split_14182;

  corral_source_split_14182:
    assume {:verifier.code 0} true;
    $i488 := $sext.i32.i64($i487);
    goto corral_source_split_14183;

  corral_source_split_14183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2502} $i489 := ldv__builtin_expect($i488, 0);
    goto corral_source_split_14184;

  corral_source_split_14184:
    assume {:verifier.code 0} true;
    $i490 := $ne.i64($i489, 0);
    goto corral_source_split_14185;

  corral_source_split_14185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i490} true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    goto $bb290;

  $bb290:
    assume {:verifier.code 0} true;
    $p491 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(69, 8)));
    goto corral_source_split_14187;

  corral_source_split_14187:
    assume {:verifier.code 0} true;
    $i492 := $p2i.ref.i64($p491);
    goto corral_source_split_14188;

  corral_source_split_14188:
    assume {:verifier.code 0} true;
    $i493 := $ne.i64($i492, 0);
    goto corral_source_split_14189;

  corral_source_split_14189:
    assume {:verifier.code 0} true;
    $i494 := $zext.i1.i32($i493);
    goto corral_source_split_14190;

  corral_source_split_14190:
    assume {:verifier.code 0} true;
    $i495 := $sext.i32.i64($i494);
    goto corral_source_split_14191;

  corral_source_split_14191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2503} $i496 := ldv__builtin_expect($i495, 0);
    goto corral_source_split_14192;

  corral_source_split_14192:
    assume {:verifier.code 0} true;
    $i497 := $ne.i64($i496, 0);
    goto corral_source_split_14193;

  corral_source_split_14193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    $p498 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(70, 8)));
    goto corral_source_split_14195;

  corral_source_split_14195:
    assume {:verifier.code 0} true;
    $i499 := $p2i.ref.i64($p498);
    goto corral_source_split_14196;

  corral_source_split_14196:
    assume {:verifier.code 0} true;
    $i500 := $ne.i64($i499, 0);
    goto corral_source_split_14197;

  corral_source_split_14197:
    assume {:verifier.code 0} true;
    $i501 := $zext.i1.i32($i500);
    goto corral_source_split_14198;

  corral_source_split_14198:
    assume {:verifier.code 0} true;
    $i502 := $sext.i32.i64($i501);
    goto corral_source_split_14199;

  corral_source_split_14199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2504} $i503 := ldv__builtin_expect($i502, 0);
    goto corral_source_split_14200;

  corral_source_split_14200:
    assume {:verifier.code 0} true;
    $i504 := $ne.i64($i503, 0);
    goto corral_source_split_14201;

  corral_source_split_14201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i504} true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb297;

  $bb297:
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $p505 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(71, 8)));
    goto corral_source_split_14203;

  corral_source_split_14203:
    assume {:verifier.code 0} true;
    $i506 := $p2i.ref.i64($p505);
    goto corral_source_split_14204;

  corral_source_split_14204:
    assume {:verifier.code 0} true;
    $i507 := $ne.i64($i506, 0);
    goto corral_source_split_14205;

  corral_source_split_14205:
    assume {:verifier.code 0} true;
    $i508 := $zext.i1.i32($i507);
    goto corral_source_split_14206;

  corral_source_split_14206:
    assume {:verifier.code 0} true;
    $i509 := $sext.i32.i64($i508);
    goto corral_source_split_14207;

  corral_source_split_14207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2505} $i510 := ldv__builtin_expect($i509, 0);
    goto corral_source_split_14208;

  corral_source_split_14208:
    assume {:verifier.code 0} true;
    $i511 := $ne.i64($i510, 0);
    goto corral_source_split_14209;

  corral_source_split_14209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i511} true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb302;

  $bb302:
    assume {:verifier.code 0} true;
    $p512 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(72, 8)));
    goto corral_source_split_14211;

  corral_source_split_14211:
    assume {:verifier.code 0} true;
    $i513 := $p2i.ref.i64($p512);
    goto corral_source_split_14212;

  corral_source_split_14212:
    assume {:verifier.code 0} true;
    $i514 := $ne.i64($i513, 0);
    goto corral_source_split_14213;

  corral_source_split_14213:
    assume {:verifier.code 0} true;
    $i515 := $zext.i1.i32($i514);
    goto corral_source_split_14214;

  corral_source_split_14214:
    assume {:verifier.code 0} true;
    $i516 := $sext.i32.i64($i515);
    goto corral_source_split_14215;

  corral_source_split_14215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2506} $i517 := ldv__builtin_expect($i516, 0);
    goto corral_source_split_14216;

  corral_source_split_14216:
    assume {:verifier.code 0} true;
    $i518 := $ne.i64($i517, 0);
    goto corral_source_split_14217;

  corral_source_split_14217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i518} true;
    goto $bb303, $bb304;

  $bb304:
    assume !($i518 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    $p519 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(73, 8)));
    goto corral_source_split_14219;

  corral_source_split_14219:
    assume {:verifier.code 0} true;
    $i520 := $p2i.ref.i64($p519);
    goto corral_source_split_14220;

  corral_source_split_14220:
    assume {:verifier.code 0} true;
    $i521 := $ne.i64($i520, 0);
    goto corral_source_split_14221;

  corral_source_split_14221:
    assume {:verifier.code 0} true;
    $i522 := $zext.i1.i32($i521);
    goto corral_source_split_14222;

  corral_source_split_14222:
    assume {:verifier.code 0} true;
    $i523 := $sext.i32.i64($i522);
    goto corral_source_split_14223;

  corral_source_split_14223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2507} $i524 := ldv__builtin_expect($i523, 0);
    goto corral_source_split_14224;

  corral_source_split_14224:
    assume {:verifier.code 0} true;
    $i525 := $ne.i64($i524, 0);
    goto corral_source_split_14225;

  corral_source_split_14225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i525} true;
    goto $bb307, $bb308;

  $bb308:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    $p526 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(74, 8)));
    goto corral_source_split_14227;

  corral_source_split_14227:
    assume {:verifier.code 0} true;
    $i527 := $p2i.ref.i64($p526);
    goto corral_source_split_14228;

  corral_source_split_14228:
    assume {:verifier.code 0} true;
    $i528 := $ne.i64($i527, 0);
    goto corral_source_split_14229;

  corral_source_split_14229:
    assume {:verifier.code 0} true;
    $i529 := $zext.i1.i32($i528);
    goto corral_source_split_14230;

  corral_source_split_14230:
    assume {:verifier.code 0} true;
    $i530 := $sext.i32.i64($i529);
    goto corral_source_split_14231;

  corral_source_split_14231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2508} $i531 := ldv__builtin_expect($i530, 0);
    goto corral_source_split_14232;

  corral_source_split_14232:
    assume {:verifier.code 0} true;
    $i532 := $ne.i64($i531, 0);
    goto corral_source_split_14233;

  corral_source_split_14233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i532} true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i532 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    goto $bb314;

  $bb314:
    assume {:verifier.code 0} true;
    $p533 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(75, 8)));
    goto corral_source_split_14235;

  corral_source_split_14235:
    assume {:verifier.code 0} true;
    $i534 := $p2i.ref.i64($p533);
    goto corral_source_split_14236;

  corral_source_split_14236:
    assume {:verifier.code 0} true;
    $i535 := $ne.i64($i534, 0);
    goto corral_source_split_14237;

  corral_source_split_14237:
    assume {:verifier.code 0} true;
    $i536 := $zext.i1.i32($i535);
    goto corral_source_split_14238;

  corral_source_split_14238:
    assume {:verifier.code 0} true;
    $i537 := $sext.i32.i64($i536);
    goto corral_source_split_14239;

  corral_source_split_14239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2509} $i538 := ldv__builtin_expect($i537, 0);
    goto corral_source_split_14240;

  corral_source_split_14240:
    assume {:verifier.code 0} true;
    $i539 := $ne.i64($i538, 0);
    goto corral_source_split_14241;

  corral_source_split_14241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i539} true;
    goto $bb315, $bb316;

  $bb316:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb317;

  $bb317:
    assume {:verifier.code 0} true;
    goto $bb318;

  $bb318:
    assume {:verifier.code 0} true;
    $p540 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(76, 8)));
    goto corral_source_split_14243;

  corral_source_split_14243:
    assume {:verifier.code 0} true;
    $i541 := $p2i.ref.i64($p540);
    goto corral_source_split_14244;

  corral_source_split_14244:
    assume {:verifier.code 0} true;
    $i542 := $ne.i64($i541, 0);
    goto corral_source_split_14245;

  corral_source_split_14245:
    assume {:verifier.code 0} true;
    $i543 := $zext.i1.i32($i542);
    goto corral_source_split_14246;

  corral_source_split_14246:
    assume {:verifier.code 0} true;
    $i544 := $sext.i32.i64($i543);
    goto corral_source_split_14247;

  corral_source_split_14247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2510} $i545 := ldv__builtin_expect($i544, 0);
    goto corral_source_split_14248;

  corral_source_split_14248:
    assume {:verifier.code 0} true;
    $i546 := $ne.i64($i545, 0);
    goto corral_source_split_14249;

  corral_source_split_14249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i546} true;
    goto $bb319, $bb320;

  $bb320:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb321;

  $bb321:
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $p547 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(77, 8)));
    goto corral_source_split_14251;

  corral_source_split_14251:
    assume {:verifier.code 0} true;
    $i548 := $p2i.ref.i64($p547);
    goto corral_source_split_14252;

  corral_source_split_14252:
    assume {:verifier.code 0} true;
    $i549 := $ne.i64($i548, 0);
    goto corral_source_split_14253;

  corral_source_split_14253:
    assume {:verifier.code 0} true;
    $i550 := $zext.i1.i32($i549);
    goto corral_source_split_14254;

  corral_source_split_14254:
    assume {:verifier.code 0} true;
    $i551 := $sext.i32.i64($i550);
    goto corral_source_split_14255;

  corral_source_split_14255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2511} $i552 := ldv__builtin_expect($i551, 0);
    goto corral_source_split_14256;

  corral_source_split_14256:
    assume {:verifier.code 0} true;
    $i553 := $ne.i64($i552, 0);
    goto corral_source_split_14257;

  corral_source_split_14257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i553} true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i553 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    goto $bb326;

  $bb326:
    assume {:verifier.code 0} true;
    $p554 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(78, 8)));
    goto corral_source_split_14259;

  corral_source_split_14259:
    assume {:verifier.code 0} true;
    $i555 := $p2i.ref.i64($p554);
    goto corral_source_split_14260;

  corral_source_split_14260:
    assume {:verifier.code 0} true;
    $i556 := $ne.i64($i555, 0);
    goto corral_source_split_14261;

  corral_source_split_14261:
    assume {:verifier.code 0} true;
    $i557 := $zext.i1.i32($i556);
    goto corral_source_split_14262;

  corral_source_split_14262:
    assume {:verifier.code 0} true;
    $i558 := $sext.i32.i64($i557);
    goto corral_source_split_14263;

  corral_source_split_14263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2512} $i559 := ldv__builtin_expect($i558, 0);
    goto corral_source_split_14264;

  corral_source_split_14264:
    assume {:verifier.code 0} true;
    $i560 := $ne.i64($i559, 0);
    goto corral_source_split_14265;

  corral_source_split_14265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i560} true;
    goto $bb327, $bb328;

  $bb328:
    assume !($i560 == 1);
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    $p561 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(79, 8)));
    goto corral_source_split_14267;

  corral_source_split_14267:
    assume {:verifier.code 0} true;
    $i562 := $p2i.ref.i64($p561);
    goto corral_source_split_14268;

  corral_source_split_14268:
    assume {:verifier.code 0} true;
    $i563 := $ne.i64($i562, 0);
    goto corral_source_split_14269;

  corral_source_split_14269:
    assume {:verifier.code 0} true;
    $i564 := $zext.i1.i32($i563);
    goto corral_source_split_14270;

  corral_source_split_14270:
    assume {:verifier.code 0} true;
    $i565 := $sext.i32.i64($i564);
    goto corral_source_split_14271;

  corral_source_split_14271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2513} $i566 := ldv__builtin_expect($i565, 0);
    goto corral_source_split_14272;

  corral_source_split_14272:
    assume {:verifier.code 0} true;
    $i567 := $ne.i64($i566, 0);
    goto corral_source_split_14273;

  corral_source_split_14273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i567} true;
    goto $bb331, $bb332;

  $bb332:
    assume !($i567 == 1);
    assume {:verifier.code 0} true;
    goto $bb333;

  $bb333:
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $p568 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(80, 8)));
    goto corral_source_split_14275;

  corral_source_split_14275:
    assume {:verifier.code 0} true;
    $i569 := $p2i.ref.i64($p568);
    goto corral_source_split_14276;

  corral_source_split_14276:
    assume {:verifier.code 0} true;
    $i570 := $ne.i64($i569, 0);
    goto corral_source_split_14277;

  corral_source_split_14277:
    assume {:verifier.code 0} true;
    $i571 := $zext.i1.i32($i570);
    goto corral_source_split_14278;

  corral_source_split_14278:
    assume {:verifier.code 0} true;
    $i572 := $sext.i32.i64($i571);
    goto corral_source_split_14279;

  corral_source_split_14279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2514} $i573 := ldv__builtin_expect($i572, 0);
    goto corral_source_split_14280;

  corral_source_split_14280:
    assume {:verifier.code 0} true;
    $i574 := $ne.i64($i573, 0);
    goto corral_source_split_14281;

  corral_source_split_14281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i574} true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i574 == 1);
    assume {:verifier.code 0} true;
    goto $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    goto $bb338;

  $bb338:
    assume {:verifier.code 0} true;
    $p575 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(81, 8)));
    goto corral_source_split_14283;

  corral_source_split_14283:
    assume {:verifier.code 0} true;
    $i576 := $p2i.ref.i64($p575);
    goto corral_source_split_14284;

  corral_source_split_14284:
    assume {:verifier.code 0} true;
    $i577 := $ne.i64($i576, 0);
    goto corral_source_split_14285;

  corral_source_split_14285:
    assume {:verifier.code 0} true;
    $i578 := $zext.i1.i32($i577);
    goto corral_source_split_14286;

  corral_source_split_14286:
    assume {:verifier.code 0} true;
    $i579 := $sext.i32.i64($i578);
    goto corral_source_split_14287;

  corral_source_split_14287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2515} $i580 := ldv__builtin_expect($i579, 0);
    goto corral_source_split_14288;

  corral_source_split_14288:
    assume {:verifier.code 0} true;
    $i581 := $ne.i64($i580, 0);
    goto corral_source_split_14289;

  corral_source_split_14289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i581} true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i581 == 1);
    assume {:verifier.code 0} true;
    goto $bb341;

  $bb341:
    assume {:verifier.code 0} true;
    goto $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    $p582 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(82, 8)));
    goto corral_source_split_14291;

  corral_source_split_14291:
    assume {:verifier.code 0} true;
    $i583 := $p2i.ref.i64($p582);
    goto corral_source_split_14292;

  corral_source_split_14292:
    assume {:verifier.code 0} true;
    $i584 := $ne.i64($i583, 0);
    goto corral_source_split_14293;

  corral_source_split_14293:
    assume {:verifier.code 0} true;
    $i585 := $zext.i1.i32($i584);
    goto corral_source_split_14294;

  corral_source_split_14294:
    assume {:verifier.code 0} true;
    $i586 := $sext.i32.i64($i585);
    goto corral_source_split_14295;

  corral_source_split_14295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2516} $i587 := ldv__builtin_expect($i586, 0);
    goto corral_source_split_14296;

  corral_source_split_14296:
    assume {:verifier.code 0} true;
    $i588 := $ne.i64($i587, 0);
    goto corral_source_split_14297;

  corral_source_split_14297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i588} true;
    goto $bb343, $bb344;

  $bb344:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb345;

  $bb345:
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $p589 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(83, 8)));
    goto corral_source_split_14299;

  corral_source_split_14299:
    assume {:verifier.code 0} true;
    $i590 := $p2i.ref.i64($p589);
    goto corral_source_split_14300;

  corral_source_split_14300:
    assume {:verifier.code 0} true;
    $i591 := $ne.i64($i590, 0);
    goto corral_source_split_14301;

  corral_source_split_14301:
    assume {:verifier.code 0} true;
    $i592 := $zext.i1.i32($i591);
    goto corral_source_split_14302;

  corral_source_split_14302:
    assume {:verifier.code 0} true;
    $i593 := $sext.i32.i64($i592);
    goto corral_source_split_14303;

  corral_source_split_14303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2517} $i594 := ldv__builtin_expect($i593, 0);
    goto corral_source_split_14304;

  corral_source_split_14304:
    assume {:verifier.code 0} true;
    $i595 := $ne.i64($i594, 0);
    goto corral_source_split_14305;

  corral_source_split_14305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i595} true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i595 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    $p596 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(84, 8)));
    goto corral_source_split_14307;

  corral_source_split_14307:
    assume {:verifier.code 0} true;
    $i597 := $p2i.ref.i64($p596);
    goto corral_source_split_14308;

  corral_source_split_14308:
    assume {:verifier.code 0} true;
    $i598 := $ne.i64($i597, 0);
    goto corral_source_split_14309;

  corral_source_split_14309:
    assume {:verifier.code 0} true;
    $i599 := $zext.i1.i32($i598);
    goto corral_source_split_14310;

  corral_source_split_14310:
    assume {:verifier.code 0} true;
    $i600 := $sext.i32.i64($i599);
    goto corral_source_split_14311;

  corral_source_split_14311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2518} $i601 := ldv__builtin_expect($i600, 0);
    goto corral_source_split_14312;

  corral_source_split_14312:
    assume {:verifier.code 0} true;
    $i602 := $ne.i64($i601, 0);
    goto corral_source_split_14313;

  corral_source_split_14313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i602} true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i602 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    $p603 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(85, 8)));
    goto corral_source_split_14315;

  corral_source_split_14315:
    assume {:verifier.code 0} true;
    $i604 := $p2i.ref.i64($p603);
    goto corral_source_split_14316;

  corral_source_split_14316:
    assume {:verifier.code 0} true;
    $i605 := $ne.i64($i604, 0);
    goto corral_source_split_14317;

  corral_source_split_14317:
    assume {:verifier.code 0} true;
    $i606 := $zext.i1.i32($i605);
    goto corral_source_split_14318;

  corral_source_split_14318:
    assume {:verifier.code 0} true;
    $i607 := $sext.i32.i64($i606);
    goto corral_source_split_14319;

  corral_source_split_14319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2519} $i608 := ldv__builtin_expect($i607, 0);
    goto corral_source_split_14320;

  corral_source_split_14320:
    assume {:verifier.code 0} true;
    $i609 := $ne.i64($i608, 0);
    goto corral_source_split_14321;

  corral_source_split_14321:
    assume {:verifier.code 0} true;
    assume {:branchcond $i609} true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i609 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb358;

  $bb358:
    assume {:verifier.code 0} true;
    $p610 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(86, 8)));
    goto corral_source_split_14323;

  corral_source_split_14323:
    assume {:verifier.code 0} true;
    $i611 := $p2i.ref.i64($p610);
    goto corral_source_split_14324;

  corral_source_split_14324:
    assume {:verifier.code 0} true;
    $i612 := $ne.i64($i611, 0);
    goto corral_source_split_14325;

  corral_source_split_14325:
    assume {:verifier.code 0} true;
    $i613 := $zext.i1.i32($i612);
    goto corral_source_split_14326;

  corral_source_split_14326:
    assume {:verifier.code 0} true;
    $i614 := $sext.i32.i64($i613);
    goto corral_source_split_14327;

  corral_source_split_14327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2520} $i615 := ldv__builtin_expect($i614, 0);
    goto corral_source_split_14328;

  corral_source_split_14328:
    assume {:verifier.code 0} true;
    $i616 := $ne.i64($i615, 0);
    goto corral_source_split_14329;

  corral_source_split_14329:
    assume {:verifier.code 0} true;
    assume {:branchcond $i616} true;
    goto $bb359, $bb360;

  $bb360:
    assume !($i616 == 1);
    assume {:verifier.code 0} true;
    goto $bb361;

  $bb361:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    $p617 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(87, 8)));
    goto corral_source_split_14331;

  corral_source_split_14331:
    assume {:verifier.code 0} true;
    $i618 := $p2i.ref.i64($p617);
    goto corral_source_split_14332;

  corral_source_split_14332:
    assume {:verifier.code 0} true;
    $i619 := $ne.i64($i618, 0);
    goto corral_source_split_14333;

  corral_source_split_14333:
    assume {:verifier.code 0} true;
    $i620 := $zext.i1.i32($i619);
    goto corral_source_split_14334;

  corral_source_split_14334:
    assume {:verifier.code 0} true;
    $i621 := $sext.i32.i64($i620);
    goto corral_source_split_14335;

  corral_source_split_14335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2521} $i622 := ldv__builtin_expect($i621, 0);
    goto corral_source_split_14336;

  corral_source_split_14336:
    assume {:verifier.code 0} true;
    $i623 := $ne.i64($i622, 0);
    goto corral_source_split_14337;

  corral_source_split_14337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i623} true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $p624 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(88, 8)));
    goto corral_source_split_14339;

  corral_source_split_14339:
    assume {:verifier.code 0} true;
    $i625 := $p2i.ref.i64($p624);
    goto corral_source_split_14340;

  corral_source_split_14340:
    assume {:verifier.code 0} true;
    $i626 := $ne.i64($i625, 0);
    goto corral_source_split_14341;

  corral_source_split_14341:
    assume {:verifier.code 0} true;
    $i627 := $zext.i1.i32($i626);
    goto corral_source_split_14342;

  corral_source_split_14342:
    assume {:verifier.code 0} true;
    $i628 := $sext.i32.i64($i627);
    goto corral_source_split_14343;

  corral_source_split_14343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2522} $i629 := ldv__builtin_expect($i628, 0);
    goto corral_source_split_14344;

  corral_source_split_14344:
    assume {:verifier.code 0} true;
    $i630 := $ne.i64($i629, 0);
    goto corral_source_split_14345;

  corral_source_split_14345:
    assume {:verifier.code 0} true;
    assume {:branchcond $i630} true;
    goto $bb367, $bb368;

  $bb368:
    assume !($i630 == 1);
    assume {:verifier.code 0} true;
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb370;

  $bb370:
    assume {:verifier.code 0} true;
    $p631 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(89, 8)));
    goto corral_source_split_14347;

  corral_source_split_14347:
    assume {:verifier.code 0} true;
    $i632 := $p2i.ref.i64($p631);
    goto corral_source_split_14348;

  corral_source_split_14348:
    assume {:verifier.code 0} true;
    $i633 := $ne.i64($i632, 0);
    goto corral_source_split_14349;

  corral_source_split_14349:
    assume {:verifier.code 0} true;
    $i634 := $zext.i1.i32($i633);
    goto corral_source_split_14350;

  corral_source_split_14350:
    assume {:verifier.code 0} true;
    $i635 := $sext.i32.i64($i634);
    goto corral_source_split_14351;

  corral_source_split_14351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2523} $i636 := ldv__builtin_expect($i635, 0);
    goto corral_source_split_14352;

  corral_source_split_14352:
    assume {:verifier.code 0} true;
    $i637 := $ne.i64($i636, 0);
    goto corral_source_split_14353;

  corral_source_split_14353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i637} true;
    goto $bb371, $bb372;

  $bb372:
    assume !($i637 == 1);
    assume {:verifier.code 0} true;
    goto $bb373;

  $bb373:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    $p638 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(90, 8)));
    goto corral_source_split_14355;

  corral_source_split_14355:
    assume {:verifier.code 0} true;
    $i639 := $p2i.ref.i64($p638);
    goto corral_source_split_14356;

  corral_source_split_14356:
    assume {:verifier.code 0} true;
    $i640 := $ne.i64($i639, 0);
    goto corral_source_split_14357;

  corral_source_split_14357:
    assume {:verifier.code 0} true;
    $i641 := $zext.i1.i32($i640);
    goto corral_source_split_14358;

  corral_source_split_14358:
    assume {:verifier.code 0} true;
    $i642 := $sext.i32.i64($i641);
    goto corral_source_split_14359;

  corral_source_split_14359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2524} $i643 := ldv__builtin_expect($i642, 0);
    goto corral_source_split_14360;

  corral_source_split_14360:
    assume {:verifier.code 0} true;
    $i644 := $ne.i64($i643, 0);
    goto corral_source_split_14361;

  corral_source_split_14361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i644} true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i644 == 1);
    assume {:verifier.code 0} true;
    goto $bb377;

  $bb377:
    assume {:verifier.code 0} true;
    goto $bb378;

  $bb378:
    assume {:verifier.code 0} true;
    $p645 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(91, 8)));
    goto corral_source_split_14363;

  corral_source_split_14363:
    assume {:verifier.code 0} true;
    $i646 := $p2i.ref.i64($p645);
    goto corral_source_split_14364;

  corral_source_split_14364:
    assume {:verifier.code 0} true;
    $i647 := $ne.i64($i646, 0);
    goto corral_source_split_14365;

  corral_source_split_14365:
    assume {:verifier.code 0} true;
    $i648 := $zext.i1.i32($i647);
    goto corral_source_split_14366;

  corral_source_split_14366:
    assume {:verifier.code 0} true;
    $i649 := $sext.i32.i64($i648);
    goto corral_source_split_14367;

  corral_source_split_14367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2525} $i650 := ldv__builtin_expect($i649, 0);
    goto corral_source_split_14368;

  corral_source_split_14368:
    assume {:verifier.code 0} true;
    $i651 := $ne.i64($i650, 0);
    goto corral_source_split_14369;

  corral_source_split_14369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i651} true;
    goto $bb379, $bb380;

  $bb380:
    assume !($i651 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb382;

  $bb382:
    assume {:verifier.code 0} true;
    $p652 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(92, 8)));
    goto corral_source_split_14371;

  corral_source_split_14371:
    assume {:verifier.code 0} true;
    $i653 := $p2i.ref.i64($p652);
    goto corral_source_split_14372;

  corral_source_split_14372:
    assume {:verifier.code 0} true;
    $i654 := $ne.i64($i653, 0);
    goto corral_source_split_14373;

  corral_source_split_14373:
    assume {:verifier.code 0} true;
    $i655 := $zext.i1.i32($i654);
    goto corral_source_split_14374;

  corral_source_split_14374:
    assume {:verifier.code 0} true;
    $i656 := $sext.i32.i64($i655);
    goto corral_source_split_14375;

  corral_source_split_14375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2526} $i657 := ldv__builtin_expect($i656, 0);
    goto corral_source_split_14376;

  corral_source_split_14376:
    assume {:verifier.code 0} true;
    $i658 := $ne.i64($i657, 0);
    goto corral_source_split_14377;

  corral_source_split_14377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i658} true;
    goto $bb383, $bb384;

  $bb384:
    assume !($i658 == 1);
    assume {:verifier.code 0} true;
    goto $bb385;

  $bb385:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $p659 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(93, 8)));
    goto corral_source_split_14379;

  corral_source_split_14379:
    assume {:verifier.code 0} true;
    $i660 := $p2i.ref.i64($p659);
    goto corral_source_split_14380;

  corral_source_split_14380:
    assume {:verifier.code 0} true;
    $i661 := $ne.i64($i660, 0);
    goto corral_source_split_14381;

  corral_source_split_14381:
    assume {:verifier.code 0} true;
    $i662 := $zext.i1.i32($i661);
    goto corral_source_split_14382;

  corral_source_split_14382:
    assume {:verifier.code 0} true;
    $i663 := $sext.i32.i64($i662);
    goto corral_source_split_14383;

  corral_source_split_14383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2527} $i664 := ldv__builtin_expect($i663, 0);
    goto corral_source_split_14384;

  corral_source_split_14384:
    assume {:verifier.code 0} true;
    $i665 := $ne.i64($i664, 0);
    goto corral_source_split_14385;

  corral_source_split_14385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i665} true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i665 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    $p666 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(94, 8)));
    goto corral_source_split_14387;

  corral_source_split_14387:
    assume {:verifier.code 0} true;
    $i667 := $p2i.ref.i64($p666);
    goto corral_source_split_14388;

  corral_source_split_14388:
    assume {:verifier.code 0} true;
    $i668 := $ne.i64($i667, 0);
    goto corral_source_split_14389;

  corral_source_split_14389:
    assume {:verifier.code 0} true;
    $i669 := $zext.i1.i32($i668);
    goto corral_source_split_14390;

  corral_source_split_14390:
    assume {:verifier.code 0} true;
    $i670 := $sext.i32.i64($i669);
    goto corral_source_split_14391;

  corral_source_split_14391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2528} $i671 := ldv__builtin_expect($i670, 0);
    goto corral_source_split_14392;

  corral_source_split_14392:
    assume {:verifier.code 0} true;
    $i672 := $ne.i64($i671, 0);
    goto corral_source_split_14393;

  corral_source_split_14393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i672} true;
    goto $bb391, $bb392;

  $bb392:
    assume !($i672 == 1);
    assume {:verifier.code 0} true;
    goto $bb393;

  $bb393:
    assume {:verifier.code 0} true;
    goto $bb394;

  $bb394:
    assume {:verifier.code 0} true;
    $p673 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(95, 8)));
    goto corral_source_split_14395;

  corral_source_split_14395:
    assume {:verifier.code 0} true;
    $i674 := $p2i.ref.i64($p673);
    goto corral_source_split_14396;

  corral_source_split_14396:
    assume {:verifier.code 0} true;
    $i675 := $ne.i64($i674, 0);
    goto corral_source_split_14397;

  corral_source_split_14397:
    assume {:verifier.code 0} true;
    $i676 := $zext.i1.i32($i675);
    goto corral_source_split_14398;

  corral_source_split_14398:
    assume {:verifier.code 0} true;
    $i677 := $sext.i32.i64($i676);
    goto corral_source_split_14399;

  corral_source_split_14399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2529} $i678 := ldv__builtin_expect($i677, 0);
    goto corral_source_split_14400;

  corral_source_split_14400:
    assume {:verifier.code 0} true;
    $i679 := $ne.i64($i678, 0);
    goto corral_source_split_14401;

  corral_source_split_14401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i679} true;
    goto $bb395, $bb396;

  $bb396:
    assume !($i679 == 1);
    assume {:verifier.code 0} true;
    goto $bb397;

  $bb397:
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $p680 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(96, 8)));
    goto corral_source_split_14403;

  corral_source_split_14403:
    assume {:verifier.code 0} true;
    $i681 := $p2i.ref.i64($p680);
    goto corral_source_split_14404;

  corral_source_split_14404:
    assume {:verifier.code 0} true;
    $i682 := $ne.i64($i681, 0);
    goto corral_source_split_14405;

  corral_source_split_14405:
    assume {:verifier.code 0} true;
    $i683 := $zext.i1.i32($i682);
    goto corral_source_split_14406;

  corral_source_split_14406:
    assume {:verifier.code 0} true;
    $i684 := $sext.i32.i64($i683);
    goto corral_source_split_14407;

  corral_source_split_14407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2530} $i685 := ldv__builtin_expect($i684, 0);
    goto corral_source_split_14408;

  corral_source_split_14408:
    assume {:verifier.code 0} true;
    $i686 := $ne.i64($i685, 0);
    goto corral_source_split_14409;

  corral_source_split_14409:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    goto $bb402;

  $bb402:
    assume {:verifier.code 0} true;
    $p687 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(97, 8)));
    goto corral_source_split_14411;

  corral_source_split_14411:
    assume {:verifier.code 0} true;
    $i688 := $p2i.ref.i64($p687);
    goto corral_source_split_14412;

  corral_source_split_14412:
    assume {:verifier.code 0} true;
    $i689 := $ne.i64($i688, 0);
    goto corral_source_split_14413;

  corral_source_split_14413:
    assume {:verifier.code 0} true;
    $i690 := $zext.i1.i32($i689);
    goto corral_source_split_14414;

  corral_source_split_14414:
    assume {:verifier.code 0} true;
    $i691 := $sext.i32.i64($i690);
    goto corral_source_split_14415;

  corral_source_split_14415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2531} $i692 := ldv__builtin_expect($i691, 0);
    goto corral_source_split_14416;

  corral_source_split_14416:
    assume {:verifier.code 0} true;
    $i693 := $ne.i64($i692, 0);
    goto corral_source_split_14417;

  corral_source_split_14417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i693} true;
    goto $bb403, $bb404;

  $bb404:
    assume !($i693 == 1);
    assume {:verifier.code 0} true;
    goto $bb405;

  $bb405:
    assume {:verifier.code 0} true;
    goto $bb406;

  $bb406:
    assume {:verifier.code 0} true;
    $p694 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(98, 8)));
    goto corral_source_split_14419;

  corral_source_split_14419:
    assume {:verifier.code 0} true;
    $i695 := $p2i.ref.i64($p694);
    goto corral_source_split_14420;

  corral_source_split_14420:
    assume {:verifier.code 0} true;
    $i696 := $ne.i64($i695, 0);
    goto corral_source_split_14421;

  corral_source_split_14421:
    assume {:verifier.code 0} true;
    $i697 := $zext.i1.i32($i696);
    goto corral_source_split_14422;

  corral_source_split_14422:
    assume {:verifier.code 0} true;
    $i698 := $sext.i32.i64($i697);
    goto corral_source_split_14423;

  corral_source_split_14423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2532} $i699 := ldv__builtin_expect($i698, 0);
    goto corral_source_split_14424;

  corral_source_split_14424:
    assume {:verifier.code 0} true;
    $i700 := $ne.i64($i699, 0);
    goto corral_source_split_14425;

  corral_source_split_14425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i700} true;
    goto $bb407, $bb408;

  $bb408:
    assume !($i700 == 1);
    assume {:verifier.code 0} true;
    goto $bb409;

  $bb409:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $p701 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(99, 8)));
    goto corral_source_split_14427;

  corral_source_split_14427:
    assume {:verifier.code 0} true;
    $i702 := $p2i.ref.i64($p701);
    goto corral_source_split_14428;

  corral_source_split_14428:
    assume {:verifier.code 0} true;
    $i703 := $ne.i64($i702, 0);
    goto corral_source_split_14429;

  corral_source_split_14429:
    assume {:verifier.code 0} true;
    $i704 := $zext.i1.i32($i703);
    goto corral_source_split_14430;

  corral_source_split_14430:
    assume {:verifier.code 0} true;
    $i705 := $sext.i32.i64($i704);
    goto corral_source_split_14431;

  corral_source_split_14431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2533} $i706 := ldv__builtin_expect($i705, 0);
    goto corral_source_split_14432;

  corral_source_split_14432:
    assume {:verifier.code 0} true;
    $i707 := $ne.i64($i706, 0);
    goto corral_source_split_14433;

  corral_source_split_14433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i707} true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i707 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    goto $bb414;

  $bb414:
    assume {:verifier.code 0} true;
    $p708 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(100, 8)));
    goto corral_source_split_14435;

  corral_source_split_14435:
    assume {:verifier.code 0} true;
    $i709 := $p2i.ref.i64($p708);
    goto corral_source_split_14436;

  corral_source_split_14436:
    assume {:verifier.code 0} true;
    $i710 := $ne.i64($i709, 0);
    goto corral_source_split_14437;

  corral_source_split_14437:
    assume {:verifier.code 0} true;
    $i711 := $zext.i1.i32($i710);
    goto corral_source_split_14438;

  corral_source_split_14438:
    assume {:verifier.code 0} true;
    $i712 := $sext.i32.i64($i711);
    goto corral_source_split_14439;

  corral_source_split_14439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2534} $i713 := ldv__builtin_expect($i712, 0);
    goto corral_source_split_14440;

  corral_source_split_14440:
    assume {:verifier.code 0} true;
    $i714 := $ne.i64($i713, 0);
    goto corral_source_split_14441;

  corral_source_split_14441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i714} true;
    goto $bb415, $bb416;

  $bb416:
    assume !($i714 == 1);
    assume {:verifier.code 0} true;
    goto $bb417;

  $bb417:
    assume {:verifier.code 0} true;
    goto $bb418;

  $bb418:
    assume {:verifier.code 0} true;
    $p715 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(101, 8)));
    goto corral_source_split_14443;

  corral_source_split_14443:
    assume {:verifier.code 0} true;
    $i716 := $p2i.ref.i64($p715);
    goto corral_source_split_14444;

  corral_source_split_14444:
    assume {:verifier.code 0} true;
    $i717 := $ne.i64($i716, 0);
    goto corral_source_split_14445;

  corral_source_split_14445:
    assume {:verifier.code 0} true;
    $i718 := $zext.i1.i32($i717);
    goto corral_source_split_14446;

  corral_source_split_14446:
    assume {:verifier.code 0} true;
    $i719 := $sext.i32.i64($i718);
    goto corral_source_split_14447;

  corral_source_split_14447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2535} $i720 := ldv__builtin_expect($i719, 0);
    goto corral_source_split_14448;

  corral_source_split_14448:
    assume {:verifier.code 0} true;
    $i721 := $ne.i64($i720, 0);
    goto corral_source_split_14449;

  corral_source_split_14449:
    assume {:verifier.code 0} true;
    assume {:branchcond $i721} true;
    goto $bb419, $bb420;

  $bb420:
    assume !($i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb421;

  $bb421:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    $p722 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(102, 8)));
    goto corral_source_split_14451;

  corral_source_split_14451:
    assume {:verifier.code 0} true;
    $i723 := $p2i.ref.i64($p722);
    goto corral_source_split_14452;

  corral_source_split_14452:
    assume {:verifier.code 0} true;
    $i724 := $ne.i64($i723, 0);
    goto corral_source_split_14453;

  corral_source_split_14453:
    assume {:verifier.code 0} true;
    $i725 := $zext.i1.i32($i724);
    goto corral_source_split_14454;

  corral_source_split_14454:
    assume {:verifier.code 0} true;
    $i726 := $sext.i32.i64($i725);
    goto corral_source_split_14455;

  corral_source_split_14455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2536} $i727 := ldv__builtin_expect($i726, 0);
    goto corral_source_split_14456;

  corral_source_split_14456:
    assume {:verifier.code 0} true;
    $i728 := $ne.i64($i727, 0);
    goto corral_source_split_14457;

  corral_source_split_14457:
    assume {:verifier.code 0} true;
    assume {:branchcond $i728} true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i728 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    goto $bb426;

  $bb426:
    assume {:verifier.code 0} true;
    $p729 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(103, 8)));
    goto corral_source_split_14459;

  corral_source_split_14459:
    assume {:verifier.code 0} true;
    $i730 := $p2i.ref.i64($p729);
    goto corral_source_split_14460;

  corral_source_split_14460:
    assume {:verifier.code 0} true;
    $i731 := $ne.i64($i730, 0);
    goto corral_source_split_14461;

  corral_source_split_14461:
    assume {:verifier.code 0} true;
    $i732 := $zext.i1.i32($i731);
    goto corral_source_split_14462;

  corral_source_split_14462:
    assume {:verifier.code 0} true;
    $i733 := $sext.i32.i64($i732);
    goto corral_source_split_14463;

  corral_source_split_14463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2537} $i734 := ldv__builtin_expect($i733, 0);
    goto corral_source_split_14464;

  corral_source_split_14464:
    assume {:verifier.code 0} true;
    $i735 := $ne.i64($i734, 0);
    goto corral_source_split_14465;

  corral_source_split_14465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i735} true;
    goto $bb427, $bb428;

  $bb428:
    assume !($i735 == 1);
    assume {:verifier.code 0} true;
    goto $bb429;

  $bb429:
    assume {:verifier.code 0} true;
    goto $bb430;

  $bb430:
    assume {:verifier.code 0} true;
    $p736 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(104, 8)));
    goto corral_source_split_14467;

  corral_source_split_14467:
    assume {:verifier.code 0} true;
    $i737 := $p2i.ref.i64($p736);
    goto corral_source_split_14468;

  corral_source_split_14468:
    assume {:verifier.code 0} true;
    $i738 := $ne.i64($i737, 0);
    goto corral_source_split_14469;

  corral_source_split_14469:
    assume {:verifier.code 0} true;
    $i739 := $zext.i1.i32($i738);
    goto corral_source_split_14470;

  corral_source_split_14470:
    assume {:verifier.code 0} true;
    $i740 := $sext.i32.i64($i739);
    goto corral_source_split_14471;

  corral_source_split_14471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2538} $i741 := ldv__builtin_expect($i740, 0);
    goto corral_source_split_14472;

  corral_source_split_14472:
    assume {:verifier.code 0} true;
    $i742 := $ne.i64($i741, 0);
    goto corral_source_split_14473;

  corral_source_split_14473:
    assume {:verifier.code 0} true;
    assume {:branchcond $i742} true;
    goto $bb431, $bb432;

  $bb432:
    assume !($i742 == 1);
    assume {:verifier.code 0} true;
    goto $bb433;

  $bb433:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    $p743 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(105, 8)));
    goto corral_source_split_14475;

  corral_source_split_14475:
    assume {:verifier.code 0} true;
    $i744 := $p2i.ref.i64($p743);
    goto corral_source_split_14476;

  corral_source_split_14476:
    assume {:verifier.code 0} true;
    $i745 := $ne.i64($i744, 0);
    goto corral_source_split_14477;

  corral_source_split_14477:
    assume {:verifier.code 0} true;
    $i746 := $zext.i1.i32($i745);
    goto corral_source_split_14478;

  corral_source_split_14478:
    assume {:verifier.code 0} true;
    $i747 := $sext.i32.i64($i746);
    goto corral_source_split_14479;

  corral_source_split_14479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2539} $i748 := ldv__builtin_expect($i747, 0);
    goto corral_source_split_14480;

  corral_source_split_14480:
    assume {:verifier.code 0} true;
    $i749 := $ne.i64($i748, 0);
    goto corral_source_split_14481;

  corral_source_split_14481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i749} true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    goto $bb438;

  $bb438:
    assume {:verifier.code 0} true;
    $p750 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(106, 8)));
    goto corral_source_split_14483;

  corral_source_split_14483:
    assume {:verifier.code 0} true;
    $i751 := $p2i.ref.i64($p750);
    goto corral_source_split_14484;

  corral_source_split_14484:
    assume {:verifier.code 0} true;
    $i752 := $ne.i64($i751, 0);
    goto corral_source_split_14485;

  corral_source_split_14485:
    assume {:verifier.code 0} true;
    $i753 := $zext.i1.i32($i752);
    goto corral_source_split_14486;

  corral_source_split_14486:
    assume {:verifier.code 0} true;
    $i754 := $sext.i32.i64($i753);
    goto corral_source_split_14487;

  corral_source_split_14487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2540} $i755 := ldv__builtin_expect($i754, 0);
    goto corral_source_split_14488;

  corral_source_split_14488:
    assume {:verifier.code 0} true;
    $i756 := $ne.i64($i755, 0);
    goto corral_source_split_14489;

  corral_source_split_14489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i756} true;
    goto $bb439, $bb440;

  $bb440:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    goto $bb441;

  $bb441:
    assume {:verifier.code 0} true;
    goto $bb442;

  $bb442:
    assume {:verifier.code 0} true;
    $p757 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(107, 8)));
    goto corral_source_split_14491;

  corral_source_split_14491:
    assume {:verifier.code 0} true;
    $i758 := $p2i.ref.i64($p757);
    goto corral_source_split_14492;

  corral_source_split_14492:
    assume {:verifier.code 0} true;
    $i759 := $ne.i64($i758, 0);
    goto corral_source_split_14493;

  corral_source_split_14493:
    assume {:verifier.code 0} true;
    $i760 := $zext.i1.i32($i759);
    goto corral_source_split_14494;

  corral_source_split_14494:
    assume {:verifier.code 0} true;
    $i761 := $sext.i32.i64($i760);
    goto corral_source_split_14495;

  corral_source_split_14495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2541} $i762 := ldv__builtin_expect($i761, 0);
    goto corral_source_split_14496;

  corral_source_split_14496:
    assume {:verifier.code 0} true;
    $i763 := $ne.i64($i762, 0);
    goto corral_source_split_14497;

  corral_source_split_14497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i763} true;
    goto $bb443, $bb444;

  $bb444:
    assume !($i763 == 1);
    assume {:verifier.code 0} true;
    goto $bb445;

  $bb445:
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    $p764 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(108, 8)));
    goto corral_source_split_14499;

  corral_source_split_14499:
    assume {:verifier.code 0} true;
    $i765 := $p2i.ref.i64($p764);
    goto corral_source_split_14500;

  corral_source_split_14500:
    assume {:verifier.code 0} true;
    $i766 := $ne.i64($i765, 0);
    goto corral_source_split_14501;

  corral_source_split_14501:
    assume {:verifier.code 0} true;
    $i767 := $zext.i1.i32($i766);
    goto corral_source_split_14502;

  corral_source_split_14502:
    assume {:verifier.code 0} true;
    $i768 := $sext.i32.i64($i767);
    goto corral_source_split_14503;

  corral_source_split_14503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2542} $i769 := ldv__builtin_expect($i768, 0);
    goto corral_source_split_14504;

  corral_source_split_14504:
    assume {:verifier.code 0} true;
    $i770 := $ne.i64($i769, 0);
    goto corral_source_split_14505;

  corral_source_split_14505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i770} true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i770 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    goto $bb450;

  $bb450:
    assume {:verifier.code 0} true;
    $p771 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(109, 8)));
    goto corral_source_split_14507;

  corral_source_split_14507:
    assume {:verifier.code 0} true;
    $i772 := $p2i.ref.i64($p771);
    goto corral_source_split_14508;

  corral_source_split_14508:
    assume {:verifier.code 0} true;
    $i773 := $ne.i64($i772, 0);
    goto corral_source_split_14509;

  corral_source_split_14509:
    assume {:verifier.code 0} true;
    $i774 := $zext.i1.i32($i773);
    goto corral_source_split_14510;

  corral_source_split_14510:
    assume {:verifier.code 0} true;
    $i775 := $sext.i32.i64($i774);
    goto corral_source_split_14511;

  corral_source_split_14511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2543} $i776 := ldv__builtin_expect($i775, 0);
    goto corral_source_split_14512;

  corral_source_split_14512:
    assume {:verifier.code 0} true;
    $i777 := $ne.i64($i776, 0);
    goto corral_source_split_14513;

  corral_source_split_14513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i777} true;
    goto $bb451, $bb452;

  $bb452:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    goto $bb453;

  $bb453:
    assume {:verifier.code 0} true;
    goto $bb454;

  $bb454:
    assume {:verifier.code 0} true;
    $p778 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(110, 8)));
    goto corral_source_split_14515;

  corral_source_split_14515:
    assume {:verifier.code 0} true;
    $i779 := $p2i.ref.i64($p778);
    goto corral_source_split_14516;

  corral_source_split_14516:
    assume {:verifier.code 0} true;
    $i780 := $ne.i64($i779, 0);
    goto corral_source_split_14517;

  corral_source_split_14517:
    assume {:verifier.code 0} true;
    $i781 := $zext.i1.i32($i780);
    goto corral_source_split_14518;

  corral_source_split_14518:
    assume {:verifier.code 0} true;
    $i782 := $sext.i32.i64($i781);
    goto corral_source_split_14519;

  corral_source_split_14519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2544} $i783 := ldv__builtin_expect($i782, 0);
    goto corral_source_split_14520;

  corral_source_split_14520:
    assume {:verifier.code 0} true;
    $i784 := $ne.i64($i783, 0);
    goto corral_source_split_14521;

  corral_source_split_14521:
    assume {:verifier.code 0} true;
    assume {:branchcond $i784} true;
    goto $bb455, $bb456;

  $bb456:
    assume !($i784 == 1);
    assume {:verifier.code 0} true;
    goto $bb457;

  $bb457:
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    $p785 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(111, 8)));
    goto corral_source_split_14523;

  corral_source_split_14523:
    assume {:verifier.code 0} true;
    $i786 := $p2i.ref.i64($p785);
    goto corral_source_split_14524;

  corral_source_split_14524:
    assume {:verifier.code 0} true;
    $i787 := $ne.i64($i786, 0);
    goto corral_source_split_14525;

  corral_source_split_14525:
    assume {:verifier.code 0} true;
    $i788 := $zext.i1.i32($i787);
    goto corral_source_split_14526;

  corral_source_split_14526:
    assume {:verifier.code 0} true;
    $i789 := $sext.i32.i64($i788);
    goto corral_source_split_14527;

  corral_source_split_14527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2545} $i790 := ldv__builtin_expect($i789, 0);
    goto corral_source_split_14528;

  corral_source_split_14528:
    assume {:verifier.code 0} true;
    $i791 := $ne.i64($i790, 0);
    goto corral_source_split_14529;

  corral_source_split_14529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i791} true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i791 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    goto $bb462;

  $bb462:
    assume {:verifier.code 0} true;
    $p792 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(112, 8)));
    goto corral_source_split_14531;

  corral_source_split_14531:
    assume {:verifier.code 0} true;
    $i793 := $p2i.ref.i64($p792);
    goto corral_source_split_14532;

  corral_source_split_14532:
    assume {:verifier.code 0} true;
    $i794 := $ne.i64($i793, 0);
    goto corral_source_split_14533;

  corral_source_split_14533:
    assume {:verifier.code 0} true;
    $i795 := $zext.i1.i32($i794);
    goto corral_source_split_14534;

  corral_source_split_14534:
    assume {:verifier.code 0} true;
    $i796 := $sext.i32.i64($i795);
    goto corral_source_split_14535;

  corral_source_split_14535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2546} $i797 := ldv__builtin_expect($i796, 0);
    goto corral_source_split_14536;

  corral_source_split_14536:
    assume {:verifier.code 0} true;
    $i798 := $ne.i64($i797, 0);
    goto corral_source_split_14537;

  corral_source_split_14537:
    assume {:verifier.code 0} true;
    assume {:branchcond $i798} true;
    goto $bb463, $bb464;

  $bb464:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb465;

  $bb465:
    assume {:verifier.code 0} true;
    goto $bb466;

  $bb466:
    assume {:verifier.code 0} true;
    $p799 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(113, 8)));
    goto corral_source_split_14539;

  corral_source_split_14539:
    assume {:verifier.code 0} true;
    $i800 := $p2i.ref.i64($p799);
    goto corral_source_split_14540;

  corral_source_split_14540:
    assume {:verifier.code 0} true;
    $i801 := $ne.i64($i800, 0);
    goto corral_source_split_14541;

  corral_source_split_14541:
    assume {:verifier.code 0} true;
    $i802 := $zext.i1.i32($i801);
    goto corral_source_split_14542;

  corral_source_split_14542:
    assume {:verifier.code 0} true;
    $i803 := $sext.i32.i64($i802);
    goto corral_source_split_14543;

  corral_source_split_14543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2547} $i804 := ldv__builtin_expect($i803, 0);
    goto corral_source_split_14544;

  corral_source_split_14544:
    assume {:verifier.code 0} true;
    $i805 := $ne.i64($i804, 0);
    goto corral_source_split_14545;

  corral_source_split_14545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i805} true;
    goto $bb467, $bb468;

  $bb468:
    assume !($i805 == 1);
    assume {:verifier.code 0} true;
    goto $bb469;

  $bb469:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(114, 8)));
    goto corral_source_split_14547;

  corral_source_split_14547:
    assume {:verifier.code 0} true;
    $i807 := $p2i.ref.i64($p806);
    goto corral_source_split_14548;

  corral_source_split_14548:
    assume {:verifier.code 0} true;
    $i808 := $ne.i64($i807, 0);
    goto corral_source_split_14549;

  corral_source_split_14549:
    assume {:verifier.code 0} true;
    $i809 := $zext.i1.i32($i808);
    goto corral_source_split_14550;

  corral_source_split_14550:
    assume {:verifier.code 0} true;
    $i810 := $sext.i32.i64($i809);
    goto corral_source_split_14551;

  corral_source_split_14551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2548} $i811 := ldv__builtin_expect($i810, 0);
    goto corral_source_split_14552;

  corral_source_split_14552:
    assume {:verifier.code 0} true;
    $i812 := $ne.i64($i811, 0);
    goto corral_source_split_14553;

  corral_source_split_14553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i812} true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i812 == 1);
    assume {:verifier.code 0} true;
    goto $bb473;

  $bb473:
    assume {:verifier.code 0} true;
    goto $bb474;

  $bb474:
    assume {:verifier.code 0} true;
    $p813 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(115, 8)));
    goto corral_source_split_14555;

  corral_source_split_14555:
    assume {:verifier.code 0} true;
    $i814 := $p2i.ref.i64($p813);
    goto corral_source_split_14556;

  corral_source_split_14556:
    assume {:verifier.code 0} true;
    $i815 := $ne.i64($i814, 0);
    goto corral_source_split_14557;

  corral_source_split_14557:
    assume {:verifier.code 0} true;
    $i816 := $zext.i1.i32($i815);
    goto corral_source_split_14558;

  corral_source_split_14558:
    assume {:verifier.code 0} true;
    $i817 := $sext.i32.i64($i816);
    goto corral_source_split_14559;

  corral_source_split_14559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2549} $i818 := ldv__builtin_expect($i817, 0);
    goto corral_source_split_14560;

  corral_source_split_14560:
    assume {:verifier.code 0} true;
    $i819 := $ne.i64($i818, 0);
    goto corral_source_split_14561;

  corral_source_split_14561:
    assume {:verifier.code 0} true;
    assume {:branchcond $i819} true;
    goto $bb475, $bb476;

  $bb476:
    assume !($i819 == 1);
    assume {:verifier.code 0} true;
    goto $bb477;

  $bb477:
    assume {:verifier.code 0} true;
    goto $bb478;

  $bb478:
    assume {:verifier.code 0} true;
    $p820 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(116, 8)));
    goto corral_source_split_14563;

  corral_source_split_14563:
    assume {:verifier.code 0} true;
    $i821 := $p2i.ref.i64($p820);
    goto corral_source_split_14564;

  corral_source_split_14564:
    assume {:verifier.code 0} true;
    $i822 := $ne.i64($i821, 0);
    goto corral_source_split_14565;

  corral_source_split_14565:
    assume {:verifier.code 0} true;
    $i823 := $zext.i1.i32($i822);
    goto corral_source_split_14566;

  corral_source_split_14566:
    assume {:verifier.code 0} true;
    $i824 := $sext.i32.i64($i823);
    goto corral_source_split_14567;

  corral_source_split_14567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2550} $i825 := ldv__builtin_expect($i824, 0);
    goto corral_source_split_14568;

  corral_source_split_14568:
    assume {:verifier.code 0} true;
    $i826 := $ne.i64($i825, 0);
    goto corral_source_split_14569;

  corral_source_split_14569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i826} true;
    goto $bb479, $bb480;

  $bb480:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb481;

  $bb481:
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    $p827 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(117, 8)));
    goto corral_source_split_14571;

  corral_source_split_14571:
    assume {:verifier.code 0} true;
    $i828 := $p2i.ref.i64($p827);
    goto corral_source_split_14572;

  corral_source_split_14572:
    assume {:verifier.code 0} true;
    $i829 := $ne.i64($i828, 0);
    goto corral_source_split_14573;

  corral_source_split_14573:
    assume {:verifier.code 0} true;
    $i830 := $zext.i1.i32($i829);
    goto corral_source_split_14574;

  corral_source_split_14574:
    assume {:verifier.code 0} true;
    $i831 := $sext.i32.i64($i830);
    goto corral_source_split_14575;

  corral_source_split_14575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2551} $i832 := ldv__builtin_expect($i831, 0);
    goto corral_source_split_14576;

  corral_source_split_14576:
    assume {:verifier.code 0} true;
    $i833 := $ne.i64($i832, 0);
    goto corral_source_split_14577;

  corral_source_split_14577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i833} true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i833 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    goto $bb486;

  $bb486:
    assume {:verifier.code 0} true;
    $p834 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(118, 8)));
    goto corral_source_split_14579;

  corral_source_split_14579:
    assume {:verifier.code 0} true;
    $i835 := $p2i.ref.i64($p834);
    goto corral_source_split_14580;

  corral_source_split_14580:
    assume {:verifier.code 0} true;
    $i836 := $ne.i64($i835, 0);
    goto corral_source_split_14581;

  corral_source_split_14581:
    assume {:verifier.code 0} true;
    $i837 := $zext.i1.i32($i836);
    goto corral_source_split_14582;

  corral_source_split_14582:
    assume {:verifier.code 0} true;
    $i838 := $sext.i32.i64($i837);
    goto corral_source_split_14583;

  corral_source_split_14583:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2552} $i839 := ldv__builtin_expect($i838, 0);
    goto corral_source_split_14584;

  corral_source_split_14584:
    assume {:verifier.code 0} true;
    $i840 := $ne.i64($i839, 0);
    goto corral_source_split_14585;

  corral_source_split_14585:
    assume {:verifier.code 0} true;
    assume {:branchcond $i840} true;
    goto $bb487, $bb488;

  $bb488:
    assume !($i840 == 1);
    assume {:verifier.code 0} true;
    goto $bb489;

  $bb489:
    assume {:verifier.code 0} true;
    goto $bb490;

  $bb490:
    assume {:verifier.code 0} true;
    $p841 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(119, 8)));
    goto corral_source_split_14587;

  corral_source_split_14587:
    assume {:verifier.code 0} true;
    $i842 := $p2i.ref.i64($p841);
    goto corral_source_split_14588;

  corral_source_split_14588:
    assume {:verifier.code 0} true;
    $i843 := $ne.i64($i842, 0);
    goto corral_source_split_14589;

  corral_source_split_14589:
    assume {:verifier.code 0} true;
    $i844 := $zext.i1.i32($i843);
    goto corral_source_split_14590;

  corral_source_split_14590:
    assume {:verifier.code 0} true;
    $i845 := $sext.i32.i64($i844);
    goto corral_source_split_14591;

  corral_source_split_14591:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2553} $i846 := ldv__builtin_expect($i845, 0);
    goto corral_source_split_14592;

  corral_source_split_14592:
    assume {:verifier.code 0} true;
    $i847 := $ne.i64($i846, 0);
    goto corral_source_split_14593;

  corral_source_split_14593:
    assume {:verifier.code 0} true;
    assume {:branchcond $i847} true;
    goto $bb491, $bb492;

  $bb492:
    assume !($i847 == 1);
    assume {:verifier.code 0} true;
    goto $bb493;

  $bb493:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    $p848 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(120, 8)));
    goto corral_source_split_14595;

  corral_source_split_14595:
    assume {:verifier.code 0} true;
    $i849 := $p2i.ref.i64($p848);
    goto corral_source_split_14596;

  corral_source_split_14596:
    assume {:verifier.code 0} true;
    $i850 := $ne.i64($i849, 0);
    goto corral_source_split_14597;

  corral_source_split_14597:
    assume {:verifier.code 0} true;
    $i851 := $zext.i1.i32($i850);
    goto corral_source_split_14598;

  corral_source_split_14598:
    assume {:verifier.code 0} true;
    $i852 := $sext.i32.i64($i851);
    goto corral_source_split_14599;

  corral_source_split_14599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2554} $i853 := ldv__builtin_expect($i852, 0);
    goto corral_source_split_14600;

  corral_source_split_14600:
    assume {:verifier.code 0} true;
    $i854 := $ne.i64($i853, 0);
    goto corral_source_split_14601;

  corral_source_split_14601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i854} true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i854 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    goto $bb498;

  $bb498:
    assume {:verifier.code 0} true;
    $p855 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(121, 8)));
    goto corral_source_split_14603;

  corral_source_split_14603:
    assume {:verifier.code 0} true;
    $i856 := $p2i.ref.i64($p855);
    goto corral_source_split_14604;

  corral_source_split_14604:
    assume {:verifier.code 0} true;
    $i857 := $ne.i64($i856, 0);
    goto corral_source_split_14605;

  corral_source_split_14605:
    assume {:verifier.code 0} true;
    $i858 := $zext.i1.i32($i857);
    goto corral_source_split_14606;

  corral_source_split_14606:
    assume {:verifier.code 0} true;
    $i859 := $sext.i32.i64($i858);
    goto corral_source_split_14607;

  corral_source_split_14607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2555} $i860 := ldv__builtin_expect($i859, 0);
    goto corral_source_split_14608;

  corral_source_split_14608:
    assume {:verifier.code 0} true;
    $i861 := $ne.i64($i860, 0);
    goto corral_source_split_14609;

  corral_source_split_14609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i861} true;
    goto $bb499, $bb500;

  $bb500:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb501;

  $bb501:
    assume {:verifier.code 0} true;
    goto $bb502;

  $bb502:
    assume {:verifier.code 0} true;
    $p862 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(122, 8)));
    goto corral_source_split_14611;

  corral_source_split_14611:
    assume {:verifier.code 0} true;
    $i863 := $p2i.ref.i64($p862);
    goto corral_source_split_14612;

  corral_source_split_14612:
    assume {:verifier.code 0} true;
    $i864 := $ne.i64($i863, 0);
    goto corral_source_split_14613;

  corral_source_split_14613:
    assume {:verifier.code 0} true;
    $i865 := $zext.i1.i32($i864);
    goto corral_source_split_14614;

  corral_source_split_14614:
    assume {:verifier.code 0} true;
    $i866 := $sext.i32.i64($i865);
    goto corral_source_split_14615;

  corral_source_split_14615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2556} $i867 := ldv__builtin_expect($i866, 0);
    goto corral_source_split_14616;

  corral_source_split_14616:
    assume {:verifier.code 0} true;
    $i868 := $ne.i64($i867, 0);
    goto corral_source_split_14617;

  corral_source_split_14617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i868} true;
    goto $bb503, $bb504;

  $bb504:
    assume !($i868 == 1);
    assume {:verifier.code 0} true;
    goto $bb505;

  $bb505:
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    $p869 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(123, 8)));
    goto corral_source_split_14619;

  corral_source_split_14619:
    assume {:verifier.code 0} true;
    $i870 := $p2i.ref.i64($p869);
    goto corral_source_split_14620;

  corral_source_split_14620:
    assume {:verifier.code 0} true;
    $i871 := $ne.i64($i870, 0);
    goto corral_source_split_14621;

  corral_source_split_14621:
    assume {:verifier.code 0} true;
    $i872 := $zext.i1.i32($i871);
    goto corral_source_split_14622;

  corral_source_split_14622:
    assume {:verifier.code 0} true;
    $i873 := $sext.i32.i64($i872);
    goto corral_source_split_14623;

  corral_source_split_14623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2557} $i874 := ldv__builtin_expect($i873, 0);
    goto corral_source_split_14624;

  corral_source_split_14624:
    assume {:verifier.code 0} true;
    $i875 := $ne.i64($i874, 0);
    goto corral_source_split_14625;

  corral_source_split_14625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i875} true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i875 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    goto $bb510;

  $bb510:
    assume {:verifier.code 0} true;
    $p876 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(124, 8)));
    goto corral_source_split_14627;

  corral_source_split_14627:
    assume {:verifier.code 0} true;
    $i877 := $p2i.ref.i64($p876);
    goto corral_source_split_14628;

  corral_source_split_14628:
    assume {:verifier.code 0} true;
    $i878 := $ne.i64($i877, 0);
    goto corral_source_split_14629;

  corral_source_split_14629:
    assume {:verifier.code 0} true;
    $i879 := $zext.i1.i32($i878);
    goto corral_source_split_14630;

  corral_source_split_14630:
    assume {:verifier.code 0} true;
    $i880 := $sext.i32.i64($i879);
    goto corral_source_split_14631;

  corral_source_split_14631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2558} $i881 := ldv__builtin_expect($i880, 0);
    goto corral_source_split_14632;

  corral_source_split_14632:
    assume {:verifier.code 0} true;
    $i882 := $ne.i64($i881, 0);
    goto corral_source_split_14633;

  corral_source_split_14633:
    assume {:verifier.code 0} true;
    assume {:branchcond $i882} true;
    goto $bb511, $bb512;

  $bb512:
    assume !($i882 == 1);
    assume {:verifier.code 0} true;
    goto $bb513;

  $bb513:
    assume {:verifier.code 0} true;
    goto $bb514;

  $bb514:
    assume {:verifier.code 0} true;
    $p883 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(125, 8)));
    goto corral_source_split_14635;

  corral_source_split_14635:
    assume {:verifier.code 0} true;
    $i884 := $p2i.ref.i64($p883);
    goto corral_source_split_14636;

  corral_source_split_14636:
    assume {:verifier.code 0} true;
    $i885 := $ne.i64($i884, 0);
    goto corral_source_split_14637;

  corral_source_split_14637:
    assume {:verifier.code 0} true;
    $i886 := $zext.i1.i32($i885);
    goto corral_source_split_14638;

  corral_source_split_14638:
    assume {:verifier.code 0} true;
    $i887 := $sext.i32.i64($i886);
    goto corral_source_split_14639;

  corral_source_split_14639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2559} $i888 := ldv__builtin_expect($i887, 0);
    goto corral_source_split_14640;

  corral_source_split_14640:
    assume {:verifier.code 0} true;
    $i889 := $ne.i64($i888, 0);
    goto corral_source_split_14641;

  corral_source_split_14641:
    assume {:verifier.code 0} true;
    assume {:branchcond $i889} true;
    goto $bb515, $bb516;

  $bb516:
    assume !($i889 == 1);
    assume {:verifier.code 0} true;
    goto $bb517;

  $bb517:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(126, 8)));
    goto corral_source_split_14643;

  corral_source_split_14643:
    assume {:verifier.code 0} true;
    $i891 := $p2i.ref.i64($p890);
    goto corral_source_split_14644;

  corral_source_split_14644:
    assume {:verifier.code 0} true;
    $i892 := $ne.i64($i891, 0);
    goto corral_source_split_14645;

  corral_source_split_14645:
    assume {:verifier.code 0} true;
    $i893 := $zext.i1.i32($i892);
    goto corral_source_split_14646;

  corral_source_split_14646:
    assume {:verifier.code 0} true;
    $i894 := $sext.i32.i64($i893);
    goto corral_source_split_14647;

  corral_source_split_14647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2560} $i895 := ldv__builtin_expect($i894, 0);
    goto corral_source_split_14648;

  corral_source_split_14648:
    assume {:verifier.code 0} true;
    $i896 := $ne.i64($i895, 0);
    goto corral_source_split_14649;

  corral_source_split_14649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i896} true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    goto $bb522;

  $bb522:
    assume {:verifier.code 0} true;
    $p897 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(127, 8)));
    goto corral_source_split_14651;

  corral_source_split_14651:
    assume {:verifier.code 0} true;
    $i898 := $p2i.ref.i64($p897);
    goto corral_source_split_14652;

  corral_source_split_14652:
    assume {:verifier.code 0} true;
    $i899 := $ne.i64($i898, 0);
    goto corral_source_split_14653;

  corral_source_split_14653:
    assume {:verifier.code 0} true;
    $i900 := $zext.i1.i32($i899);
    goto corral_source_split_14654;

  corral_source_split_14654:
    assume {:verifier.code 0} true;
    $i901 := $sext.i32.i64($i900);
    goto corral_source_split_14655;

  corral_source_split_14655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2561} $i902 := ldv__builtin_expect($i901, 0);
    goto corral_source_split_14656;

  corral_source_split_14656:
    assume {:verifier.code 0} true;
    $i903 := $ne.i64($i902, 0);
    goto corral_source_split_14657;

  corral_source_split_14657:
    assume {:verifier.code 0} true;
    assume {:branchcond $i903} true;
    goto $bb523, $bb524;

  $bb524:
    assume !($i903 == 1);
    assume {:verifier.code 0} true;
    goto $bb525;

  $bb525:
    assume {:verifier.code 0} true;
    goto $bb526;

  $bb526:
    assume {:verifier.code 0} true;
    $p904 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(128, 8)));
    goto corral_source_split_14659;

  corral_source_split_14659:
    assume {:verifier.code 0} true;
    $i905 := $p2i.ref.i64($p904);
    goto corral_source_split_14660;

  corral_source_split_14660:
    assume {:verifier.code 0} true;
    $i906 := $ne.i64($i905, 0);
    goto corral_source_split_14661;

  corral_source_split_14661:
    assume {:verifier.code 0} true;
    $i907 := $zext.i1.i32($i906);
    goto corral_source_split_14662;

  corral_source_split_14662:
    assume {:verifier.code 0} true;
    $i908 := $sext.i32.i64($i907);
    goto corral_source_split_14663;

  corral_source_split_14663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2562} $i909 := ldv__builtin_expect($i908, 0);
    goto corral_source_split_14664;

  corral_source_split_14664:
    assume {:verifier.code 0} true;
    $i910 := $ne.i64($i909, 0);
    goto corral_source_split_14665;

  corral_source_split_14665:
    assume {:verifier.code 0} true;
    assume {:branchcond $i910} true;
    goto $bb527, $bb528;

  $bb528:
    assume !($i910 == 1);
    assume {:verifier.code 0} true;
    goto $bb529;

  $bb529:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    $p911 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(129, 8)));
    goto corral_source_split_14667;

  corral_source_split_14667:
    assume {:verifier.code 0} true;
    $i912 := $p2i.ref.i64($p911);
    goto corral_source_split_14668;

  corral_source_split_14668:
    assume {:verifier.code 0} true;
    $i913 := $ne.i64($i912, 0);
    goto corral_source_split_14669;

  corral_source_split_14669:
    assume {:verifier.code 0} true;
    $i914 := $zext.i1.i32($i913);
    goto corral_source_split_14670;

  corral_source_split_14670:
    assume {:verifier.code 0} true;
    $i915 := $sext.i32.i64($i914);
    goto corral_source_split_14671;

  corral_source_split_14671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2563} $i916 := ldv__builtin_expect($i915, 0);
    goto corral_source_split_14672;

  corral_source_split_14672:
    assume {:verifier.code 0} true;
    $i917 := $ne.i64($i916, 0);
    goto corral_source_split_14673;

  corral_source_split_14673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i917} true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i917 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    goto $bb534;

  $bb534:
    assume {:verifier.code 0} true;
    $p918 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(130, 8)));
    goto corral_source_split_14675;

  corral_source_split_14675:
    assume {:verifier.code 0} true;
    $i919 := $p2i.ref.i64($p918);
    goto corral_source_split_14676;

  corral_source_split_14676:
    assume {:verifier.code 0} true;
    $i920 := $ne.i64($i919, 0);
    goto corral_source_split_14677;

  corral_source_split_14677:
    assume {:verifier.code 0} true;
    $i921 := $zext.i1.i32($i920);
    goto corral_source_split_14678;

  corral_source_split_14678:
    assume {:verifier.code 0} true;
    $i922 := $sext.i32.i64($i921);
    goto corral_source_split_14679;

  corral_source_split_14679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2564} $i923 := ldv__builtin_expect($i922, 0);
    goto corral_source_split_14680;

  corral_source_split_14680:
    assume {:verifier.code 0} true;
    $i924 := $ne.i64($i923, 0);
    goto corral_source_split_14681;

  corral_source_split_14681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i924} true;
    goto $bb535, $bb536;

  $bb536:
    assume !($i924 == 1);
    assume {:verifier.code 0} true;
    goto $bb537;

  $bb537:
    assume {:verifier.code 0} true;
    goto $bb538;

  $bb538:
    assume {:verifier.code 0} true;
    $p925 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(131, 8)));
    goto corral_source_split_14683;

  corral_source_split_14683:
    assume {:verifier.code 0} true;
    $i926 := $p2i.ref.i64($p925);
    goto corral_source_split_14684;

  corral_source_split_14684:
    assume {:verifier.code 0} true;
    $i927 := $ne.i64($i926, 0);
    goto corral_source_split_14685;

  corral_source_split_14685:
    assume {:verifier.code 0} true;
    $i928 := $zext.i1.i32($i927);
    goto corral_source_split_14686;

  corral_source_split_14686:
    assume {:verifier.code 0} true;
    $i929 := $sext.i32.i64($i928);
    goto corral_source_split_14687;

  corral_source_split_14687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2565} $i930 := ldv__builtin_expect($i929, 0);
    goto corral_source_split_14688;

  corral_source_split_14688:
    assume {:verifier.code 0} true;
    $i931 := $ne.i64($i930, 0);
    goto corral_source_split_14689;

  corral_source_split_14689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i931} true;
    goto $bb539, $bb540;

  $bb540:
    assume !($i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb541;

  $bb541:
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $p932 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(132, 8)));
    goto corral_source_split_14691;

  corral_source_split_14691:
    assume {:verifier.code 0} true;
    $i933 := $p2i.ref.i64($p932);
    goto corral_source_split_14692;

  corral_source_split_14692:
    assume {:verifier.code 0} true;
    $i934 := $ne.i64($i933, 0);
    goto corral_source_split_14693;

  corral_source_split_14693:
    assume {:verifier.code 0} true;
    $i935 := $zext.i1.i32($i934);
    goto corral_source_split_14694;

  corral_source_split_14694:
    assume {:verifier.code 0} true;
    $i936 := $sext.i32.i64($i935);
    goto corral_source_split_14695;

  corral_source_split_14695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2566} $i937 := ldv__builtin_expect($i936, 0);
    goto corral_source_split_14696;

  corral_source_split_14696:
    assume {:verifier.code 0} true;
    $i938 := $ne.i64($i937, 0);
    goto corral_source_split_14697;

  corral_source_split_14697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i938} true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i938 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    goto $bb546;

  $bb546:
    assume {:verifier.code 0} true;
    $p939 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(133, 8)));
    goto corral_source_split_14699;

  corral_source_split_14699:
    assume {:verifier.code 0} true;
    $i940 := $p2i.ref.i64($p939);
    goto corral_source_split_14700;

  corral_source_split_14700:
    assume {:verifier.code 0} true;
    $i941 := $ne.i64($i940, 0);
    goto corral_source_split_14701;

  corral_source_split_14701:
    assume {:verifier.code 0} true;
    $i942 := $zext.i1.i32($i941);
    goto corral_source_split_14702;

  corral_source_split_14702:
    assume {:verifier.code 0} true;
    $i943 := $sext.i32.i64($i942);
    goto corral_source_split_14703;

  corral_source_split_14703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2567} $i944 := ldv__builtin_expect($i943, 0);
    goto corral_source_split_14704;

  corral_source_split_14704:
    assume {:verifier.code 0} true;
    $i945 := $ne.i64($i944, 0);
    goto corral_source_split_14705;

  corral_source_split_14705:
    assume {:verifier.code 0} true;
    assume {:branchcond $i945} true;
    goto $bb547, $bb548;

  $bb548:
    assume !($i945 == 1);
    assume {:verifier.code 0} true;
    goto $bb549;

  $bb549:
    assume {:verifier.code 0} true;
    goto $bb550;

  $bb550:
    assume {:verifier.code 0} true;
    $p946 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(134, 8)));
    goto corral_source_split_14707;

  corral_source_split_14707:
    assume {:verifier.code 0} true;
    $i947 := $p2i.ref.i64($p946);
    goto corral_source_split_14708;

  corral_source_split_14708:
    assume {:verifier.code 0} true;
    $i948 := $ne.i64($i947, 0);
    goto corral_source_split_14709;

  corral_source_split_14709:
    assume {:verifier.code 0} true;
    $i949 := $zext.i1.i32($i948);
    goto corral_source_split_14710;

  corral_source_split_14710:
    assume {:verifier.code 0} true;
    $i950 := $sext.i32.i64($i949);
    goto corral_source_split_14711;

  corral_source_split_14711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2568} $i951 := ldv__builtin_expect($i950, 0);
    goto corral_source_split_14712;

  corral_source_split_14712:
    assume {:verifier.code 0} true;
    $i952 := $ne.i64($i951, 0);
    goto corral_source_split_14713;

  corral_source_split_14713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i952} true;
    goto $bb551, $bb552;

  $bb552:
    assume !($i952 == 1);
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    $p953 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(135, 8)));
    goto corral_source_split_14715;

  corral_source_split_14715:
    assume {:verifier.code 0} true;
    $i954 := $p2i.ref.i64($p953);
    goto corral_source_split_14716;

  corral_source_split_14716:
    assume {:verifier.code 0} true;
    $i955 := $ne.i64($i954, 0);
    goto corral_source_split_14717;

  corral_source_split_14717:
    assume {:verifier.code 0} true;
    $i956 := $zext.i1.i32($i955);
    goto corral_source_split_14718;

  corral_source_split_14718:
    assume {:verifier.code 0} true;
    $i957 := $sext.i32.i64($i956);
    goto corral_source_split_14719;

  corral_source_split_14719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2569} $i958 := ldv__builtin_expect($i957, 0);
    goto corral_source_split_14720;

  corral_source_split_14720:
    assume {:verifier.code 0} true;
    $i959 := $ne.i64($i958, 0);
    goto corral_source_split_14721;

  corral_source_split_14721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i959} true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i959 == 1);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    goto $bb558;

  $bb558:
    assume {:verifier.code 0} true;
    $p960 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(136, 8)));
    goto corral_source_split_14723;

  corral_source_split_14723:
    assume {:verifier.code 0} true;
    $i961 := $p2i.ref.i64($p960);
    goto corral_source_split_14724;

  corral_source_split_14724:
    assume {:verifier.code 0} true;
    $i962 := $ne.i64($i961, 0);
    goto corral_source_split_14725;

  corral_source_split_14725:
    assume {:verifier.code 0} true;
    $i963 := $zext.i1.i32($i962);
    goto corral_source_split_14726;

  corral_source_split_14726:
    assume {:verifier.code 0} true;
    $i964 := $sext.i32.i64($i963);
    goto corral_source_split_14727;

  corral_source_split_14727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2570} $i965 := ldv__builtin_expect($i964, 0);
    goto corral_source_split_14728;

  corral_source_split_14728:
    assume {:verifier.code 0} true;
    $i966 := $ne.i64($i965, 0);
    goto corral_source_split_14729;

  corral_source_split_14729:
    assume {:verifier.code 0} true;
    assume {:branchcond $i966} true;
    goto $bb559, $bb560;

  $bb560:
    assume !($i966 == 1);
    assume {:verifier.code 0} true;
    goto $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    $p967 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(137, 8)));
    goto corral_source_split_14731;

  corral_source_split_14731:
    assume {:verifier.code 0} true;
    $i968 := $p2i.ref.i64($p967);
    goto corral_source_split_14732;

  corral_source_split_14732:
    assume {:verifier.code 0} true;
    $i969 := $ne.i64($i968, 0);
    goto corral_source_split_14733;

  corral_source_split_14733:
    assume {:verifier.code 0} true;
    $i970 := $zext.i1.i32($i969);
    goto corral_source_split_14734;

  corral_source_split_14734:
    assume {:verifier.code 0} true;
    $i971 := $sext.i32.i64($i970);
    goto corral_source_split_14735;

  corral_source_split_14735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2571} $i972 := ldv__builtin_expect($i971, 0);
    goto corral_source_split_14736;

  corral_source_split_14736:
    assume {:verifier.code 0} true;
    $i973 := $ne.i64($i972, 0);
    goto corral_source_split_14737;

  corral_source_split_14737:
    assume {:verifier.code 0} true;
    assume {:branchcond $i973} true;
    goto $bb563, $bb564;

  $bb564:
    assume !($i973 == 1);
    assume {:verifier.code 0} true;
    goto $bb565;

  $bb565:
    assume {:verifier.code 0} true;
    goto $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    $p974 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(138, 8)));
    goto corral_source_split_14739;

  corral_source_split_14739:
    assume {:verifier.code 0} true;
    $i975 := $p2i.ref.i64($p974);
    goto corral_source_split_14740;

  corral_source_split_14740:
    assume {:verifier.code 0} true;
    $i976 := $ne.i64($i975, 0);
    goto corral_source_split_14741;

  corral_source_split_14741:
    assume {:verifier.code 0} true;
    $i977 := $zext.i1.i32($i976);
    goto corral_source_split_14742;

  corral_source_split_14742:
    assume {:verifier.code 0} true;
    $i978 := $sext.i32.i64($i977);
    goto corral_source_split_14743;

  corral_source_split_14743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2572} $i979 := ldv__builtin_expect($i978, 0);
    goto corral_source_split_14744;

  corral_source_split_14744:
    assume {:verifier.code 0} true;
    $i980 := $ne.i64($i979, 0);
    goto corral_source_split_14745;

  corral_source_split_14745:
    assume {:verifier.code 0} true;
    assume {:branchcond $i980} true;
    goto $bb567, $bb568;

  $bb568:
    assume !($i980 == 1);
    assume {:verifier.code 0} true;
    goto $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    $p981 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(139, 8)));
    goto corral_source_split_14747;

  corral_source_split_14747:
    assume {:verifier.code 0} true;
    $i982 := $p2i.ref.i64($p981);
    goto corral_source_split_14748;

  corral_source_split_14748:
    assume {:verifier.code 0} true;
    $i983 := $ne.i64($i982, 0);
    goto corral_source_split_14749;

  corral_source_split_14749:
    assume {:verifier.code 0} true;
    $i984 := $zext.i1.i32($i983);
    goto corral_source_split_14750;

  corral_source_split_14750:
    assume {:verifier.code 0} true;
    $i985 := $sext.i32.i64($i984);
    goto corral_source_split_14751;

  corral_source_split_14751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2573} $i986 := ldv__builtin_expect($i985, 0);
    goto corral_source_split_14752;

  corral_source_split_14752:
    assume {:verifier.code 0} true;
    $i987 := $ne.i64($i986, 0);
    goto corral_source_split_14753;

  corral_source_split_14753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i987} true;
    goto $bb571, $bb572;

  $bb572:
    assume !($i987 == 1);
    assume {:verifier.code 0} true;
    goto $bb573;

  $bb573:
    assume {:verifier.code 0} true;
    goto $bb574;

  $bb574:
    assume {:verifier.code 0} true;
    $p988 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(140, 8)));
    goto corral_source_split_14755;

  corral_source_split_14755:
    assume {:verifier.code 0} true;
    $i989 := $p2i.ref.i64($p988);
    goto corral_source_split_14756;

  corral_source_split_14756:
    assume {:verifier.code 0} true;
    $i990 := $ne.i64($i989, 0);
    goto corral_source_split_14757;

  corral_source_split_14757:
    assume {:verifier.code 0} true;
    $i991 := $zext.i1.i32($i990);
    goto corral_source_split_14758;

  corral_source_split_14758:
    assume {:verifier.code 0} true;
    $i992 := $sext.i32.i64($i991);
    goto corral_source_split_14759;

  corral_source_split_14759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2574} $i993 := ldv__builtin_expect($i992, 0);
    goto corral_source_split_14760;

  corral_source_split_14760:
    assume {:verifier.code 0} true;
    $i994 := $ne.i64($i993, 0);
    goto corral_source_split_14761;

  corral_source_split_14761:
    assume {:verifier.code 0} true;
    assume {:branchcond $i994} true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i994 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    goto $bb578;

  $bb578:
    assume {:verifier.code 0} true;
    $p995 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(141, 8)));
    goto corral_source_split_14763;

  corral_source_split_14763:
    assume {:verifier.code 0} true;
    $i996 := $p2i.ref.i64($p995);
    goto corral_source_split_14764;

  corral_source_split_14764:
    assume {:verifier.code 0} true;
    $i997 := $ne.i64($i996, 0);
    goto corral_source_split_14765;

  corral_source_split_14765:
    assume {:verifier.code 0} true;
    $i998 := $zext.i1.i32($i997);
    goto corral_source_split_14766;

  corral_source_split_14766:
    assume {:verifier.code 0} true;
    $i999 := $sext.i32.i64($i998);
    goto corral_source_split_14767;

  corral_source_split_14767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2575} $i1000 := ldv__builtin_expect($i999, 0);
    goto corral_source_split_14768;

  corral_source_split_14768:
    assume {:verifier.code 0} true;
    $i1001 := $ne.i64($i1000, 0);
    goto corral_source_split_14769;

  corral_source_split_14769:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1001} true;
    goto $bb579, $bb580;

  $bb580:
    assume !($i1001 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    $p1002 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(142, 8)));
    goto corral_source_split_14771;

  corral_source_split_14771:
    assume {:verifier.code 0} true;
    $i1003 := $p2i.ref.i64($p1002);
    goto corral_source_split_14772;

  corral_source_split_14772:
    assume {:verifier.code 0} true;
    $i1004 := $ne.i64($i1003, 0);
    goto corral_source_split_14773;

  corral_source_split_14773:
    assume {:verifier.code 0} true;
    $i1005 := $zext.i1.i32($i1004);
    goto corral_source_split_14774;

  corral_source_split_14774:
    assume {:verifier.code 0} true;
    $i1006 := $sext.i32.i64($i1005);
    goto corral_source_split_14775;

  corral_source_split_14775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2576} $i1007 := ldv__builtin_expect($i1006, 0);
    goto corral_source_split_14776;

  corral_source_split_14776:
    assume {:verifier.code 0} true;
    $i1008 := $ne.i64($i1007, 0);
    goto corral_source_split_14777;

  corral_source_split_14777:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1008} true;
    goto $bb583, $bb584;

  $bb584:
    assume !($i1008 == 1);
    assume {:verifier.code 0} true;
    goto $bb585;

  $bb585:
    assume {:verifier.code 0} true;
    goto $bb586;

  $bb586:
    assume {:verifier.code 0} true;
    $p1009 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(143, 8)));
    goto corral_source_split_14779;

  corral_source_split_14779:
    assume {:verifier.code 0} true;
    $i1010 := $p2i.ref.i64($p1009);
    goto corral_source_split_14780;

  corral_source_split_14780:
    assume {:verifier.code 0} true;
    $i1011 := $ne.i64($i1010, 0);
    goto corral_source_split_14781;

  corral_source_split_14781:
    assume {:verifier.code 0} true;
    $i1012 := $zext.i1.i32($i1011);
    goto corral_source_split_14782;

  corral_source_split_14782:
    assume {:verifier.code 0} true;
    $i1013 := $sext.i32.i64($i1012);
    goto corral_source_split_14783;

  corral_source_split_14783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2577} $i1014 := ldv__builtin_expect($i1013, 0);
    goto corral_source_split_14784;

  corral_source_split_14784:
    assume {:verifier.code 0} true;
    $i1015 := $ne.i64($i1014, 0);
    goto corral_source_split_14785;

  corral_source_split_14785:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1015} true;
    goto $bb587, $bb588;

  $bb588:
    assume !($i1015 == 1);
    assume {:verifier.code 0} true;
    goto $bb589;

  $bb589:
    assume {:verifier.code 0} true;
    goto $bb590;

  $bb590:
    assume {:verifier.code 0} true;
    $p1016 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(144, 8)));
    goto corral_source_split_14787;

  corral_source_split_14787:
    assume {:verifier.code 0} true;
    $i1017 := $p2i.ref.i64($p1016);
    goto corral_source_split_14788;

  corral_source_split_14788:
    assume {:verifier.code 0} true;
    $i1018 := $ne.i64($i1017, 0);
    goto corral_source_split_14789;

  corral_source_split_14789:
    assume {:verifier.code 0} true;
    $i1019 := $zext.i1.i32($i1018);
    goto corral_source_split_14790;

  corral_source_split_14790:
    assume {:verifier.code 0} true;
    $i1020 := $sext.i32.i64($i1019);
    goto corral_source_split_14791;

  corral_source_split_14791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2578} $i1021 := ldv__builtin_expect($i1020, 0);
    goto corral_source_split_14792;

  corral_source_split_14792:
    assume {:verifier.code 0} true;
    $i1022 := $ne.i64($i1021, 0);
    goto corral_source_split_14793;

  corral_source_split_14793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1022} true;
    goto $bb591, $bb592;

  $bb592:
    assume !($i1022 == 1);
    assume {:verifier.code 0} true;
    goto $bb593;

  $bb593:
    assume {:verifier.code 0} true;
    goto $bb594;

  $bb594:
    assume {:verifier.code 0} true;
    $p1023 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(145, 8)));
    goto corral_source_split_14795;

  corral_source_split_14795:
    assume {:verifier.code 0} true;
    $i1024 := $p2i.ref.i64($p1023);
    goto corral_source_split_14796;

  corral_source_split_14796:
    assume {:verifier.code 0} true;
    $i1025 := $ne.i64($i1024, 0);
    goto corral_source_split_14797;

  corral_source_split_14797:
    assume {:verifier.code 0} true;
    $i1026 := $zext.i1.i32($i1025);
    goto corral_source_split_14798;

  corral_source_split_14798:
    assume {:verifier.code 0} true;
    $i1027 := $sext.i32.i64($i1026);
    goto corral_source_split_14799;

  corral_source_split_14799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2579} $i1028 := ldv__builtin_expect($i1027, 0);
    goto corral_source_split_14800;

  corral_source_split_14800:
    assume {:verifier.code 0} true;
    $i1029 := $ne.i64($i1028, 0);
    goto corral_source_split_14801;

  corral_source_split_14801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1029} true;
    goto $bb595, $bb596;

  $bb596:
    assume !($i1029 == 1);
    assume {:verifier.code 0} true;
    goto $bb597;

  $bb597:
    assume {:verifier.code 0} true;
    goto $bb598;

  $bb598:
    assume {:verifier.code 0} true;
    $p1030 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(146, 8)));
    goto corral_source_split_14803;

  corral_source_split_14803:
    assume {:verifier.code 0} true;
    $i1031 := $p2i.ref.i64($p1030);
    goto corral_source_split_14804;

  corral_source_split_14804:
    assume {:verifier.code 0} true;
    $i1032 := $ne.i64($i1031, 0);
    goto corral_source_split_14805;

  corral_source_split_14805:
    assume {:verifier.code 0} true;
    $i1033 := $zext.i1.i32($i1032);
    goto corral_source_split_14806;

  corral_source_split_14806:
    assume {:verifier.code 0} true;
    $i1034 := $sext.i32.i64($i1033);
    goto corral_source_split_14807;

  corral_source_split_14807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2580} $i1035 := ldv__builtin_expect($i1034, 0);
    goto corral_source_split_14808;

  corral_source_split_14808:
    assume {:verifier.code 0} true;
    $i1036 := $ne.i64($i1035, 0);
    goto corral_source_split_14809;

  corral_source_split_14809:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1036} true;
    goto $bb599, $bb600;

  $bb600:
    assume !($i1036 == 1);
    assume {:verifier.code 0} true;
    goto $bb601;

  $bb601:
    assume {:verifier.code 0} true;
    goto $bb602;

  $bb602:
    assume {:verifier.code 0} true;
    $p1037 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(147, 8)));
    goto corral_source_split_14811;

  corral_source_split_14811:
    assume {:verifier.code 0} true;
    $i1038 := $p2i.ref.i64($p1037);
    goto corral_source_split_14812;

  corral_source_split_14812:
    assume {:verifier.code 0} true;
    $i1039 := $ne.i64($i1038, 0);
    goto corral_source_split_14813;

  corral_source_split_14813:
    assume {:verifier.code 0} true;
    $i1040 := $zext.i1.i32($i1039);
    goto corral_source_split_14814;

  corral_source_split_14814:
    assume {:verifier.code 0} true;
    $i1041 := $sext.i32.i64($i1040);
    goto corral_source_split_14815;

  corral_source_split_14815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2581} $i1042 := ldv__builtin_expect($i1041, 0);
    goto corral_source_split_14816;

  corral_source_split_14816:
    assume {:verifier.code 0} true;
    $i1043 := $ne.i64($i1042, 0);
    goto corral_source_split_14817;

  corral_source_split_14817:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1043} true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i1043 == 1);
    assume {:verifier.code 0} true;
    goto $bb605;

  $bb605:
    assume {:verifier.code 0} true;
    goto $bb606;

  $bb606:
    assume {:verifier.code 0} true;
    $p1044 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(148, 8)));
    goto corral_source_split_14819;

  corral_source_split_14819:
    assume {:verifier.code 0} true;
    $i1045 := $p2i.ref.i64($p1044);
    goto corral_source_split_14820;

  corral_source_split_14820:
    assume {:verifier.code 0} true;
    $i1046 := $ne.i64($i1045, 0);
    goto corral_source_split_14821;

  corral_source_split_14821:
    assume {:verifier.code 0} true;
    $i1047 := $zext.i1.i32($i1046);
    goto corral_source_split_14822;

  corral_source_split_14822:
    assume {:verifier.code 0} true;
    $i1048 := $sext.i32.i64($i1047);
    goto corral_source_split_14823;

  corral_source_split_14823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2582} $i1049 := ldv__builtin_expect($i1048, 0);
    goto corral_source_split_14824;

  corral_source_split_14824:
    assume {:verifier.code 0} true;
    $i1050 := $ne.i64($i1049, 0);
    goto corral_source_split_14825;

  corral_source_split_14825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1050} true;
    goto $bb607, $bb608;

  $bb608:
    assume !($i1050 == 1);
    assume {:verifier.code 0} true;
    goto $bb609;

  $bb609:
    assume {:verifier.code 0} true;
    goto $bb610;

  $bb610:
    assume {:verifier.code 0} true;
    $p1051 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(149, 8)));
    goto corral_source_split_14827;

  corral_source_split_14827:
    assume {:verifier.code 0} true;
    $i1052 := $p2i.ref.i64($p1051);
    goto corral_source_split_14828;

  corral_source_split_14828:
    assume {:verifier.code 0} true;
    $i1053 := $ne.i64($i1052, 0);
    goto corral_source_split_14829;

  corral_source_split_14829:
    assume {:verifier.code 0} true;
    $i1054 := $zext.i1.i32($i1053);
    goto corral_source_split_14830;

  corral_source_split_14830:
    assume {:verifier.code 0} true;
    $i1055 := $sext.i32.i64($i1054);
    goto corral_source_split_14831;

  corral_source_split_14831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2583} $i1056 := ldv__builtin_expect($i1055, 0);
    goto corral_source_split_14832;

  corral_source_split_14832:
    assume {:verifier.code 0} true;
    $i1057 := $ne.i64($i1056, 0);
    goto corral_source_split_14833;

  corral_source_split_14833:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1057} true;
    goto $bb611, $bb612;

  $bb612:
    assume !($i1057 == 1);
    assume {:verifier.code 0} true;
    goto $bb613;

  $bb613:
    assume {:verifier.code 0} true;
    goto $bb614;

  $bb614:
    assume {:verifier.code 0} true;
    $p1058 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(150, 8)));
    goto corral_source_split_14835;

  corral_source_split_14835:
    assume {:verifier.code 0} true;
    $i1059 := $p2i.ref.i64($p1058);
    goto corral_source_split_14836;

  corral_source_split_14836:
    assume {:verifier.code 0} true;
    $i1060 := $ne.i64($i1059, 0);
    goto corral_source_split_14837;

  corral_source_split_14837:
    assume {:verifier.code 0} true;
    $i1061 := $zext.i1.i32($i1060);
    goto corral_source_split_14838;

  corral_source_split_14838:
    assume {:verifier.code 0} true;
    $i1062 := $sext.i32.i64($i1061);
    goto corral_source_split_14839;

  corral_source_split_14839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2584} $i1063 := ldv__builtin_expect($i1062, 0);
    goto corral_source_split_14840;

  corral_source_split_14840:
    assume {:verifier.code 0} true;
    $i1064 := $ne.i64($i1063, 0);
    goto corral_source_split_14841;

  corral_source_split_14841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1064} true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i1064 == 1);
    assume {:verifier.code 0} true;
    goto $bb617;

  $bb617:
    assume {:verifier.code 0} true;
    goto $bb618;

  $bb618:
    assume {:verifier.code 0} true;
    $p1065 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(151, 8)));
    goto corral_source_split_14843;

  corral_source_split_14843:
    assume {:verifier.code 0} true;
    $i1066 := $p2i.ref.i64($p1065);
    goto corral_source_split_14844;

  corral_source_split_14844:
    assume {:verifier.code 0} true;
    $i1067 := $ne.i64($i1066, 0);
    goto corral_source_split_14845;

  corral_source_split_14845:
    assume {:verifier.code 0} true;
    $i1068 := $zext.i1.i32($i1067);
    goto corral_source_split_14846;

  corral_source_split_14846:
    assume {:verifier.code 0} true;
    $i1069 := $sext.i32.i64($i1068);
    goto corral_source_split_14847;

  corral_source_split_14847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2585} $i1070 := ldv__builtin_expect($i1069, 0);
    goto corral_source_split_14848;

  corral_source_split_14848:
    assume {:verifier.code 0} true;
    $i1071 := $ne.i64($i1070, 0);
    goto corral_source_split_14849;

  corral_source_split_14849:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1071} true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb621;

  $bb621:
    assume {:verifier.code 0} true;
    goto $bb622;

  $bb622:
    assume {:verifier.code 0} true;
    $p1072 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(152, 8)));
    goto corral_source_split_14851;

  corral_source_split_14851:
    assume {:verifier.code 0} true;
    $i1073 := $p2i.ref.i64($p1072);
    goto corral_source_split_14852;

  corral_source_split_14852:
    assume {:verifier.code 0} true;
    $i1074 := $ne.i64($i1073, 0);
    goto corral_source_split_14853;

  corral_source_split_14853:
    assume {:verifier.code 0} true;
    $i1075 := $zext.i1.i32($i1074);
    goto corral_source_split_14854;

  corral_source_split_14854:
    assume {:verifier.code 0} true;
    $i1076 := $sext.i32.i64($i1075);
    goto corral_source_split_14855;

  corral_source_split_14855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2586} $i1077 := ldv__builtin_expect($i1076, 0);
    goto corral_source_split_14856;

  corral_source_split_14856:
    assume {:verifier.code 0} true;
    $i1078 := $ne.i64($i1077, 0);
    goto corral_source_split_14857;

  corral_source_split_14857:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1078} true;
    goto $bb623, $bb624;

  $bb624:
    assume !($i1078 == 1);
    assume {:verifier.code 0} true;
    goto $bb625;

  $bb625:
    assume {:verifier.code 0} true;
    goto $bb626;

  $bb626:
    assume {:verifier.code 0} true;
    $p1079 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(153, 8)));
    goto corral_source_split_14859;

  corral_source_split_14859:
    assume {:verifier.code 0} true;
    $i1080 := $p2i.ref.i64($p1079);
    goto corral_source_split_14860;

  corral_source_split_14860:
    assume {:verifier.code 0} true;
    $i1081 := $ne.i64($i1080, 0);
    goto corral_source_split_14861;

  corral_source_split_14861:
    assume {:verifier.code 0} true;
    $i1082 := $zext.i1.i32($i1081);
    goto corral_source_split_14862;

  corral_source_split_14862:
    assume {:verifier.code 0} true;
    $i1083 := $sext.i32.i64($i1082);
    goto corral_source_split_14863;

  corral_source_split_14863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2587} $i1084 := ldv__builtin_expect($i1083, 0);
    goto corral_source_split_14864;

  corral_source_split_14864:
    assume {:verifier.code 0} true;
    $i1085 := $ne.i64($i1084, 0);
    goto corral_source_split_14865;

  corral_source_split_14865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1085} true;
    goto $bb627, $bb628;

  $bb628:
    assume !($i1085 == 1);
    assume {:verifier.code 0} true;
    goto $bb629;

  $bb629:
    assume {:verifier.code 0} true;
    goto $bb630;

  $bb630:
    assume {:verifier.code 0} true;
    $p1086 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(154, 8)));
    goto corral_source_split_14867;

  corral_source_split_14867:
    assume {:verifier.code 0} true;
    $i1087 := $p2i.ref.i64($p1086);
    goto corral_source_split_14868;

  corral_source_split_14868:
    assume {:verifier.code 0} true;
    $i1088 := $ne.i64($i1087, 0);
    goto corral_source_split_14869;

  corral_source_split_14869:
    assume {:verifier.code 0} true;
    $i1089 := $zext.i1.i32($i1088);
    goto corral_source_split_14870;

  corral_source_split_14870:
    assume {:verifier.code 0} true;
    $i1090 := $sext.i32.i64($i1089);
    goto corral_source_split_14871;

  corral_source_split_14871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2588} $i1091 := ldv__builtin_expect($i1090, 0);
    goto corral_source_split_14872;

  corral_source_split_14872:
    assume {:verifier.code 0} true;
    $i1092 := $ne.i64($i1091, 0);
    goto corral_source_split_14873;

  corral_source_split_14873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1092} true;
    goto $bb631, $bb632;

  $bb632:
    assume !($i1092 == 1);
    assume {:verifier.code 0} true;
    goto $bb633;

  $bb633:
    assume {:verifier.code 0} true;
    goto $bb634;

  $bb634:
    assume {:verifier.code 0} true;
    $p1093 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(155, 8)));
    goto corral_source_split_14875;

  corral_source_split_14875:
    assume {:verifier.code 0} true;
    $i1094 := $p2i.ref.i64($p1093);
    goto corral_source_split_14876;

  corral_source_split_14876:
    assume {:verifier.code 0} true;
    $i1095 := $ne.i64($i1094, 0);
    goto corral_source_split_14877;

  corral_source_split_14877:
    assume {:verifier.code 0} true;
    $i1096 := $zext.i1.i32($i1095);
    goto corral_source_split_14878;

  corral_source_split_14878:
    assume {:verifier.code 0} true;
    $i1097 := $sext.i32.i64($i1096);
    goto corral_source_split_14879;

  corral_source_split_14879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2589} $i1098 := ldv__builtin_expect($i1097, 0);
    goto corral_source_split_14880;

  corral_source_split_14880:
    assume {:verifier.code 0} true;
    $i1099 := $ne.i64($i1098, 0);
    goto corral_source_split_14881;

  corral_source_split_14881:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1099} true;
    goto $bb635, $bb636;

  $bb636:
    assume !($i1099 == 1);
    assume {:verifier.code 0} true;
    goto $bb637;

  $bb637:
    assume {:verifier.code 0} true;
    goto $bb638;

  $bb638:
    assume {:verifier.code 0} true;
    $p1100 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(156, 8)));
    goto corral_source_split_14883;

  corral_source_split_14883:
    assume {:verifier.code 0} true;
    $i1101 := $p2i.ref.i64($p1100);
    goto corral_source_split_14884;

  corral_source_split_14884:
    assume {:verifier.code 0} true;
    $i1102 := $ne.i64($i1101, 0);
    goto corral_source_split_14885;

  corral_source_split_14885:
    assume {:verifier.code 0} true;
    $i1103 := $zext.i1.i32($i1102);
    goto corral_source_split_14886;

  corral_source_split_14886:
    assume {:verifier.code 0} true;
    $i1104 := $sext.i32.i64($i1103);
    goto corral_source_split_14887;

  corral_source_split_14887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2590} $i1105 := ldv__builtin_expect($i1104, 0);
    goto corral_source_split_14888;

  corral_source_split_14888:
    assume {:verifier.code 0} true;
    $i1106 := $ne.i64($i1105, 0);
    goto corral_source_split_14889;

  corral_source_split_14889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1106} true;
    goto $bb639, $bb640;

  $bb640:
    assume !($i1106 == 1);
    assume {:verifier.code 0} true;
    goto $bb641;

  $bb641:
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    $p1107 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(157, 8)));
    goto corral_source_split_14891;

  corral_source_split_14891:
    assume {:verifier.code 0} true;
    $i1108 := $p2i.ref.i64($p1107);
    goto corral_source_split_14892;

  corral_source_split_14892:
    assume {:verifier.code 0} true;
    $i1109 := $ne.i64($i1108, 0);
    goto corral_source_split_14893;

  corral_source_split_14893:
    assume {:verifier.code 0} true;
    $i1110 := $zext.i1.i32($i1109);
    goto corral_source_split_14894;

  corral_source_split_14894:
    assume {:verifier.code 0} true;
    $i1111 := $sext.i32.i64($i1110);
    goto corral_source_split_14895;

  corral_source_split_14895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2591} $i1112 := ldv__builtin_expect($i1111, 0);
    goto corral_source_split_14896;

  corral_source_split_14896:
    assume {:verifier.code 0} true;
    $i1113 := $ne.i64($i1112, 0);
    goto corral_source_split_14897;

  corral_source_split_14897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1113} true;
    goto $bb643, $bb644;

  $bb644:
    assume !($i1113 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    goto $bb646;

  $bb646:
    assume {:verifier.code 0} true;
    $p1114 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(158, 8)));
    goto corral_source_split_14899;

  corral_source_split_14899:
    assume {:verifier.code 0} true;
    $i1115 := $p2i.ref.i64($p1114);
    goto corral_source_split_14900;

  corral_source_split_14900:
    assume {:verifier.code 0} true;
    $i1116 := $ne.i64($i1115, 0);
    goto corral_source_split_14901;

  corral_source_split_14901:
    assume {:verifier.code 0} true;
    $i1117 := $zext.i1.i32($i1116);
    goto corral_source_split_14902;

  corral_source_split_14902:
    assume {:verifier.code 0} true;
    $i1118 := $sext.i32.i64($i1117);
    goto corral_source_split_14903;

  corral_source_split_14903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2592} $i1119 := ldv__builtin_expect($i1118, 0);
    goto corral_source_split_14904;

  corral_source_split_14904:
    assume {:verifier.code 0} true;
    $i1120 := $ne.i64($i1119, 0);
    goto corral_source_split_14905;

  corral_source_split_14905:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1120} true;
    goto $bb647, $bb648;

  $bb648:
    assume !($i1120 == 1);
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb650;

  $bb650:
    assume {:verifier.code 0} true;
    $p1121 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(159, 8)));
    goto corral_source_split_14907;

  corral_source_split_14907:
    assume {:verifier.code 0} true;
    $i1122 := $p2i.ref.i64($p1121);
    goto corral_source_split_14908;

  corral_source_split_14908:
    assume {:verifier.code 0} true;
    $i1123 := $ne.i64($i1122, 0);
    goto corral_source_split_14909;

  corral_source_split_14909:
    assume {:verifier.code 0} true;
    $i1124 := $zext.i1.i32($i1123);
    goto corral_source_split_14910;

  corral_source_split_14910:
    assume {:verifier.code 0} true;
    $i1125 := $sext.i32.i64($i1124);
    goto corral_source_split_14911;

  corral_source_split_14911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2593} $i1126 := ldv__builtin_expect($i1125, 0);
    goto corral_source_split_14912;

  corral_source_split_14912:
    assume {:verifier.code 0} true;
    $i1127 := $ne.i64($i1126, 0);
    goto corral_source_split_14913;

  corral_source_split_14913:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1127} true;
    goto $bb651, $bb652;

  $bb652:
    assume !($i1127 == 1);
    assume {:verifier.code 0} true;
    goto $bb653;

  $bb653:
    assume {:verifier.code 0} true;
    goto $bb654;

  $bb654:
    assume {:verifier.code 0} true;
    $p1128 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(160, 8)));
    goto corral_source_split_14915;

  corral_source_split_14915:
    assume {:verifier.code 0} true;
    $i1129 := $p2i.ref.i64($p1128);
    goto corral_source_split_14916;

  corral_source_split_14916:
    assume {:verifier.code 0} true;
    $i1130 := $ne.i64($i1129, 0);
    goto corral_source_split_14917;

  corral_source_split_14917:
    assume {:verifier.code 0} true;
    $i1131 := $zext.i1.i32($i1130);
    goto corral_source_split_14918;

  corral_source_split_14918:
    assume {:verifier.code 0} true;
    $i1132 := $sext.i32.i64($i1131);
    goto corral_source_split_14919;

  corral_source_split_14919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2594} $i1133 := ldv__builtin_expect($i1132, 0);
    goto corral_source_split_14920;

  corral_source_split_14920:
    assume {:verifier.code 0} true;
    $i1134 := $ne.i64($i1133, 0);
    goto corral_source_split_14921;

  corral_source_split_14921:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1134} true;
    goto $bb655, $bb656;

  $bb656:
    assume !($i1134 == 1);
    assume {:verifier.code 0} true;
    goto $bb657;

  $bb657:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    $p1135 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(161, 8)));
    goto corral_source_split_14923;

  corral_source_split_14923:
    assume {:verifier.code 0} true;
    $i1136 := $p2i.ref.i64($p1135);
    goto corral_source_split_14924;

  corral_source_split_14924:
    assume {:verifier.code 0} true;
    $i1137 := $ne.i64($i1136, 0);
    goto corral_source_split_14925;

  corral_source_split_14925:
    assume {:verifier.code 0} true;
    $i1138 := $zext.i1.i32($i1137);
    goto corral_source_split_14926;

  corral_source_split_14926:
    assume {:verifier.code 0} true;
    $i1139 := $sext.i32.i64($i1138);
    goto corral_source_split_14927;

  corral_source_split_14927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2595} $i1140 := ldv__builtin_expect($i1139, 0);
    goto corral_source_split_14928;

  corral_source_split_14928:
    assume {:verifier.code 0} true;
    $i1141 := $ne.i64($i1140, 0);
    goto corral_source_split_14929;

  corral_source_split_14929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1141} true;
    goto $bb659, $bb660;

  $bb660:
    assume !($i1141 == 1);
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb662;

  $bb662:
    assume {:verifier.code 0} true;
    $p1142 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(162, 8)));
    goto corral_source_split_14931;

  corral_source_split_14931:
    assume {:verifier.code 0} true;
    $i1143 := $p2i.ref.i64($p1142);
    goto corral_source_split_14932;

  corral_source_split_14932:
    assume {:verifier.code 0} true;
    $i1144 := $ne.i64($i1143, 0);
    goto corral_source_split_14933;

  corral_source_split_14933:
    assume {:verifier.code 0} true;
    $i1145 := $zext.i1.i32($i1144);
    goto corral_source_split_14934;

  corral_source_split_14934:
    assume {:verifier.code 0} true;
    $i1146 := $sext.i32.i64($i1145);
    goto corral_source_split_14935;

  corral_source_split_14935:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2596} $i1147 := ldv__builtin_expect($i1146, 0);
    goto corral_source_split_14936;

  corral_source_split_14936:
    assume {:verifier.code 0} true;
    $i1148 := $ne.i64($i1147, 0);
    goto corral_source_split_14937;

  corral_source_split_14937:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1148} true;
    goto $bb663, $bb664;

  $bb664:
    assume !($i1148 == 1);
    assume {:verifier.code 0} true;
    goto $bb665;

  $bb665:
    assume {:verifier.code 0} true;
    goto $bb666;

  $bb666:
    assume {:verifier.code 0} true;
    $p1149 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(163, 8)));
    goto corral_source_split_14939;

  corral_source_split_14939:
    assume {:verifier.code 0} true;
    $i1150 := $p2i.ref.i64($p1149);
    goto corral_source_split_14940;

  corral_source_split_14940:
    assume {:verifier.code 0} true;
    $i1151 := $ne.i64($i1150, 0);
    goto corral_source_split_14941;

  corral_source_split_14941:
    assume {:verifier.code 0} true;
    $i1152 := $zext.i1.i32($i1151);
    goto corral_source_split_14942;

  corral_source_split_14942:
    assume {:verifier.code 0} true;
    $i1153 := $sext.i32.i64($i1152);
    goto corral_source_split_14943;

  corral_source_split_14943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2597} $i1154 := ldv__builtin_expect($i1153, 0);
    goto corral_source_split_14944;

  corral_source_split_14944:
    assume {:verifier.code 0} true;
    $i1155 := $ne.i64($i1154, 0);
    goto corral_source_split_14945;

  corral_source_split_14945:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1155} true;
    goto $bb667, $bb668;

  $bb668:
    assume !($i1155 == 1);
    assume {:verifier.code 0} true;
    goto $bb669;

  $bb669:
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    $p1156 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(164, 8)));
    goto corral_source_split_14947;

  corral_source_split_14947:
    assume {:verifier.code 0} true;
    $i1157 := $p2i.ref.i64($p1156);
    goto corral_source_split_14948;

  corral_source_split_14948:
    assume {:verifier.code 0} true;
    $i1158 := $ne.i64($i1157, 0);
    goto corral_source_split_14949;

  corral_source_split_14949:
    assume {:verifier.code 0} true;
    $i1159 := $zext.i1.i32($i1158);
    goto corral_source_split_14950;

  corral_source_split_14950:
    assume {:verifier.code 0} true;
    $i1160 := $sext.i32.i64($i1159);
    goto corral_source_split_14951;

  corral_source_split_14951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2598} $i1161 := ldv__builtin_expect($i1160, 0);
    goto corral_source_split_14952;

  corral_source_split_14952:
    assume {:verifier.code 0} true;
    $i1162 := $ne.i64($i1161, 0);
    goto corral_source_split_14953;

  corral_source_split_14953:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1162} true;
    goto $bb671, $bb672;

  $bb672:
    assume !($i1162 == 1);
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb674;

  $bb674:
    assume {:verifier.code 0} true;
    $p1163 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(165, 8)));
    goto corral_source_split_14955;

  corral_source_split_14955:
    assume {:verifier.code 0} true;
    $i1164 := $p2i.ref.i64($p1163);
    goto corral_source_split_14956;

  corral_source_split_14956:
    assume {:verifier.code 0} true;
    $i1165 := $ne.i64($i1164, 0);
    goto corral_source_split_14957;

  corral_source_split_14957:
    assume {:verifier.code 0} true;
    $i1166 := $zext.i1.i32($i1165);
    goto corral_source_split_14958;

  corral_source_split_14958:
    assume {:verifier.code 0} true;
    $i1167 := $sext.i32.i64($i1166);
    goto corral_source_split_14959;

  corral_source_split_14959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2599} $i1168 := ldv__builtin_expect($i1167, 0);
    goto corral_source_split_14960;

  corral_source_split_14960:
    assume {:verifier.code 0} true;
    $i1169 := $ne.i64($i1168, 0);
    goto corral_source_split_14961;

  corral_source_split_14961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1169} true;
    goto $bb675, $bb676;

  $bb676:
    assume !($i1169 == 1);
    assume {:verifier.code 0} true;
    goto $bb677;

  $bb677:
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    $p1170 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(166, 8)));
    goto corral_source_split_14963;

  corral_source_split_14963:
    assume {:verifier.code 0} true;
    $i1171 := $p2i.ref.i64($p1170);
    goto corral_source_split_14964;

  corral_source_split_14964:
    assume {:verifier.code 0} true;
    $i1172 := $ne.i64($i1171, 0);
    goto corral_source_split_14965;

  corral_source_split_14965:
    assume {:verifier.code 0} true;
    $i1173 := $zext.i1.i32($i1172);
    goto corral_source_split_14966;

  corral_source_split_14966:
    assume {:verifier.code 0} true;
    $i1174 := $sext.i32.i64($i1173);
    goto corral_source_split_14967;

  corral_source_split_14967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2600} $i1175 := ldv__builtin_expect($i1174, 0);
    goto corral_source_split_14968;

  corral_source_split_14968:
    assume {:verifier.code 0} true;
    $i1176 := $ne.i64($i1175, 0);
    goto corral_source_split_14969;

  corral_source_split_14969:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1176} true;
    goto $bb679, $bb680;

  $bb680:
    assume !($i1176 == 1);
    assume {:verifier.code 0} true;
    goto $bb681;

  $bb681:
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    $p1177 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(167, 8)));
    goto corral_source_split_14971;

  corral_source_split_14971:
    assume {:verifier.code 0} true;
    $i1178 := $p2i.ref.i64($p1177);
    goto corral_source_split_14972;

  corral_source_split_14972:
    assume {:verifier.code 0} true;
    $i1179 := $ne.i64($i1178, 0);
    goto corral_source_split_14973;

  corral_source_split_14973:
    assume {:verifier.code 0} true;
    $i1180 := $zext.i1.i32($i1179);
    goto corral_source_split_14974;

  corral_source_split_14974:
    assume {:verifier.code 0} true;
    $i1181 := $sext.i32.i64($i1180);
    goto corral_source_split_14975;

  corral_source_split_14975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2601} $i1182 := ldv__builtin_expect($i1181, 0);
    goto corral_source_split_14976;

  corral_source_split_14976:
    assume {:verifier.code 0} true;
    $i1183 := $ne.i64($i1182, 0);
    goto corral_source_split_14977;

  corral_source_split_14977:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1183} true;
    goto $bb683, $bb684;

  $bb684:
    assume !($i1183 == 1);
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    goto $bb686;

  $bb686:
    assume {:verifier.code 0} true;
    $p1184 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(168, 8)));
    goto corral_source_split_14979;

  corral_source_split_14979:
    assume {:verifier.code 0} true;
    $i1185 := $p2i.ref.i64($p1184);
    goto corral_source_split_14980;

  corral_source_split_14980:
    assume {:verifier.code 0} true;
    $i1186 := $ne.i64($i1185, 0);
    goto corral_source_split_14981;

  corral_source_split_14981:
    assume {:verifier.code 0} true;
    $i1187 := $zext.i1.i32($i1186);
    goto corral_source_split_14982;

  corral_source_split_14982:
    assume {:verifier.code 0} true;
    $i1188 := $sext.i32.i64($i1187);
    goto corral_source_split_14983;

  corral_source_split_14983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2602} $i1189 := ldv__builtin_expect($i1188, 0);
    goto corral_source_split_14984;

  corral_source_split_14984:
    assume {:verifier.code 0} true;
    $i1190 := $ne.i64($i1189, 0);
    goto corral_source_split_14985;

  corral_source_split_14985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1190} true;
    goto $bb687, $bb688;

  $bb688:
    assume !($i1190 == 1);
    assume {:verifier.code 0} true;
    goto $bb689;

  $bb689:
    assume {:verifier.code 0} true;
    goto $bb690;

  $bb690:
    assume {:verifier.code 0} true;
    $p1191 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(169, 8)));
    goto corral_source_split_14987;

  corral_source_split_14987:
    assume {:verifier.code 0} true;
    $i1192 := $p2i.ref.i64($p1191);
    goto corral_source_split_14988;

  corral_source_split_14988:
    assume {:verifier.code 0} true;
    $i1193 := $ne.i64($i1192, 0);
    goto corral_source_split_14989;

  corral_source_split_14989:
    assume {:verifier.code 0} true;
    $i1194 := $zext.i1.i32($i1193);
    goto corral_source_split_14990;

  corral_source_split_14990:
    assume {:verifier.code 0} true;
    $i1195 := $sext.i32.i64($i1194);
    goto corral_source_split_14991;

  corral_source_split_14991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2603} $i1196 := ldv__builtin_expect($i1195, 0);
    goto corral_source_split_14992;

  corral_source_split_14992:
    assume {:verifier.code 0} true;
    $i1197 := $ne.i64($i1196, 0);
    goto corral_source_split_14993;

  corral_source_split_14993:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1197} true;
    goto $bb691, $bb692;

  $bb692:
    assume !($i1197 == 1);
    assume {:verifier.code 0} true;
    goto $bb693;

  $bb693:
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    $p1198 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(170, 8)));
    goto corral_source_split_14995;

  corral_source_split_14995:
    assume {:verifier.code 0} true;
    $i1199 := $p2i.ref.i64($p1198);
    goto corral_source_split_14996;

  corral_source_split_14996:
    assume {:verifier.code 0} true;
    $i1200 := $ne.i64($i1199, 0);
    goto corral_source_split_14997;

  corral_source_split_14997:
    assume {:verifier.code 0} true;
    $i1201 := $zext.i1.i32($i1200);
    goto corral_source_split_14998;

  corral_source_split_14998:
    assume {:verifier.code 0} true;
    $i1202 := $sext.i32.i64($i1201);
    goto corral_source_split_14999;

  corral_source_split_14999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2604} $i1203 := ldv__builtin_expect($i1202, 0);
    goto corral_source_split_15000;

  corral_source_split_15000:
    assume {:verifier.code 0} true;
    $i1204 := $ne.i64($i1203, 0);
    goto corral_source_split_15001;

  corral_source_split_15001:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1204} true;
    goto $bb695, $bb696;

  $bb696:
    assume !($i1204 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    goto $bb698;

  $bb698:
    assume {:verifier.code 0} true;
    $p1205 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(171, 8)));
    goto corral_source_split_15003;

  corral_source_split_15003:
    assume {:verifier.code 0} true;
    $i1206 := $p2i.ref.i64($p1205);
    goto corral_source_split_15004;

  corral_source_split_15004:
    assume {:verifier.code 0} true;
    $i1207 := $ne.i64($i1206, 0);
    goto corral_source_split_15005;

  corral_source_split_15005:
    assume {:verifier.code 0} true;
    $i1208 := $zext.i1.i32($i1207);
    goto corral_source_split_15006;

  corral_source_split_15006:
    assume {:verifier.code 0} true;
    $i1209 := $sext.i32.i64($i1208);
    goto corral_source_split_15007;

  corral_source_split_15007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2605} $i1210 := ldv__builtin_expect($i1209, 0);
    goto corral_source_split_15008;

  corral_source_split_15008:
    assume {:verifier.code 0} true;
    $i1211 := $ne.i64($i1210, 0);
    goto corral_source_split_15009;

  corral_source_split_15009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1211} true;
    goto $bb699, $bb700;

  $bb700:
    assume !($i1211 == 1);
    assume {:verifier.code 0} true;
    goto $bb701;

  $bb701:
    assume {:verifier.code 0} true;
    goto $bb702;

  $bb702:
    assume {:verifier.code 0} true;
    $p1212 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(172, 8)));
    goto corral_source_split_15011;

  corral_source_split_15011:
    assume {:verifier.code 0} true;
    $i1213 := $p2i.ref.i64($p1212);
    goto corral_source_split_15012;

  corral_source_split_15012:
    assume {:verifier.code 0} true;
    $i1214 := $ne.i64($i1213, 0);
    goto corral_source_split_15013;

  corral_source_split_15013:
    assume {:verifier.code 0} true;
    $i1215 := $zext.i1.i32($i1214);
    goto corral_source_split_15014;

  corral_source_split_15014:
    assume {:verifier.code 0} true;
    $i1216 := $sext.i32.i64($i1215);
    goto corral_source_split_15015;

  corral_source_split_15015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2606} $i1217 := ldv__builtin_expect($i1216, 0);
    goto corral_source_split_15016;

  corral_source_split_15016:
    assume {:verifier.code 0} true;
    $i1218 := $ne.i64($i1217, 0);
    goto corral_source_split_15017;

  corral_source_split_15017:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1218} true;
    goto $bb703, $bb704;

  $bb704:
    assume !($i1218 == 1);
    assume {:verifier.code 0} true;
    goto $bb705;

  $bb705:
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    $p1219 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(173, 8)));
    goto corral_source_split_15019;

  corral_source_split_15019:
    assume {:verifier.code 0} true;
    $i1220 := $p2i.ref.i64($p1219);
    goto corral_source_split_15020;

  corral_source_split_15020:
    assume {:verifier.code 0} true;
    $i1221 := $ne.i64($i1220, 0);
    goto corral_source_split_15021;

  corral_source_split_15021:
    assume {:verifier.code 0} true;
    $i1222 := $zext.i1.i32($i1221);
    goto corral_source_split_15022;

  corral_source_split_15022:
    assume {:verifier.code 0} true;
    $i1223 := $sext.i32.i64($i1222);
    goto corral_source_split_15023;

  corral_source_split_15023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2607} $i1224 := ldv__builtin_expect($i1223, 0);
    goto corral_source_split_15024;

  corral_source_split_15024:
    assume {:verifier.code 0} true;
    $i1225 := $ne.i64($i1224, 0);
    goto corral_source_split_15025;

  corral_source_split_15025:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1225} true;
    goto $bb707, $bb708;

  $bb708:
    assume !($i1225 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    goto $bb710;

  $bb710:
    assume {:verifier.code 0} true;
    $p1226 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(174, 8)));
    goto corral_source_split_15027;

  corral_source_split_15027:
    assume {:verifier.code 0} true;
    $i1227 := $p2i.ref.i64($p1226);
    goto corral_source_split_15028;

  corral_source_split_15028:
    assume {:verifier.code 0} true;
    $i1228 := $ne.i64($i1227, 0);
    goto corral_source_split_15029;

  corral_source_split_15029:
    assume {:verifier.code 0} true;
    $i1229 := $zext.i1.i32($i1228);
    goto corral_source_split_15030;

  corral_source_split_15030:
    assume {:verifier.code 0} true;
    $i1230 := $sext.i32.i64($i1229);
    goto corral_source_split_15031;

  corral_source_split_15031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2608} $i1231 := ldv__builtin_expect($i1230, 0);
    goto corral_source_split_15032;

  corral_source_split_15032:
    assume {:verifier.code 0} true;
    $i1232 := $ne.i64($i1231, 0);
    goto corral_source_split_15033;

  corral_source_split_15033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1232} true;
    goto $bb711, $bb712;

  $bb712:
    assume !($i1232 == 1);
    assume {:verifier.code 0} true;
    goto $bb713;

  $bb713:
    assume {:verifier.code 0} true;
    goto $bb714;

  $bb714:
    assume {:verifier.code 0} true;
    $p1233 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(175, 8)));
    goto corral_source_split_15035;

  corral_source_split_15035:
    assume {:verifier.code 0} true;
    $i1234 := $p2i.ref.i64($p1233);
    goto corral_source_split_15036;

  corral_source_split_15036:
    assume {:verifier.code 0} true;
    $i1235 := $ne.i64($i1234, 0);
    goto corral_source_split_15037;

  corral_source_split_15037:
    assume {:verifier.code 0} true;
    $i1236 := $zext.i1.i32($i1235);
    goto corral_source_split_15038;

  corral_source_split_15038:
    assume {:verifier.code 0} true;
    $i1237 := $sext.i32.i64($i1236);
    goto corral_source_split_15039;

  corral_source_split_15039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2609} $i1238 := ldv__builtin_expect($i1237, 0);
    goto corral_source_split_15040;

  corral_source_split_15040:
    assume {:verifier.code 0} true;
    $i1239 := $ne.i64($i1238, 0);
    goto corral_source_split_15041;

  corral_source_split_15041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1239} true;
    goto $bb715, $bb716;

  $bb716:
    assume !($i1239 == 1);
    assume {:verifier.code 0} true;
    goto $bb717;

  $bb717:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    $p1240 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(176, 8)));
    goto corral_source_split_15043;

  corral_source_split_15043:
    assume {:verifier.code 0} true;
    $i1241 := $p2i.ref.i64($p1240);
    goto corral_source_split_15044;

  corral_source_split_15044:
    assume {:verifier.code 0} true;
    $i1242 := $ne.i64($i1241, 0);
    goto corral_source_split_15045;

  corral_source_split_15045:
    assume {:verifier.code 0} true;
    $i1243 := $zext.i1.i32($i1242);
    goto corral_source_split_15046;

  corral_source_split_15046:
    assume {:verifier.code 0} true;
    $i1244 := $sext.i32.i64($i1243);
    goto corral_source_split_15047;

  corral_source_split_15047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2610} $i1245 := ldv__builtin_expect($i1244, 0);
    goto corral_source_split_15048;

  corral_source_split_15048:
    assume {:verifier.code 0} true;
    $i1246 := $ne.i64($i1245, 0);
    goto corral_source_split_15049;

  corral_source_split_15049:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1246} true;
    goto $bb719, $bb720;

  $bb720:
    assume !($i1246 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    goto $bb722;

  $bb722:
    assume {:verifier.code 0} true;
    $p1247 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(177, 8)));
    goto corral_source_split_15051;

  corral_source_split_15051:
    assume {:verifier.code 0} true;
    $i1248 := $p2i.ref.i64($p1247);
    goto corral_source_split_15052;

  corral_source_split_15052:
    assume {:verifier.code 0} true;
    $i1249 := $ne.i64($i1248, 0);
    goto corral_source_split_15053;

  corral_source_split_15053:
    assume {:verifier.code 0} true;
    $i1250 := $zext.i1.i32($i1249);
    goto corral_source_split_15054;

  corral_source_split_15054:
    assume {:verifier.code 0} true;
    $i1251 := $sext.i32.i64($i1250);
    goto corral_source_split_15055;

  corral_source_split_15055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2611} $i1252 := ldv__builtin_expect($i1251, 0);
    goto corral_source_split_15056;

  corral_source_split_15056:
    assume {:verifier.code 0} true;
    $i1253 := $ne.i64($i1252, 0);
    goto corral_source_split_15057;

  corral_source_split_15057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1253} true;
    goto $bb723, $bb724;

  $bb724:
    assume !($i1253 == 1);
    assume {:verifier.code 0} true;
    goto $bb725;

  $bb725:
    assume {:verifier.code 0} true;
    goto $bb726;

  $bb726:
    assume {:verifier.code 0} true;
    $p1254 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(178, 8)));
    goto corral_source_split_15059;

  corral_source_split_15059:
    assume {:verifier.code 0} true;
    $i1255 := $p2i.ref.i64($p1254);
    goto corral_source_split_15060;

  corral_source_split_15060:
    assume {:verifier.code 0} true;
    $i1256 := $ne.i64($i1255, 0);
    goto corral_source_split_15061;

  corral_source_split_15061:
    assume {:verifier.code 0} true;
    $i1257 := $zext.i1.i32($i1256);
    goto corral_source_split_15062;

  corral_source_split_15062:
    assume {:verifier.code 0} true;
    $i1258 := $sext.i32.i64($i1257);
    goto corral_source_split_15063;

  corral_source_split_15063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2612} $i1259 := ldv__builtin_expect($i1258, 0);
    goto corral_source_split_15064;

  corral_source_split_15064:
    assume {:verifier.code 0} true;
    $i1260 := $ne.i64($i1259, 0);
    goto corral_source_split_15065;

  corral_source_split_15065:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1260} true;
    goto $bb727, $bb728;

  $bb728:
    assume !($i1260 == 1);
    assume {:verifier.code 0} true;
    goto $bb729;

  $bb729:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    $p1261 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(179, 8)));
    goto corral_source_split_15067;

  corral_source_split_15067:
    assume {:verifier.code 0} true;
    $i1262 := $p2i.ref.i64($p1261);
    goto corral_source_split_15068;

  corral_source_split_15068:
    assume {:verifier.code 0} true;
    $i1263 := $ne.i64($i1262, 0);
    goto corral_source_split_15069;

  corral_source_split_15069:
    assume {:verifier.code 0} true;
    $i1264 := $zext.i1.i32($i1263);
    goto corral_source_split_15070;

  corral_source_split_15070:
    assume {:verifier.code 0} true;
    $i1265 := $sext.i32.i64($i1264);
    goto corral_source_split_15071;

  corral_source_split_15071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2613} $i1266 := ldv__builtin_expect($i1265, 0);
    goto corral_source_split_15072;

  corral_source_split_15072:
    assume {:verifier.code 0} true;
    $i1267 := $ne.i64($i1266, 0);
    goto corral_source_split_15073;

  corral_source_split_15073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1267} true;
    goto $bb731, $bb732;

  $bb732:
    assume !($i1267 == 1);
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    goto $bb734;

  $bb734:
    assume {:verifier.code 0} true;
    $p1268 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(180, 8)));
    goto corral_source_split_15075;

  corral_source_split_15075:
    assume {:verifier.code 0} true;
    $i1269 := $p2i.ref.i64($p1268);
    goto corral_source_split_15076;

  corral_source_split_15076:
    assume {:verifier.code 0} true;
    $i1270 := $ne.i64($i1269, 0);
    goto corral_source_split_15077;

  corral_source_split_15077:
    assume {:verifier.code 0} true;
    $i1271 := $zext.i1.i32($i1270);
    goto corral_source_split_15078;

  corral_source_split_15078:
    assume {:verifier.code 0} true;
    $i1272 := $sext.i32.i64($i1271);
    goto corral_source_split_15079;

  corral_source_split_15079:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2614} $i1273 := ldv__builtin_expect($i1272, 0);
    goto corral_source_split_15080;

  corral_source_split_15080:
    assume {:verifier.code 0} true;
    $i1274 := $ne.i64($i1273, 0);
    goto corral_source_split_15081;

  corral_source_split_15081:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1274} true;
    goto $bb735, $bb736;

  $bb736:
    assume !($i1274 == 1);
    assume {:verifier.code 0} true;
    goto $bb737;

  $bb737:
    assume {:verifier.code 0} true;
    goto $bb738;

  $bb738:
    assume {:verifier.code 0} true;
    $p1275 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(181, 8)));
    goto corral_source_split_15083;

  corral_source_split_15083:
    assume {:verifier.code 0} true;
    $i1276 := $p2i.ref.i64($p1275);
    goto corral_source_split_15084;

  corral_source_split_15084:
    assume {:verifier.code 0} true;
    $i1277 := $ne.i64($i1276, 0);
    goto corral_source_split_15085;

  corral_source_split_15085:
    assume {:verifier.code 0} true;
    $i1278 := $zext.i1.i32($i1277);
    goto corral_source_split_15086;

  corral_source_split_15086:
    assume {:verifier.code 0} true;
    $i1279 := $sext.i32.i64($i1278);
    goto corral_source_split_15087;

  corral_source_split_15087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2615} $i1280 := ldv__builtin_expect($i1279, 0);
    goto corral_source_split_15088;

  corral_source_split_15088:
    assume {:verifier.code 0} true;
    $i1281 := $ne.i64($i1280, 0);
    goto corral_source_split_15089;

  corral_source_split_15089:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1281} true;
    goto $bb739, $bb740;

  $bb740:
    assume !($i1281 == 1);
    assume {:verifier.code 0} true;
    goto $bb741;

  $bb741:
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    $p1282 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(182, 8)));
    goto corral_source_split_15091;

  corral_source_split_15091:
    assume {:verifier.code 0} true;
    $i1283 := $p2i.ref.i64($p1282);
    goto corral_source_split_15092;

  corral_source_split_15092:
    assume {:verifier.code 0} true;
    $i1284 := $ne.i64($i1283, 0);
    goto corral_source_split_15093;

  corral_source_split_15093:
    assume {:verifier.code 0} true;
    $i1285 := $zext.i1.i32($i1284);
    goto corral_source_split_15094;

  corral_source_split_15094:
    assume {:verifier.code 0} true;
    $i1286 := $sext.i32.i64($i1285);
    goto corral_source_split_15095;

  corral_source_split_15095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2616} $i1287 := ldv__builtin_expect($i1286, 0);
    goto corral_source_split_15096;

  corral_source_split_15096:
    assume {:verifier.code 0} true;
    $i1288 := $ne.i64($i1287, 0);
    goto corral_source_split_15097;

  corral_source_split_15097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1288} true;
    goto $bb743, $bb744;

  $bb744:
    assume !($i1288 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb746;

  $bb746:
    assume {:verifier.code 0} true;
    $p1289 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(183, 8)));
    goto corral_source_split_15099;

  corral_source_split_15099:
    assume {:verifier.code 0} true;
    $i1290 := $p2i.ref.i64($p1289);
    goto corral_source_split_15100;

  corral_source_split_15100:
    assume {:verifier.code 0} true;
    $i1291 := $ne.i64($i1290, 0);
    goto corral_source_split_15101;

  corral_source_split_15101:
    assume {:verifier.code 0} true;
    $i1292 := $zext.i1.i32($i1291);
    goto corral_source_split_15102;

  corral_source_split_15102:
    assume {:verifier.code 0} true;
    $i1293 := $sext.i32.i64($i1292);
    goto corral_source_split_15103;

  corral_source_split_15103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2617} $i1294 := ldv__builtin_expect($i1293, 0);
    goto corral_source_split_15104;

  corral_source_split_15104:
    assume {:verifier.code 0} true;
    $i1295 := $ne.i64($i1294, 0);
    goto corral_source_split_15105;

  corral_source_split_15105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1295} true;
    goto $bb747, $bb748;

  $bb748:
    assume !($i1295 == 1);
    assume {:verifier.code 0} true;
    goto $bb749;

  $bb749:
    assume {:verifier.code 0} true;
    goto $bb750;

  $bb750:
    assume {:verifier.code 0} true;
    $p1296 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(184, 8)));
    goto corral_source_split_15107;

  corral_source_split_15107:
    assume {:verifier.code 0} true;
    $i1297 := $p2i.ref.i64($p1296);
    goto corral_source_split_15108;

  corral_source_split_15108:
    assume {:verifier.code 0} true;
    $i1298 := $ne.i64($i1297, 0);
    goto corral_source_split_15109;

  corral_source_split_15109:
    assume {:verifier.code 0} true;
    $i1299 := $zext.i1.i32($i1298);
    goto corral_source_split_15110;

  corral_source_split_15110:
    assume {:verifier.code 0} true;
    $i1300 := $sext.i32.i64($i1299);
    goto corral_source_split_15111;

  corral_source_split_15111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2618} $i1301 := ldv__builtin_expect($i1300, 0);
    goto corral_source_split_15112;

  corral_source_split_15112:
    assume {:verifier.code 0} true;
    $i1302 := $ne.i64($i1301, 0);
    goto corral_source_split_15113;

  corral_source_split_15113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1302} true;
    goto $bb751, $bb752;

  $bb752:
    assume !($i1302 == 1);
    assume {:verifier.code 0} true;
    goto $bb753;

  $bb753:
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    $p1303 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(185, 8)));
    goto corral_source_split_15115;

  corral_source_split_15115:
    assume {:verifier.code 0} true;
    $i1304 := $p2i.ref.i64($p1303);
    goto corral_source_split_15116;

  corral_source_split_15116:
    assume {:verifier.code 0} true;
    $i1305 := $ne.i64($i1304, 0);
    goto corral_source_split_15117;

  corral_source_split_15117:
    assume {:verifier.code 0} true;
    $i1306 := $zext.i1.i32($i1305);
    goto corral_source_split_15118;

  corral_source_split_15118:
    assume {:verifier.code 0} true;
    $i1307 := $sext.i32.i64($i1306);
    goto corral_source_split_15119;

  corral_source_split_15119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2619} $i1308 := ldv__builtin_expect($i1307, 0);
    goto corral_source_split_15120;

  corral_source_split_15120:
    assume {:verifier.code 0} true;
    $i1309 := $ne.i64($i1308, 0);
    goto corral_source_split_15121;

  corral_source_split_15121:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1309} true;
    goto $bb755, $bb756;

  $bb756:
    assume !($i1309 == 1);
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb758;

  $bb758:
    assume {:verifier.code 0} true;
    $p1310 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(186, 8)));
    goto corral_source_split_15123;

  corral_source_split_15123:
    assume {:verifier.code 0} true;
    $i1311 := $p2i.ref.i64($p1310);
    goto corral_source_split_15124;

  corral_source_split_15124:
    assume {:verifier.code 0} true;
    $i1312 := $ne.i64($i1311, 0);
    goto corral_source_split_15125;

  corral_source_split_15125:
    assume {:verifier.code 0} true;
    $i1313 := $zext.i1.i32($i1312);
    goto corral_source_split_15126;

  corral_source_split_15126:
    assume {:verifier.code 0} true;
    $i1314 := $sext.i32.i64($i1313);
    goto corral_source_split_15127;

  corral_source_split_15127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2620} $i1315 := ldv__builtin_expect($i1314, 0);
    goto corral_source_split_15128;

  corral_source_split_15128:
    assume {:verifier.code 0} true;
    $i1316 := $ne.i64($i1315, 0);
    goto corral_source_split_15129;

  corral_source_split_15129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1316} true;
    goto $bb759, $bb760;

  $bb760:
    assume !($i1316 == 1);
    assume {:verifier.code 0} true;
    goto $bb761;

  $bb761:
    assume {:verifier.code 0} true;
    goto $bb762;

  $bb762:
    assume {:verifier.code 0} true;
    $p1317 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(187, 8)));
    goto corral_source_split_15131;

  corral_source_split_15131:
    assume {:verifier.code 0} true;
    $i1318 := $p2i.ref.i64($p1317);
    goto corral_source_split_15132;

  corral_source_split_15132:
    assume {:verifier.code 0} true;
    $i1319 := $ne.i64($i1318, 0);
    goto corral_source_split_15133;

  corral_source_split_15133:
    assume {:verifier.code 0} true;
    $i1320 := $zext.i1.i32($i1319);
    goto corral_source_split_15134;

  corral_source_split_15134:
    assume {:verifier.code 0} true;
    $i1321 := $sext.i32.i64($i1320);
    goto corral_source_split_15135;

  corral_source_split_15135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2621} $i1322 := ldv__builtin_expect($i1321, 0);
    goto corral_source_split_15136;

  corral_source_split_15136:
    assume {:verifier.code 0} true;
    $i1323 := $ne.i64($i1322, 0);
    goto corral_source_split_15137;

  corral_source_split_15137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1323} true;
    goto $bb763, $bb764;

  $bb764:
    assume !($i1323 == 1);
    assume {:verifier.code 0} true;
    goto $bb765;

  $bb765:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    $p1324 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(188, 8)));
    goto corral_source_split_15139;

  corral_source_split_15139:
    assume {:verifier.code 0} true;
    $i1325 := $p2i.ref.i64($p1324);
    goto corral_source_split_15140;

  corral_source_split_15140:
    assume {:verifier.code 0} true;
    $i1326 := $ne.i64($i1325, 0);
    goto corral_source_split_15141;

  corral_source_split_15141:
    assume {:verifier.code 0} true;
    $i1327 := $zext.i1.i32($i1326);
    goto corral_source_split_15142;

  corral_source_split_15142:
    assume {:verifier.code 0} true;
    $i1328 := $sext.i32.i64($i1327);
    goto corral_source_split_15143;

  corral_source_split_15143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2622} $i1329 := ldv__builtin_expect($i1328, 0);
    goto corral_source_split_15144;

  corral_source_split_15144:
    assume {:verifier.code 0} true;
    $i1330 := $ne.i64($i1329, 0);
    goto corral_source_split_15145;

  corral_source_split_15145:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1330} true;
    goto $bb767, $bb768;

  $bb768:
    assume !($i1330 == 1);
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    goto $bb770;

  $bb770:
    assume {:verifier.code 0} true;
    $p1331 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(189, 8)));
    goto corral_source_split_15147;

  corral_source_split_15147:
    assume {:verifier.code 0} true;
    $i1332 := $p2i.ref.i64($p1331);
    goto corral_source_split_15148;

  corral_source_split_15148:
    assume {:verifier.code 0} true;
    $i1333 := $ne.i64($i1332, 0);
    goto corral_source_split_15149;

  corral_source_split_15149:
    assume {:verifier.code 0} true;
    $i1334 := $zext.i1.i32($i1333);
    goto corral_source_split_15150;

  corral_source_split_15150:
    assume {:verifier.code 0} true;
    $i1335 := $sext.i32.i64($i1334);
    goto corral_source_split_15151;

  corral_source_split_15151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2623} $i1336 := ldv__builtin_expect($i1335, 0);
    goto corral_source_split_15152;

  corral_source_split_15152:
    assume {:verifier.code 0} true;
    $i1337 := $ne.i64($i1336, 0);
    goto corral_source_split_15153;

  corral_source_split_15153:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1337} true;
    goto $bb771, $bb772;

  $bb772:
    assume !($i1337 == 1);
    assume {:verifier.code 0} true;
    goto $bb773;

  $bb773:
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    $p1338 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(190, 8)));
    goto corral_source_split_15155;

  corral_source_split_15155:
    assume {:verifier.code 0} true;
    $i1339 := $p2i.ref.i64($p1338);
    goto corral_source_split_15156;

  corral_source_split_15156:
    assume {:verifier.code 0} true;
    $i1340 := $ne.i64($i1339, 0);
    goto corral_source_split_15157;

  corral_source_split_15157:
    assume {:verifier.code 0} true;
    $i1341 := $zext.i1.i32($i1340);
    goto corral_source_split_15158;

  corral_source_split_15158:
    assume {:verifier.code 0} true;
    $i1342 := $sext.i32.i64($i1341);
    goto corral_source_split_15159;

  corral_source_split_15159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2624} $i1343 := ldv__builtin_expect($i1342, 0);
    goto corral_source_split_15160;

  corral_source_split_15160:
    assume {:verifier.code 0} true;
    $i1344 := $ne.i64($i1343, 0);
    goto corral_source_split_15161;

  corral_source_split_15161:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1344} true;
    goto $bb775, $bb776;

  $bb776:
    assume !($i1344 == 1);
    assume {:verifier.code 0} true;
    goto $bb777;

  $bb777:
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    $p1345 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(191, 8)));
    goto corral_source_split_15163;

  corral_source_split_15163:
    assume {:verifier.code 0} true;
    $i1346 := $p2i.ref.i64($p1345);
    goto corral_source_split_15164;

  corral_source_split_15164:
    assume {:verifier.code 0} true;
    $i1347 := $ne.i64($i1346, 0);
    goto corral_source_split_15165;

  corral_source_split_15165:
    assume {:verifier.code 0} true;
    $i1348 := $zext.i1.i32($i1347);
    goto corral_source_split_15166;

  corral_source_split_15166:
    assume {:verifier.code 0} true;
    $i1349 := $sext.i32.i64($i1348);
    goto corral_source_split_15167;

  corral_source_split_15167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2625} $i1350 := ldv__builtin_expect($i1349, 0);
    goto corral_source_split_15168;

  corral_source_split_15168:
    assume {:verifier.code 0} true;
    $i1351 := $ne.i64($i1350, 0);
    goto corral_source_split_15169;

  corral_source_split_15169:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1351} true;
    goto $bb779, $bb780;

  $bb780:
    assume !($i1351 == 1);
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb782;

  $bb782:
    assume {:verifier.code 0} true;
    $p1352 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(192, 8)));
    goto corral_source_split_15171;

  corral_source_split_15171:
    assume {:verifier.code 0} true;
    $i1353 := $p2i.ref.i64($p1352);
    goto corral_source_split_15172;

  corral_source_split_15172:
    assume {:verifier.code 0} true;
    $i1354 := $ne.i64($i1353, 0);
    goto corral_source_split_15173;

  corral_source_split_15173:
    assume {:verifier.code 0} true;
    $i1355 := $zext.i1.i32($i1354);
    goto corral_source_split_15174;

  corral_source_split_15174:
    assume {:verifier.code 0} true;
    $i1356 := $sext.i32.i64($i1355);
    goto corral_source_split_15175;

  corral_source_split_15175:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2626} $i1357 := ldv__builtin_expect($i1356, 0);
    goto corral_source_split_15176;

  corral_source_split_15176:
    assume {:verifier.code 0} true;
    $i1358 := $ne.i64($i1357, 0);
    goto corral_source_split_15177;

  corral_source_split_15177:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1358} true;
    goto $bb783, $bb784;

  $bb784:
    assume !($i1358 == 1);
    assume {:verifier.code 0} true;
    goto $bb785;

  $bb785:
    assume {:verifier.code 0} true;
    goto $bb786;

  $bb786:
    assume {:verifier.code 0} true;
    $p1359 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(193, 8)));
    goto corral_source_split_15179;

  corral_source_split_15179:
    assume {:verifier.code 0} true;
    $i1360 := $p2i.ref.i64($p1359);
    goto corral_source_split_15180;

  corral_source_split_15180:
    assume {:verifier.code 0} true;
    $i1361 := $ne.i64($i1360, 0);
    goto corral_source_split_15181;

  corral_source_split_15181:
    assume {:verifier.code 0} true;
    $i1362 := $zext.i1.i32($i1361);
    goto corral_source_split_15182;

  corral_source_split_15182:
    assume {:verifier.code 0} true;
    $i1363 := $sext.i32.i64($i1362);
    goto corral_source_split_15183;

  corral_source_split_15183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2627} $i1364 := ldv__builtin_expect($i1363, 0);
    goto corral_source_split_15184;

  corral_source_split_15184:
    assume {:verifier.code 0} true;
    $i1365 := $ne.i64($i1364, 0);
    goto corral_source_split_15185;

  corral_source_split_15185:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1365} true;
    goto $bb787, $bb788;

  $bb788:
    assume !($i1365 == 1);
    assume {:verifier.code 0} true;
    goto $bb789;

  $bb789:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    $p1366 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(194, 8)));
    goto corral_source_split_15187;

  corral_source_split_15187:
    assume {:verifier.code 0} true;
    $i1367 := $p2i.ref.i64($p1366);
    goto corral_source_split_15188;

  corral_source_split_15188:
    assume {:verifier.code 0} true;
    $i1368 := $ne.i64($i1367, 0);
    goto corral_source_split_15189;

  corral_source_split_15189:
    assume {:verifier.code 0} true;
    $i1369 := $zext.i1.i32($i1368);
    goto corral_source_split_15190;

  corral_source_split_15190:
    assume {:verifier.code 0} true;
    $i1370 := $sext.i32.i64($i1369);
    goto corral_source_split_15191;

  corral_source_split_15191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2628} $i1371 := ldv__builtin_expect($i1370, 0);
    goto corral_source_split_15192;

  corral_source_split_15192:
    assume {:verifier.code 0} true;
    $i1372 := $ne.i64($i1371, 0);
    goto corral_source_split_15193;

  corral_source_split_15193:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1372} true;
    goto $bb791, $bb792;

  $bb792:
    assume !($i1372 == 1);
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb794;

  $bb794:
    assume {:verifier.code 0} true;
    $p1373 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(195, 8)));
    goto corral_source_split_15195;

  corral_source_split_15195:
    assume {:verifier.code 0} true;
    $i1374 := $p2i.ref.i64($p1373);
    goto corral_source_split_15196;

  corral_source_split_15196:
    assume {:verifier.code 0} true;
    $i1375 := $ne.i64($i1374, 0);
    goto corral_source_split_15197;

  corral_source_split_15197:
    assume {:verifier.code 0} true;
    $i1376 := $zext.i1.i32($i1375);
    goto corral_source_split_15198;

  corral_source_split_15198:
    assume {:verifier.code 0} true;
    $i1377 := $sext.i32.i64($i1376);
    goto corral_source_split_15199;

  corral_source_split_15199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2629} $i1378 := ldv__builtin_expect($i1377, 0);
    goto corral_source_split_15200;

  corral_source_split_15200:
    assume {:verifier.code 0} true;
    $i1379 := $ne.i64($i1378, 0);
    goto corral_source_split_15201;

  corral_source_split_15201:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1379} true;
    goto $bb795, $bb796;

  $bb796:
    assume !($i1379 == 1);
    assume {:verifier.code 0} true;
    goto $bb797;

  $bb797:
    assume {:verifier.code 0} true;
    goto $bb798;

  $bb798:
    assume {:verifier.code 0} true;
    $p1380 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(196, 8)));
    goto corral_source_split_15203;

  corral_source_split_15203:
    assume {:verifier.code 0} true;
    $i1381 := $p2i.ref.i64($p1380);
    goto corral_source_split_15204;

  corral_source_split_15204:
    assume {:verifier.code 0} true;
    $i1382 := $ne.i64($i1381, 0);
    goto corral_source_split_15205;

  corral_source_split_15205:
    assume {:verifier.code 0} true;
    $i1383 := $zext.i1.i32($i1382);
    goto corral_source_split_15206;

  corral_source_split_15206:
    assume {:verifier.code 0} true;
    $i1384 := $sext.i32.i64($i1383);
    goto corral_source_split_15207;

  corral_source_split_15207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2630} $i1385 := ldv__builtin_expect($i1384, 0);
    goto corral_source_split_15208;

  corral_source_split_15208:
    assume {:verifier.code 0} true;
    $i1386 := $ne.i64($i1385, 0);
    goto corral_source_split_15209;

  corral_source_split_15209:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1386} true;
    goto $bb799, $bb800;

  $bb800:
    assume !($i1386 == 1);
    assume {:verifier.code 0} true;
    goto $bb801;

  $bb801:
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    $p1387 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(197, 8)));
    goto corral_source_split_15211;

  corral_source_split_15211:
    assume {:verifier.code 0} true;
    $i1388 := $p2i.ref.i64($p1387);
    goto corral_source_split_15212;

  corral_source_split_15212:
    assume {:verifier.code 0} true;
    $i1389 := $ne.i64($i1388, 0);
    goto corral_source_split_15213;

  corral_source_split_15213:
    assume {:verifier.code 0} true;
    $i1390 := $zext.i1.i32($i1389);
    goto corral_source_split_15214;

  corral_source_split_15214:
    assume {:verifier.code 0} true;
    $i1391 := $sext.i32.i64($i1390);
    goto corral_source_split_15215;

  corral_source_split_15215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2631} $i1392 := ldv__builtin_expect($i1391, 0);
    goto corral_source_split_15216;

  corral_source_split_15216:
    assume {:verifier.code 0} true;
    $i1393 := $ne.i64($i1392, 0);
    goto corral_source_split_15217;

  corral_source_split_15217:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1393} true;
    goto $bb803, $bb804;

  $bb804:
    assume !($i1393 == 1);
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    goto $bb806;

  $bb806:
    assume {:verifier.code 0} true;
    $p1394 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(198, 8)));
    goto corral_source_split_15219;

  corral_source_split_15219:
    assume {:verifier.code 0} true;
    $i1395 := $p2i.ref.i64($p1394);
    goto corral_source_split_15220;

  corral_source_split_15220:
    assume {:verifier.code 0} true;
    $i1396 := $ne.i64($i1395, 0);
    goto corral_source_split_15221;

  corral_source_split_15221:
    assume {:verifier.code 0} true;
    $i1397 := $zext.i1.i32($i1396);
    goto corral_source_split_15222;

  corral_source_split_15222:
    assume {:verifier.code 0} true;
    $i1398 := $sext.i32.i64($i1397);
    goto corral_source_split_15223;

  corral_source_split_15223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2632} $i1399 := ldv__builtin_expect($i1398, 0);
    goto corral_source_split_15224;

  corral_source_split_15224:
    assume {:verifier.code 0} true;
    $i1400 := $ne.i64($i1399, 0);
    goto corral_source_split_15225;

  corral_source_split_15225:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1400} true;
    goto $bb807, $bb808;

  $bb808:
    assume !($i1400 == 1);
    assume {:verifier.code 0} true;
    goto $bb809;

  $bb809:
    assume {:verifier.code 0} true;
    goto $bb810;

  $bb810:
    assume {:verifier.code 0} true;
    $p1401 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(199, 8)));
    goto corral_source_split_15227;

  corral_source_split_15227:
    assume {:verifier.code 0} true;
    $i1402 := $p2i.ref.i64($p1401);
    goto corral_source_split_15228;

  corral_source_split_15228:
    assume {:verifier.code 0} true;
    $i1403 := $ne.i64($i1402, 0);
    goto corral_source_split_15229;

  corral_source_split_15229:
    assume {:verifier.code 0} true;
    $i1404 := $zext.i1.i32($i1403);
    goto corral_source_split_15230;

  corral_source_split_15230:
    assume {:verifier.code 0} true;
    $i1405 := $sext.i32.i64($i1404);
    goto corral_source_split_15231;

  corral_source_split_15231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2633} $i1406 := ldv__builtin_expect($i1405, 0);
    goto corral_source_split_15232;

  corral_source_split_15232:
    assume {:verifier.code 0} true;
    $i1407 := $ne.i64($i1406, 0);
    goto corral_source_split_15233;

  corral_source_split_15233:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1407} true;
    goto $bb811, $bb812;

  $bb812:
    assume !($i1407 == 1);
    assume {:verifier.code 0} true;
    goto $bb813;

  $bb813:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    $p1408 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(200, 8)));
    goto corral_source_split_15235;

  corral_source_split_15235:
    assume {:verifier.code 0} true;
    $i1409 := $p2i.ref.i64($p1408);
    goto corral_source_split_15236;

  corral_source_split_15236:
    assume {:verifier.code 0} true;
    $i1410 := $ne.i64($i1409, 0);
    goto corral_source_split_15237;

  corral_source_split_15237:
    assume {:verifier.code 0} true;
    $i1411 := $zext.i1.i32($i1410);
    goto corral_source_split_15238;

  corral_source_split_15238:
    assume {:verifier.code 0} true;
    $i1412 := $sext.i32.i64($i1411);
    goto corral_source_split_15239;

  corral_source_split_15239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2634} $i1413 := ldv__builtin_expect($i1412, 0);
    goto corral_source_split_15240;

  corral_source_split_15240:
    assume {:verifier.code 0} true;
    $i1414 := $ne.i64($i1413, 0);
    goto corral_source_split_15241;

  corral_source_split_15241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1414} true;
    goto $bb815, $bb816;

  $bb816:
    assume !($i1414 == 1);
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    goto $bb818;

  $bb818:
    assume {:verifier.code 0} true;
    $p1415 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(201, 8)));
    goto corral_source_split_15243;

  corral_source_split_15243:
    assume {:verifier.code 0} true;
    $i1416 := $p2i.ref.i64($p1415);
    goto corral_source_split_15244;

  corral_source_split_15244:
    assume {:verifier.code 0} true;
    $i1417 := $ne.i64($i1416, 0);
    goto corral_source_split_15245;

  corral_source_split_15245:
    assume {:verifier.code 0} true;
    $i1418 := $zext.i1.i32($i1417);
    goto corral_source_split_15246;

  corral_source_split_15246:
    assume {:verifier.code 0} true;
    $i1419 := $sext.i32.i64($i1418);
    goto corral_source_split_15247;

  corral_source_split_15247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2635} $i1420 := ldv__builtin_expect($i1419, 0);
    goto corral_source_split_15248;

  corral_source_split_15248:
    assume {:verifier.code 0} true;
    $i1421 := $ne.i64($i1420, 0);
    goto corral_source_split_15249;

  corral_source_split_15249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1421} true;
    goto $bb819, $bb820;

  $bb820:
    assume !($i1421 == 1);
    assume {:verifier.code 0} true;
    goto $bb821;

  $bb821:
    assume {:verifier.code 0} true;
    goto $bb822;

  $bb822:
    assume {:verifier.code 0} true;
    $p1422 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(202, 8)));
    goto corral_source_split_15251;

  corral_source_split_15251:
    assume {:verifier.code 0} true;
    $i1423 := $p2i.ref.i64($p1422);
    goto corral_source_split_15252;

  corral_source_split_15252:
    assume {:verifier.code 0} true;
    $i1424 := $ne.i64($i1423, 0);
    goto corral_source_split_15253;

  corral_source_split_15253:
    assume {:verifier.code 0} true;
    $i1425 := $zext.i1.i32($i1424);
    goto corral_source_split_15254;

  corral_source_split_15254:
    assume {:verifier.code 0} true;
    $i1426 := $sext.i32.i64($i1425);
    goto corral_source_split_15255;

  corral_source_split_15255:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2636} $i1427 := ldv__builtin_expect($i1426, 0);
    goto corral_source_split_15256;

  corral_source_split_15256:
    assume {:verifier.code 0} true;
    $i1428 := $ne.i64($i1427, 0);
    goto corral_source_split_15257;

  corral_source_split_15257:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1428} true;
    goto $bb823, $bb824;

  $bb824:
    assume !($i1428 == 1);
    assume {:verifier.code 0} true;
    goto $bb825;

  $bb825:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    $p1429 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(203, 8)));
    goto corral_source_split_15259;

  corral_source_split_15259:
    assume {:verifier.code 0} true;
    $i1430 := $p2i.ref.i64($p1429);
    goto corral_source_split_15260;

  corral_source_split_15260:
    assume {:verifier.code 0} true;
    $i1431 := $ne.i64($i1430, 0);
    goto corral_source_split_15261;

  corral_source_split_15261:
    assume {:verifier.code 0} true;
    $i1432 := $zext.i1.i32($i1431);
    goto corral_source_split_15262;

  corral_source_split_15262:
    assume {:verifier.code 0} true;
    $i1433 := $sext.i32.i64($i1432);
    goto corral_source_split_15263;

  corral_source_split_15263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2637} $i1434 := ldv__builtin_expect($i1433, 0);
    goto corral_source_split_15264;

  corral_source_split_15264:
    assume {:verifier.code 0} true;
    $i1435 := $ne.i64($i1434, 0);
    goto corral_source_split_15265;

  corral_source_split_15265:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1435} true;
    goto $bb827, $bb828;

  $bb828:
    assume !($i1435 == 1);
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    goto $bb830;

  $bb830:
    assume {:verifier.code 0} true;
    $p1436 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(204, 8)));
    goto corral_source_split_15267;

  corral_source_split_15267:
    assume {:verifier.code 0} true;
    $i1437 := $p2i.ref.i64($p1436);
    goto corral_source_split_15268;

  corral_source_split_15268:
    assume {:verifier.code 0} true;
    $i1438 := $ne.i64($i1437, 0);
    goto corral_source_split_15269;

  corral_source_split_15269:
    assume {:verifier.code 0} true;
    $i1439 := $zext.i1.i32($i1438);
    goto corral_source_split_15270;

  corral_source_split_15270:
    assume {:verifier.code 0} true;
    $i1440 := $sext.i32.i64($i1439);
    goto corral_source_split_15271;

  corral_source_split_15271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2638} $i1441 := ldv__builtin_expect($i1440, 0);
    goto corral_source_split_15272;

  corral_source_split_15272:
    assume {:verifier.code 0} true;
    $i1442 := $ne.i64($i1441, 0);
    goto corral_source_split_15273;

  corral_source_split_15273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1442} true;
    goto $bb831, $bb832;

  $bb832:
    assume !($i1442 == 1);
    assume {:verifier.code 0} true;
    goto $bb833;

  $bb833:
    assume {:verifier.code 0} true;
    goto $bb834;

  $bb834:
    assume {:verifier.code 0} true;
    $p1443 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(205, 8)));
    goto corral_source_split_15275;

  corral_source_split_15275:
    assume {:verifier.code 0} true;
    $i1444 := $p2i.ref.i64($p1443);
    goto corral_source_split_15276;

  corral_source_split_15276:
    assume {:verifier.code 0} true;
    $i1445 := $ne.i64($i1444, 0);
    goto corral_source_split_15277;

  corral_source_split_15277:
    assume {:verifier.code 0} true;
    $i1446 := $zext.i1.i32($i1445);
    goto corral_source_split_15278;

  corral_source_split_15278:
    assume {:verifier.code 0} true;
    $i1447 := $sext.i32.i64($i1446);
    goto corral_source_split_15279;

  corral_source_split_15279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2639} $i1448 := ldv__builtin_expect($i1447, 0);
    goto corral_source_split_15280;

  corral_source_split_15280:
    assume {:verifier.code 0} true;
    $i1449 := $ne.i64($i1448, 0);
    goto corral_source_split_15281;

  corral_source_split_15281:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1449} true;
    goto $bb835, $bb836;

  $bb836:
    assume !($i1449 == 1);
    assume {:verifier.code 0} true;
    goto $bb837;

  $bb837:
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    $p1450 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(206, 8)));
    goto corral_source_split_15283;

  corral_source_split_15283:
    assume {:verifier.code 0} true;
    $i1451 := $p2i.ref.i64($p1450);
    goto corral_source_split_15284;

  corral_source_split_15284:
    assume {:verifier.code 0} true;
    $i1452 := $ne.i64($i1451, 0);
    goto corral_source_split_15285;

  corral_source_split_15285:
    assume {:verifier.code 0} true;
    $i1453 := $zext.i1.i32($i1452);
    goto corral_source_split_15286;

  corral_source_split_15286:
    assume {:verifier.code 0} true;
    $i1454 := $sext.i32.i64($i1453);
    goto corral_source_split_15287;

  corral_source_split_15287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2640} $i1455 := ldv__builtin_expect($i1454, 0);
    goto corral_source_split_15288;

  corral_source_split_15288:
    assume {:verifier.code 0} true;
    $i1456 := $ne.i64($i1455, 0);
    goto corral_source_split_15289;

  corral_source_split_15289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1456} true;
    goto $bb839, $bb840;

  $bb840:
    assume !($i1456 == 1);
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    goto $bb842;

  $bb842:
    assume {:verifier.code 0} true;
    $p1457 := $load.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(207, 8)));
    goto corral_source_split_15291;

  corral_source_split_15291:
    assume {:verifier.code 0} true;
    $i1458 := $p2i.ref.i64($p1457);
    goto corral_source_split_15292;

  corral_source_split_15292:
    assume {:verifier.code 0} true;
    $i1459 := $ne.i64($i1458, 0);
    goto corral_source_split_15293;

  corral_source_split_15293:
    assume {:verifier.code 0} true;
    $i1460 := $zext.i1.i32($i1459);
    goto corral_source_split_15294;

  corral_source_split_15294:
    assume {:verifier.code 0} true;
    $i1461 := $sext.i32.i64($i1460);
    goto corral_source_split_15295;

  corral_source_split_15295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2641} $i1462 := ldv__builtin_expect($i1461, 0);
    goto corral_source_split_15296;

  corral_source_split_15296:
    assume {:verifier.code 0} true;
    $i1463 := $ne.i64($i1462, 0);
    goto corral_source_split_15297;

  corral_source_split_15297:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1463} true;
    goto $bb843, $bb844;

  $bb844:
    assume !($i1463 == 1);
    assume {:verifier.code 0} true;
    goto $bb845;

  $bb845:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p14 := $M.22;
    goto corral_source_split_13645;

  corral_source_split_13645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2432} class_destroy($p14);
    goto corral_source_split_13646;

  corral_source_split_13646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2433} ldv_cdev_del_13(comedi_cdev);
    goto corral_source_split_13647;

  corral_source_split_13647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2434} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_13648;

  corral_source_split_13648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2435} comedi_proc_cleanup();
    goto corral_source_split_13649;

  corral_source_split_13649:
    assume {:verifier.code 0} true;
    return;

  $bb843:
    assume {:verifier.code 0} true;
    assume $i1463 == 1;
    goto $bb13;

  $bb13:
    call {:si_unique_call 2430} devirtbounce.2(0, .str.4, 2941, 12);
    goto corral_source_split_13635;

  corral_source_split_13635:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    call comedi_cleanup_loop_$bb15();
    goto $bb15_last;

  $bb839:
    assume {:verifier.code 0} true;
    assume $i1456 == 1;
    goto $bb13;

  $bb835:
    assume {:verifier.code 0} true;
    assume $i1449 == 1;
    goto $bb13;

  $bb831:
    assume {:verifier.code 0} true;
    assume $i1442 == 1;
    goto $bb13;

  $bb827:
    assume {:verifier.code 0} true;
    assume $i1435 == 1;
    goto $bb13;

  $bb823:
    assume {:verifier.code 0} true;
    assume $i1428 == 1;
    goto $bb13;

  $bb819:
    assume {:verifier.code 0} true;
    assume $i1421 == 1;
    goto $bb13;

  $bb815:
    assume {:verifier.code 0} true;
    assume $i1414 == 1;
    goto $bb13;

  $bb811:
    assume {:verifier.code 0} true;
    assume $i1407 == 1;
    goto $bb13;

  $bb807:
    assume {:verifier.code 0} true;
    assume $i1400 == 1;
    goto $bb13;

  $bb803:
    assume {:verifier.code 0} true;
    assume $i1393 == 1;
    goto $bb13;

  $bb799:
    assume {:verifier.code 0} true;
    assume $i1386 == 1;
    goto $bb13;

  $bb795:
    assume {:verifier.code 0} true;
    assume $i1379 == 1;
    goto $bb13;

  $bb791:
    assume {:verifier.code 0} true;
    assume $i1372 == 1;
    goto $bb13;

  $bb787:
    assume {:verifier.code 0} true;
    assume $i1365 == 1;
    goto $bb13;

  $bb783:
    assume {:verifier.code 0} true;
    assume $i1358 == 1;
    goto $bb13;

  $bb779:
    assume {:verifier.code 0} true;
    assume $i1351 == 1;
    goto $bb13;

  $bb775:
    assume {:verifier.code 0} true;
    assume $i1344 == 1;
    goto $bb13;

  $bb771:
    assume {:verifier.code 0} true;
    assume $i1337 == 1;
    goto $bb13;

  $bb767:
    assume {:verifier.code 0} true;
    assume $i1330 == 1;
    goto $bb13;

  $bb763:
    assume {:verifier.code 0} true;
    assume $i1323 == 1;
    goto $bb13;

  $bb759:
    assume {:verifier.code 0} true;
    assume $i1316 == 1;
    goto $bb13;

  $bb755:
    assume {:verifier.code 0} true;
    assume $i1309 == 1;
    goto $bb13;

  $bb751:
    assume {:verifier.code 0} true;
    assume $i1302 == 1;
    goto $bb13;

  $bb747:
    assume {:verifier.code 0} true;
    assume $i1295 == 1;
    goto $bb13;

  $bb743:
    assume {:verifier.code 0} true;
    assume $i1288 == 1;
    goto $bb13;

  $bb739:
    assume {:verifier.code 0} true;
    assume $i1281 == 1;
    goto $bb13;

  $bb735:
    assume {:verifier.code 0} true;
    assume $i1274 == 1;
    goto $bb13;

  $bb731:
    assume {:verifier.code 0} true;
    assume $i1267 == 1;
    goto $bb13;

  $bb727:
    assume {:verifier.code 0} true;
    assume $i1260 == 1;
    goto $bb13;

  $bb723:
    assume {:verifier.code 0} true;
    assume $i1253 == 1;
    goto $bb13;

  $bb719:
    assume {:verifier.code 0} true;
    assume $i1246 == 1;
    goto $bb13;

  $bb715:
    assume {:verifier.code 0} true;
    assume $i1239 == 1;
    goto $bb13;

  $bb711:
    assume {:verifier.code 0} true;
    assume $i1232 == 1;
    goto $bb13;

  $bb707:
    assume {:verifier.code 0} true;
    assume $i1225 == 1;
    goto $bb13;

  $bb703:
    assume {:verifier.code 0} true;
    assume $i1218 == 1;
    goto $bb13;

  $bb699:
    assume {:verifier.code 0} true;
    assume $i1211 == 1;
    goto $bb13;

  $bb695:
    assume {:verifier.code 0} true;
    assume $i1204 == 1;
    goto $bb13;

  $bb691:
    assume {:verifier.code 0} true;
    assume $i1197 == 1;
    goto $bb13;

  $bb687:
    assume {:verifier.code 0} true;
    assume $i1190 == 1;
    goto $bb13;

  $bb683:
    assume {:verifier.code 0} true;
    assume $i1183 == 1;
    goto $bb13;

  $bb679:
    assume {:verifier.code 0} true;
    assume $i1176 == 1;
    goto $bb13;

  $bb675:
    assume {:verifier.code 0} true;
    assume $i1169 == 1;
    goto $bb13;

  $bb671:
    assume {:verifier.code 0} true;
    assume $i1162 == 1;
    goto $bb13;

  $bb667:
    assume {:verifier.code 0} true;
    assume $i1155 == 1;
    goto $bb13;

  $bb663:
    assume {:verifier.code 0} true;
    assume $i1148 == 1;
    goto $bb13;

  $bb659:
    assume {:verifier.code 0} true;
    assume $i1141 == 1;
    goto $bb13;

  $bb655:
    assume {:verifier.code 0} true;
    assume $i1134 == 1;
    goto $bb13;

  $bb651:
    assume {:verifier.code 0} true;
    assume $i1127 == 1;
    goto $bb13;

  $bb647:
    assume {:verifier.code 0} true;
    assume $i1120 == 1;
    goto $bb13;

  $bb643:
    assume {:verifier.code 0} true;
    assume $i1113 == 1;
    goto $bb13;

  $bb639:
    assume {:verifier.code 0} true;
    assume $i1106 == 1;
    goto $bb13;

  $bb635:
    assume {:verifier.code 0} true;
    assume $i1099 == 1;
    goto $bb13;

  $bb631:
    assume {:verifier.code 0} true;
    assume $i1092 == 1;
    goto $bb13;

  $bb627:
    assume {:verifier.code 0} true;
    assume $i1085 == 1;
    goto $bb13;

  $bb623:
    assume {:verifier.code 0} true;
    assume $i1078 == 1;
    goto $bb13;

  $bb619:
    assume {:verifier.code 0} true;
    assume $i1071 == 1;
    goto $bb13;

  $bb615:
    assume {:verifier.code 0} true;
    assume $i1064 == 1;
    goto $bb13;

  $bb611:
    assume {:verifier.code 0} true;
    assume $i1057 == 1;
    goto $bb13;

  $bb607:
    assume {:verifier.code 0} true;
    assume $i1050 == 1;
    goto $bb13;

  $bb603:
    assume {:verifier.code 0} true;
    assume $i1043 == 1;
    goto $bb13;

  $bb599:
    assume {:verifier.code 0} true;
    assume $i1036 == 1;
    goto $bb13;

  $bb595:
    assume {:verifier.code 0} true;
    assume $i1029 == 1;
    goto $bb13;

  $bb591:
    assume {:verifier.code 0} true;
    assume $i1022 == 1;
    goto $bb13;

  $bb587:
    assume {:verifier.code 0} true;
    assume $i1015 == 1;
    goto $bb13;

  $bb583:
    assume {:verifier.code 0} true;
    assume $i1008 == 1;
    goto $bb13;

  $bb579:
    assume {:verifier.code 0} true;
    assume $i1001 == 1;
    goto $bb13;

  $bb575:
    assume {:verifier.code 0} true;
    assume $i994 == 1;
    goto $bb13;

  $bb571:
    assume {:verifier.code 0} true;
    assume $i987 == 1;
    goto $bb13;

  $bb567:
    assume {:verifier.code 0} true;
    assume $i980 == 1;
    goto $bb13;

  $bb563:
    assume {:verifier.code 0} true;
    assume $i973 == 1;
    goto $bb13;

  $bb559:
    assume {:verifier.code 0} true;
    assume $i966 == 1;
    goto $bb13;

  $bb555:
    assume {:verifier.code 0} true;
    assume $i959 == 1;
    goto $bb13;

  $bb551:
    assume {:verifier.code 0} true;
    assume $i952 == 1;
    goto $bb13;

  $bb547:
    assume {:verifier.code 0} true;
    assume $i945 == 1;
    goto $bb13;

  $bb543:
    assume {:verifier.code 0} true;
    assume $i938 == 1;
    goto $bb13;

  $bb539:
    assume {:verifier.code 0} true;
    assume $i931 == 1;
    goto $bb13;

  $bb535:
    assume {:verifier.code 0} true;
    assume $i924 == 1;
    goto $bb13;

  $bb531:
    assume {:verifier.code 0} true;
    assume $i917 == 1;
    goto $bb13;

  $bb527:
    assume {:verifier.code 0} true;
    assume $i910 == 1;
    goto $bb13;

  $bb523:
    assume {:verifier.code 0} true;
    assume $i903 == 1;
    goto $bb13;

  $bb519:
    assume {:verifier.code 0} true;
    assume $i896 == 1;
    goto $bb13;

  $bb515:
    assume {:verifier.code 0} true;
    assume $i889 == 1;
    goto $bb13;

  $bb511:
    assume {:verifier.code 0} true;
    assume $i882 == 1;
    goto $bb13;

  $bb507:
    assume {:verifier.code 0} true;
    assume $i875 == 1;
    goto $bb13;

  $bb503:
    assume {:verifier.code 0} true;
    assume $i868 == 1;
    goto $bb13;

  $bb499:
    assume {:verifier.code 0} true;
    assume $i861 == 1;
    goto $bb13;

  $bb495:
    assume {:verifier.code 0} true;
    assume $i854 == 1;
    goto $bb13;

  $bb491:
    assume {:verifier.code 0} true;
    assume $i847 == 1;
    goto $bb13;

  $bb487:
    assume {:verifier.code 0} true;
    assume $i840 == 1;
    goto $bb13;

  $bb483:
    assume {:verifier.code 0} true;
    assume $i833 == 1;
    goto $bb13;

  $bb479:
    assume {:verifier.code 0} true;
    assume $i826 == 1;
    goto $bb13;

  $bb475:
    assume {:verifier.code 0} true;
    assume $i819 == 1;
    goto $bb13;

  $bb471:
    assume {:verifier.code 0} true;
    assume $i812 == 1;
    goto $bb13;

  $bb467:
    assume {:verifier.code 0} true;
    assume $i805 == 1;
    goto $bb13;

  $bb463:
    assume {:verifier.code 0} true;
    assume $i798 == 1;
    goto $bb13;

  $bb459:
    assume {:verifier.code 0} true;
    assume $i791 == 1;
    goto $bb13;

  $bb455:
    assume {:verifier.code 0} true;
    assume $i784 == 1;
    goto $bb13;

  $bb451:
    assume {:verifier.code 0} true;
    assume $i777 == 1;
    goto $bb13;

  $bb447:
    assume {:verifier.code 0} true;
    assume $i770 == 1;
    goto $bb13;

  $bb443:
    assume {:verifier.code 0} true;
    assume $i763 == 1;
    goto $bb13;

  $bb439:
    assume {:verifier.code 0} true;
    assume $i756 == 1;
    goto $bb13;

  $bb435:
    assume {:verifier.code 0} true;
    assume $i749 == 1;
    goto $bb13;

  $bb431:
    assume {:verifier.code 0} true;
    assume $i742 == 1;
    goto $bb13;

  $bb427:
    assume {:verifier.code 0} true;
    assume $i735 == 1;
    goto $bb13;

  $bb423:
    assume {:verifier.code 0} true;
    assume $i728 == 1;
    goto $bb13;

  $bb419:
    assume {:verifier.code 0} true;
    assume $i721 == 1;
    goto $bb13;

  $bb415:
    assume {:verifier.code 0} true;
    assume $i714 == 1;
    goto $bb13;

  $bb411:
    assume {:verifier.code 0} true;
    assume $i707 == 1;
    goto $bb13;

  $bb407:
    assume {:verifier.code 0} true;
    assume $i700 == 1;
    goto $bb13;

  $bb403:
    assume {:verifier.code 0} true;
    assume $i693 == 1;
    goto $bb13;

  $bb399:
    assume {:verifier.code 0} true;
    assume $i686 == 1;
    goto $bb13;

  $bb395:
    assume {:verifier.code 0} true;
    assume $i679 == 1;
    goto $bb13;

  $bb391:
    assume {:verifier.code 0} true;
    assume $i672 == 1;
    goto $bb13;

  $bb387:
    assume {:verifier.code 0} true;
    assume $i665 == 1;
    goto $bb13;

  $bb383:
    assume {:verifier.code 0} true;
    assume $i658 == 1;
    goto $bb13;

  $bb379:
    assume {:verifier.code 0} true;
    assume $i651 == 1;
    goto $bb13;

  $bb375:
    assume {:verifier.code 0} true;
    assume $i644 == 1;
    goto $bb13;

  $bb371:
    assume {:verifier.code 0} true;
    assume $i637 == 1;
    goto $bb13;

  $bb367:
    assume {:verifier.code 0} true;
    assume $i630 == 1;
    goto $bb13;

  $bb363:
    assume {:verifier.code 0} true;
    assume $i623 == 1;
    goto $bb13;

  $bb359:
    assume {:verifier.code 0} true;
    assume $i616 == 1;
    goto $bb13;

  $bb355:
    assume {:verifier.code 0} true;
    assume $i609 == 1;
    goto $bb13;

  $bb351:
    assume {:verifier.code 0} true;
    assume $i602 == 1;
    goto $bb13;

  $bb347:
    assume {:verifier.code 0} true;
    assume $i595 == 1;
    goto $bb13;

  $bb343:
    assume {:verifier.code 0} true;
    assume $i588 == 1;
    goto $bb13;

  $bb339:
    assume {:verifier.code 0} true;
    assume $i581 == 1;
    goto $bb13;

  $bb335:
    assume {:verifier.code 0} true;
    assume $i574 == 1;
    goto $bb13;

  $bb331:
    assume {:verifier.code 0} true;
    assume $i567 == 1;
    goto $bb13;

  $bb327:
    assume {:verifier.code 0} true;
    assume $i560 == 1;
    goto $bb13;

  $bb323:
    assume {:verifier.code 0} true;
    assume $i553 == 1;
    goto $bb13;

  $bb319:
    assume {:verifier.code 0} true;
    assume $i546 == 1;
    goto $bb13;

  $bb315:
    assume {:verifier.code 0} true;
    assume $i539 == 1;
    goto $bb13;

  $bb311:
    assume {:verifier.code 0} true;
    assume $i532 == 1;
    goto $bb13;

  $bb307:
    assume {:verifier.code 0} true;
    assume $i525 == 1;
    goto $bb13;

  $bb303:
    assume {:verifier.code 0} true;
    assume $i518 == 1;
    goto $bb13;

  $bb299:
    assume {:verifier.code 0} true;
    assume $i511 == 1;
    goto $bb13;

  $bb295:
    assume {:verifier.code 0} true;
    assume $i504 == 1;
    goto $bb13;

  $bb291:
    assume {:verifier.code 0} true;
    assume $i497 == 1;
    goto $bb13;

  $bb287:
    assume {:verifier.code 0} true;
    assume $i490 == 1;
    goto $bb13;

  $bb283:
    assume {:verifier.code 0} true;
    assume $i483 == 1;
    goto $bb13;

  $bb279:
    assume {:verifier.code 0} true;
    assume $i476 == 1;
    goto $bb13;

  $bb275:
    assume {:verifier.code 0} true;
    assume $i469 == 1;
    goto $bb13;

  $bb271:
    assume {:verifier.code 0} true;
    assume $i462 == 1;
    goto $bb13;

  $bb267:
    assume {:verifier.code 0} true;
    assume $i455 == 1;
    goto $bb13;

  $bb263:
    assume {:verifier.code 0} true;
    assume $i448 == 1;
    goto $bb13;

  $bb259:
    assume {:verifier.code 0} true;
    assume $i441 == 1;
    goto $bb13;

  $bb255:
    assume {:verifier.code 0} true;
    assume $i434 == 1;
    goto $bb13;

  $bb251:
    assume {:verifier.code 0} true;
    assume $i427 == 1;
    goto $bb13;

  $bb247:
    assume {:verifier.code 0} true;
    assume $i420 == 1;
    goto $bb13;

  $bb243:
    assume {:verifier.code 0} true;
    assume $i413 == 1;
    goto $bb13;

  $bb239:
    assume {:verifier.code 0} true;
    assume $i406 == 1;
    goto $bb13;

  $bb235:
    assume {:verifier.code 0} true;
    assume $i399 == 1;
    goto $bb13;

  $bb231:
    assume {:verifier.code 0} true;
    assume $i392 == 1;
    goto $bb13;

  $bb227:
    assume {:verifier.code 0} true;
    assume $i385 == 1;
    goto $bb13;

  $bb223:
    assume {:verifier.code 0} true;
    assume $i378 == 1;
    goto $bb13;

  $bb219:
    assume {:verifier.code 0} true;
    assume $i371 == 1;
    goto $bb13;

  $bb215:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb13;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i357 == 1;
    goto $bb13;

  $bb207:
    assume {:verifier.code 0} true;
    assume $i350 == 1;
    goto $bb13;

  $bb203:
    assume {:verifier.code 0} true;
    assume $i343 == 1;
    goto $bb13;

  $bb199:
    assume {:verifier.code 0} true;
    assume $i336 == 1;
    goto $bb13;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i329 == 1;
    goto $bb13;

  $bb191:
    assume {:verifier.code 0} true;
    assume $i322 == 1;
    goto $bb13;

  $bb187:
    assume {:verifier.code 0} true;
    assume $i315 == 1;
    goto $bb13;

  $bb183:
    assume {:verifier.code 0} true;
    assume $i308 == 1;
    goto $bb13;

  $bb179:
    assume {:verifier.code 0} true;
    assume $i301 == 1;
    goto $bb13;

  $bb175:
    assume {:verifier.code 0} true;
    assume $i294 == 1;
    goto $bb13;

  $bb171:
    assume {:verifier.code 0} true;
    assume $i287 == 1;
    goto $bb13;

  $bb167:
    assume {:verifier.code 0} true;
    assume $i280 == 1;
    goto $bb13;

  $bb163:
    assume {:verifier.code 0} true;
    assume $i273 == 1;
    goto $bb13;

  $bb159:
    assume {:verifier.code 0} true;
    assume $i266 == 1;
    goto $bb13;

  $bb155:
    assume {:verifier.code 0} true;
    assume $i259 == 1;
    goto $bb13;

  $bb151:
    assume {:verifier.code 0} true;
    assume $i252 == 1;
    goto $bb13;

  $bb147:
    assume {:verifier.code 0} true;
    assume $i245 == 1;
    goto $bb13;

  $bb143:
    assume {:verifier.code 0} true;
    assume $i238 == 1;
    goto $bb13;

  $bb139:
    assume {:verifier.code 0} true;
    assume $i231 == 1;
    goto $bb13;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i224 == 1;
    goto $bb13;

  $bb131:
    assume {:verifier.code 0} true;
    assume $i217 == 1;
    goto $bb13;

  $bb127:
    assume {:verifier.code 0} true;
    assume $i210 == 1;
    goto $bb13;

  $bb123:
    assume {:verifier.code 0} true;
    assume $i203 == 1;
    goto $bb13;

  $bb119:
    assume {:verifier.code 0} true;
    assume $i196 == 1;
    goto $bb13;

  $bb115:
    assume {:verifier.code 0} true;
    assume $i189 == 1;
    goto $bb13;

  $bb111:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb13;

  $bb107:
    assume {:verifier.code 0} true;
    assume $i175 == 1;
    goto $bb13;

  $bb103:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb13;

  $bb99:
    assume {:verifier.code 0} true;
    assume $i161 == 1;
    goto $bb13;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i154 == 1;
    goto $bb13;

  $bb91:
    assume {:verifier.code 0} true;
    assume $i147 == 1;
    goto $bb13;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i140 == 1;
    goto $bb13;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb13;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i126 == 1;
    goto $bb13;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb13;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i112 == 1;
    goto $bb13;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i105 == 1;
    goto $bb13;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb13;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i91 == 1;
    goto $bb13;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i84 == 1;
    goto $bb13;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i77 == 1;
    goto $bb13;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb13;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb13;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb13;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb13;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb13;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb13;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb13;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb13;

  $bb1030:
    assume {:verifier.code 0} true;
    assume $i1792 == 1;
    goto $bb4;

  $bb4:
    call {:si_unique_call 2426} devirtbounce.2(0, .str.4, 2939, 12);
    goto corral_source_split_13617;

  corral_source_split_13617:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    call comedi_cleanup_loop_$bb6();
    goto $bb6_last;

  $bb1026:
    assume {:verifier.code 0} true;
    assume $i1785 == 1;
    goto $bb4;

  $bb1022:
    assume {:verifier.code 0} true;
    assume $i1778 == 1;
    goto $bb4;

  $bb1018:
    assume {:verifier.code 0} true;
    assume $i1771 == 1;
    goto $bb4;

  $bb1014:
    assume {:verifier.code 0} true;
    assume $i1764 == 1;
    goto $bb4;

  $bb1010:
    assume {:verifier.code 0} true;
    assume $i1757 == 1;
    goto $bb4;

  $bb1006:
    assume {:verifier.code 0} true;
    assume $i1750 == 1;
    goto $bb4;

  $bb1002:
    assume {:verifier.code 0} true;
    assume $i1743 == 1;
    goto $bb4;

  $bb998:
    assume {:verifier.code 0} true;
    assume $i1736 == 1;
    goto $bb4;

  $bb994:
    assume {:verifier.code 0} true;
    assume $i1729 == 1;
    goto $bb4;

  $bb990:
    assume {:verifier.code 0} true;
    assume $i1722 == 1;
    goto $bb4;

  $bb986:
    assume {:verifier.code 0} true;
    assume $i1715 == 1;
    goto $bb4;

  $bb982:
    assume {:verifier.code 0} true;
    assume $i1708 == 1;
    goto $bb4;

  $bb978:
    assume {:verifier.code 0} true;
    assume $i1701 == 1;
    goto $bb4;

  $bb974:
    assume {:verifier.code 0} true;
    assume $i1694 == 1;
    goto $bb4;

  $bb970:
    assume {:verifier.code 0} true;
    assume $i1687 == 1;
    goto $bb4;

  $bb966:
    assume {:verifier.code 0} true;
    assume $i1680 == 1;
    goto $bb4;

  $bb962:
    assume {:verifier.code 0} true;
    assume $i1673 == 1;
    goto $bb4;

  $bb958:
    assume {:verifier.code 0} true;
    assume $i1666 == 1;
    goto $bb4;

  $bb954:
    assume {:verifier.code 0} true;
    assume $i1659 == 1;
    goto $bb4;

  $bb950:
    assume {:verifier.code 0} true;
    assume $i1652 == 1;
    goto $bb4;

  $bb946:
    assume {:verifier.code 0} true;
    assume $i1645 == 1;
    goto $bb4;

  $bb942:
    assume {:verifier.code 0} true;
    assume $i1638 == 1;
    goto $bb4;

  $bb938:
    assume {:verifier.code 0} true;
    assume $i1631 == 1;
    goto $bb4;

  $bb934:
    assume {:verifier.code 0} true;
    assume $i1624 == 1;
    goto $bb4;

  $bb930:
    assume {:verifier.code 0} true;
    assume $i1617 == 1;
    goto $bb4;

  $bb926:
    assume {:verifier.code 0} true;
    assume $i1610 == 1;
    goto $bb4;

  $bb922:
    assume {:verifier.code 0} true;
    assume $i1603 == 1;
    goto $bb4;

  $bb918:
    assume {:verifier.code 0} true;
    assume $i1596 == 1;
    goto $bb4;

  $bb914:
    assume {:verifier.code 0} true;
    assume $i1589 == 1;
    goto $bb4;

  $bb910:
    assume {:verifier.code 0} true;
    assume $i1582 == 1;
    goto $bb4;

  $bb906:
    assume {:verifier.code 0} true;
    assume $i1575 == 1;
    goto $bb4;

  $bb902:
    assume {:verifier.code 0} true;
    assume $i1568 == 1;
    goto $bb4;

  $bb898:
    assume {:verifier.code 0} true;
    assume $i1561 == 1;
    goto $bb4;

  $bb894:
    assume {:verifier.code 0} true;
    assume $i1554 == 1;
    goto $bb4;

  $bb890:
    assume {:verifier.code 0} true;
    assume $i1547 == 1;
    goto $bb4;

  $bb886:
    assume {:verifier.code 0} true;
    assume $i1540 == 1;
    goto $bb4;

  $bb882:
    assume {:verifier.code 0} true;
    assume $i1533 == 1;
    goto $bb4;

  $bb878:
    assume {:verifier.code 0} true;
    assume $i1526 == 1;
    goto $bb4;

  $bb874:
    assume {:verifier.code 0} true;
    assume $i1519 == 1;
    goto $bb4;

  $bb870:
    assume {:verifier.code 0} true;
    assume $i1512 == 1;
    goto $bb4;

  $bb866:
    assume {:verifier.code 0} true;
    assume $i1505 == 1;
    goto $bb4;

  $bb862:
    assume {:verifier.code 0} true;
    assume $i1498 == 1;
    goto $bb4;

  $bb858:
    assume {:verifier.code 0} true;
    assume $i1491 == 1;
    goto $bb4;

  $bb854:
    assume {:verifier.code 0} true;
    assume $i1484 == 1;
    goto $bb4;

  $bb850:
    assume {:verifier.code 0} true;
    assume $i1477 == 1;
    goto $bb4;

  $bb846:
    assume {:verifier.code 0} true;
    assume $i1470 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;

  SeqInstr_811:
    assume !assertsPassed;
    return;

  $bb15_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb6_last:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;
}



const comedi_init: ref;

axiom comedi_init == $sub.ref(0, 589132);

procedure comedi_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.88, $M.22, $M.0, $M.2, $M.77, $M.64, $M.65, $CurrAddr, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $M.54, $M.25;



implementation comedi_init() returns ($r: i32)
{
  var $p0: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i32: i1;
  var $i33: i8;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $i29: i32;
  var $i7: i32;
  var vslice_dummy_var_257: i32;
  var vslice_dummy_var_258: i32;
  var vslice_dummy_var_259: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 2688} $p0 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_15667;

  corral_source_split_15667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2689} vslice_dummy_var_257 := printk.ref(.str.86);
    goto corral_source_split_15668;

  corral_source_split_15668:
    assume {:verifier.code 0} true;
    $i2 := $M.21;
    goto corral_source_split_15669;

  corral_source_split_15669:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 0);
    goto corral_source_split_15670;

  corral_source_split_15670:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_15674;

  corral_source_split_15674:
    assume {:verifier.code 0} true;
    $i4 := $M.21;
    goto corral_source_split_15675;

  corral_source_split_15675:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 48);
    goto corral_source_split_15676;

  corral_source_split_15676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2691} $i8 := register_chrdev_region(102760448, 256, .str.5);
    call {:si_unique_call 2692} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_15680;

  corral_source_split_15680:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_15681;

  corral_source_split_15681:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2693} ldv_cdev_init_10(comedi_cdev, comedi_fops);
    goto corral_source_split_15685;

  corral_source_split_15685:
    assume {:verifier.code 0} true;
    $M.88 := $store.ref($M.88, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(296, 1)), __this_module);
    goto corral_source_split_15686;

  corral_source_split_15686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2694} $i10 := kobject_set_name.ref.ref(comedi_cdev, .str.5);
    call {:si_unique_call 2695} {:cexpr "retval"} boogie_si_record_i32($i10);
    goto corral_source_split_15687;

  corral_source_split_15687:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_15688;

  corral_source_split_15688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2697} $i12 := cdev_add(comedi_cdev, 102760448, 256);
    call {:si_unique_call 2698} {:cexpr "tmp"} boogie_si_record_i32($i12);
    goto corral_source_split_15693;

  corral_source_split_15693:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_15694;

  corral_source_split_15694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2700} $p14 := __class_create(__this_module, .str.5, $p0);
    goto corral_source_split_15699;

  corral_source_split_15699:
    assume {:verifier.code 0} true;
    $M.22 := $p14;
    goto corral_source_split_15700;

  corral_source_split_15700:
    assume {:verifier.code 0} true;
    $p15 := $M.22;
    goto corral_source_split_15701;

  corral_source_split_15701:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_15702;

  corral_source_split_15702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2701} $i17 := IS_ERR($p16);
    goto corral_source_split_15703;

  corral_source_split_15703:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 2702} {:cexpr "tmp___2"} boogie_si_record_i8($i18);
    goto corral_source_split_15704;

  corral_source_split_15704:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_15705;

  corral_source_split_15705:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p25 := $M.22;
    goto corral_source_split_15716;

  corral_source_split_15716:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 120)), $mul.ref(24, 1));
    goto corral_source_split_15717;

  corral_source_split_15717:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p26, comedi_dev_groups);
    goto corral_source_split_15718;

  corral_source_split_15718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2708} comedi_proc_init();
    goto corral_source_split_15719;

  corral_source_split_15719:
    assume {:verifier.code 0} true;
    $i27 := $M.21;
    goto corral_source_split_15720;

  corral_source_split_15720:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32(0, $i27);
    goto corral_source_split_15721;

  corral_source_split_15721:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_15678;

  corral_source_split_15678:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i28 == 1;
    goto corral_source_split_15723;

  corral_source_split_15723:
    assume {:verifier.code 0} true;
    $i29 := 0;
    goto $bb23;

  $bb23:
    call $p30, $p31, $i32, $i33, $i34, $p35, $p39, $i40, $i41, $i42, $i29 := comedi_init_loop_$bb23($p30, $p31, $i32, $i33, $i34, $p35, $p39, $i40, $i41, $i42, $i29);
    goto $bb23_last;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} $p30 := comedi_alloc_board_minor($0.ref);
    goto SeqInstr_814, SeqInstr_815;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  SeqInstr_816:
    goto corral_source_split_15727;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_15728;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} $i32 := IS_ERR($p31);
    goto corral_source_split_15729;

  corral_source_split_15729:
    assume {:verifier.code 0} true;
    $i33 := $zext.i1.i8($i32);
    call {:si_unique_call 2711} {:cexpr "tmp___4"} boogie_si_record_i8($i33);
    goto corral_source_split_15730;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i8.i1($i33);
    goto corral_source_split_15731;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    $p35 := $p30;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p30, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_15741;

  corral_source_split_15741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} mutex_unlock($p39);
    goto corral_source_split_15742;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i29, 1);
    call {:si_unique_call 2718} {:cexpr "i"} boogie_si_record_i32($i40);
    goto corral_source_split_15743;

  corral_source_split_15743:
    assume {:verifier.code 0} true;
    $i41 := $M.21;
    goto corral_source_split_15744;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, $i41);
    goto corral_source_split_15745;

  corral_source_split_15745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i42 == 1);
    goto corral_source_split_15747;

  corral_source_split_15747:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb28:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i40;
    goto $bb28_dummy;

  $bb25:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_15733;

  corral_source_split_15733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2712} comedi_cleanup_board_minors();
    goto SeqInstr_817, SeqInstr_818;

  SeqInstr_818:
    assume assertsPassed;
    goto SeqInstr_819;

  SeqInstr_819:
    goto corral_source_split_15734;

  corral_source_split_15734:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2713} ldv_cdev_del_12(comedi_cdev);
    goto corral_source_split_15735;

  corral_source_split_15735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2714} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_15736;

  corral_source_split_15736:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_15737;

  corral_source_split_15737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2715} $i37 := PTR_ERR($p36);
    call {:si_unique_call 2716} {:cexpr "tmp___3"} boogie_si_record_i64($i37);
    goto corral_source_split_15738;

  corral_source_split_15738:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i64.i32($i37);
    goto corral_source_split_15739;

  corral_source_split_15739:
    assume {:verifier.code 0} true;
    $i7 := $i38;
    goto $bb6;

  SeqInstr_817:
    assume !assertsPassed;
    return;

  SeqInstr_814:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i19 == 1;
    goto corral_source_split_15707;

  corral_source_split_15707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2703} vslice_dummy_var_259 := printk.ref(.str.88);
    goto corral_source_split_15708;

  corral_source_split_15708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2704} ldv_cdev_del_11(comedi_cdev);
    goto corral_source_split_15709;

  corral_source_split_15709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2705} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_15710;

  corral_source_split_15710:
    assume {:verifier.code 0} true;
    $p21 := $M.22;
    goto corral_source_split_15711;

  corral_source_split_15711:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_15712;

  corral_source_split_15712:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2706} $i23 := PTR_ERR($p22);
    call {:si_unique_call 2707} {:cexpr "tmp___1"} boogie_si_record_i64($i23);
    goto corral_source_split_15713;

  corral_source_split_15713:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i64.i32($i23);
    goto corral_source_split_15714;

  corral_source_split_15714:
    assume {:verifier.code 0} true;
    $i7 := $i24;
    goto $bb6;

  $bb14:
    assume $i13 == 1;
    goto corral_source_split_15696;

  corral_source_split_15696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2699} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_15697;

  corral_source_split_15697:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb6;

  $bb11:
    assume $i11 == 1;
    goto corral_source_split_15690;

  corral_source_split_15690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2696} unregister_chrdev_region(102760448, 256);
    goto corral_source_split_15691;

  corral_source_split_15691:
    assume {:verifier.code 0} true;
    $i7 := $i10;
    goto $bb6;

  $bb8:
    assume $i9 == 1;
    goto corral_source_split_15683;

  corral_source_split_15683:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 5);
    goto $bb6;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2690} vslice_dummy_var_258 := printk.ref.i32(.str.87, 48);
    goto corral_source_split_15672;

  corral_source_split_15672:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb28_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15725;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 590164);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $i0: i32;
  var $i1: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15749;

  corral_source_split_15749:
    assume {:verifier.code 0} true;
    $i0 := $M.23;
    goto corral_source_split_15750;

  corral_source_split_15750:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 1);
    goto corral_source_split_15751;

  corral_source_split_15751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15753;

  corral_source_split_15753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2719} ldv_error();
    goto SeqInstr_820, SeqInstr_821;

  SeqInstr_821:
    assume assertsPassed;
    goto SeqInstr_822;

  SeqInstr_822:
    goto corral_source_split_15754;

  corral_source_split_15754:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_820:
    assume !assertsPassed;
    return;
}



const register_chrdev_region: ref;

axiom register_chrdev_region == $sub.ref(0, 591196);

procedure register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation register_chrdev_region($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2720} {:cexpr "register_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2721} {:cexpr "register_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15756;

  corral_source_split_15756:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2722} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2723} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_15757;

  corral_source_split_15757:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_cdev_init_10: ref;

axiom ldv_cdev_init_10 == $sub.ref(0, 592228);

procedure ldv_cdev_init_10($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.77, $M.64, $M.65, $M.0, $CurrAddr;



implementation ldv_cdev_init_10($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15759;

  corral_source_split_15759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2724} cdev_init($p0, $p1);
    goto corral_source_split_15760;

  corral_source_split_15760:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2725} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_15761;

  corral_source_split_15761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2726} ldv_file_operations_2();
    goto corral_source_split_15762;

  corral_source_split_15762:
    assume {:verifier.code 0} true;
    return;
}



const kobject_set_name: ref;

axiom kobject_set_name == $sub.ref(0, 593260);

procedure kobject_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kobject_set_name.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15764;

  corral_source_split_15764:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2727} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2728} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15765;

  corral_source_split_15765:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const unregister_chrdev_region: ref;

axiom unregister_chrdev_region == $sub.ref(0, 594292);

procedure unregister_chrdev_region($i0: i32, $i1: i32);
  free requires assertsPassed;



implementation unregister_chrdev_region($i0: i32, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2729} {:cexpr "unregister_chrdev_region:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 2730} {:cexpr "unregister_chrdev_region:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_15767;

  corral_source_split_15767:
    assume {:verifier.code 0} true;
    return;
}



const cdev_add: ref;

axiom cdev_add == $sub.ref(0, 595324);

procedure cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation cdev_add($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2731} {:cexpr "cdev_add:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 2732} {:cexpr "cdev_add:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_15769;

  corral_source_split_15769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2733} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 2734} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_15770;

  corral_source_split_15770:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __class_create: ref;

axiom __class_create == $sub.ref(0, 596356);

procedure __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation __class_create($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15772;

  corral_source_split_15772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2735} $p3 := external_alloc();
    goto corral_source_split_15773;

  corral_source_split_15773:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_15774;

  corral_source_split_15774:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_cdev_del_11: ref;

axiom ldv_cdev_del_11 == $sub.ref(0, 597388);

procedure ldv_cdev_del_11($p0: ref);
  free requires assertsPassed;
  modifies $M.77;



implementation ldv_cdev_del_11($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15776;

  corral_source_split_15776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2736} cdev_del($p0);
    goto corral_source_split_15777;

  corral_source_split_15777:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2737} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_15778;

  corral_source_split_15778:
    assume {:verifier.code 0} true;
    return;
}



const comedi_proc_init: ref;

axiom comedi_proc_init == $sub.ref(0, 598420);

procedure comedi_proc_init();
  free requires assertsPassed;



implementation comedi_proc_init()
{
  var vslice_dummy_var_260: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15780;

  corral_source_split_15780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2738} vslice_dummy_var_260 := proc_create(.str.5, 420, $0.ref, comedi_proc_fops);
    goto corral_source_split_15781;

  corral_source_split_15781:
    assume {:verifier.code 0} true;
    return;
}



const comedi_cleanup_board_minors: ref;

axiom comedi_cleanup_board_minors == $sub.ref(0, 599452);

procedure comedi_cleanup_board_minors();
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $CurrAddr, $M.54, $M.25;



implementation comedi_cleanup_board_minors()
{
  var $i1: i32;
  var $i2: i1;
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15783;

  corral_source_split_15783:
    assume {:verifier.code 0} true;
    $i0 := 0;
    goto $bb1;

  $bb1:
    call $i1, $i2, $i0 := comedi_cleanup_board_minors_loop_$bb1($i1, $i2, $i0);
    goto $bb1_last;

  corral_source_split_15785:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} comedi_free_board_minor($i0);
    goto SeqInstr_823, SeqInstr_824;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  SeqInstr_825:
    goto corral_source_split_15787;

  corral_source_split_15787:
    assume {:verifier.code 0} true;
    $i1 := $add.i32($i0, 1);
    call {:si_unique_call 2740} {:cexpr "i"} boogie_si_record_i32($i1);
    goto corral_source_split_15788;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    $i2 := $ule.i32($i1, 47);
    goto corral_source_split_15789;

  corral_source_split_15789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    return;

  $bb3:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i0 := $i1;
    goto $bb3_dummy;

  SeqInstr_823:
    assume !assertsPassed;
    return;

  $bb3_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_15785;
}



const ldv_cdev_del_12: ref;

axiom ldv_cdev_del_12 == $sub.ref(0, 600484);

procedure ldv_cdev_del_12($p0: ref);
  free requires assertsPassed;
  modifies $M.77;



implementation ldv_cdev_del_12($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15791;

  corral_source_split_15791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2741} cdev_del($p0);
    goto corral_source_split_15792;

  corral_source_split_15792:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2742} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_15793;

  corral_source_split_15793:
    assume {:verifier.code 0} true;
    return;
}



const cdev_del: ref;

axiom cdev_del == $sub.ref(0, 601516);

procedure cdev_del($p0: ref);
  free requires assertsPassed;



implementation cdev_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15795;

  corral_source_split_15795:
    assume {:verifier.code 0} true;
    return;
}



const comedi_free_board_minor: ref;

axiom comedi_free_board_minor == $sub.ref(0, 602548);

procedure comedi_free_board_minor($i0: i32);
  free requires assertsPassed;
  modifies $M.2, $M.0, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $CurrAddr, $M.54, $M.25;



implementation comedi_free_board_minor($i0: i32)
{
  var $i1: i1;
  var $i2: i32;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2743} {:cexpr "comedi_free_board_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_15797;

  corral_source_split_15797:
    assume {:verifier.code 0} true;
    $i1 := $ugt.i32($i0, 47);
    goto corral_source_split_15798;

  corral_source_split_15798:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i32($i1);
    goto corral_source_split_15799;

  corral_source_split_15799:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i2);
    goto corral_source_split_15800;

  corral_source_split_15800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2744} $i4 := ldv__builtin_expect($i3, 0);
    call {:si_unique_call 2745} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_15801;

  corral_source_split_15801:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_15802;

  corral_source_split_15802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2747} $p6 := comedi_clear_board_minor($i0);
    goto corral_source_split_15806;

  corral_source_split_15806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2748} comedi_free_board_dev($p6);
    goto SeqInstr_826, SeqInstr_827;

  SeqInstr_827:
    assume assertsPassed;
    goto SeqInstr_828;

  SeqInstr_828:
    goto corral_source_split_15807;

  corral_source_split_15807:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_826:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 2746} devirtbounce.2(0, .str.4, 2782, 12);
    goto corral_source_split_15804;

  corral_source_split_15804:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call comedi_free_board_minor_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const comedi_clear_board_minor: ref;

axiom comedi_clear_board_minor == $sub.ref(0, 603580);

procedure comedi_clear_board_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.2;



implementation comedi_clear_board_minor($i0: i32) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2749} {:cexpr "comedi_clear_board_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_15809;

  corral_source_split_15809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2750} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_15810;

  corral_source_split_15810:
    assume {:verifier.code 0} true;
    $i1 := $zext.i32.i64($i0);
    goto corral_source_split_15811;

  corral_source_split_15811:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i1, 8));
    goto corral_source_split_15812;

  corral_source_split_15812:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.2, $p2);
    goto corral_source_split_15813;

  corral_source_split_15813:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i0);
    goto corral_source_split_15814;

  corral_source_split_15814:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref($i4, 8));
    goto corral_source_split_15815;

  corral_source_split_15815:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, $0.ref);
    goto corral_source_split_15816;

  corral_source_split_15816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2751} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_15817;

  corral_source_split_15817:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const proc_create: ref;

axiom proc_create == $sub.ref(0, 604612);

procedure proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create($p0: ref, $i1: i16, $p2: ref, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i16;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2752} {:cexpr "proc_create:arg:mode"} boogie_si_record_i16($i1);
    goto corral_source_split_15819;

  corral_source_split_15819:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i1);
    goto corral_source_split_15820;

  corral_source_split_15820:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i32.i16($i4);
    goto corral_source_split_15821;

  corral_source_split_15821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2753} $p6 := proc_create_data($p0, $i5, $p2, $p3, $0.ref);
    goto corral_source_split_15822;

  corral_source_split_15822:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const proc_create_data: ref;

axiom proc_create_data == $sub.ref(0, 605644);

procedure proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation proc_create_data($p0: ref, $i1: i16, $p2: ref, $p3: ref, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2754} {:cexpr "proc_create_data:arg:arg1"} boogie_si_record_i16($i1);
    goto corral_source_split_15824;

  corral_source_split_15824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2755} $p5 := external_alloc();
    goto corral_source_split_15825;

  corral_source_split_15825:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_15826;

  corral_source_split_15826:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const cdev_init: ref;

axiom cdev_init == $sub.ref(0, 606676);

procedure cdev_init($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation cdev_init($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15828;

  corral_source_split_15828:
    assume {:verifier.code 0} true;
    return;
}



const class_destroy: ref;

axiom class_destroy == $sub.ref(0, 607708);

procedure class_destroy($p0: ref);
  free requires assertsPassed;



implementation class_destroy($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15830;

  corral_source_split_15830:
    assume {:verifier.code 0} true;
    return;
}



const ldv_cdev_del_13: ref;

axiom ldv_cdev_del_13 == $sub.ref(0, 608740);

procedure ldv_cdev_del_13($p0: ref);
  free requires assertsPassed;
  modifies $M.77;



implementation ldv_cdev_del_13($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15832;

  corral_source_split_15832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2756} cdev_del($p0);
    goto corral_source_split_15833;

  corral_source_split_15833:
    assume {:verifier.code 0} true;
    $M.77 := 0;
    call {:si_unique_call 2757} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_15834;

  corral_source_split_15834:
    assume {:verifier.code 0} true;
    return;
}



const comedi_proc_cleanup: ref;

axiom comedi_proc_cleanup == $sub.ref(0, 609772);

procedure comedi_proc_cleanup();
  free requires assertsPassed;



implementation comedi_proc_cleanup()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15836;

  corral_source_split_15836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2758} remove_proc_entry(.str.5, $0.ref);
    goto corral_source_split_15837;

  corral_source_split_15837:
    assume {:verifier.code 0} true;
    return;
}



const remove_proc_entry: ref;

axiom remove_proc_entry == $sub.ref(0, 610804);

procedure remove_proc_entry($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_proc_entry($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_15839;

  corral_source_split_15839:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 611836);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2759} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_15841;

  corral_source_split_15841:
    assume {:verifier.code 1} true;
    goto corral_source_split_15842;

  corral_source_split_15842:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_15843;

  corral_source_split_15843:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 612868);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 613900);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 614932);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15845;

  corral_source_split_15845:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_829, SeqInstr_830;

  SeqInstr_830:
    assume assertsPassed;
    goto SeqInstr_831;

  SeqInstr_831:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_15846;

  corral_source_split_15846:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_829:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 615964);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 616996);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 618028);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 619060);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 620092);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 621124);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 622156);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 623188);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 624220);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 625252);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15848;

  corral_source_split_15848:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2760} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 2761} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 2762} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_15849;

  corral_source_split_15849:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_15850;

  corral_source_split_15850:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15854;

  corral_source_split_15854:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15855;

  corral_source_split_15855:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2763} __VERIFIER_assume($i4);
    goto corral_source_split_15856;

  corral_source_split_15856:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15852;

  corral_source_split_15852:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 626284);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 627316);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 628348);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 629380);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 630412);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15858;

  corral_source_split_15858:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2764} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 2765} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2766} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15859;

  corral_source_split_15859:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_15860;

  corral_source_split_15860:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15864;

  corral_source_split_15864:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_15865;

  corral_source_split_15865:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2767} __VERIFIER_assume($i4);
    goto corral_source_split_15866;

  corral_source_split_15866:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_15862;

  corral_source_split_15862:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 631444);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 632476);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 633508);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 634540);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 635572);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15868;

  corral_source_split_15868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2768} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2769} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2770} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15869;

  corral_source_split_15869:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2771} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2772} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 2773} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_15870;

  corral_source_split_15870:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2774} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 2775} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 2776} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_15871;

  corral_source_split_15871:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_15872;

  corral_source_split_15872:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_15877;

  corral_source_split_15877:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_15878;

  corral_source_split_15878:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2777} __VERIFIER_assume($i7);
    goto corral_source_split_15879;

  corral_source_split_15879:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_15880;

  corral_source_split_15880:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_15886;

  corral_source_split_15886:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_15887;

  corral_source_split_15887:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2778} __VERIFIER_assume($i11);
    goto corral_source_split_15888;

  corral_source_split_15888:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_15884;

  corral_source_split_15884:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15874;

  corral_source_split_15874:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_15875;

  corral_source_split_15875:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_15882;

  corral_source_split_15882:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 636604);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 637636);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 638668);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 639700);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 640732);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 641764);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 642796);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 643828);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 644860);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15890;

  corral_source_split_15890:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2779} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 2780} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_15891;

  corral_source_split_15891:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_15892;

  corral_source_split_15892:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 2781} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_15893;

  corral_source_split_15893:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_15894;

  corral_source_split_15894:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_15895;

  corral_source_split_15895:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_15896;

  corral_source_split_15896:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_15903;

  corral_source_split_15903:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_15904;

  corral_source_split_15904:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_15905;

  corral_source_split_15905:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_15906;

  corral_source_split_15906:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_15898;

  corral_source_split_15898:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_15899;

  corral_source_split_15899:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2782} __VERIFIER_assume($i10);
    goto corral_source_split_15900;

  corral_source_split_15900:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_15901;

  corral_source_split_15901:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 645892);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15908;

  corral_source_split_15908:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2783} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2784} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2785} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_15909;

  corral_source_split_15909:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 646924);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15911;

  corral_source_split_15911:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2786} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2787} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_15912;

  corral_source_split_15912:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 647956);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 648988);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2788} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2789} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 650020);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 651052);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_15914;

  corral_source_split_15914:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_15915;

  corral_source_split_15915:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 652084);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2790} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2791} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_15917;

  corral_source_split_15917:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2792} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2793} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_15918;

  corral_source_split_15918:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_15919;

  corral_source_split_15919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_15923;

  corral_source_split_15923:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_15924;

  corral_source_split_15924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2794} $p6 := malloc($i5);
    goto corral_source_split_15925;

  corral_source_split_15925:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_15926;

  corral_source_split_15926:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 2795} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_15928;

  corral_source_split_15928:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_15921;

  corral_source_split_15921:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 653116);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 654148);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.27, $M.26, $M.92, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.0, $M.88, $M.188, $M.189, $M.190, $M.191, $M.192, $M.87, $M.28, $M.84, $M.83, $M.22, $M.3, $M.2, $M.21, $M.86, $M.65, $M.79, $M.76, $M.78, $M.66, $M.73, $M.69, $M.80, $M.85, $M.64, $M.77, $M.75, $M.82, $M.81, $M.74, $M.72, $M.68, $M.67, $M.63, $M.70, $M.71, $M.23, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.290;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2796} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.27 := 2048;
    call {:si_unique_call 2797} {:cexpr "comedi_default_buf_size_kb"} boogie_si_record_i32(2048);
    $M.26 := 20480;
    call {:si_unique_call 2798} {:cexpr "comedi_default_buf_maxsize_kb"} boogie_si_record_i32(20480);
    $M.92 := $store.i8($M.92, __kstrtab_comedi_dev_put, 99);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(2, 1)), 109);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(7, 1)), 100);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(8, 1)), 101);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(9, 1)), 118);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(10, 1)), 95);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(11, 1)), 112);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.92 := $store.i8($M.92, $add.ref($add.ref(__kstrtab_comedi_dev_put, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.121 := $store.i8($M.121, __kstrtab_comedi_buf_read_samples, 99);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(3, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(4, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(5, 1)), 105);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(7, 1)), 98);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(8, 1)), 117);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(9, 1)), 102);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(11, 1)), 114);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(12, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(13, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(14, 1)), 100);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(15, 1)), 95);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(16, 1)), 115);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(17, 1)), 97);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(18, 1)), 109);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(19, 1)), 112);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(20, 1)), 108);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(22, 1)), 115);
    $M.121 := $store.i8($M.121, $add.ref($add.ref(__kstrtab_comedi_buf_read_samples, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.122 := $store.i8($M.122, __kstrtab_comedi_buf_write_samples, 99);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(3, 1)), 101);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(6, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(7, 1)), 98);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(8, 1)), 117);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(9, 1)), 102);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(11, 1)), 119);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(12, 1)), 114);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(13, 1)), 105);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(14, 1)), 116);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(15, 1)), 101);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(16, 1)), 95);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(17, 1)), 115);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(18, 1)), 97);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(19, 1)), 109);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(20, 1)), 112);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(21, 1)), 108);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(23, 1)), 115);
    $M.122 := $store.i8($M.122, $add.ref($add.ref(__kstrtab_comedi_buf_write_samples, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.123 := $store.i8($M.123, __kstrtab_comedi_buf_read_free, 99);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(7, 1)), 98);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(8, 1)), 117);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(9, 1)), 102);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(11, 1)), 114);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(13, 1)), 97);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(14, 1)), 100);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(16, 1)), 102);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(17, 1)), 114);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.123 := $store.i8($M.123, $add.ref($add.ref(__kstrtab_comedi_buf_read_free, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.124 := $store.i8($M.124, __kstrtab_comedi_buf_read_alloc, 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(7, 1)), 98);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(8, 1)), 117);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(9, 1)), 102);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(11, 1)), 114);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(13, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(14, 1)), 100);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(15, 1)), 95);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(16, 1)), 97);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(17, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(18, 1)), 108);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(20, 1)), 99);
    $M.124 := $store.i8($M.124, $add.ref($add.ref(__kstrtab_comedi_buf_read_alloc, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.125 := $store.i8($M.125, __kstrtab_comedi_buf_read_n_available, 99);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(1, 1)), 111);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(2, 1)), 109);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(3, 1)), 101);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(4, 1)), 100);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(5, 1)), 105);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(6, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(7, 1)), 98);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(8, 1)), 117);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(9, 1)), 102);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(10, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(11, 1)), 114);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(12, 1)), 101);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(13, 1)), 97);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(14, 1)), 100);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(15, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(16, 1)), 110);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(17, 1)), 95);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(18, 1)), 97);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(19, 1)), 118);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(20, 1)), 97);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(21, 1)), 105);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(22, 1)), 108);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(23, 1)), 97);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(24, 1)), 98);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(25, 1)), 108);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(26, 1)), 101);
    $M.125 := $store.i8($M.125, $add.ref($add.ref(__kstrtab_comedi_buf_read_n_available, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.126 := $store.i8($M.126, __kstrtab_comedi_buf_write_free, 99);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(7, 1)), 98);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(8, 1)), 117);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(9, 1)), 102);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(11, 1)), 119);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(12, 1)), 114);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(13, 1)), 105);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(14, 1)), 116);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(15, 1)), 101);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(17, 1)), 102);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(18, 1)), 114);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(19, 1)), 101);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(20, 1)), 101);
    $M.126 := $store.i8($M.126, $add.ref($add.ref(__kstrtab_comedi_buf_write_free, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.127 := $store.i8($M.127, __kstrtab_comedi_buf_write_alloc, 99);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(7, 1)), 98);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(8, 1)), 117);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(9, 1)), 102);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(11, 1)), 119);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(13, 1)), 105);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(16, 1)), 95);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(17, 1)), 97);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(18, 1)), 108);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(19, 1)), 108);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(20, 1)), 111);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(21, 1)), 99);
    $M.127 := $store.i8($M.127, $add.ref($add.ref(__kstrtab_comedi_buf_write_alloc, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.128 := $store.i8($M.128, __kstrtab_comedi_driver_unregister, 99);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(3, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(6, 1)), 95);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(7, 1)), 100);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(8, 1)), 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(9, 1)), 105);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(10, 1)), 118);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(12, 1)), 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(13, 1)), 95);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(14, 1)), 117);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(15, 1)), 110);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(16, 1)), 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(17, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(18, 1)), 103);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(19, 1)), 105);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(20, 1)), 115);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(21, 1)), 116);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(22, 1)), 101);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(23, 1)), 114);
    $M.128 := $store.i8($M.128, $add.ref($add.ref(__kstrtab_comedi_driver_unregister, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.129 := $store.i8($M.129, __kstrtab_comedi_driver_register, 99);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(7, 1)), 100);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(8, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(9, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(10, 1)), 118);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(11, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(12, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(13, 1)), 95);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(14, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(16, 1)), 103);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(17, 1)), 105);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(18, 1)), 115);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(19, 1)), 116);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(20, 1)), 101);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.129 := $store.i8($M.129, $add.ref($add.ref(__kstrtab_comedi_driver_register, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.130 := $store.i8($M.130, __kstrtab_comedi_auto_unconfig, 99);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(8, 1)), 117);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(9, 1)), 116);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(10, 1)), 111);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(12, 1)), 117);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(13, 1)), 110);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(14, 1)), 99);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(15, 1)), 111);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(16, 1)), 110);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(17, 1)), 102);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(18, 1)), 105);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(19, 1)), 103);
    $M.130 := $store.i8($M.130, $add.ref($add.ref(__kstrtab_comedi_auto_unconfig, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.131 := $store.i8($M.131, __kstrtab_comedi_auto_config, 99);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(3, 1)), 101);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(8, 1)), 117);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(9, 1)), 116);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(10, 1)), 111);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(11, 1)), 95);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(12, 1)), 99);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(13, 1)), 111);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(14, 1)), 110);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(15, 1)), 102);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(16, 1)), 105);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(17, 1)), 103);
    $M.131 := $store.i8($M.131, $add.ref($add.ref(__kstrtab_comedi_auto_config, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.132 := $store.i8($M.132, __kstrtab_comedi_legacy_detach, 99);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(7, 1)), 108);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(8, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(9, 1)), 103);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(10, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(11, 1)), 99);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(12, 1)), 121);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(14, 1)), 100);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(16, 1)), 116);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(18, 1)), 99);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(19, 1)), 104);
    $M.132 := $store.i8($M.132, $add.ref($add.ref(__kstrtab_comedi_legacy_detach, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.133 := $store.i8($M.133, __kstrtab_comedi_request_region, 99);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(7, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(8, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(9, 1)), 113);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(10, 1)), 117);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(11, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(12, 1)), 115);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(13, 1)), 116);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(14, 1)), 95);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(16, 1)), 101);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(17, 1)), 103);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(19, 1)), 111);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(20, 1)), 110);
    $M.133 := $store.i8($M.133, $add.ref($add.ref(__kstrtab_comedi_request_region, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.134 := $store.i8($M.134, __kstrtab___comedi_request_region, 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(1, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(2, 1)), 99);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(3, 1)), 111);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(4, 1)), 109);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(5, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(6, 1)), 100);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(7, 1)), 105);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(8, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(9, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(10, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(11, 1)), 113);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(12, 1)), 117);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(13, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(14, 1)), 115);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(15, 1)), 116);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(16, 1)), 95);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(17, 1)), 114);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(18, 1)), 101);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(19, 1)), 103);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(20, 1)), 105);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(21, 1)), 111);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(22, 1)), 110);
    $M.134 := $store.i8($M.134, $add.ref($add.ref(__kstrtab___comedi_request_region, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.135 := $store.i8($M.135, __kstrtab_comedi_load_firmware, 99);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(7, 1)), 108);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(9, 1)), 97);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(12, 1)), 102);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(13, 1)), 105);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(14, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(15, 1)), 109);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(16, 1)), 119);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(17, 1)), 97);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(18, 1)), 114);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(19, 1)), 101);
    $M.135 := $store.i8($M.135, $add.ref($add.ref(__kstrtab_comedi_load_firmware, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.136 := $store.i8($M.136, __kstrtab_comedi_handle_events, 99);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(7, 1)), 104);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(8, 1)), 97);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(9, 1)), 110);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(10, 1)), 100);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(11, 1)), 108);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(12, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(15, 1)), 118);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(16, 1)), 101);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.136 := $store.i8($M.136, $add.ref($add.ref(__kstrtab_comedi_handle_events, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.137 := $store.i8($M.137, __kstrtab_comedi_inc_scan_progress, 99);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(3, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(6, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(7, 1)), 105);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(8, 1)), 110);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(9, 1)), 99);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(10, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(11, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(12, 1)), 99);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(13, 1)), 97);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(14, 1)), 110);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(15, 1)), 95);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(16, 1)), 112);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(17, 1)), 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(18, 1)), 111);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(19, 1)), 103);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(20, 1)), 114);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(21, 1)), 101);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(22, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(23, 1)), 115);
    $M.137 := $store.i8($M.137, $add.ref($add.ref(__kstrtab_comedi_inc_scan_progress, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.138 := $store.i8($M.138, __kstrtab_comedi_nsamples_left, 99);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(7, 1)), 110);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(8, 1)), 115);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(9, 1)), 97);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(10, 1)), 109);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(11, 1)), 112);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(12, 1)), 108);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(14, 1)), 115);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(15, 1)), 95);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(16, 1)), 108);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(17, 1)), 101);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(18, 1)), 102);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(19, 1)), 116);
    $M.138 := $store.i8($M.138, $add.ref($add.ref(__kstrtab_comedi_nsamples_left, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.139 := $store.i8($M.139, __kstrtab_comedi_nscans_left, 99);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(3, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(7, 1)), 110);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(8, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(9, 1)), 99);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(10, 1)), 97);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(11, 1)), 110);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(12, 1)), 115);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(13, 1)), 95);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(14, 1)), 108);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(15, 1)), 101);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(16, 1)), 102);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(17, 1)), 116);
    $M.139 := $store.i8($M.139, $add.ref($add.ref(__kstrtab_comedi_nscans_left, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.140 := $store.i8($M.140, __kstrtab_comedi_bytes_per_scan, 99);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(7, 1)), 98);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(8, 1)), 121);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(9, 1)), 116);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(10, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(11, 1)), 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(13, 1)), 112);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(14, 1)), 101);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(15, 1)), 114);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(17, 1)), 115);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(18, 1)), 99);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(19, 1)), 97);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(20, 1)), 110);
    $M.140 := $store.i8($M.140, $add.ref($add.ref(__kstrtab_comedi_bytes_per_scan, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.141 := $store.i8($M.141, __kstrtab_comedi_dio_update_state, 99);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(3, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(4, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(5, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(7, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(8, 1)), 105);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(9, 1)), 111);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(10, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(11, 1)), 117);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(12, 1)), 112);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(13, 1)), 100);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(14, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(15, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(16, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(17, 1)), 95);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(18, 1)), 115);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(19, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(21, 1)), 116);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(22, 1)), 101);
    $M.141 := $store.i8($M.141, $add.ref($add.ref(__kstrtab_comedi_dio_update_state, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.142 := $store.i8($M.142, __kstrtab_comedi_dio_insn_config, 99);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(1, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(2, 1)), 109);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(3, 1)), 101);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(4, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(5, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(7, 1)), 100);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(8, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(9, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(10, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(11, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(12, 1)), 110);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(14, 1)), 110);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(16, 1)), 99);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(17, 1)), 111);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(18, 1)), 110);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(19, 1)), 102);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(20, 1)), 105);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(21, 1)), 103);
    $M.142 := $store.i8($M.142, $add.ref($add.ref(__kstrtab_comedi_dio_insn_config, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.143 := $store.i8($M.143, __kstrtab_comedi_timeout, 99);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(1, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(2, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(3, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(4, 1)), 100);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(5, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(6, 1)), 95);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(7, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(8, 1)), 105);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(9, 1)), 109);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(10, 1)), 101);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(11, 1)), 111);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(12, 1)), 117);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(13, 1)), 116);
    $M.143 := $store.i8($M.143, $add.ref($add.ref(__kstrtab_comedi_timeout, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.144 := $store.i8($M.144, __kstrtab_comedi_readback_insn_read, 99);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(1, 1)), 111);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(3, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(4, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(5, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(6, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(8, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(9, 1)), 97);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(10, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(11, 1)), 98);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(12, 1)), 97);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(13, 1)), 99);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(14, 1)), 107);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(15, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(16, 1)), 105);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(17, 1)), 110);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(18, 1)), 115);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(19, 1)), 110);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(20, 1)), 95);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(21, 1)), 114);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(22, 1)), 101);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(23, 1)), 97);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(24, 1)), 100);
    $M.144 := $store.i8($M.144, $add.ref($add.ref(__kstrtab_comedi_readback_insn_read, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.145 := $store.i8($M.145, __kstrtab_comedi_alloc_subdev_readback, 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(1, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(2, 1)), 109);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(3, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(4, 1)), 100);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(5, 1)), 105);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(6, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(7, 1)), 97);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(8, 1)), 108);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(9, 1)), 108);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(10, 1)), 111);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(11, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(12, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(13, 1)), 115);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(14, 1)), 117);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(15, 1)), 98);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(16, 1)), 100);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(17, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(18, 1)), 118);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(20, 1)), 114);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(21, 1)), 101);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(22, 1)), 97);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(23, 1)), 100);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(24, 1)), 98);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(25, 1)), 97);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(26, 1)), 99);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(27, 1)), 107);
    $M.145 := $store.i8($M.145, $add.ref($add.ref(__kstrtab_comedi_alloc_subdev_readback, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.146 := $store.i8($M.146, __kstrtab_comedi_alloc_subdevices, 99);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(1, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(2, 1)), 109);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(3, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(4, 1)), 100);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(5, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(6, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(7, 1)), 97);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(8, 1)), 108);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(9, 1)), 108);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(10, 1)), 111);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(11, 1)), 99);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(12, 1)), 95);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(13, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(14, 1)), 117);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(15, 1)), 98);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(16, 1)), 100);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(17, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(18, 1)), 118);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(19, 1)), 105);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(20, 1)), 99);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(21, 1)), 101);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(22, 1)), 115);
    $M.146 := $store.i8($M.146, $add.ref($add.ref(__kstrtab_comedi_alloc_subdevices, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.147 := $store.i8($M.147, __kstrtab_comedi_alloc_devpriv, 99);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(1, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(2, 1)), 109);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(4, 1)), 100);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(5, 1)), 105);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(8, 1)), 108);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(9, 1)), 108);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(10, 1)), 111);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(11, 1)), 99);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(12, 1)), 95);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(13, 1)), 100);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(14, 1)), 101);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(15, 1)), 118);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(16, 1)), 112);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(17, 1)), 114);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(18, 1)), 105);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(19, 1)), 118);
    $M.147 := $store.i8($M.147, $add.ref($add.ref(__kstrtab_comedi_alloc_devpriv, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.148 := $store.i8($M.148, __kstrtab_comedi_set_hw_dev, 99);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(1, 1)), 111);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(3, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(4, 1)), 100);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(5, 1)), 105);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(6, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(7, 1)), 115);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(8, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(9, 1)), 116);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(10, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(11, 1)), 104);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(12, 1)), 119);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(13, 1)), 95);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(14, 1)), 100);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(15, 1)), 101);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(16, 1)), 118);
    $M.148 := $store.i8($M.148, $add.ref($add.ref(__kstrtab_comedi_set_hw_dev, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.149 := $store.i8($M.149, __kstrtab_comedi_check_chanlist, 99);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(1, 1)), 111);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(2, 1)), 109);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(4, 1)), 100);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(5, 1)), 105);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(6, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(7, 1)), 99);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(8, 1)), 104);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(9, 1)), 101);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(10, 1)), 99);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(11, 1)), 107);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(13, 1)), 99);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(14, 1)), 104);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(15, 1)), 97);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(16, 1)), 110);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(17, 1)), 108);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(18, 1)), 105);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(19, 1)), 115);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(20, 1)), 116);
    $M.149 := $store.i8($M.149, $add.ref($add.ref(__kstrtab_comedi_check_chanlist, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.150 := $store.i8($M.150, __kstrtab_range_unknown, 114);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(1, 1)), 97);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(2, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(3, 1)), 103);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(6, 1)), 117);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(7, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(8, 1)), 107);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(9, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(10, 1)), 111);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(11, 1)), 119);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(12, 1)), 110);
    $M.150 := $store.i8($M.150, $add.ref($add.ref(__kstrtab_range_unknown, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.151 := $store.i8($M.151, __kstrtab_range_0_32mA, 114);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(2, 1)), 110);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(3, 1)), 103);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(6, 1)), 48);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(8, 1)), 51);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(9, 1)), 50);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(10, 1)), 109);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(11, 1)), 65);
    $M.151 := $store.i8($M.151, $add.ref($add.ref(__kstrtab_range_0_32mA, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.152 := $store.i8($M.152, __kstrtab_range_4_20mA, 114);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(2, 1)), 110);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(3, 1)), 103);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(6, 1)), 52);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(8, 1)), 50);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(9, 1)), 48);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(10, 1)), 109);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(11, 1)), 65);
    $M.152 := $store.i8($M.152, $add.ref($add.ref(__kstrtab_range_4_20mA, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.153 := $store.i8($M.153, __kstrtab_range_0_20mA, 114);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(1, 1)), 97);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(2, 1)), 110);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(3, 1)), 103);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(4, 1)), 101);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(5, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(6, 1)), 48);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(8, 1)), 50);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(9, 1)), 48);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(10, 1)), 109);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(11, 1)), 65);
    $M.153 := $store.i8($M.153, $add.ref($add.ref(__kstrtab_range_0_20mA, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.154 := $store.i8($M.154, __kstrtab_range_unipolar2_5, 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(1, 1)), 97);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(2, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(3, 1)), 103);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(5, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(6, 1)), 117);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(7, 1)), 110);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(8, 1)), 105);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(9, 1)), 112);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(10, 1)), 111);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(11, 1)), 108);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(12, 1)), 97);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(13, 1)), 114);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(14, 1)), 50);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(15, 1)), 95);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(16, 1)), 53);
    $M.154 := $store.i8($M.154, $add.ref($add.ref(__kstrtab_range_unipolar2_5, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.155 := $store.i8($M.155, __kstrtab_range_unipolar5, 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(1, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(2, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(3, 1)), 103);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(6, 1)), 117);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(7, 1)), 110);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(8, 1)), 105);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(9, 1)), 112);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(10, 1)), 111);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(12, 1)), 97);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(13, 1)), 114);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(14, 1)), 53);
    $M.155 := $store.i8($M.155, $add.ref($add.ref(__kstrtab_range_unipolar5, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.156 := $store.i8($M.156, __kstrtab_range_unipolar10, 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(1, 1)), 97);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(2, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(3, 1)), 103);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(6, 1)), 117);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(7, 1)), 110);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(8, 1)), 105);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(9, 1)), 112);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(10, 1)), 111);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(11, 1)), 108);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(12, 1)), 97);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(13, 1)), 114);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(14, 1)), 49);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(15, 1)), 48);
    $M.156 := $store.i8($M.156, $add.ref($add.ref(__kstrtab_range_unipolar10, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.157 := $store.i8($M.157, __kstrtab_range_bipolar2_5, 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(1, 1)), 97);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(2, 1)), 110);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(3, 1)), 103);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(4, 1)), 101);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(5, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(6, 1)), 98);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(7, 1)), 105);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(8, 1)), 112);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(9, 1)), 111);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(10, 1)), 108);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(11, 1)), 97);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(12, 1)), 114);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(13, 1)), 50);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(14, 1)), 95);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(15, 1)), 53);
    $M.157 := $store.i8($M.157, $add.ref($add.ref(__kstrtab_range_bipolar2_5, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.158 := $store.i8($M.158, __kstrtab_range_bipolar5, 114);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(1, 1)), 97);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(2, 1)), 110);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(3, 1)), 103);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(4, 1)), 101);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(5, 1)), 95);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(6, 1)), 98);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(7, 1)), 105);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(8, 1)), 112);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(9, 1)), 111);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(10, 1)), 108);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(11, 1)), 97);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(12, 1)), 114);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(13, 1)), 53);
    $M.158 := $store.i8($M.158, $add.ref($add.ref(__kstrtab_range_bipolar5, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.159 := $store.i8($M.159, __kstrtab_range_bipolar10, 114);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(1, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(2, 1)), 110);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(3, 1)), 103);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(6, 1)), 98);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(7, 1)), 105);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(8, 1)), 112);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(9, 1)), 111);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(10, 1)), 108);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(11, 1)), 97);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(13, 1)), 49);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(14, 1)), 48);
    $M.159 := $store.i8($M.159, $add.ref($add.ref(__kstrtab_range_bipolar10, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.ref($M.0, dev_attr_write_buffer_kb, .str.92);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), write_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), write_buffer_kb_store);
    $M.0 := $store.ref($M.0, dev_attr_max_write_buffer_kb, .str.91);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), max_write_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_write_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), max_write_buffer_kb_store);
    $M.0 := $store.ref($M.0, dev_attr_read_buffer_kb, .str.90);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), read_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), read_buffer_kb_store);
    $M.0 := $store.ref($M.0, dev_attr_max_read_buffer_kb, .str.89);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 420);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(32, 1)), max_read_buffer_kb_show);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(dev_attr_max_read_buffer_kb, $mul.ref(0, 48)), $mul.ref(40, 1)), max_read_buffer_kb_store);
    $M.0 := $store.ref($M.0, comedi_dev_attrs, dev_attr_max_read_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(1, 8)), dev_attr_read_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(2, 8)), dev_attr_max_write_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(3, 8)), dev_attr_write_buffer_kb);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_attrs, $mul.ref(0, 40)), $mul.ref(4, 8)), $0.ref);
    $M.0 := $store.ref($M.0, comedi_dev_group, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_group, $mul.ref(0, 32)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_group, $mul.ref(0, 32)), $mul.ref(16, 1)), comedi_dev_attrs);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_group, $mul.ref(0, 32)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, comedi_dev_groups, comedi_dev_group);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_dev_groups, $mul.ref(0, 16)), $mul.ref(1, 8)), $0.ref);
    $M.88 := $store.ref($M.88, comedi_cdev, $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(32, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(56, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(0, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $mul.ref(8, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(0, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(24, 1)), $0.ref);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(32, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), $mul.ref(40, 1)), 0);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(16, 1)), 0);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(44, 1)), 0);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(48, 1)), 0);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(56, 1)), $0.ref);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(0, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(1, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(2, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(3, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(4, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(5, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(6, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(7, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(8, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(9, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(10, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(11, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(12, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(13, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(14, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(64, 1)), $mul.ref(15, 1)), 0);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(0, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(24, 1)), $0.ref);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(32, 1)), 0);
    $M.88 := $store.i64($M.88, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(80, 1)), $mul.ref(80, 1)), $mul.ref(40, 1)), 0);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(208, 1)), $0.ref);
    $M.88 := $store.i32($M.88, $add.ref($add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(64, 1)), $mul.ref(216, 1)), 0);
    $M.88 := $store.i8($M.88, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(0, 1)), $mul.ref(288, 1)), 0);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(296, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(304, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(312, 1)), $mul.ref(0, 1)), $0.ref);
    $M.88 := $store.ref($M.88, $add.ref($add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(312, 1)), $mul.ref(8, 1)), $0.ref);
    $M.88 := $store.i32($M.88, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(328, 1)), 0);
    $M.88 := $store.i32($M.88, $add.ref($add.ref(comedi_cdev, $mul.ref(0, 336)), $mul.ref(332, 1)), 0);
    $M.0 := $store.ref($M.0, comedi_vm_ops, comedi_vm_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(8, 1)), comedi_vm_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(16, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(56, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(64, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_vm_ops, $mul.ref(0, 88)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.i32($M.0, comedi_subdevice_minor_table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.31);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(comedi_subdevice_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(comedi_subdevice_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), comedi_subdevice_minor_table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.32);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(comedi_subdevice_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, comedi_board_minor_table_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.29);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(comedi_board_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(comedi_board_minor_table_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), comedi_board_minor_table_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(comedi_board_minor_table_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.188 := $store.i8($M.188, __kstrtab_comedi_event, 99);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(1, 1)), 111);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(2, 1)), 109);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(4, 1)), 100);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(5, 1)), 105);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(6, 1)), 95);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(7, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(8, 1)), 118);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(9, 1)), 101);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(10, 1)), 110);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(11, 1)), 116);
    $M.188 := $store.i8($M.188, $add.ref($add.ref(__kstrtab_comedi_event, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.189 := $store.i8($M.189, __kstrtab_comedi_alloc_spriv, 99);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(1, 1)), 111);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(2, 1)), 109);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(3, 1)), 101);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(4, 1)), 100);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(5, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(6, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(7, 1)), 97);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(8, 1)), 108);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(9, 1)), 108);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(10, 1)), 111);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(11, 1)), 99);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(12, 1)), 95);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(13, 1)), 115);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(14, 1)), 112);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(15, 1)), 114);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(16, 1)), 105);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(17, 1)), 118);
    $M.189 := $store.i8($M.189, $add.ref($add.ref(__kstrtab_comedi_alloc_spriv, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.190 := $store.i8($M.190, __kstrtab_comedi_set_spriv_auto_free, 99);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(1, 1)), 111);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(2, 1)), 109);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(4, 1)), 100);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(5, 1)), 105);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(6, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(7, 1)), 115);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(8, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(9, 1)), 116);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(10, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(11, 1)), 115);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(12, 1)), 112);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(13, 1)), 114);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(14, 1)), 105);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(15, 1)), 118);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(16, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(17, 1)), 97);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(18, 1)), 117);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(19, 1)), 116);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(20, 1)), 111);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(21, 1)), 95);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(22, 1)), 102);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(23, 1)), 114);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(24, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.190 := $store.i8($M.190, $add.ref($add.ref(__kstrtab_comedi_set_spriv_auto_free, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.191 := $store.i8($M.191, __kstrtab_comedi_is_subdevice_running, 99);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(1, 1)), 111);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(2, 1)), 109);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(3, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(4, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(5, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(6, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(7, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(8, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(9, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(10, 1)), 115);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(11, 1)), 117);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(12, 1)), 98);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(13, 1)), 100);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(14, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(15, 1)), 118);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(16, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(17, 1)), 99);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(18, 1)), 101);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(19, 1)), 95);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(20, 1)), 114);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(21, 1)), 117);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(22, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(23, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(24, 1)), 105);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(25, 1)), 110);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(26, 1)), 103);
    $M.191 := $store.i8($M.191, $add.ref($add.ref(__kstrtab_comedi_is_subdevice_running, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.192 := $store.i8($M.192, __kstrtab_comedi_dev_get_from_minor, 99);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(1, 1)), 111);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(3, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(4, 1)), 100);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(5, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(6, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(7, 1)), 100);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(8, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(9, 1)), 118);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(11, 1)), 103);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(12, 1)), 101);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(13, 1)), 116);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(14, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(15, 1)), 102);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(16, 1)), 114);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(17, 1)), 111);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(18, 1)), 109);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(19, 1)), 95);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(20, 1)), 109);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(21, 1)), 105);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(22, 1)), 110);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(23, 1)), 111);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(24, 1)), 114);
    $M.192 := $store.i8($M.192, $add.ref($add.ref(__kstrtab_comedi_dev_get_from_minor, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.87 := 0;
    call {:si_unique_call 2799} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.28 := $0.ref;
    $M.84 := 0;
    call {:si_unique_call 2800} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.83 := 0;
    call {:si_unique_call 2801} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.22 := $0.ref;
    $M.3 := $store.ref($M.3, comedi_subdevice_minor_table, $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(1, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(2, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(3, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(4, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(5, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(6, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(7, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(8, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(9, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(10, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(11, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(12, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(13, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(14, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(15, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(16, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(17, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(18, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(19, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(20, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(21, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(22, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(23, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(24, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(25, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(26, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(27, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(28, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(29, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(30, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(31, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(32, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(33, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(34, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(35, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(36, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(37, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(38, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(39, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(40, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(41, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(42, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(43, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(44, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(45, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(46, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(47, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(48, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(49, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(50, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(51, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(52, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(53, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(54, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(55, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(56, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(57, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(58, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(59, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(60, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(61, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(62, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(63, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(64, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(65, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(66, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(67, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(68, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(69, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(70, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(71, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(72, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(73, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(74, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(75, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(76, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(77, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(78, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(79, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(80, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(81, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(82, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(83, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(84, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(85, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(86, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(87, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(88, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(89, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(90, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(91, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(92, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(93, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(94, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(95, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(96, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(97, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(98, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(99, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(100, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(101, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(102, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(103, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(104, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(105, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(106, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(107, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(108, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(109, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(110, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(111, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(112, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(113, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(114, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(115, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(116, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(117, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(118, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(119, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(120, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(121, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(122, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(123, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(124, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(125, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(126, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(127, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(128, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(129, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(130, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(131, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(132, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(133, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(134, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(135, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(136, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(137, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(138, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(139, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(140, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(141, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(142, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(143, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(144, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(145, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(146, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(147, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(148, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(149, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(150, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(151, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(152, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(153, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(154, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(155, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(156, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(157, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(158, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(159, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(160, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(161, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(162, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(163, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(164, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(165, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(166, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(167, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(168, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(169, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(170, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(171, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(172, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(173, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(174, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(175, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(176, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(177, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(178, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(179, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(180, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(181, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(182, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(183, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(184, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(185, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(186, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(187, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(188, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(189, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(190, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(191, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(192, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(193, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(194, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(195, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(196, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(197, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(198, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(199, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(200, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(201, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(202, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(203, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(204, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(205, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(206, 8)), $0.ref);
    $M.3 := $store.ref($M.3, $add.ref($add.ref(comedi_subdevice_minor_table, $mul.ref(0, 1664)), $mul.ref(207, 8)), $0.ref);
    $M.2 := $store.ref($M.2, comedi_board_minor_table, $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(1, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(2, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(3, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(4, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(5, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(6, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(7, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(8, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(9, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(10, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(11, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(12, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(13, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(14, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(15, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(16, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(17, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(18, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(19, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(20, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(21, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(22, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(23, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(24, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(25, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(26, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(27, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(28, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(29, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(30, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(31, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(32, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(33, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(34, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(35, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(36, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(37, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(38, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(39, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(40, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(41, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(42, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(43, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(44, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(45, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(46, 8)), $0.ref);
    $M.2 := $store.ref($M.2, $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(47, 8)), $0.ref);
    $M.21 := 0;
    call {:si_unique_call 2802} {:cexpr "comedi_num_legacy_minors"} boogie_si_record_i32(0);
    $M.86 := $0.ref;
    $M.65 := $0.ref;
    $M.79 := 0;
    call {:si_unique_call 2803} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 2804} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.78 := 0;
    call {:si_unique_call 2805} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.66 := $0.ref;
    $M.73 := $0.ref;
    $M.69 := $0.ref;
    $M.80 := 0;
    call {:si_unique_call 2806} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.85 := $0.ref;
    $M.64 := $0.ref;
    $M.77 := 0;
    call {:si_unique_call 2807} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.75 := 0;
    call {:si_unique_call 2808} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.82 := 0;
    call {:si_unique_call 2809} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.81 := 0;
    call {:si_unique_call 2810} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.74 := 0;
    call {:si_unique_call 2811} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.72 := $0.ref;
    $M.68 := $0.ref;
    $M.67 := $0.ref;
    $M.63 := $0.ref;
    $M.70 := $0.ref;
    $M.71 := $0.ref;
    $M.23 := 1;
    call {:si_unique_call 2812} {:cexpr "ldv_module_refcounter"} boogie_si_record_i32(1);
    $M.0 := $store.i32($M.0, comedi_drivers_list_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.10);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(comedi_drivers_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(comedi_drivers_list_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), comedi_drivers_list_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.11);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(comedi_drivers_list_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, range_unknown, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(range_unknown, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(range_unknown, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 1000000);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref(range_unknown, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 2);
    $M.255 := $store.i32($M.255, range_0_32mA, 1);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref($add.ref(range_0_32mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref($add.ref(range_0_32mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 32000000);
    $M.255 := $store.i32($M.255, $add.ref($add.ref($add.ref($add.ref(range_0_32mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.258 := $store.i32($M.258, range_4_20mA, 1);
    $M.258 := $store.i32($M.258, $add.ref($add.ref($add.ref($add.ref(range_4_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 4000000);
    $M.258 := $store.i32($M.258, $add.ref($add.ref($add.ref($add.ref(range_4_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 20000000);
    $M.258 := $store.i32($M.258, $add.ref($add.ref($add.ref($add.ref(range_4_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.261 := $store.i32($M.261, range_0_20mA, 1);
    $M.261 := $store.i32($M.261, $add.ref($add.ref($add.ref($add.ref(range_0_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.261 := $store.i32($M.261, $add.ref($add.ref($add.ref($add.ref(range_0_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 20000000);
    $M.261 := $store.i32($M.261, $add.ref($add.ref($add.ref($add.ref(range_0_20mA, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 1);
    $M.264 := $store.i32($M.264, range_unipolar2_5, 1);
    $M.264 := $store.i32($M.264, $add.ref($add.ref($add.ref($add.ref(range_unipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.264 := $store.i32($M.264, $add.ref($add.ref($add.ref($add.ref(range_unipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 2500000);
    $M.264 := $store.i32($M.264, $add.ref($add.ref($add.ref($add.ref(range_unipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.267 := $store.i32($M.267, range_unipolar5, 1);
    $M.267 := $store.i32($M.267, $add.ref($add.ref($add.ref($add.ref(range_unipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.267 := $store.i32($M.267, $add.ref($add.ref($add.ref($add.ref(range_unipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 5000000);
    $M.267 := $store.i32($M.267, $add.ref($add.ref($add.ref($add.ref(range_unipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.270 := $store.i32($M.270, range_unipolar10, 1);
    $M.270 := $store.i32($M.270, $add.ref($add.ref($add.ref($add.ref(range_unipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), 0);
    $M.270 := $store.i32($M.270, $add.ref($add.ref($add.ref($add.ref(range_unipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10000000);
    $M.270 := $store.i32($M.270, $add.ref($add.ref($add.ref($add.ref(range_unipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.273 := $store.i32($M.273, range_bipolar2_5, 1);
    $M.273 := $store.i32($M.273, $add.ref($add.ref($add.ref($add.ref(range_bipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), $sub.i32(0, 2500000));
    $M.273 := $store.i32($M.273, $add.ref($add.ref($add.ref($add.ref(range_bipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 2500000);
    $M.273 := $store.i32($M.273, $add.ref($add.ref($add.ref($add.ref(range_bipolar2_5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.276 := $store.i32($M.276, range_bipolar5, 1);
    $M.276 := $store.i32($M.276, $add.ref($add.ref($add.ref($add.ref(range_bipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), $sub.i32(0, 5000000));
    $M.276 := $store.i32($M.276, $add.ref($add.ref($add.ref($add.ref(range_bipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 5000000);
    $M.276 := $store.i32($M.276, $add.ref($add.ref($add.ref($add.ref(range_bipolar5, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.279 := $store.i32($M.279, range_bipolar10, 1);
    $M.279 := $store.i32($M.279, $add.ref($add.ref($add.ref($add.ref(range_bipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(0, 1)), $sub.i32(0, 10000000));
    $M.279 := $store.i32($M.279, $add.ref($add.ref($add.ref($add.ref(range_bipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(4, 1)), 10000000);
    $M.279 := $store.i32($M.279, $add.ref($add.ref($add.ref($add.ref(range_bipolar10, $mul.ref(0, 16)), $mul.ref(4, 1)), $mul.ref(0, 12)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(24, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(25, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(26, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(27, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(28, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(29, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(30, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(31, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(32, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(33, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 35)), $mul.ref(34, 1)), 0);
    $M.0 := $store.i8($M.0, .str.11, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(17, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(21, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(22, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(23, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.11, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(28, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(29, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(30, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(31, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(32, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(33, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(34, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(35, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(36, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(37, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(38, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 40)), $mul.ref(39, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(7, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(13, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(21, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(24, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(25, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(26, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(27, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(28, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, .str.31, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(29, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(31, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(32, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(33, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(34, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(35, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(36, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(37, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(38, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(39, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(40, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(41, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(42, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.31, $mul.ref(0, 44)), $mul.ref(43, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(4, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(8, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(10, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(11, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(12, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(17, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(19, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(22, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(25, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(27, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(28, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(29, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(30, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(31, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(32, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 34)), $mul.ref(33, 1)), 0);
    $M.0 := $store.i8($M.0, .str.89, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(9, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(11, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(14, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(16, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.89, $mul.ref(0, 19)), $mul.ref(18, 1)), 0);
    $M.290 := $store.i8($M.290, .str.37, 37);
    $M.290 := $store.i8($M.290, $add.ref($add.ref(.str.37, $mul.ref(0, 4)), $mul.ref(1, 1)), 117);
    $M.290 := $store.i8($M.290, $add.ref($add.ref(.str.37, $mul.ref(0, 4)), $mul.ref(2, 1)), 10);
    $M.290 := $store.i8($M.290, $add.ref($add.ref(.str.37, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.90, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(7, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(12, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.90, $mul.ref(0, 15)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, .str.91, 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(2, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(4, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(10, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(12, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(13, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(15, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(17, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(18, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.91, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.92, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(6, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(9, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(13, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.92, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    call {:si_unique_call 2813} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 655180);

procedure devirtbounce(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, $CurrAddr, assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(comedi_vm_close, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i14 == 1);
    $i13 := $eq.ref(comedi_vm_open, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i13 == 1);
    $i12 := $eq.ref(comedi_driver_unregister, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i12 == 1);
    $i11 := $eq.ref(comedi_auto_unconfig, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(comedi_buf_map_kref_release, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i10 == 1);
    $i9 := $eq.ref(comedi_legacy_detach, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(comedi_set_spriv_auto_free, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(comedi_dev_kref_release, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    call {:si_unique_call 2814} comedi_dev_kref_release(arg);
    return;

  $bb3:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2815} comedi_set_spriv_auto_free($p1);
    return;

  $bb4:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2816} comedi_legacy_detach($p2);
    return;

  $bb5:
    assume $i10 == 1;
    call {:si_unique_call 2817} comedi_buf_map_kref_release(arg);
    return;

  $bb6:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2818} comedi_auto_unconfig($p3);
    goto SeqInstr_832, SeqInstr_833;

  SeqInstr_833:
    assume assertsPassed;
    goto SeqInstr_834;

  SeqInstr_834:
    return;

  SeqInstr_832:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2819} comedi_driver_unregister($p4);
    goto SeqInstr_835, SeqInstr_836;

  SeqInstr_836:
    assume assertsPassed;
    goto SeqInstr_837;

  SeqInstr_837:
    return;

  SeqInstr_835:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2820} comedi_vm_open($p5);
    return;

  $bb9:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2821} comedi_vm_close($p6);
    goto SeqInstr_838, SeqInstr_839;

  SeqInstr_839:
    assume assertsPassed;
    goto SeqInstr_840;

  SeqInstr_840:
    return;

  SeqInstr_838:
    assume !assertsPassed;
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 656212);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 657244);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 658276);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i5 == 1);
    $i4 := $eq.ref(comedi_check_chanlist, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2822} $i2 := comedi_check_chanlist($p1, arg1, arg2);
    $r := $i2;
    return;

  $bb3:
    assume $i5 == 1;
    call {:si_unique_call 2823} $i3 := __builtinx_object_size();
    $r := $i3;
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 659308);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i64) returns ($r: i32);



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 660340);

procedure devirtbounce.5(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 661372);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i41 := $eq.ref(comedi_read___0, $p0);
    assume {:branchcond $i41} true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i41 == 1);
    $i40 := $eq.ref(single_release, $p0);
    assume {:branchcond $i40} true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i40 == 1);
    $i39 := $eq.ref(comedi_proc_open, $p0);
    assume true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i39 == 1);
    $i38 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i38} true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i38 == 1);
    $i37 := $eq.ref(comedi_close, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i37 == 1);
    $i36 := $eq.ref(comedi_open, $p0);
    assume true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i36 == 1);
    $i35 := $eq.ref(comedi_mmap, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i35 == 1);
    $i34 := $eq.ref(comedi_poll, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i34 == 1);
    $i33 := $eq.ref(poll_invalid, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i33 == 1);
    $i32 := $eq.ref(comedi_handle_events, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i32 == 1);
    $i31 := $eq.ref(comedi_dio_update_state, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i31 == 1);
    $i30 := $eq.ref(comedi_set_hw_dev, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume false;
    return;

  $bb2:
    assume $i30 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2824} $i2 := comedi_set_hw_dev(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i31 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2825} $i5 := comedi_dio_update_state($p3, $p4);
    $r := $i5;
    return;

  $bb4:
    assume $i32 == 1;
    call {:si_unique_call 2826} $i6 := comedi_handle_events(arg, arg1);
    goto SeqInstr_841, SeqInstr_842;

  SeqInstr_842:
    assume assertsPassed;
    goto SeqInstr_843;

  SeqInstr_843:
    $r := $i6;
    return;

  SeqInstr_841:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i33 == 1;
    call {:si_unique_call 2827} $i7 := poll_invalid(arg, arg1);
    $r := $i7;
    return;

  $bb6:
    assume $i34 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2828} $i10 := comedi_poll($p8, $p9);
    $r := $i10;
    return;

  $bb7:
    assume $i35 == 1;
    $p11 := $bitcast.ref.ref(arg);
    $p12 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2829} $i13 := comedi_mmap($p11, $p12);
    goto SeqInstr_844, SeqInstr_845;

  SeqInstr_845:
    assume assertsPassed;
    goto SeqInstr_846;

  SeqInstr_846:
    $r := $i13;
    return;

  SeqInstr_844:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i36 == 1;
    $p14 := $bitcast.ref.ref(arg);
    $p15 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2830} $i16 := comedi_open($p14, $p15);
    goto SeqInstr_847, SeqInstr_848;

  SeqInstr_848:
    assume assertsPassed;
    goto SeqInstr_849;

  SeqInstr_849:
    $r := $i16;
    return;

  SeqInstr_847:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i37 == 1;
    $p17 := $bitcast.ref.ref(arg);
    $p18 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2831} $i19 := comedi_close($p17, $p18);
    goto SeqInstr_850, SeqInstr_851;

  SeqInstr_851:
    assume assertsPassed;
    goto SeqInstr_852;

  SeqInstr_852:
    $r := $i19;
    return;

  SeqInstr_850:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i38 == 1;
    call {:si_unique_call 2832} $i20 := __builtinx_object_size();
    $r := $i20;
    return;

  $bb11:
    assume $i39 == 1;
    $p21 := $bitcast.ref.ref(arg);
    $p22 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2833} $i23 := comedi_proc_open($p21, $p22);
    $r := $i23;
    return;

  $bb12:
    assume $i40 == 1;
    $p24 := $bitcast.ref.ref(arg);
    $p25 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2834} $i26 := single_release($p24, $p25);
    $r := $i26;
    return;

  $bb13:
    assume $i41 == 1;
    $p27 := $bitcast.ref.ref(arg);
    $p28 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2835} $i29 := comedi_read___0($p27, $p28);
    goto SeqInstr_853, SeqInstr_854;

  SeqInstr_854:
    assume assertsPassed;
    goto SeqInstr_855;

  SeqInstr_855:
    $r := $i29;
    return;

  SeqInstr_853:
    assume !assertsPassed;
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 662404);

procedure devirtbounce.7(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64) returns ($r: i32);



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 663436);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2836} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 664468);

procedure devirtbounce.9(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, $CurrAddr, assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(comedi_vm_close, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i15 == 1);
    $i14 := $eq.ref(comedi_vm_open, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i14 == 1);
    $i13 := $eq.ref(comedi_driver_unregister, $p0);
    assume true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i13 == 1);
    $i12 := $eq.ref(comedi_auto_unconfig, $p0);
    assume {:branchcond $i12} true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i12 == 1);
    $i11 := $eq.ref(comedi_buf_map_kref_release, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i11 == 1);
    $i10 := $eq.ref(comedi_legacy_detach, $p0);
    assume {:branchcond $i10} true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i10 == 1);
    $i9 := $eq.ref(comedi_set_spriv_auto_free, $p0);
    assume {:branchcond $i9} true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i9 == 1);
    $i8 := $eq.ref(comedi_dev_kref_release, $p0);
    assume true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i8 == 1);
    assume false;
    return;

  $bb2:
    assume $i8 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2837} comedi_dev_kref_release($p1);
    return;

  $bb3:
    assume $i9 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2838} comedi_set_spriv_auto_free($p2);
    return;

  $bb4:
    assume $i10 == 1;
    call {:si_unique_call 2839} comedi_legacy_detach(arg);
    return;

  $bb5:
    assume $i11 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2840} comedi_buf_map_kref_release($p3);
    return;

  $bb6:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2841} comedi_auto_unconfig($p4);
    goto SeqInstr_856, SeqInstr_857;

  SeqInstr_857:
    assume assertsPassed;
    goto SeqInstr_858;

  SeqInstr_858:
    return;

  SeqInstr_856:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2842} comedi_driver_unregister($p5);
    goto SeqInstr_859, SeqInstr_860;

  SeqInstr_860:
    assume assertsPassed;
    goto SeqInstr_861;

  SeqInstr_861:
    return;

  SeqInstr_859:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2843} comedi_vm_open($p6);
    return;

  $bb9:
    assume $i15 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2844} comedi_vm_close($p7);
    goto SeqInstr_862, SeqInstr_863;

  SeqInstr_863:
    assume assertsPassed;
    goto SeqInstr_864;

  SeqInstr_864:
    return;

  SeqInstr_862:
    assume !assertsPassed;
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 665500);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 666532);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.2, $M.28, $M.23, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i13 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb6, $bb11;

  $bb11:
    assume !($i13 == 1);
    $i12 := $eq.ref(parse_insn, $p0);
    assume {:branchcond $i12} true;
    goto $bb5, $bb10;

  $bb10:
    assume !($i12 == 1);
    $i11 := $eq.ref(insn_inval, $p0);
    assume true;
    goto $bb4, $bb9;

  $bb9:
    assume !($i11 == 1);
    $i10 := $eq.ref(insn_rw_emulate_bits, $p0);
    assume {:branchcond $i10} true;
    goto $bb3, $bb8;

  $bb8:
    assume !($i10 == 1);
    $i9 := $eq.ref(comedi_readback_insn_read, $p0);
    assume {:branchcond $i9} true;
    goto $bb2, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume false;
    return;

  $bb2:
    assume $i9 == 1;
    call {:si_unique_call 2845} $i1 := comedi_readback_insn_read(arg, arg1, arg2, arg3);
    $r := $i1;
    return;

  $bb3:
    assume $i10 == 1;
    call {:si_unique_call 2846} $i2 := insn_rw_emulate_bits(arg, arg1, arg2, arg3);
    goto SeqInstr_865, SeqInstr_866;

  SeqInstr_866:
    assume assertsPassed;
    goto SeqInstr_867;

  SeqInstr_867:
    $r := $i2;
    return;

  SeqInstr_865:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i11 == 1;
    call {:si_unique_call 2847} $i3 := insn_inval(arg, arg1, arg2, arg3);
    $r := $i3;
    return;

  $bb5:
    assume $i12 == 1;
    $p4 := $bitcast.ref.ref(arg1);
    $p5 := $bitcast.ref.ref(arg2);
    $p6 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 2848} $i7 := parse_insn(arg, $p4, $p5, $p6);
    goto SeqInstr_868, SeqInstr_869;

  SeqInstr_869:
    assume assertsPassed;
    goto SeqInstr_870;

  SeqInstr_870:
    $r := $i7;
    return;

  SeqInstr_868:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i13 == 1;
    call {:si_unique_call 2849} $i8 := __builtinx_object_size();
    $r := $i8;
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 667564);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: ref, arg2: ref, arg3: i32, arg4: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 668596);

procedure devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 669628);

procedure devirtbounce.14(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, $CurrAddr, assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i14 := $eq.ref(comedi_vm_close, $p0);
    assume true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i14 == 1);
    $i13 := $eq.ref(comedi_vm_open, $p0);
    assume true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i13 == 1);
    $i12 := $eq.ref(comedi_driver_unregister, $p0);
    assume {:branchcond $i12} true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i12 == 1);
    $i11 := $eq.ref(comedi_auto_unconfig, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i11 == 1);
    $i10 := $eq.ref(comedi_buf_map_kref_release, $p0);
    assume {:branchcond $i10} true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i10 == 1);
    $i9 := $eq.ref(comedi_legacy_detach, $p0);
    assume {:branchcond $i9} true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i9 == 1);
    $i8 := $eq.ref(comedi_set_spriv_auto_free, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i8 == 1);
    $i7 := $eq.ref(comedi_dev_kref_release, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2850} comedi_dev_kref_release($p1);
    return;

  $bb3:
    assume $i8 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2851} comedi_set_spriv_auto_free($p2);
    return;

  $bb4:
    assume $i9 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2852} comedi_legacy_detach($p3);
    return;

  $bb5:
    assume $i10 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2853} comedi_buf_map_kref_release($p4);
    return;

  $bb6:
    assume $i11 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2854} comedi_auto_unconfig($p5);
    goto SeqInstr_871, SeqInstr_872;

  SeqInstr_872:
    assume assertsPassed;
    goto SeqInstr_873;

  SeqInstr_873:
    return;

  SeqInstr_871:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i12 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2855} comedi_driver_unregister($p6);
    goto SeqInstr_874, SeqInstr_875;

  SeqInstr_875:
    assume assertsPassed;
    goto SeqInstr_876;

  SeqInstr_876:
    return;

  SeqInstr_874:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i13 == 1;
    call {:si_unique_call 2856} comedi_vm_open(arg);
    return;

  $bb9:
    assume $i14 == 1;
    call {:si_unique_call 2857} comedi_vm_close(arg);
    goto SeqInstr_877, SeqInstr_878;

  SeqInstr_878:
    assume assertsPassed;
    goto SeqInstr_879;

  SeqInstr_879:
    return;

  SeqInstr_877:
    assume !assertsPassed;
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 670660);

procedure devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.28, $M.2, $CurrAddr, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, $M.23, $M.54, $M.25, assertsPassed;



implementation devirtbounce.15(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i16 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb7, $bb13;

  $bb13:
    assume !($i16 == 1);
    $i15 := $eq.ref(comedi_driver_register, $p0);
    assume true;
    goto $bb6, $bb12;

  $bb12:
    assume !($i15 == 1);
    $i14 := $eq.ref(comedi_buf_read_n_available, $p0);
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i14 == 1);
    $i13 := $eq.ref(comedi_bytes_per_scan, $p0);
    assume true;
    goto $bb4, $bb10;

  $bb10:
    assume !($i13 == 1);
    $i12 := $eq.ref(comedi_alloc_subdev_readback, $p0);
    assume {:branchcond $i12} true;
    goto $bb3, $bb9;

  $bb9:
    assume !($i12 == 1);
    $i11 := $eq.ref(comedi_dev_put, $p0);
    assume true;
    goto $bb2, $bb8;

  $bb8:
    assume !($i11 == 1);
    assume false;
    return;

  $bb2:
    assume $i11 == 1;
    call {:si_unique_call 2858} $i1 := comedi_dev_put(arg);
    goto SeqInstr_880, SeqInstr_881;

  SeqInstr_881:
    assume assertsPassed;
    goto SeqInstr_882;

  SeqInstr_882:
    $r := $i1;
    return;

  SeqInstr_880:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i12 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2859} $i3 := comedi_alloc_subdev_readback($p2);
    $r := $i3;
    return;

  $bb4:
    assume $i13 == 1;
    $p4 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2860} $i5 := comedi_bytes_per_scan($p4);
    $r := $i5;
    return;

  $bb5:
    assume $i14 == 1;
    $p6 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2861} $i7 := comedi_buf_read_n_available($p6);
    $r := $i7;
    return;

  $bb6:
    assume $i15 == 1;
    $p8 := $bitcast.ref.ref(arg);
    call {:si_unique_call 2862} $i9 := comedi_driver_register($p8);
    $r := $i9;
    return;

  $bb7:
    assume $i16 == 1;
    call {:si_unique_call 2863} $i10 := __builtinx_object_size();
    $r := $i10;
    return;
}



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 671692);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i64);
  free requires assertsPassed;
  modifies $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.2, $M.55, $M.56, $CurrAddr, $M.28, $M.23, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.58, $M.57, $M.3, $M.54, $M.24, assertsPassed, $M.25;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i32, arg2: i64) returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i4: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i4 := $eq.ref(comedi_compat_ioctl, $p0);
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    $i3 := $eq.ref(comedi_unlocked_ioctl, $p0);
    assume {:branchcond $i3} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i3 == 1);
    assume false;
    return;

  $bb2:
    assume $i3 == 1;
    call {:si_unique_call 2864} $i1 := comedi_unlocked_ioctl(arg, arg1, arg2);
    goto SeqInstr_883, SeqInstr_884;

  SeqInstr_884:
    assume assertsPassed;
    goto SeqInstr_885;

  SeqInstr_885:
    $r := $i1;
    return;

  SeqInstr_883:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i4 == 1;
    call {:si_unique_call 2865} $i2 := comedi_compat_ioctl(arg, arg1, arg2);
    goto SeqInstr_886, SeqInstr_887;

  SeqInstr_887:
    assume assertsPassed;
    goto SeqInstr_888;

  SeqInstr_888:
    $r := $i2;
    return;

  SeqInstr_886:
    assume !assertsPassed;
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 672724);

procedure devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: ref, arg1: i32, arg2: i32) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.18: ref;

axiom devirtbounce.18 == $sub.ref(0, 673756);

procedure devirtbounce.18(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.18(funcPtr: ref, arg: i32, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2866} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.19: ref;

axiom devirtbounce.19 == $sub.ref(0, 674788);

procedure devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.19(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2867} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.20: ref;

axiom devirtbounce.20 == $sub.ref(0, 675820);

procedure devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.20(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2868} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.21: ref;

axiom devirtbounce.21 == $sub.ref(0, 676852);

procedure devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.21(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2869} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.22: ref;

axiom devirtbounce.22 == $sub.ref(0, 677884);

procedure devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.22(funcPtr: ref, arg: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.23: ref;

axiom devirtbounce.23 == $sub.ref(0, 678916);

procedure devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.23(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2870} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.24: ref;

axiom devirtbounce.24 == $sub.ref(0, 679948);

procedure devirtbounce.24(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.24(funcPtr: ref, arg: i32, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2871} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.25: ref;

axiom devirtbounce.25 == $sub.ref(0, 680980);

procedure devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.25(funcPtr: ref, arg: ref, arg1: ref, arg2: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2872} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.26: ref;

axiom devirtbounce.26 == $sub.ref(0, 682012);

procedure devirtbounce.26(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $CurrAddr, $M.28, $M.23, $M.24, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation devirtbounce.26(funcPtr: ref, arg: ref, arg1: ref, arg2: i32) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i1;
  var $i15: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i15 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i15 == 1);
    $i14 := $eq.ref(comedi_buf_read_samples, $p0);
    assume true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i14 == 1);
    $i13 := $eq.ref(comedi_buf_write_samples, $p0);
    assume true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i13 == 1);
    $i12 := $eq.ref(comedi_auto_config, $p0);
    assume {:branchcond $i12} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume false;
    return;

  $bb2:
    assume $i12 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    $i3 := $zext.i32.i64(arg2);
    call {:si_unique_call 2873} $i4 := comedi_auto_config($p1, $p2, $i3);
    goto SeqInstr_889, SeqInstr_890;

  SeqInstr_890:
    assume assertsPassed;
    goto SeqInstr_891;

  SeqInstr_891:
    $r := $i4;
    return;

  SeqInstr_889:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i13 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2874} $i7 := comedi_buf_write_samples($p5, $p6, arg2);
    $r := $i7;
    return;

  $bb4:
    assume $i14 == 1;
    $p8 := $bitcast.ref.ref(arg);
    $p9 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2875} $i10 := comedi_buf_read_samples($p8, $p9, arg2);
    $r := $i10;
    return;

  $bb5:
    assume $i15 == 1;
    call {:si_unique_call 2876} $i11 := __builtinx_object_size();
    $r := $i11;
    return;
}



const devirtbounce.27: ref;

axiom devirtbounce.27 == $sub.ref(0, 683044);

procedure devirtbounce.27(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.27(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2877} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.28: ref;

axiom devirtbounce.28 == $sub.ref(0, 684076);

procedure devirtbounce.28(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation devirtbounce.28(funcPtr: ref, arg: ref, arg1: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i43 := $eq.ref(comedi_read___0, $p0);
    assume true;
    goto $bb13, $bb25;

  $bb25:
    assume !($i43 == 1);
    $i42 := $eq.ref(single_release, $p0);
    assume true;
    goto $bb12, $bb24;

  $bb24:
    assume !($i42 == 1);
    $i41 := $eq.ref(comedi_proc_open, $p0);
    assume {:branchcond $i41} true;
    goto $bb11, $bb23;

  $bb23:
    assume !($i41 == 1);
    $i40 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i40} true;
    goto $bb10, $bb22;

  $bb22:
    assume !($i40 == 1);
    $i39 := $eq.ref(comedi_close, $p0);
    assume true;
    goto $bb9, $bb21;

  $bb21:
    assume !($i39 == 1);
    $i38 := $eq.ref(comedi_open, $p0);
    assume {:branchcond $i38} true;
    goto $bb8, $bb20;

  $bb20:
    assume !($i38 == 1);
    $i37 := $eq.ref(comedi_mmap, $p0);
    assume true;
    goto $bb7, $bb19;

  $bb19:
    assume !($i37 == 1);
    $i36 := $eq.ref(comedi_poll, $p0);
    assume true;
    goto $bb6, $bb18;

  $bb18:
    assume !($i36 == 1);
    $i35 := $eq.ref(poll_invalid, $p0);
    assume true;
    goto $bb5, $bb17;

  $bb17:
    assume !($i35 == 1);
    $i34 := $eq.ref(comedi_handle_events, $p0);
    assume true;
    goto $bb4, $bb16;

  $bb16:
    assume !($i34 == 1);
    $i33 := $eq.ref(comedi_dio_update_state, $p0);
    assume true;
    goto $bb3, $bb15;

  $bb15:
    assume !($i33 == 1);
    $i32 := $eq.ref(comedi_set_hw_dev, $p0);
    assume true;
    goto $bb2, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume false;
    return;

  $bb2:
    assume $i32 == 1;
    $p1 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2878} $i2 := comedi_set_hw_dev(arg, $p1);
    $r := $i2;
    return;

  $bb3:
    assume $i33 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2879} $i5 := comedi_dio_update_state($p3, $p4);
    $r := $i5;
    return;

  $bb4:
    assume $i34 == 1;
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2880} $i7 := comedi_handle_events(arg, $p6);
    goto SeqInstr_892, SeqInstr_893;

  SeqInstr_893:
    assume assertsPassed;
    goto SeqInstr_894;

  SeqInstr_894:
    $r := $i7;
    return;

  SeqInstr_892:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i35 == 1;
    $p8 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2881} $i9 := poll_invalid(arg, $p8);
    $r := $i9;
    return;

  $bb6:
    assume $i36 == 1;
    $p10 := $bitcast.ref.ref(arg);
    $p11 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2882} $i12 := comedi_poll($p10, $p11);
    $r := $i12;
    return;

  $bb7:
    assume $i37 == 1;
    $p13 := $bitcast.ref.ref(arg);
    $p14 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2883} $i15 := comedi_mmap($p13, $p14);
    goto SeqInstr_895, SeqInstr_896;

  SeqInstr_896:
    assume assertsPassed;
    goto SeqInstr_897;

  SeqInstr_897:
    $r := $i15;
    return;

  SeqInstr_895:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i38 == 1;
    $p16 := $bitcast.ref.ref(arg);
    $p17 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2884} $i18 := comedi_open($p16, $p17);
    goto SeqInstr_898, SeqInstr_899;

  SeqInstr_899:
    assume assertsPassed;
    goto SeqInstr_900;

  SeqInstr_900:
    $r := $i18;
    return;

  SeqInstr_898:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i39 == 1;
    $p19 := $bitcast.ref.ref(arg);
    $p20 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2885} $i21 := comedi_close($p19, $p20);
    goto SeqInstr_901, SeqInstr_902;

  SeqInstr_902:
    assume assertsPassed;
    goto SeqInstr_903;

  SeqInstr_903:
    $r := $i21;
    return;

  SeqInstr_901:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i40 == 1;
    call {:si_unique_call 2886} $i22 := __builtinx_object_size();
    $r := $i22;
    return;

  $bb11:
    assume $i41 == 1;
    $p23 := $bitcast.ref.ref(arg);
    $p24 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2887} $i25 := comedi_proc_open($p23, $p24);
    $r := $i25;
    return;

  $bb12:
    assume $i42 == 1;
    $p26 := $bitcast.ref.ref(arg);
    $p27 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2888} $i28 := single_release($p26, $p27);
    $r := $i28;
    return;

  $bb13:
    assume $i43 == 1;
    $p29 := $bitcast.ref.ref(arg);
    $p30 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 2889} $i31 := comedi_read___0($p29, $p30);
    goto SeqInstr_904, SeqInstr_905;

  SeqInstr_905:
    assume assertsPassed;
    goto SeqInstr_906;

  SeqInstr_906:
    $r := $i31;
    return;

  SeqInstr_904:
    assume !assertsPassed;
    return;
}



const devirtbounce.29: ref;

axiom devirtbounce.29 == $sub.ref(0, 685108);

procedure devirtbounce.29(funcPtr: ref, arg: ref, arg1: ref, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.29(funcPtr: ref, arg: ref, arg1: ref, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.30: ref;

axiom devirtbounce.30 == $sub.ref(0, 686140);

procedure devirtbounce.30(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.30(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: ref;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.27, $M.26, $M.92, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.0, $M.88, $M.188, $M.189, $M.190, $M.191, $M.192, $M.87, $M.28, $M.84, $M.83, $M.22, $M.3, $M.2, $M.21, $M.86, $M.65, $M.79, $M.76, $M.78, $M.66, $M.73, $M.69, $M.80, $M.85, $M.64, $M.77, $M.75, $M.82, $M.81, $M.74, $M.72, $M.68, $M.67, $M.63, $M.70, $M.71, $M.23, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.290, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2890} __SMACK_static_init();
    call {:si_unique_call 2891} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.62, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.61, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.30, $M.31, $M.32, $M.33, $M.34, $M.29, $M.43, $M.44, $M.41, $M.42, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.83, $M.46, $M.84, $M.66, $M.67, $M.68, $M.69, $M.63, $M.70, $M.71, $M.72, $M.73, $M.27, $M.26, $M.92, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.88, $M.188, $M.189, $M.190, $M.191, $M.192, $M.87, $M.28, $M.22, $M.3, $M.2, $M.21, $M.86, $M.65, $M.85, $M.64, $M.23, $M.255, $M.258, $M.261, $M.264, $M.267, $M.270, $M.273, $M.276, $M.279, $M.290, $CurrAddr, $M.24, $M.55, $M.56, $M.54, $M.25, $M.58, $M.57;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation comedi_dev_get_from_board_minor_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} comedi_dev_get_from_board_minor_loop_$bb3();
    return;

  exit:
    return;
}



procedure comedi_dev_get_from_board_minor_loop_$bb3();



implementation comedi_dev_get_from_subdevice_minor_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} comedi_dev_get_from_subdevice_minor_loop_$bb3();
    return;

  exit:
    return;
}



procedure comedi_dev_get_from_subdevice_minor_loop_$bb3();



implementation comedi_check_chanlist_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i19: i32, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i48: i32, in_$i49: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i19: i32, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i48: i32, out_$i49: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i19, out_$p35, out_$i36, out_$i37, out_$i42, out_$i43, out_$i44, out_$i38, out_$i39, out_$i40, out_$i41, out_$i48, out_$i49, out_$i6 := in_$i7, in_$p8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$p20, in_$p21, in_$i22, in_$i23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i19, in_$p35, in_$i36, in_$i37, in_$i42, in_$i43, in_$i44, in_$i38, in_$i39, in_$i40, in_$i41, in_$i48, in_$i49, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_320;

  $bb22:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i48;
    goto $bb22_dummy;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, in_$i1);
    goto corral_source_split_375;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i6, 1);
    call {:si_unique_call 117} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_374;

  $bb19:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    out_$i38, out_$i39, out_$i40, out_$i41 := out_$i6, out_$i9, out_$i10, out_$i19;
    assume true;
    goto $bb19;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    out_$i44 := $uge.i32(out_$i43, out_$i19);
    goto corral_source_split_370;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    out_$i43 := $and.i32(out_$i42, 255);
    goto corral_source_split_369;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    out_$i42 := $lshr.i32(out_$i9, 16);
    goto corral_source_split_368;

  $bb17:
    assume !(out_$i37 == 1);
    goto corral_source_split_367;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$i38, out_$i39, out_$i40, out_$i41 := out_$i6, out_$i9, out_$i10, out_$i19;
    assume true;
    goto $bb17;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i37 := $sle.i32(out_$i36, out_$i10);
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, out_$p35);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_344;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_343;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i19 := out_$i34;
    goto $bb8;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    out_$i19 := out_$i18;
    goto $bb8;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, out_$p17);
    call {:si_unique_call 114} {:cexpr "range_len"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_335;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p16, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_333;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_332;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_331;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i64(out_$i13, 0);
    goto corral_source_split_329;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$i13 := $p2i.ref.i64(out_$p12);
    goto corral_source_split_328;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(160, 1));
    goto corral_source_split_326;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    out_$i10 := $and.i32(out_$i9, 65535);
    call {:si_unique_call 113} {:cexpr "chan"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_325;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    call {:si_unique_call 112} {:cexpr "chanspec"} boogie_si_record_i32(out_$i9);
    goto corral_source_split_324;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(in_$p2, $mul.ref(out_$i7, 4));
    goto corral_source_split_323;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i34 := 0;
    goto $bb14;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i33;
    goto $bb14;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    call {:si_unique_call 115} {:cexpr "range_len"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_360;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_359;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref(out_$p28, $mul.ref(out_$i29, 8));
    goto corral_source_split_357;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i10);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_354;

  $bb12:
    assume out_$i26 == 1;
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(out_$i25, out_$i10);
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(16, 1));
    goto corral_source_split_349;

  $bb9:
    assume out_$i23 == 1;
    goto corral_source_split_348;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, 0);
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(168, 1));
    goto corral_source_split_338;

  $bb7:
    assume !(out_$i14 == 1);
    goto corral_source_split_337;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i23 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i26 == 1);
    goto $bb11;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i19, out_$p35, out_$i36, out_$i37, out_$i42, out_$i43, out_$i44, out_$i38, out_$i39, out_$i40, out_$i41, out_$i48, out_$i49, out_$i6 := comedi_check_chanlist_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$i7, out_$p8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p20, out_$p21, out_$i22, out_$i23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i19, out_$p35, out_$i36, out_$i37, out_$i42, out_$i43, out_$i44, out_$i38, out_$i39, out_$i40, out_$i41, out_$i48, out_$i49, out_$i6);
    return;

  exit:
    return;
}



procedure comedi_check_chanlist_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i7: i64, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$i14: i1, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i32, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i19: i32, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$i42: i32, in_$i43: i32, in_$i44: i1, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i48: i32, in_$i49: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$i14: i1, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i32, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i19: i32, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$i42: i32, out_$i43: i32, out_$i44: i1, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i48: i32, out_$i49: i1, out_$i6: i32);



implementation comedi_readback_insn_read_loop_$bb8(in_$p1: ref, in_$p3: ref, in_$i6: i32, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i15: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i15: i32)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i15 := in_$p16, in_$p17, in_$i18, in_$p19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i15;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_484;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i23;
    goto $bb10_dummy;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    out_$i25 := $ult.i32(out_$i23, out_$i24);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i32($M.0, in_$p12);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i15, 1);
    call {:si_unique_call 130} {:cexpr "i"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, out_$i20);
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(in_$p3, $mul.ref(out_$i21, 4));
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i15);
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_490;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 4));
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i32.i64(in_$i6);
    goto corral_source_split_488;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_487;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p1, $mul.ref(0, 296)), $mul.ref(288, 1));
    goto corral_source_split_486;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i15 := comedi_readback_insn_read_loop_$bb8(in_$p1, in_$p3, in_$i6, in_$p12, out_$p16, out_$p17, out_$i18, out_$p19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i15);
    return;

  exit:
    return;
}



procedure comedi_readback_insn_read_loop_$bb8(in_$p1: ref, in_$p3: ref, in_$i6: i32, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i1, in_$i15: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i1, out_$i15: i32);
  modifies $M.0;



implementation comedi_alloc_board_minor_loop_$bb11(in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i26: i32, in_$i27: i1, in_$i16: i32, in_$i28: i32) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i26: i32, out_$i27: i1, out_$i16: i32, out_$i28: i32)
{

  entry:
    out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i16, out_$i28 := in_$i17, in_$p18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i26, in_$i27, in_$i16, in_$i28;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_830;

  $bb17:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i26;
    goto $bb17_dummy;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i26;
    assume true;
    goto $bb17;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    out_$i27 := $ule.i32(out_$i26, 47);
    goto corral_source_split_848;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i16, 1);
    call {:si_unique_call 195} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_847;

  $bb14:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i16;
    assume true;
    goto $bb14;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i64(out_$i20, 0);
    goto corral_source_split_836;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_835;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.2, out_$p18);
    goto corral_source_split_834;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(out_$i17, 8));
    goto corral_source_split_833;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i32.i64(out_$i16);
    goto corral_source_split_832;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i16, out_$i28 := comedi_alloc_board_minor_loop_$bb11(out_$i17, out_$p18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i26, out_$i27, out_$i16, out_$i28);
    return;

  exit:
    return;
}



procedure comedi_alloc_board_minor_loop_$bb11(in_$i17: i64, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$i22: i32, in_$i26: i32, in_$i27: i1, in_$i16: i32, in_$i28: i32) returns (out_$i17: i64, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$i22: i32, out_$i26: i32, out_$i27: i1, out_$i16: i32, out_$i28: i32);



implementation comedi_release_hardware_device_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$p15: ref, in_$i18: i32, in_$i19: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$p15: ref, out_$i18: i32, out_$i19: i1, out_$i3: i32)
{

  entry:
    out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i18, out_$i19, out_$i3 := in_$i4, in_$p5, in_$p6, in_$i7, in_$i8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i13, in_$i14, in_$p15, in_$i18, in_$i19, in_$i3;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_910;

  $bb13:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i3 := out_$i18;
    goto $bb13_dummy;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    out_$i19 := $sle.i32(out_$i18, 47);
    goto corral_source_split_935;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i3, 1);
    call {:si_unique_call 218} {:cexpr "minor"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_934;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} mutex_unlock(comedi_board_minor_table_lock);
    goto corral_source_split_933;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i8 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i13 == 1);
    goto $bb8;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    out_$i14, out_$p15 := out_$i3, out_$p6;
    assume true;
    goto $bb10;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i64(out_$i11, out_$i12);
    goto corral_source_split_924;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    out_$i12 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_923;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    out_$i11 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_922;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_921;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(0, 560)), $mul.ref(48, 1));
    goto corral_source_split_920;

  $bb6:
    assume out_$i8 == 1;
    goto corral_source_split_919;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    out_$i8 := $ne.i64(out_$i7, 0);
    goto corral_source_split_917;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    out_$i7 := $p2i.ref.i64(out_$p6);
    goto corral_source_split_916;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.2, out_$p5);
    goto corral_source_split_915;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(comedi_board_minor_table, $mul.ref(0, 384)), $mul.ref(out_$i4, 8));
    goto corral_source_split_914;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i4 := $sext.i32.i64(out_$i3);
    goto corral_source_split_913;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} mutex_lock_nested(comedi_board_minor_table_lock, 0);
    goto corral_source_split_912;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i18, out_$i19, out_$i3 := comedi_release_hardware_device_loop_$bb4(in_$p0, out_$i4, out_$p5, out_$p6, out_$i7, out_$i8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i13, out_$i14, out_$p15, out_$i18, out_$i19, out_$i3);
    return;

  exit:
    return;
}



procedure comedi_release_hardware_device_loop_$bb4(in_$p0: ref, in_$i4: i64, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$i8: i1, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$i12: i64, in_$i13: i1, in_$i14: i32, in_$p15: ref, in_$i18: i32, in_$i19: i1, in_$i3: i32) returns (out_$i4: i64, out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$i8: i1, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$i12: i64, out_$i13: i1, out_$i14: i32, out_$p15: ref, out_$i18: i32, out_$i19: i1, out_$i3: i32);



implementation comedi_device_cancel_all_loop_$bb8(in_$p0: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i7: i32, in_vslice_dummy_var_29: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i7: i32, out_vslice_dummy_var_29: i32)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i7, out_vslice_dummy_var_29 := in_$p8, in_$p9, in_$i10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i17, in_$i18, in_$i19, in_$i7, in_vslice_dummy_var_29;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1058;

  $bb13:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i17;
    goto $bb13_dummy;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i17);
    goto corral_source_split_1074;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p4);
    goto corral_source_split_1073;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i7, 1);
    call {:si_unique_call 237} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_1072;

  $bb11:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_66:
    goto corral_source_split_1070;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} out_vslice_dummy_var_29 := do_cancel(in_$p0, out_$p11);
    goto SeqInstr_65;

  $bb10:
    assume out_$i15 == 1;
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_1066;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_1065;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p9, $mul.ref(out_$i10, 296)), $mul.ref(40, 1));
    goto corral_source_split_1064;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref(out_$p9, $mul.ref(out_$i10, 296));
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    out_$i10 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1062;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_1061;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1060;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i7, out_vslice_dummy_var_29 := comedi_device_cancel_all_loop_$bb8(in_$p0, in_$p4, out_$p8, out_$p9, out_$i10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i17, out_$i18, out_$i19, out_$i7, out_vslice_dummy_var_29);
    return;

  exit:
    return;
}



procedure comedi_device_cancel_all_loop_$bb8(in_$p0: ref, in_$p4: ref, in_$p8: ref, in_$p9: ref, in_$i10: i64, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i7: i32, in_vslice_dummy_var_29: i32) returns (out_$p8: ref, out_$p9: ref, out_$i10: i64, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i7: i32, out_vslice_dummy_var_29: i32);
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation comedi_device_detach_cleanup_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i8: i32, in_vslice_dummy_var_30: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i8: i32, out_vslice_dummy_var_30: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i8, out_vslice_dummy_var_30 := in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$p18, in_$p19, in_$i20, in_$i21, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$i31, in_$i8, in_vslice_dummy_var_30;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1093;

  $bb14:
    assume out_$i31 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i29;
    goto $bb14_dummy;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    out_$i31 := $sgt.i32(out_$i30, out_$i29);
    goto corral_source_split_1127;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i32($M.0, in_$p5);
    goto corral_source_split_1126;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i8, 1);
    call {:si_unique_call 245} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1125;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} kfree(out_$p28);
    goto corral_source_split_1124;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(out_$p27);
    goto corral_source_split_1123;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_1122;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 296)), $mul.ref(288, 1));
    goto corral_source_split_1121;

  $bb12:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} kfree(out_$p25);
    goto corral_source_split_1119;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_1118;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_1117;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 296)), $mul.ref(40, 1));
    goto corral_source_split_1116;

  SeqInstr_69:
    goto corral_source_split_1115;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} out_vslice_dummy_var_30 := comedi_buf_alloc(in_$p0, out_$p12, 0);
    goto SeqInstr_68;

  $bb11:
    assume out_$i21 == 1;
    goto corral_source_split_1114;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i64(out_$i20, 0);
    goto corral_source_split_1112;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i20 := $p2i.ref.i64(out_$p19);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 296)), $mul.ref(40, 1));
    goto corral_source_split_1109;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} comedi_free_subdevice_minor(out_$p12);
    goto corral_source_split_1108;

  $bb9:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} kfree(out_$p17);
    goto corral_source_split_1106;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 296)), $mul.ref(32, 1));
    goto corral_source_split_1104;

  $bb8:
    assume out_$i15 == 1;
    goto corral_source_split_1103;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(out_$i14);
    goto corral_source_split_1101;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i8(out_$i13);
    call {:si_unique_call 239} {:cexpr "tmp"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} out_$i13 := comedi_can_auto_free_spriv(out_$p12);
    goto corral_source_split_1099;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 296));
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_1096;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i8, out_vslice_dummy_var_30 := comedi_device_detach_cleanup_loop_$bb6(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$p18, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$i31, out_$i8, out_vslice_dummy_var_30);
    return;

  exit:
    return;
}



procedure comedi_device_detach_cleanup_loop_$bb6(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i20: i64, in_$i21: i1, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i8: i32, in_vslice_dummy_var_30: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$p19: ref, out_$i20: i64, out_$i21: i1, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i8: i32, out_vslice_dummy_var_30: i32);
  modifies $M.0, $M.24, $M.25, $CurrAddr, $M.2, $M.28, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.23, $M.54, assertsPassed;



implementation comedi_free_subdevice_minor_loop_$bb14()
{

  entry:
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb14_dummy;

  $bb14_dummy:
    call {:si_unique_call 1} comedi_free_subdevice_minor_loop_$bb14();
    return;

  exit:
    return;
}



procedure comedi_free_subdevice_minor_loop_$bb14();



implementation comedi_free_subdevice_minor_loop_$bb10()
{

  entry:
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb10_dummy;

  $bb10_dummy:
    call {:si_unique_call 1} comedi_free_subdevice_minor_loop_$bb10();
    return;

  exit:
    return;
}



procedure comedi_free_subdevice_minor_loop_$bb10();



implementation __comedi_buf_alloc_loop_$bb17(in_$i2: i32, in_$p7: ref, in_$p39: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i64, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i44: i32, in_$i83: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i64, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i44: i32, out_$i83: i32)
{

  entry:
    out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i44, out_$i83 := in_$p45, in_$p46, in_$i47, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$i57, in_$p58, in_$p59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i44, in_$i83;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  $bb26:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i44 := out_$i81;
    goto $bb26_dummy;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    out_$i83 := out_$i81;
    assume true;
    goto $bb26;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    out_$i82 := $ult.i32(out_$i81, in_$i2);
    goto corral_source_split_1442;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i44, 1);
    call {:si_unique_call 298} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1441;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p80, out_$p78);
    goto corral_source_split_1440;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref(in_$p39, $mul.ref(out_$i79, 8));
    goto corral_source_split_1439;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i32.i64(out_$i44);
    goto corral_source_split_1438;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i77, 64));
    goto corral_source_split_1437;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    out_$i77 := $lshr.i64(out_$i76, 12);
    goto corral_source_split_1436;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 296} out_$i76 := __phys_addr(out_$i75);
    call {:si_unique_call 297} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_1435;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_1434;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1433;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1432;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} set_bit(10, out_$p72);
    goto corral_source_split_1431;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i70, 64)), $mul.ref(0, 1));
    goto corral_source_split_1430;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    goto corral_source_split_1429;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    out_$i70 := $lshr.i64(out_$i69, 12);
    goto corral_source_split_1428;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} out_$i69 := __phys_addr(out_$i68);
    call {:si_unique_call 294} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i69);
    goto corral_source_split_1427;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    out_$i68 := $p2i.ref.i64(out_$p67);
    goto corral_source_split_1426;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_1425;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1424;

  $bb23:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i44;
    assume true;
    goto $bb23;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i64(out_$i62, 0);
    goto corral_source_split_1410;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    out_$i62 := $p2i.ref.i64(out_$p61);
    goto corral_source_split_1409;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_1408;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1407;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p59, out_$p58);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p56, out_$p55);
    goto corral_source_split_1400;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1399;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} out_$p55 := dma_alloc_attrs(out_$p53, 4096, out_$p54, 16592, $0.ref);
    goto corral_source_split_1398;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 16)), $mul.ref(8, 1));
    goto corral_source_split_1397;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_1396;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(in_$p7, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_1395;

  $bb19:
    assume out_$i51 == 1;
    goto corral_source_split_1394;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 3);
    goto corral_source_split_1392;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_1391;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p7, $mul.ref(0, 32)), $mul.ref(20, 1));
    goto corral_source_split_1390;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto corral_source_split_1389;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i32.i64(out_$i44);
    goto corral_source_split_1388;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1387;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p7, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_1386;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p46, $mul.ref(out_$i47, 16)), $mul.ref(0, 1));
    goto corral_source_split_1405;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    out_$p58 := $i2p.i64.ref(out_$i57);
    goto corral_source_split_1404;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} out_$i57 := get_zeroed_page(208);
    call {:si_unique_call 288} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i57);
    goto corral_source_split_1403;

  $bb20:
    assume !(out_$i51 == 1);
    goto corral_source_split_1402;

  $bb26_dummy:
    call {:si_unique_call 1} out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i44, out_$i83 := __comedi_buf_alloc_loop_$bb17(in_$i2, in_$p7, in_$p39, out_$p45, out_$p46, out_$i47, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i44, out_$i83);
    return;

  exit:
    return;
}



procedure __comedi_buf_alloc_loop_$bb17(in_$i2: i32, in_$p7: ref, in_$p39: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$i62: i64, in_$i63: i1, in_$i64: i32, in_$p66: ref, in_$p67: ref, in_$i68: i64, in_$i69: i64, in_$i70: i64, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i64, in_$i77: i64, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i32, in_$i82: i1, in_$i44: i32, in_$i83: i32) returns (out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$i62: i64, out_$i63: i1, out_$i64: i32, out_$p66: ref, out_$p67: ref, out_$i68: i64, out_$i69: i64, out_$i70: i64, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i64, out_$i77: i64, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i32, out_$i82: i1, out_$i44: i32, out_$i83: i32);
  modifies $M.0;



implementation comedi_buf_map_kref_release_loop_$bb6(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i10: i32)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i10 := in_$p11, in_$p12, in_$i13, in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p21, in_$p22, in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i10;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1533;

  $bb11:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i34;
    goto $bb11_dummy;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    out_$i36 := $ugt.i32(out_$i35, out_$i34);
    goto corral_source_split_1567;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p7);
    goto corral_source_split_1566;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i10, 1);
    call {:si_unique_call 334} {:cexpr "i"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_1565;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} free_pages(out_$i33, 0);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} dma_free_attrs(out_$p26, 4096, out_$p28, out_$i30, $0.ref);
    goto corral_source_split_1558;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    out_$i30 := $load.i64($M.0, out_$p29);
    goto corral_source_split_1557;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_1556;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_1555;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1554;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_1553;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(0, 1));
    goto corral_source_split_1552;

  $bb8:
    assume out_$i24 == 1;
    goto corral_source_split_1551;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 3);
    goto corral_source_split_1549;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p22);
    goto corral_source_split_1548;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(20, 1));
    goto corral_source_split_1547;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} clear_bit(10, out_$p21);
    goto corral_source_split_1546;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i19, 64)), $mul.ref(0, 1));
    goto corral_source_split_1545;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    goto corral_source_split_1544;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    out_$i19 := $lshr.i64(out_$i18, 12);
    goto corral_source_split_1543;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} out_$i18 := __phys_addr(out_$i17);
    call {:si_unique_call 330} {:cexpr "tmp"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_1542;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p16);
    goto corral_source_split_1541;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_1540;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i10);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_1536;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p1, $mul.ref($sub.ref(0, 24), 32)), $mul.ref(8, 1));
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    goto $bb7;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_1563;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1562;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p12, $mul.ref(out_$i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_1561;

  $bb9:
    assume !(out_$i24 == 1);
    goto corral_source_split_1560;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i10 := comedi_buf_map_kref_release_loop_$bb6(in_$p1, in_$p7, out_$p11, out_$p12, out_$i13, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p21, out_$p22, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i10);
    return;

  exit:
    return;
}



procedure comedi_buf_map_kref_release_loop_$bb6(in_$p1: ref, in_$p7: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i64, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i1, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i10: i32) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i64, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i1, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i10: i32);



implementation __comedi_device_postconfig_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i4 := in_$p5, in_$p6, in_$i7, in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$p36, in_$p37, in_$i38, in_$i39, in_$p40, in_$p41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$p49, in_$p50, in_$i51, in_$i52, in_$p53, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$p59, in_$i60, in_$i61, in_$p62, in_$p63, in_$p64, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$p78, in_$p79, in_$i80, in_$i81, in_$p82, in_$p83, in_$p84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$i90, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1717;

  $bb59:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i88;
    goto $bb59_dummy;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$i90 := $sgt.i32(out_$i89, out_$i88);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$i89 := $load.i32($M.0, in_$p1);
    goto corral_source_split_1730;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i32(out_$i4, 1);
    call {:si_unique_call 373} {:cexpr "i"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_1729;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i11 == 1;
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(12, 1));
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref(out_$p6, $mul.ref(out_$i7, 296));
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i4);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_1720;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb57:
    assume !(out_$i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p87, poll_invalid);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(232, 1));
    goto corral_source_split_1861;

  $bb56:
    assume out_$i86 == 1;
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$i86 := $eq.i64(out_$i85, 0);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_1857;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_1856;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(232, 1));
    goto corral_source_split_1855;

  $bb54:
    assume !(out_$i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p82, insn_inval);
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(208, 1));
    goto corral_source_split_1852;

  $bb53:
    assume out_$i81 == 1;
    goto corral_source_split_1851;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    out_$i81 := $eq.i64(out_$i80, 0);
    goto corral_source_split_1849;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i80 := $p2i.ref.i64(out_$p79);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_1847;

  $bb52:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(208, 1));
    goto corral_source_split_1846;

  $bb51:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p77, insn_inval);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1843;

  $bb50:
    assume out_$i76 == 1;
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$i76 := $eq.i64(out_$i75, 0);
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_1838;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1837;

  $bb48:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p72, insn_inval);
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1834;

  $bb47:
    assume out_$i71 == 1;
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i64(out_$i70, 0);
    goto corral_source_split_1831;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_1829;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1828;

  $bb45:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p67, insn_inval);
    goto corral_source_split_1826;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1825;

  $bb44:
    assume out_$i66 == 1;
    goto corral_source_split_1824;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i64(out_$i65, 0);
    goto corral_source_split_1822;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    out_$i65 := $p2i.ref.i64(out_$p64);
    goto corral_source_split_1821;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    out_$p64 := $load.ref($M.0, out_$p63);
    goto corral_source_split_1820;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1819;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, insn_rw_emulate_bits);
    goto corral_source_split_1817;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1816;

  $bb41:
    assume out_$i61 == 1;
    goto corral_source_split_1815;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    out_$i61 := $ne.i64(out_$i60, 0);
    goto corral_source_split_1813;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    out_$i60 := $p2i.ref.i64(out_$p59);
    goto corral_source_split_1812;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    out_$p59 := $load.ref($M.0, out_$p58);
    goto corral_source_split_1811;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1810;

  $bb38:
    assume out_$i57 == 1;
    goto corral_source_split_1809;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i64(out_$i56, 0);
    goto corral_source_split_1807;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    out_$i56 := $p2i.ref.i64(out_$p55);
    goto corral_source_split_1806;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_1805;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(192, 1));
    goto corral_source_split_1804;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    goto $bb37;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p53, insn_rw_emulate_bits);
    goto corral_source_split_1802;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1801;

  $bb35:
    assume out_$i52 == 1;
    goto corral_source_split_1800;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_1798;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    out_$i51 := $p2i.ref.i64(out_$p50);
    goto corral_source_split_1797;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_1796;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(200, 1));
    goto corral_source_split_1795;

  $bb32:
    assume out_$i48 == 1;
    goto corral_source_split_1794;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i64(out_$i47, 0);
    goto corral_source_split_1792;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_1791;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_1790;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(184, 1));
    goto corral_source_split_1789;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p44, range_unknown);
    goto corral_source_split_1787;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(160, 1));
    goto corral_source_split_1786;

  $bb29:
    assume out_$i43 == 1;
    goto corral_source_split_1785;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    out_$i43 := $eq.i64(out_$i42, 0);
    goto corral_source_split_1783;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    out_$i42 := $p2i.ref.i64(out_$p41);
    goto corral_source_split_1782;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    out_$p41 := $load.ref($M.0, out_$p40);
    goto corral_source_split_1781;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(168, 1));
    goto corral_source_split_1780;

  $bb26:
    assume out_$i39 == 1;
    goto corral_source_split_1779;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, 0);
    goto corral_source_split_1777;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_1776;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1775;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(160, 1));
    goto corral_source_split_1774;

  $bb20:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume !(out_$i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    out_$i34 := out_$i32;
    assume true;
    goto $bb22;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i32, 0);
    goto corral_source_split_1768;

  SeqInstr_93:
    call {:si_unique_call 375} {:cexpr "ret"} boogie_si_record_i32(out_$i32);
    goto corral_source_split_1767;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} out_$i32 := __comedi_device_postconfig_async(in_$p0, out_$p8);
    goto SeqInstr_92;

  $bb19:
    assume out_$i31 == 1;
    goto corral_source_split_1766;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_1764;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_1763;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_1762;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(216, 1));
    goto corral_source_split_1761;

  $bb17:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p27, 1);
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(24, 1));
    goto corral_source_split_1758;

  $bb16:
    assume out_$i26 == 1;
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i25, 0);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_1754;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(24, 1));
    goto corral_source_split_1753;

  $bb11:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, $sub.i32(0, 1));
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p22, out_$i21);
    goto corral_source_split_1748;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(144, 1));
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i20, $sub.i32(0, 1));
    goto corral_source_split_1746;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$i20 := $shl.i32(1, out_$i19);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(16, 1));
    goto corral_source_split_1743;

  $bb12:
    assume out_$i17 == 1;
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$i17 := $sle.i32(out_$i16, 31);
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(16, 1));
    goto corral_source_split_1738;

  $bb10:
    assume out_$i14 == 1;
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, 4);
    goto corral_source_split_1735;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_1734;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(12, 1));
    goto corral_source_split_1733;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p6, $mul.ref(out_$i7, 296)), $mul.ref(144, 1));
    goto corral_source_split_1751;

  $bb13:
    assume !(out_$i17 == 1);
    goto corral_source_split_1750;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb28;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i43 == 1);
    goto $bb28;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb34;

  $bb36:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb34;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb40;

  $bb42:
    assume {:verifier.code 0} true;
    assume !(out_$i61 == 1);
    goto $bb40;

  $bb59_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i4 := __comedi_device_postconfig_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$p6, out_$i7, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$p36, out_$p37, out_$i38, out_$i39, out_$p40, out_$p41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$p49, out_$p50, out_$i51, out_$i52, out_$p53, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$p59, out_$i60, out_$i61, out_$p62, out_$p63, out_$p64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$p78, out_$p79, out_$i80, out_$i81, out_$p82, out_$p83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$i90, out_$i4);
    return;

  exit:
    return;
}



procedure __comedi_device_postconfig_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$p6: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i1, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i1, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$i32: i32, in_$i33: i1, in_$i34: i32, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$p40: ref, in_$p41: ref, in_$i42: i64, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p50: ref, in_$i51: i64, in_$i52: i1, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$i56: i64, in_$i57: i1, in_$p58: ref, in_$p59: ref, in_$i60: i64, in_$i61: i1, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$i65: i64, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i81: i1, in_$p82: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i1, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i1, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$i32: i32, out_$i33: i1, out_$i34: i32, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$p40: ref, out_$p41: ref, out_$i42: i64, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p50: ref, out_$i51: i64, out_$i52: i1, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$i56: i64, out_$i57: i1, out_$p58: ref, out_$p59: ref, out_$i60: i64, out_$i61: i1, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$i65: i64, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i81: i1, out_$p82: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i4: i32);
  modifies $M.0, $M.24, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, assertsPassed;



implementation comedi_driver_unregister_loop_$bb7(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p12: ref)
{

  entry:
    out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12 := in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p12;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  $bb13:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p12 := out_$p23;
    goto $bb13_dummy;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, 0);
    goto corral_source_split_2998;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_2997;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2995;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_2994;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2993;

  $bb10:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p12;
    assume true;
    goto $bb10;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$i17 := $eq.i64(out_$i15, out_$i16);
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(in_$p0);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_2982;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p12, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12 := comedi_driver_unregister_loop_$bb7(in_$p0, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p12);
    return;

  exit:
    return;
}



procedure comedi_driver_unregister_loop_$bb7(in_$p0: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i64, in_$i17: i1, in_$p18: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p12: ref) returns (out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i64, out_$i17: i1, out_$p18: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p12: ref);



implementation comedi_buf_munge_loop_$bb10(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i20: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i23: i32, in_$i72: i32) returns (out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i23: i32, out_$i72: i32)
{

  entry:
    out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i23, out_$i72 := in_$i24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$p41, in_$p42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i47, in_$p48, in_$p49, in_$i50, in_$p52, in_$i53, in_$i54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$i65, in_$p66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$i23, in_$i72;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4884;

  $bb15:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$i23 := out_$i70;
    goto $bb15_dummy;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i70;
    assume true;
    goto $bb15;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    out_$i71 := $ult.i32(out_$i70, in_$i20);
    goto corral_source_split_4940;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    out_$i70 := $add.i32(out_$i23, out_$i31);
    call {:si_unique_call 729} {:cexpr "count"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_4939;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p69, out_$i68);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    out_$i68 := $urem.i32(out_$i65, out_$i67);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, out_$p66);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p64);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p63, out_$i62);
    goto corral_source_split_4931;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i61, out_$i31);
    goto corral_source_split_4929;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p59, out_$i58);
    goto corral_source_split_4926;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    out_$i58 := $add.i32(out_$i57, out_$i31);
    goto corral_source_split_4924;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i32($M.0, out_$p56);
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(68, 1));
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, out_$i54);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$i54 := $urem.i32(out_$i50, out_$i53);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, out_$p52);
    goto corral_source_split_4918;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(56, 1));
    goto corral_source_split_4917;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_4916;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p48, out_$i47);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i45, out_$i46);
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$i46 := $udiv.i32(out_$i31, in_$i4);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i32($M.0, out_$p44);
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i32($M.0, out_$p42);
    call {:si_unique_call 727} devirtbounce.12(out_$p33, out_$p35, in_$p0, out_$p41, out_$i31, out_$i43);
    call {:si_unique_call 728} devirtbounce.5(0);
    goto corral_source_split_4908;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(64, 1));
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p37, $mul.ref(out_$i40, 1));
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i32.i64(out_$i39);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_4900;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_4899;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_4898;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 296)), $mul.ref(256, 1));
    goto corral_source_split_4897;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4896;

  $bb13:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$i31 := out_$i24;
    goto $bb14;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$i31 := out_$i29;
    goto $bb14;

  $bb12:
    assume out_$i30 == 1;
    goto corral_source_split_4894;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    out_$i30 := $ugt.i32(out_$i24, out_$i29);
    goto corral_source_split_4892;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    out_$i29 := $sub.i32(out_$i26, out_$i28);
    call {:si_unique_call 726} {:cexpr "buf_end"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_4890;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(72, 1));
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i32($M.0, out_$p25);
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p3, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_4887;

  $bb11:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(in_$i20, out_$i23);
    call {:si_unique_call 725} {:cexpr "block_size"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb15_dummy:
    call {:si_unique_call 1} out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i23, out_$i72 := comedi_buf_munge_loop_$bb10(in_$p0, in_$p3, in_$i4, in_$i20, out_$i24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$p41, out_$p42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i47, out_$p48, out_$p49, out_$i50, out_$p52, out_$i53, out_$i54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$i65, out_$p66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$i23, out_$i72);
    return;

  exit:
    return;
}



procedure comedi_buf_munge_loop_$bb10(in_$p0: ref, in_$p3: ref, in_$i4: i32, in_$i20: i32, in_$i24: i32, in_$p25: ref, in_$i26: i32, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i32, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i64, in_$p41: ref, in_$p42: ref, in_$i43: i32, in_$p44: ref, in_$i45: i32, in_$i46: i32, in_$i47: i32, in_$p48: ref, in_$p49: ref, in_$i50: i32, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$i57: i32, in_$i58: i32, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$i65: i32, in_$p66: ref, in_$i67: i32, in_$i68: i32, in_$p69: ref, in_$i70: i32, in_$i71: i1, in_$i23: i32, in_$i72: i32) returns (out_$i24: i32, out_$p25: ref, out_$i26: i32, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i32, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i64, out_$p41: ref, out_$p42: ref, out_$i43: i32, out_$p44: ref, out_$i45: i32, out_$i46: i32, out_$i47: i32, out_$p48: ref, out_$p49: ref, out_$i50: i32, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$i57: i32, out_$i58: i32, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$i65: i32, out_$p66: ref, out_$i67: i32, out_$i68: i32, out_$p69: ref, out_$i70: i32, out_$i71: i1, out_$i23: i32, out_$i72: i32);
  modifies $M.0;



implementation comedi_buf_memcpy_to_loop_$bb4(in_$p4: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8) returns (out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8)
{

  entry:
    out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p8, out_$i9, out_$i10, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6 := in_$i11, in_$p12, in_$i13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$p22, in_$i23, in_$i24, in_$p25, in_$i26, in_$i27, in_$p8, in_$i9, in_$i10, in_cmdloc_dummy_var_4, in_cmdloc_dummy_var_5, in_cmdloc_dummy_var_6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5049;

  $bb9:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9, out_$i10 := out_$p25, out_$i26, 0;
    goto $bb9_dummy;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i26, 0);
    goto corral_source_split_5071;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    out_$i26 := $sub.i32(out_$i9, out_$i18);
    call {:si_unique_call 754} {:cexpr "num_bytes"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_5070;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref(out_$p8, $mul.ref(out_$i24, 1));
    goto corral_source_split_5069;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i32.i64(out_$i18);
    goto corral_source_split_5068;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_4 := $M.0;
    out_cmdloc_dummy_var_5 := $M.0;
    call {:si_unique_call 753} out_cmdloc_dummy_var_6 := $memcpy.i8(out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_$p22, out_$p8, out_$i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_6;
    goto corral_source_split_5067;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i18);
    goto corral_source_split_5066;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p20, $mul.ref(out_$i21, 1));
    goto corral_source_split_5065;

  corral_source_split_5063:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i32.i64(out_$i10);
    goto corral_source_split_5064;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_5063;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p4, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_5062;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5061;

  $bb7:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := out_$i9;
    goto $bb8;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    out_$i18 := out_$i17;
    goto $bb8;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    out_$i17 := $sub.i32(out_$i16, out_$i10);
    call {:si_unique_call 752} {:cexpr "block_size"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_5059;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_5058;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5057;

  $bb6:
    assume out_$i14 == 1;
    goto corral_source_split_5056;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    out_$i14 := $ugt.i32(out_$i11, out_$i13);
    goto corral_source_split_5054;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_5053;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5052;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i10, out_$i9);
    goto corral_source_split_5051;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p8, out_$i9, out_$i10, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6 := comedi_buf_memcpy_to_loop_$bb4(in_$p4, out_$i11, out_$p12, out_$i13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$p22, out_$i23, out_$i24, out_$p25, out_$i26, out_$i27, out_$p8, out_$i9, out_$i10, out_cmdloc_dummy_var_4, out_cmdloc_dummy_var_5, out_cmdloc_dummy_var_6);
    return;

  exit:
    return;
}



procedure comedi_buf_memcpy_to_loop_$bb4(in_$p4: ref, in_$i11: i32, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$i23: i64, in_$i24: i64, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_cmdloc_dummy_var_4: [ref]i8, in_cmdloc_dummy_var_5: [ref]i8, in_cmdloc_dummy_var_6: [ref]i8) returns (out_$i11: i32, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$i23: i64, out_$i24: i64, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_cmdloc_dummy_var_4: [ref]i8, out_cmdloc_dummy_var_5: [ref]i8, out_cmdloc_dummy_var_6: [ref]i8);
  modifies $M.0;



implementation comedi_buf_memcpy_from_loop_$bb4(in_$p4: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i64, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i64, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p8, out_$i9, out_$i10, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := in_$p11, in_$p12, in_$i13, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$p26, in_$i27, in_$p8, in_$i9, in_$i10, in_cmdloc_dummy_var_7, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5113;

  $bb9:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p8, out_$i9, out_$i10 := out_$p26, out_$i24, 0;
    goto $bb9_dummy;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i32(out_$i24, 0);
    goto corral_source_split_5135;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref(out_$p8, $mul.ref(out_$i25, 1));
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i32.i64(out_$i22);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i9, out_$i22);
    call {:si_unique_call 771} {:cexpr "nbytes"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_7 := $M.0;
    out_cmdloc_dummy_var_8 := $M.0;
    call {:si_unique_call 770} out_cmdloc_dummy_var_9 := $memcpy.i8(out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_$p8, out_$p14, out_$i23, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_9;
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i32.i64(out_$i22);
    goto corral_source_split_5130;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5129;

  $bb7:
    assume !(out_$i18 == 1);
    assume {:verifier.code 0} true;
    out_$i22 := out_$i9;
    goto $bb8;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$i22 := out_$i21;
    goto $bb8;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    out_$i21 := $sub.i32(out_$i20, out_$i10);
    call {:si_unique_call 769} {:cexpr "block_size"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5125;

  $bb6:
    assume out_$i18 == 1;
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    out_$i18 := $ule.i32(out_$i17, out_$i9);
    goto corral_source_split_5122;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    out_$i17 := $sub.i32(out_$i16, out_$i10);
    goto corral_source_split_5121;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p4, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5119;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref(out_$p12, $mul.ref(out_$i13, 1));
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    out_$i13 := $zext.i32.i64(out_$i10);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5116;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p4, $mul.ref(0, 264)), $mul.ref(0, 1));
    goto corral_source_split_5115;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p8, out_$i9, out_$i10, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9 := comedi_buf_memcpy_from_loop_$bb4(in_$p4, out_$p11, out_$p12, out_$i13, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$p26, out_$i27, out_$p8, out_$i9, out_$i10, out_cmdloc_dummy_var_7, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9);
    return;

  exit:
    return;
}



procedure comedi_buf_memcpy_from_loop_$bb4(in_$p4: ref, in_$p11: ref, in_$p12: ref, in_$i13: i64, in_$p14: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$p19: ref, in_$i20: i32, in_$i21: i32, in_$i22: i32, in_$i23: i64, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i1, in_$p8: ref, in_$i9: i32, in_$i10: i32, in_cmdloc_dummy_var_7: [ref]i8, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8) returns (out_$p11: ref, out_$p12: ref, out_$i13: i64, out_$p14: ref, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$p19: ref, out_$i20: i32, out_$i21: i32, out_$i22: i32, out_$i23: i64, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i1, out_$p8: ref, out_$i9: i32, out_$i10: i32, out_cmdloc_dummy_var_7: [ref]i8, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8);
  modifies $M.0;



implementation comedi_read_loop_$bb29(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p49: ref, in_$p57: ref, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i64, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i100: i32, in_$i101: i1, in_$i102: i8, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$p128: ref, in_$i129: i64, in_$i130: i1, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i99: i32, in_$i152: i1) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i64, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i100: i32, out_$i101: i1, out_$i102: i8, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$p128: ref, out_$i129: i64, out_$i130: i1, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i99: i32, out_$i152: i1)
{

  entry:
    out_$p76, out_$p77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i99, out_$i152 := in_$p76, in_$p77, in_$p78, in_$i79, in_$p80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$p87, in_$i88, in_$i89, in_$p90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$p114, in_$i115, in_$i116, in_$i117, in_$p118, in_$i119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$p125, in_$p126, in_$i127, in_$p128, in_$i129, in_$i130, in_$p132, in_$i133, in_$i134, in_$i135, in_$i99, in_$i152;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(0, 0);
    goto corral_source_split_5299;

  $bb65:
    assume {:verifier.code 0} true;
    assume in_$i75 == 1;
    goto $bb65_dummy;

  $bb64:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  $bb63:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    out_$i134 := $and.i32(out_$i133, 64);
    goto corral_source_split_5398;

  corral_source_split_5396:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_5397;

  $bb61:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref($add.ref(in_$p57, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5396;

  $bb60:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    out_$i130 := $ne.i64(out_$i127, out_$i129);
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    out_$i129 := $p2i.ref.i64(out_$p128);
    goto corral_source_split_5391;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$p128 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(out_$p126);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$p126 := $load.ref($M.0, out_$p125);
    goto corral_source_split_5388;

  $bb58:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p49, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5387;

  $bb57:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i64(out_$i123, 0);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$i123 := $p2i.ref.i64(out_$p122);
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    out_$p122 := $load.ref($M.0, out_$p121);
    goto corral_source_split_5381;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p49, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5380;

  $bb54:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_5376;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} out_$i119 := signal_pending(out_$p118);
    call {:si_unique_call 824} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_5375;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} out_$p118 := get_current();
    goto corral_source_split_5374;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} schedule();
    goto corral_source_split_5373;

  $bb51:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i32(out_$i116, 0);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$i116 := $and.i32(out_$i115, 2048);
    goto corral_source_split_5368;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i32($M.0, out_$p114);
    goto corral_source_split_5367;

  $bb49:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_5366;

  $bb44:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i106 := out_$i100;
    assume true;
    goto $bb44;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$i105 := $ne.i32(out_$i104, 0);
    goto corral_source_split_5343;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_5342;

  $bb41:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    out_$i104 := 1;
    goto $bb42;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i104 := 0;
    goto $bb42;

  $bb40:
    assume out_$i103 == 1;
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i8.i1(out_$i102);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$i102 := $zext.i1.i8(out_$i101);
    call {:si_unique_call 814} {:cexpr "tmp___9"} boogie_si_record_i8(out_$i102);
    goto corral_source_split_5337;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} out_$i101 := comedi_is_runflags_running(out_$i100);
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} out_$i100 := comedi_get_subdevice_runflags(in_$p49);
    call {:si_unique_call 812} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_5335;

  $bb38:
    assume out_$i98 == 1;
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i99 := out_$i97;
    assume true;
    goto $bb38;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_5332;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_5331;

  $bb36:
    assume !(out_$i96 == 1);
    assume {:verifier.code 0} true;
    out_$i97 := out_$i82;
    goto $bb37;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    out_$i97 := out_$i95;
    goto $bb37;

  $bb35:
    assume out_$i96 == 1;
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    out_$i96 := $slt.i32(out_$i95, out_$i82);
    goto corral_source_split_5327;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5326;

  $bb33:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    out_$i95 := out_$i83;
    goto $bb34;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    out_$i95 := out_$i94;
    goto $bb34;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i91, out_$i93);
    call {:si_unique_call 810} {:cexpr "m"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(in_$p57, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_5321;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(in_$p57, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5320;

  $bb32:
    assume out_$i89 == 1;
    goto corral_source_split_5319;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    out_$i89 := $ugt.i32(out_$i86, out_$i88);
    goto corral_source_split_5317;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_5316;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p57, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5315;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    out_$i86 := $add.i32(out_$i85, out_$i83);
    goto corral_source_split_5314;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    out_$i85 := $load.i32($M.0, out_$p84);
    goto corral_source_split_5313;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p57, $mul.ref(0, 264)), $mul.ref(48, 1));
    goto corral_source_split_5312;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_$i83 := comedi_buf_read_n_available(in_$p49);
    call {:si_unique_call 809} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_5311;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i82 := $trunc.i64.i32(in_$i2);
    call {:si_unique_call 807} {:cexpr "n"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_5310;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, in_$p6, out_$i81);
    goto corral_source_split_5308;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(out_$p78, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 806} out_$i81 := devirtbounce.13(0, out_$p80, out_$i79, out_$p80);
    goto corral_source_split_5307;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    out_$i79 := $load.i64($M.41, in_$p6);
    goto corral_source_split_5306;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 805} out_$p78 := get_current();
    goto corral_source_split_5305;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $M.41 := $store.i64($M.41, in_$p6, 1);
    goto corral_source_split_5304;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, out_$p77, 0);
    goto corral_source_split_5303;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p76, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5302;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} out_$p76 := get_current();
    goto corral_source_split_5301;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb71:
    assume out_$i152 == 1;
    goto corral_source_split_5424;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71;

  $bb65_dummy:
    call {:si_unique_call 1} out_$p76, out_$p77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i99, out_$i152 := comedi_read_loop_$bb29(in_$p0, in_$i2, in_$p6, in_$p49, in_$p57, in_$i75, out_$p76, out_$p77, out_$p78, out_$i79, out_$p80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$p87, out_$i88, out_$i89, out_$p90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$p126, out_$i127, out_$p128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i99, out_$i152);
    return;

  exit:
    return;
}



procedure comedi_read_loop_$bb29(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p49: ref, in_$p57: ref, in_$i75: i1, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$p80: ref, in_$i81: i64, in_$i82: i32, in_$i83: i32, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$i91: i32, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i100: i32, in_$i101: i1, in_$i102: i8, in_$i103: i1, in_$i104: i32, in_$i105: i1, in_$i106: i32, in_$p114: ref, in_$i115: i32, in_$i116: i32, in_$i117: i1, in_$p118: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i64, in_$i124: i1, in_$p125: ref, in_$p126: ref, in_$i127: i64, in_$p128: ref, in_$i129: i64, in_$i130: i1, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i99: i32, in_$i152: i1) returns (out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$p80: ref, out_$i81: i64, out_$i82: i32, out_$i83: i32, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$i91: i32, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i100: i32, out_$i101: i1, out_$i102: i8, out_$i103: i1, out_$i104: i32, out_$i105: i1, out_$i106: i32, out_$p114: ref, out_$i115: i32, out_$i116: i32, out_$i117: i1, out_$p118: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i64, out_$i124: i1, out_$p125: ref, out_$p126: ref, out_$i127: i64, out_$p128: ref, out_$i129: i64, out_$i130: i1, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i99: i32, out_$i152: i1);
  modifies $M.41, $M.29;



implementation comedi_write_loop_$bb29(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p51: ref, in_$p59: ref, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$i83: i64, in_$i84: i32, in_$i85: i1, in_$i86: i8, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i122: i32, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$p131: ref, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$i136: i32, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i155: i64, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$i159: i64, in_$p160: ref, in_$i161: i64, in_$i162: i1, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i145: i32, in_$i183: i1, in_vslice_dummy_var_90: i32) returns (out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$i83: i64, out_$i84: i32, out_$i85: i1, out_$i86: i8, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i122: i32, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$p131: ref, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$i136: i32, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i155: i64, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$i159: i64, out_$p160: ref, out_$i161: i64, out_$i162: i1, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i145: i32, out_$i183: i1, out_vslice_dummy_var_90: i32)
{

  entry:
    out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$i156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$i145, out_$i183, out_vslice_dummy_var_90 := in_$p78, in_$p79, in_$p80, in_$i81, in_$p82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i122, in_$p123, in_$i124, in_$i125, in_$p126, in_$i127, in_$i128, in_$p129, in_$i130, in_$p131, in_$i132, in_$i133, in_$i134, in_$p135, in_$i136, in_$i138, in_$i139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$p146, in_$i147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$p154, in_$i155, in_$i156, in_$p157, in_$p158, in_$i159, in_$p160, in_$i161, in_$i162, in_$p164, in_$i165, in_$i166, in_$i167, in_$i145, in_$i183, in_vslice_dummy_var_90;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(0, 0);
    goto corral_source_split_5594;

  $bb81:
    assume {:verifier.code 0} true;
    assume in_$i77 == 1;
    goto $bb81_dummy;

  $bb80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81;

  $bb79:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 0);
    goto corral_source_split_5731;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    out_$i166 := $and.i32(out_$i165, 64);
    goto corral_source_split_5730;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.0, out_$p164);
    goto corral_source_split_5729;

  $bb77:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref($add.ref(in_$p59, $mul.ref(0, 264)), $mul.ref(80, 1)), $mul.ref(4, 1));
    goto corral_source_split_5728;

  $bb76:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    out_$i162 := $ne.i64(out_$i159, out_$i161);
    goto corral_source_split_5724;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    out_$i161 := $p2i.ref.i64(out_$p160);
    goto corral_source_split_5723;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    out_$p160 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_5722;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    out_$i159 := $p2i.ref.i64(out_$p158);
    goto corral_source_split_5721;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    out_$p158 := $load.ref($M.0, out_$p157);
    goto corral_source_split_5720;

  $bb74:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p51, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5719;

  $bb73:
    assume !(out_$i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i64(out_$i155, 0);
    goto corral_source_split_5715;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    out_$i155 := $p2i.ref.i64(out_$p154);
    goto corral_source_split_5714;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    out_$p154 := $load.ref($M.0, out_$p153);
    goto corral_source_split_5713;

  $bb71:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p51, $mul.ref(0, 296)), $mul.ref(56, 1));
    goto corral_source_split_5712;

  $bb70:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i32(out_$i151, 0);
    goto corral_source_split_5708;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} out_$i151 := signal_pending(out_$p150);
    call {:si_unique_call 881} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_5707;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} out_$p150 := get_current();
    goto corral_source_split_5706;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} schedule();
    goto corral_source_split_5705;

  $bb67:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i32(out_$i148, 0);
    goto corral_source_split_5701;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    out_$i148 := $and.i32(out_$i147, 2048);
    goto corral_source_split_5700;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i32($M.0, out_$p146);
    goto corral_source_split_5699;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref($add.ref(in_$p0, $mul.ref(0, 504)), $mul.ref(128, 1));
    goto corral_source_split_5698;

  $bb64:
    assume out_$i144 == 1;
    goto corral_source_split_5697;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    out_$i145 := out_$i143;
    assume true;
    goto $bb64;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 0);
    goto corral_source_split_5695;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_5694;

  $bb62:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    out_$i143 := out_$i122;
    goto $bb63;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    out_$i143 := out_$i141;
    goto $bb63;

  $bb61:
    assume out_$i142 == 1;
    goto corral_source_split_5692;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    out_$i142 := $slt.i32(out_$i141, out_$i122);
    goto corral_source_split_5690;

  $bb60:
    assume {:verifier.code 0} true;
    goto corral_source_split_5689;

  $bb59:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    out_$i141 := out_$i134;
    goto $bb60;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    out_$i141 := out_$i140;
    goto $bb60;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} out_$i140 := comedi_buf_write_n_allocated(in_$p51);
    call {:si_unique_call 877} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i140);
    goto corral_source_split_5687;

  $bb58:
    assume out_$i139 == 1;
    goto corral_source_split_5686;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    out_$i139 := $ugt.i32(out_$i134, out_$i138);
    goto corral_source_split_5684;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} out_$i138 := comedi_buf_write_n_allocated(in_$p51);
    call {:si_unique_call 875} {:cexpr "tmp___10"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_5683;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} out_vslice_dummy_var_90 := comedi_buf_write_alloc(in_$p51, out_$i136);
    goto corral_source_split_5682;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.0, out_$p135);
    goto corral_source_split_5681;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p59, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5680;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_5679;

  $bb56:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := out_$i122;
    goto $bb57;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    out_$i134 := out_$i133;
    goto $bb57;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    out_$i133 := $sub.i32(out_$i130, out_$i132);
    call {:si_unique_call 872} {:cexpr "m"} boogie_si_record_i32(out_$i133);
    goto corral_source_split_5677;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.0, out_$p131);
    goto corral_source_split_5676;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p59, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_5675;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    out_$i130 := $load.i32($M.0, out_$p129);
    goto corral_source_split_5674;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p59, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5673;

  $bb55:
    assume out_$i128 == 1;
    goto corral_source_split_5672;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    out_$i128 := $ugt.i32(out_$i125, out_$i127);
    goto corral_source_split_5670;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    out_$i127 := $load.i32($M.0, out_$p126);
    goto corral_source_split_5669;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p59, $mul.ref(0, 264)), $mul.ref(8, 1));
    goto corral_source_split_5668;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    out_$i125 := $add.i32(out_$i124, out_$i122);
    goto corral_source_split_5667;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, out_$p123);
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p59, $mul.ref(0, 264)), $mul.ref(44, 1));
    goto corral_source_split_5665;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i122 := $trunc.i64.i32(in_$i2);
    call {:si_unique_call 871} {:cexpr "n"} boogie_si_record_i32(out_$i122);
    goto corral_source_split_5664;

  $bb36:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    out_$i90 := out_$i84;
    assume true;
    goto $bb36;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    out_$i89 := $ne.i32(out_$i88, 0);
    goto corral_source_split_5613;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5612;

  $bb33:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    out_$i88 := 1;
    goto $bb34;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    out_$i88 := 0;
    goto $bb34;

  $bb32:
    assume out_$i87 == 1;
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$i87 := $trunc.i8.i1(out_$i86);
    goto corral_source_split_5608;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    out_$i86 := $zext.i1.i8(out_$i85);
    call {:si_unique_call 862} {:cexpr "tmp___7"} boogie_si_record_i8(out_$i86);
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} out_$i85 := comedi_is_runflags_running(out_$i84);
    goto corral_source_split_5606;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} out_$i84 := comedi_get_subdevice_runflags(in_$p51);
    call {:si_unique_call 860} {:cexpr "runflags"} boogie_si_record_i32(out_$i84);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, in_$p6, out_$i83);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref($add.ref(out_$p80, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 858} out_$i83 := devirtbounce.13(0, out_$p82, out_$i81, out_$p82);
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i64($M.43, in_$p6);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_$p80 := get_current();
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.43 := $store.i64($M.43, in_$p6, 1);
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, out_$p79, 0);
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_5597;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} out_$p78 := get_current();
    goto corral_source_split_5596;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb87:
    assume out_$i183 == 1;
    goto corral_source_split_5755;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87;

  $bb81_dummy:
    call {:si_unique_call 1} out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$i156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$i145, out_$i183, out_vslice_dummy_var_90 := comedi_write_loop_$bb29(in_$p0, in_$i2, in_$p6, in_$p51, in_$p59, in_$i77, out_$p78, out_$p79, out_$p80, out_$i81, out_$p82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i122, out_$p123, out_$i124, out_$i125, out_$p126, out_$i127, out_$i128, out_$p129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$p135, out_$i136, out_$i138, out_$i139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$p146, out_$i147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$p154, out_$i155, out_$i156, out_$p157, out_$p158, out_$i159, out_$p160, out_$i161, out_$i162, out_$p164, out_$i165, out_$i166, out_$i167, out_$i145, out_$i183, out_vslice_dummy_var_90);
    return;

  exit:
    return;
}



procedure comedi_write_loop_$bb29(in_$p0: ref, in_$i2: i64, in_$p6: ref, in_$p51: ref, in_$p59: ref, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i64, in_$p82: ref, in_$i83: i64, in_$i84: i32, in_$i85: i1, in_$i86: i8, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i122: i32, in_$p123: ref, in_$i124: i32, in_$i125: i32, in_$p126: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$p131: ref, in_$i132: i32, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$i136: i32, in_$i138: i32, in_$i139: i1, in_$i140: i32, in_$i141: i32, in_$i142: i1, in_$i143: i32, in_$i144: i1, in_$p146: ref, in_$i147: i32, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$p154: ref, in_$i155: i64, in_$i156: i1, in_$p157: ref, in_$p158: ref, in_$i159: i64, in_$p160: ref, in_$i161: i64, in_$i162: i1, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$i167: i1, in_$i145: i32, in_$i183: i1, in_vslice_dummy_var_90: i32) returns (out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i64, out_$p82: ref, out_$i83: i64, out_$i84: i32, out_$i85: i1, out_$i86: i8, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i122: i32, out_$p123: ref, out_$i124: i32, out_$i125: i32, out_$p126: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$p131: ref, out_$i132: i32, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$i136: i32, out_$i138: i32, out_$i139: i1, out_$i140: i32, out_$i141: i32, out_$i142: i1, out_$i143: i32, out_$i144: i1, out_$p146: ref, out_$i147: i32, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$p154: ref, out_$i155: i64, out_$i156: i1, out_$p157: ref, out_$p158: ref, out_$i159: i64, out_$p160: ref, out_$i161: i64, out_$i162: i1, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$i167: i1, out_$i145: i32, out_$i183: i1, out_vslice_dummy_var_90: i32);
  modifies $M.0, $M.43, $M.29;



implementation comedi_mmap_loop_$bb42(in_$p1: ref, in_$p4: ref, in_$i85: i32, in_$p86: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$i106: i64, in_$i107: i64, in_$i108: i64, in_$p109: ref, in_$i110: i64, in_$i111: i32, in_$i112: i1, in_$i113: i64, in_$i114: i32, in_$i115: i1, in_$i93: i32, in_$i94: i64) returns (out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$i106: i64, out_$i107: i64, out_$i108: i64, out_$p109: ref, out_$i110: i64, out_$i111: i32, out_$i112: i1, out_$i113: i64, out_$i114: i32, out_$i115: i1, out_$i93: i32, out_$i94: i64)
{

  entry:
    out_$p95, out_$p96, out_$i97, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i93, out_$i94 := in_$p95, in_$p96, in_$i97, in_$p99, in_$p100, in_$p101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i93, in_$i94;
    goto $bb42, exit;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6278;

  $bb47:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i93, out_$i94 := out_$i114, out_$i113;
    goto $bb47_dummy;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i114, in_$i85);
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$i114 := $add.i32(out_$i93, 1);
    call {:si_unique_call 1015} {:cexpr "i"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_6303;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i64(out_$i94, 4096);
    call {:si_unique_call 1014} {:cexpr "start"} boogie_si_record_i64(out_$i113);
    goto corral_source_split_6302;

  $bb45:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} out_$i111 := remap_pfn_range(in_$p1, out_$i94, out_$i108, 4096, out_$i110);
    call {:si_unique_call 1013} {:cexpr "tmp___3"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i64($M.46, out_$p109);
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$i108 := $sdiv.i64(out_$i107, 64);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$i107 := $add.i64(out_$i106, 24189255811072);
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$i106 := $p2i.ref.i64(out_$p105);
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref(out_$i104, 64));
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i104 := $lshr.i64(out_$i103, 12);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} out_$i103 := __phys_addr(out_$i102);
    call {:si_unique_call 1011} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    out_$i102 := $p2i.ref.i64(out_$p101);
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$p101 := $load.ref($M.0, out_$p100);
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p96, $mul.ref(out_$i97, 16)), $mul.ref(0, 1));
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $M.46 := $store.i64($M.46, out_$p99, $sub.i64(0, 9223372036854775769));
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i93);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_6281;

  $bb43:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p86, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6280;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p95, out_$p96, out_$i97, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i93, out_$i94 := comedi_mmap_loop_$bb42(in_$p1, in_$p4, in_$i85, in_$p86, out_$p95, out_$p96, out_$i97, out_$p99, out_$p100, out_$p101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i93, out_$i94);
    return;

  exit:
    return;
}



procedure comedi_mmap_loop_$bb42(in_$p1: ref, in_$p4: ref, in_$i85: i32, in_$p86: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$p100: ref, in_$p101: ref, in_$i102: i64, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$i106: i64, in_$i107: i64, in_$i108: i64, in_$p109: ref, in_$i110: i64, in_$i111: i32, in_$i112: i1, in_$i113: i64, in_$i114: i32, in_$i115: i1, in_$i93: i32, in_$i94: i64) returns (out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$p100: ref, out_$p101: ref, out_$i102: i64, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$i106: i64, out_$i107: i64, out_$i108: i64, out_$p109: ref, out_$i110: i64, out_$i111: i32, out_$i112: i1, out_$i113: i64, out_$i114: i32, out_$i115: i1, out_$i93: i32, out_$i94: i64);
  modifies $M.54, $CurrAddr, $M.46;



implementation comedi_close_loop_$bb6(in_$p1: ref, in_$p6: ref, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i15: i32, in_vslice_dummy_var_95: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i15: i32, out_vslice_dummy_var_95: i32)
{

  entry:
    out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i15, out_vslice_dummy_var_95 := in_$p16, in_$p17, in_$i18, in_$p19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p27, in_$p28, in_$i29, in_$p30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$i36, in_$i15, in_vslice_dummy_var_95;
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6491;

  $bb14:
    assume out_$i36 == 1;
    assume {:verifier.code 0} true;
    out_$i15 := out_$i34;
    goto $bb14_dummy;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    out_$i36 := $sgt.i32(out_$i35, out_$i34);
    goto corral_source_split_6520;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, in_$p12);
    goto corral_source_split_6519;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1043} {:cexpr "i"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_6518;

  $bb12:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p33, $0.ref);
    goto corral_source_split_6516;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 296)), $mul.ref(48, 1));
    goto corral_source_split_6515;

  $bb11:
    assume out_$i32 == 1;
    goto corral_source_split_6514;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    out_$i32 := $eq.i64(out_$i29, out_$i31);
    goto corral_source_split_6512;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_6511;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    out_$p30 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_6510;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_6509;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_6508;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 296)), $mul.ref(48, 1));
    goto corral_source_split_6507;

  $bb9:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_462:
    goto corral_source_split_6505;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} out_vslice_dummy_var_95 := do_cancel(in_$p6, out_$p19);
    goto SeqInstr_461;

  $bb8:
    assume out_$i25 == 1;
    goto corral_source_split_6504;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    out_$i25 := $eq.i64(out_$i22, out_$i24);
    goto corral_source_split_6502;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_6501;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_6500;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_6499;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_6498;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 296)), $mul.ref(56, 1));
    goto corral_source_split_6497;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(out_$p17, $mul.ref(out_$i18, 296));
    goto corral_source_split_6496;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_6495;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_6494;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p6, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_6493;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i15, out_vslice_dummy_var_95 := comedi_close_loop_$bb6(in_$p1, in_$p6, in_$p12, out_$p16, out_$p17, out_$i18, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p27, out_$p28, out_$i29, out_$p30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$i36, out_$i15, out_vslice_dummy_var_95);
    return;

  exit:
    return;
}



procedure comedi_close_loop_$bb6(in_$p1: ref, in_$p6: ref, in_$p12: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$i36: i1, in_$i15: i32, in_vslice_dummy_var_95: i32) returns (out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$i36: i1, out_$i15: i32, out_vslice_dummy_var_95: i32);
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.54, $M.2, $M.28, $M.23, $CurrAddr, $M.3, assertsPassed, $M.24, $M.25;



implementation comedi_subdevice_from_minor_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} comedi_subdevice_from_minor_loop_$bb3();
    return;

  exit:
    return;
}



procedure comedi_subdevice_from_minor_loop_$bb3();



implementation compat_insnlist_loop_$bb27(in_$i23: i32, in_$p33: ref, in_$p39: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i67: i32) returns (out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i67: i32)
{

  entry:
    out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i67 := in_$p68, in_$p69, in_$i70, in_$p71, in_$i72, in_$p73, in_$i74, in_$i75, in_$i76, in_$i77, in_$i78, in_$i67;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_7140;

  $bb32:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := out_$i77;
    goto $bb32_dummy;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    out_$i78 := $ult.i32(out_$i77, in_$i23);
    goto corral_source_split_7154;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i67, 1);
    call {:si_unique_call 1214} {:cexpr "n"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_7153;

  $bb30:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    out_$i76 := out_$i74;
    assume true;
    goto $bb30;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    out_$i75 := $ne.i32(out_$i74, 0);
    goto corral_source_split_7149;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} out_$i74 := get_compat_insn(out_$p71, out_$p73);
    call {:si_unique_call 1213} {:cexpr "rc"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_7148;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref(in_$p33, $mul.ref(out_$i72, 32));
    goto corral_source_split_7147;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i32.i64(out_$i67);
    goto corral_source_split_7146;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref(out_$p69, $mul.ref(out_$i70, 40));
    goto corral_source_split_7145;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i32.i64(out_$i67);
    goto corral_source_split_7144;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(out_$p68);
    goto corral_source_split_7143;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p39, $mul.ref(0, 56)), $mul.ref(16, 1));
    goto corral_source_split_7142;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i67 := compat_insnlist_loop_$bb27(in_$i23, in_$p33, in_$p39, out_$p68, out_$p69, out_$i70, out_$p71, out_$i72, out_$p73, out_$i74, out_$i75, out_$i76, out_$i77, out_$i78, out_$i67);
    return;

  exit:
    return;
}



procedure compat_insnlist_loop_$bb27(in_$i23: i32, in_$p33: ref, in_$p39: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$p71: ref, in_$i72: i64, in_$p73: ref, in_$i74: i32, in_$i75: i1, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i67: i32) returns (out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$p71: ref, out_$i72: i64, out_$p73: ref, out_$i74: i32, out_$i75: i1, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i67: i32);
  modifies $M.57, $CurrAddr;



implementation do_subdinfo_ioctl_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i14: i32)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i14 := in_$p15, in_$p16, in_$i17, in_$p18, in_$i19, in_$p21, in_$i22, in_$p23, in_$p24, in_$i25, in_$p26, in_$p27, in_$i28, in_$p29, in_$i30, in_$i31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$p40, in_$p41, in_$i42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p49, in_$p50, in_$p51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$p57, in_$i58, in_$i59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$p69, in_$i70, in_$i71, in_$p72, in_$p73, in_$p74, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$p80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$p89, in_$p90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$i96, in_$p97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$p108, in_$p109, in_$p110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8065;

  $bb43:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i123;
    goto $bb43_dummy;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    out_$i125 := $sgt.i32(out_$i124, out_$i123);
    goto corral_source_split_8229;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i32($M.0, in_$p11);
    goto corral_source_split_8228;

  $bb42:
    assume {:verifier.code 0} true;
    out_$i123 := $add.i32(out_$i14, 1);
    call {:si_unique_call 1497} {:cexpr "i"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_8227;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p122, 2);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p121, 1);
    goto corral_source_split_8222;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_8221;

  $bb40:
    assume out_$i120 == 1;
    goto corral_source_split_8220;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i64(out_$i119, $p2i.ref.i64(insn_inval));
    goto corral_source_split_8218;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_8217;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    goto corral_source_split_8216;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(200, 1));
    goto corral_source_split_8215;

  $bb38:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p116, out_$i115);
    goto corral_source_split_8213;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8212;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    out_$i115 := $or.i32(out_$i114, 4096);
    goto corral_source_split_8211;

  corral_source_split_8209:
    assume {:verifier.code 0} true;
    out_$i114 := $load.i32($M.0, out_$p113);
    goto corral_source_split_8210;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8209;

  $bb37:
    assume out_$i112 == 1;
    goto corral_source_split_8208;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i64(out_$i111, 0);
    goto corral_source_split_8206;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    out_$i111 := $p2i.ref.i64(out_$p110);
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    out_$p110 := $load.ref($M.0, out_$p109);
    goto corral_source_split_8204;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(216, 1));
    goto corral_source_split_8203;

  $bb35:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p108, out_$i107);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$i107 := $or.i32(out_$i106, 64);
    goto corral_source_split_8199;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.0, out_$p105);
    goto corral_source_split_8198;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8197;

  $bb34:
    assume out_$i104 == 1;
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i103, 0);
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    out_$i103 := $p2i.ref.i64(out_$p102);
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    out_$p102 := $load.ref($M.0, out_$p101);
    goto corral_source_split_8192;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(168, 1));
    goto corral_source_split_8191;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p100, out_$i99);
    goto corral_source_split_8189;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8188;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    out_$i99 := $or.i32(out_$i98, 16);
    goto corral_source_split_8187;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    out_$i98 := $load.i32($M.0, out_$p97);
    goto corral_source_split_8186;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8185;

  $bb31:
    assume out_$i96 == 1;
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i64(out_$i95, 0);
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    out_$i95 := $p2i.ref.i64(out_$p94);
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_8180;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(152, 1));
    goto corral_source_split_8179;

  $bb28:
    assume out_$i92 == 1;
    goto corral_source_split_8178;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i91, 0);
    goto corral_source_split_8176;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    out_$i91 := $load.i32($M.0, out_$p90);
    goto corral_source_split_8175;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p90 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(148, 1));
    goto corral_source_split_8174;

  $bb26:
    assume !(out_$i85 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p89, out_$i88);
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8171;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    out_$i88 := $or.i32(out_$i87, 8);
    goto corral_source_split_8170;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i32($M.0, out_$p86);
    goto corral_source_split_8169;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8168;

  $bb25:
    assume out_$i85 == 1;
    goto corral_source_split_8167;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    out_$i85 := $eq.i64(out_$i83, out_$i84);
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    out_$i84 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_8164;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i83 := $p2i.ref.i64(out_$p82);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$p82 := $load.ref($M.0, out_$p81);
    goto corral_source_split_8162;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(48, 1));
    goto corral_source_split_8161;

  $bb23:
    assume !(out_$i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p80, out_$i79);
    goto corral_source_split_8159;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8158;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    out_$i79 := $or.i32(out_$i78, 4);
    goto corral_source_split_8157;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i32($M.0, out_$p77);
    goto corral_source_split_8156;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8155;

  $bb22:
    assume out_$i76 == 1;
    goto corral_source_split_8154;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    out_$i76 := $ne.i64(out_$i75, 0);
    goto corral_source_split_8152;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    out_$i75 := $p2i.ref.i64(out_$p74);
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_8150;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(48, 1));
    goto corral_source_split_8149;

  $bb20:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p72, out_$i71);
    goto corral_source_split_8147;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    out_$i71 := $or.i32(out_$i70, 2);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i32($M.0, out_$p69);
    goto corral_source_split_8144;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8143;

  $bb19:
    assume out_$i68 == 1;
    goto corral_source_split_8142;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$i68 := $eq.i64(out_$i66, out_$i67);
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$i67 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_8138;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_8137;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(56, 1));
    goto corral_source_split_8136;

  $bb17:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p63, out_$i62);
    goto corral_source_split_8134;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    out_$i62 := $or.i32(out_$i61, 1);
    goto corral_source_split_8132;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_8131;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8130;

  $bb16:
    assume out_$i59 == 1;
    goto corral_source_split_8129;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i64(out_$i58, 0);
    goto corral_source_split_8127;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    out_$i58 := $p2i.ref.i64(out_$p57);
    goto corral_source_split_8126;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_8125;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(56, 1));
    goto corral_source_split_8124;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p55, 0);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p54, out_$i53);
    goto corral_source_split_8119;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_8118;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    out_$i53 := $or.i32(out_$i48, out_$i52);
    goto corral_source_split_8117;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_8116;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p50, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8115;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    out_$p50 := $load.ref($M.0, out_$p49);
    goto corral_source_split_8114;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(160, 1));
    goto corral_source_split_8113;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$i48 := $shl.i32(out_$i14, 24);
    goto corral_source_split_8112;

  $bb13:
    assume out_$i47 == 1;
    goto corral_source_split_8111;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i64(out_$i46, 0);
    goto corral_source_split_8109;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_8108;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_8107;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(160, 1));
    goto corral_source_split_8106;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p43, out_$i42);
    goto corral_source_split_8105;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(20, 1));
    goto corral_source_split_8104;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_8103;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(148, 1));
    goto corral_source_split_8102;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p40, out_$i39);
    goto corral_source_split_8101;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(16, 1));
    goto corral_source_split_8100;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_8099;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(24, 1));
    goto corral_source_split_8098;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p37, 5);
    goto corral_source_split_8097;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(12, 1));
    goto corral_source_split_8096;

  $bb11:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p36, out_$i35);
    goto corral_source_split_8094;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8093;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    out_$i35 := $or.i32(out_$i34, 134217728);
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_8091;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8090;

  $bb10:
    assume out_$i32 == 1;
    goto corral_source_split_8089;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    out_$i32 := $trunc.i8.i1(out_$i31);
    goto corral_source_split_8087;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    out_$i31 := $zext.i1.i8(out_$i30);
    call {:si_unique_call 1496} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i31);
    goto corral_source_split_8086;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} out_$i30 := comedi_is_subdevice_running(out_$p18);
    goto corral_source_split_8085;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p29, out_$i28);
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(8, 1));
    goto corral_source_split_8083;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    out_$i28 := $load.i32($M.0, out_$p27);
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(20, 1));
    goto corral_source_split_8081;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p26, out_$i25);
    goto corral_source_split_8080;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(4, 1));
    goto corral_source_split_8079;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_8078;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(16, 1));
    goto corral_source_split_8077;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p23, out_$i22);
    goto corral_source_split_8076;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(0, 1));
    goto corral_source_split_8075;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, out_$p21);
    goto corral_source_split_8074;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p16, $mul.ref(out_$i17, 296)), $mul.ref(12, 1));
    goto corral_source_split_8073;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    goto corral_source_split_8072;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i14);
    goto corral_source_split_8071;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(out_$i17, 296));
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i14);
    goto corral_source_split_8069;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_8068;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_8067;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(28, 1));
    goto corral_source_split_8122;

  $bb14:
    assume !(out_$i47 == 1);
    goto corral_source_split_8121;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb30;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i96 == 1);
    goto $bb30;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p7, $mul.ref(out_$i19, 72)), $mul.ref(36, 1));
    goto corral_source_split_8225;

  $bb41:
    assume !(out_$i120 == 1);
    goto corral_source_split_8224;

  $bb43_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i14 := do_subdinfo_ioctl_loop_$bb8(in_$p0, in_$p2, in_$p7, in_$p11, out_$p15, out_$p16, out_$i17, out_$p18, out_$i19, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$p26, out_$p27, out_$i28, out_$p29, out_$i30, out_$i31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$p40, out_$p41, out_$i42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p49, out_$p50, out_$p51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$i58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$p69, out_$i70, out_$i71, out_$p72, out_$p73, out_$p74, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$p80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$p90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$p108, out_$p109, out_$p110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i14);
    return;

  exit:
    return;
}



procedure do_subdinfo_ioctl_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p11: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p18: ref, in_$i19: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$p27: ref, in_$i28: i32, in_$p29: ref, in_$i30: i1, in_$i31: i8, in_$i32: i1, in_$p33: ref, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$p40: ref, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1, in_$i48: i32, in_$p49: ref, in_$p50: ref, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$i58: i64, in_$i59: i1, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i64, in_$i68: i1, in_$p69: ref, in_$i70: i32, in_$i71: i32, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$i75: i64, in_$i76: i1, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$p80: ref, in_$p81: ref, in_$p82: ref, in_$i83: i64, in_$i84: i64, in_$i85: i1, in_$p86: ref, in_$i87: i32, in_$i88: i32, in_$p89: ref, in_$p90: ref, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$p94: ref, in_$i95: i64, in_$i96: i1, in_$p97: ref, in_$i98: i32, in_$i99: i32, in_$p100: ref, in_$p101: ref, in_$p102: ref, in_$i103: i64, in_$i104: i1, in_$p105: ref, in_$i106: i32, in_$i107: i32, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i112: i1, in_$p113: ref, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i1, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i14: i32) returns (out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p18: ref, out_$i19: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$p27: ref, out_$i28: i32, out_$p29: ref, out_$i30: i1, out_$i31: i8, out_$i32: i1, out_$p33: ref, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$p40: ref, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1, out_$i48: i32, out_$p49: ref, out_$p50: ref, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$i58: i64, out_$i59: i1, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i64, out_$i68: i1, out_$p69: ref, out_$i70: i32, out_$i71: i32, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$i75: i64, out_$i76: i1, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$p80: ref, out_$p81: ref, out_$p82: ref, out_$i83: i64, out_$i84: i64, out_$i85: i1, out_$p86: ref, out_$i87: i32, out_$i88: i32, out_$p89: ref, out_$p90: ref, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$p94: ref, out_$i95: i64, out_$i96: i1, out_$p97: ref, out_$i98: i32, out_$i99: i32, out_$p100: ref, out_$p101: ref, out_$p102: ref, out_$i103: i64, out_$i104: i1, out_$p105: ref, out_$i106: i32, out_$i107: i32, out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i112: i1, out_$p113: ref, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i1, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i14: i32);
  modifies $M.0;



implementation do_chaninfo_ioctl_loop_$bb31(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$i17: i64, in_$p54: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32) returns (out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32)
{

  entry:
    out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i57 := in_$p58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$p75, in_$p76, in_$i77, in_$p78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$i57;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_8327;

  $bb37:
    assume out_$i83 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i81;
    goto $bb37_dummy;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    out_$i83 := $sgt.i32(out_$i82, out_$i81);
    goto corral_source_split_8358;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    out_$i82 := $load.i32($M.0, in_$p54);
    goto corral_source_split_8357;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i57, 1);
    call {:si_unique_call 1511} {:cexpr "i"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_8356;

  $bb35:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i32(out_$i79, 0);
    goto corral_source_split_8352;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref(out_$p76, $mul.ref(out_$i77, 4));
    call {:si_unique_call 1509} out_$i79 := devirtbounce.24(0, out_$i74, out_$p78);
    call {:si_unique_call 1510} {:cexpr "__ret_pu"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_8350;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$i77 := $sext.i32.i64(out_$i57);
    goto corral_source_split_8349;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_8348;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(in_$p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_8347;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} __might_fault(.str.4, 1085);
    goto corral_source_split_8346;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    out_$i74 := $or.i32(out_$i66, out_$i73);
    call {:si_unique_call 1507} {:cexpr "x"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_8345;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i32($M.0, out_$p72);
    goto corral_source_split_8344;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p71, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_8343;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    out_$p71 := $load.ref($M.0, out_$p70);
    goto corral_source_split_8342;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref(out_$p68, $mul.ref(out_$i69, 8));
    goto corral_source_split_8341;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    out_$i69 := $sext.i32.i64(out_$i57);
    goto corral_source_split_8340;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_8339;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p14, $mul.ref(in_$i17, 296)), $mul.ref(168, 1));
    goto corral_source_split_8338;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    out_$i66 := $or.i32(out_$i64, out_$i65);
    goto corral_source_split_8337;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    out_$i65 := $shl.i32(out_$i57, 16);
    goto corral_source_split_8336;

  corral_source_split_8334:
    assume {:verifier.code 0} true;
    out_$i64 := $or.i32(out_$i60, out_$i63);
    goto corral_source_split_8335;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$i63 := $shl.i32(out_$i62, 24);
    goto corral_source_split_8334;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(in_$p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_8332;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    out_$i60 := $shl.i32(out_$i59, 28);
    goto corral_source_split_8331;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_8330;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(40, 1));
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i57 := do_chaninfo_ioctl_loop_$bb31(in_$p0, in_$p2, in_$p14, in_$i17, in_$p54, out_$p58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$p75, out_$p76, out_$i77, out_$p78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$i57);
    return;

  exit:
    return;
}



procedure do_chaninfo_ioctl_loop_$bb31(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$i17: i64, in_$p54: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$p67: ref, in_$p68: ref, in_$i69: i64, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i32, in_$i74: i32, in_$p75: ref, in_$p76: ref, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$i57: i32) returns (out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$p67: ref, out_$p68: ref, out_$i69: i64, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i32, out_$i74: i32, out_$p75: ref, out_$p76: ref, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$i57: i32);



implementation do_insnlist_ioctl_loop_$bb21(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$p24: ref, in_$p55: ref, in_$i61: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i85: i64, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i105: i32, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i130: i64, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$p144: ref, in_$i145: i32, in_$i146: i64, in_$i147: i64, in_$i148: i64, in_$i149: i1, in_$i150: i32, in_$i169: i1, in_$i170: i8, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i60: i32, in_$i175: i32, in_$i176: i32) returns (out_$i61: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i85: i64, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i105: i32, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i130: i64, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$p144: ref, out_$i145: i32, out_$i146: i64, out_$i147: i64, out_$i148: i64, out_$i149: i1, out_$i150: i32, out_$i169: i1, out_$i170: i8, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i60: i32, out_$i175: i32, out_$i176: i32)
{

  entry:
    out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i85, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i60, out_$i175, out_$i176 := in_$i61, in_$p63, in_$i64, in_$i65, in_$i66, in_$i85, in_$p87, in_$i88, in_$i89, in_$i90, in_$p91, in_$i92, in_$p94, in_$p95, in_$p96, in_$i97, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p138, in_$p139, in_$p140, in_$p141, in_$i142, in_$p144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$i169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i60, in_$i175, in_$i176;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_9192;

  $bb53:
    assume out_$i174 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := out_$i172;
    goto $bb53_dummy;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    out_$i175, out_$i176 := out_$i172, out_$i126;
    assume true;
    goto $bb53;

  corral_source_split_9348:
    assume {:verifier.code 0} true;
    out_$i174 := $ult.i32(out_$i172, out_$i173);
    goto corral_source_split_9349;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    out_$i173 := $load.i32($M.0, in_$p55);
    goto corral_source_split_9348;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i172 := $add.i32(out_$i60, 1);
    call {:si_unique_call 1638} {:cexpr "i"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_9347;

  $bb51:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9345:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} schedule();
    goto corral_source_split_9345;

  $bb50:
    assume out_$i171 == 1;
    goto corral_source_split_9344;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    out_$i171 := $trunc.i8.i1(out_$i170);
    goto corral_source_split_9342;

  corral_source_split_9340:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i1.i8(out_$i169);
    call {:si_unique_call 1636} {:cexpr "tmp___9"} boogie_si_record_i8(out_$i170);
    goto corral_source_split_9341;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} out_$i169 := need_resched();
    goto corral_source_split_9340;

  $bb42:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb44:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    out_$i150 := out_$i60;
    assume true;
    goto $bb44;

  corral_source_split_9308:
    assume {:verifier.code 0} true;
    out_$i149 := $ne.i64(out_$i148, 0);
    goto corral_source_split_9309;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} out_$i148 := copy_to_user(out_$p140, out_$p141, out_$i147);
    call {:si_unique_call 1631} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i148);
    goto corral_source_split_9308;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    out_$i147 := $mul.i64(out_$i146, 4);
    goto corral_source_split_9307;

  corral_source_split_9305:
    assume {:verifier.code 0} true;
    out_$i146 := $zext.i32.i64(out_$i145);
    goto corral_source_split_9306;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.0, out_$p144);
    goto corral_source_split_9305;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(in_$p24, $mul.ref(out_$i142, 40)), $mul.ref(4, 1));
    goto corral_source_split_9304;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    goto corral_source_split_9303;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    out_$i142 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9302;

  corral_source_split_9300:
    assume {:verifier.code 0} true;
    out_$p141 := $bitcast.ref.ref(in_$p14);
    goto corral_source_split_9301;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    out_$p140 := $bitcast.ref.ref(out_$p139);
    goto corral_source_split_9300;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_9299;

  corral_source_split_9297:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p24, $mul.ref(out_$i136, 40)), $mul.ref(8, 1));
    goto corral_source_split_9298;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    goto corral_source_split_9297;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    out_$i136 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9296;

  $bb41:
    assume out_$i135 == 1;
    goto corral_source_split_9295;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_9292:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i32(out_$i134, 0);
    goto corral_source_split_9293;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    out_$i134 := $and.i32(out_$i133, 67108864);
    goto corral_source_split_9292;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_9291;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p24, $mul.ref(out_$i130, 40)), $mul.ref(0, 1));
    goto corral_source_split_9290;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    goto corral_source_split_9289;

  $bb40:
    assume {:verifier.code 0} true;
    out_$i130 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9288;

  $bb39:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_9284:
    assume {:verifier.code 0} true;
    out_$i128, out_$i129 := out_$i60, out_$i126;
    assume true;
    goto $bb39;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i126, 0);
    goto corral_source_split_9284;

  SeqInstr_519:
    call {:si_unique_call 1629} {:cexpr "ret"} boogie_si_record_i32(out_$i126);
    goto corral_source_split_9283;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} out_$i126 := parse_insn(in_$p0, out_$p125, in_$p14, in_$p2);
    goto SeqInstr_518;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref(in_$p24, $mul.ref(out_$i124, 40));
    goto corral_source_split_9282;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i124 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9281;

  $bb30:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    out_$i105 := out_$i60;
    assume true;
    goto $bb32;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    out_$i104 := $ne.i64(out_$i103, 0);
    goto corral_source_split_9250;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} out_$i103 := copy_from_user(out_$p91, out_$p96, out_$i102);
    call {:si_unique_call 1624} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_9249;

  corral_source_split_9247:
    assume {:verifier.code 0} true;
    out_$i102 := $mul.i64(out_$i101, 4);
    goto corral_source_split_9248;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i32.i64(out_$i100);
    goto corral_source_split_9247;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i32($M.0, out_$p99);
    goto corral_source_split_9246;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p24, $mul.ref(out_$i97, 40)), $mul.ref(4, 1));
    goto corral_source_split_9245;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    goto corral_source_split_9244;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9243;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    out_$p96 := $bitcast.ref.ref(out_$p95);
    goto corral_source_split_9242;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_9241;

  corral_source_split_9239:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p24, $mul.ref(out_$i92, 40)), $mul.ref(8, 1));
    goto corral_source_split_9240;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    goto corral_source_split_9239;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    out_$i92 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9238;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(in_$p14);
    goto corral_source_split_9237;

  $bb29:
    assume out_$i90 == 1;
    goto corral_source_split_9236;

  corral_source_split_9234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    out_$i90 := $ne.i32(out_$i89, 0);
    goto corral_source_split_9234;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i32(out_$i88, 134217728);
    goto corral_source_split_9233;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    goto corral_source_split_9232;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p24, $mul.ref(out_$i85, 40)), $mul.ref(0, 1));
    goto corral_source_split_9231;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    goto corral_source_split_9230;

  $bb28:
    assume {:verifier.code 0} true;
    out_$i85 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9229;

  $bb24:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    out_$i66 := out_$i60;
    assume true;
    goto $bb24;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    out_$i65 := $ugt.i32(out_$i64, 256);
    goto corral_source_split_9198;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i32($M.0, out_$p63);
    goto corral_source_split_9197;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p24, $mul.ref(out_$i61, 40)), $mul.ref(4, 1));
    goto corral_source_split_9196;

  corral_source_split_9194:
    assume {:verifier.code 0} true;
    goto corral_source_split_9195;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i60);
    goto corral_source_split_9194;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb53_dummy:
    call {:si_unique_call 1} out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i85, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i60, out_$i175, out_$i176 := do_insnlist_ioctl_loop_$bb21(in_$p0, in_$p2, in_$p14, in_$p24, in_$p55, out_$i61, out_$p63, out_$i64, out_$i65, out_$i66, out_$i85, out_$p87, out_$i88, out_$i89, out_$i90, out_$p91, out_$i92, out_$p94, out_$p95, out_$p96, out_$i97, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p138, out_$p139, out_$p140, out_$p141, out_$i142, out_$p144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$i169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i60, out_$i175, out_$i176);
    return;

  exit:
    return;
}



procedure do_insnlist_ioctl_loop_$bb21(in_$p0: ref, in_$p2: ref, in_$p14: ref, in_$p24: ref, in_$p55: ref, in_$i61: i64, in_$p63: ref, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i85: i64, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$i92: i64, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$p99: ref, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i103: i64, in_$i104: i1, in_$i105: i32, in_$i124: i64, in_$p125: ref, in_$i126: i32, in_$i127: i1, in_$i128: i32, in_$i129: i32, in_$i130: i64, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$i135: i1, in_$i136: i64, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$i142: i64, in_$p144: ref, in_$i145: i32, in_$i146: i64, in_$i147: i64, in_$i148: i64, in_$i149: i1, in_$i150: i32, in_$i169: i1, in_$i170: i8, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i60: i32, in_$i175: i32, in_$i176: i32) returns (out_$i61: i64, out_$p63: ref, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i85: i64, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$i92: i64, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$p99: ref, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i103: i64, out_$i104: i1, out_$i105: i32, out_$i124: i64, out_$p125: ref, out_$i126: i32, out_$i127: i1, out_$i128: i32, out_$i129: i32, out_$i130: i64, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$i135: i1, out_$i136: i64, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$i142: i64, out_$p144: ref, out_$i145: i32, out_$i146: i64, out_$i147: i64, out_$i148: i64, out_$i149: i1, out_$i150: i32, out_$i169: i1, out_$i170: i8, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i60: i32, out_$i175: i32, out_$i176: i32);
  modifies $M.0, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $CurrAddr, $M.2, $M.28, $M.23, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.3, $M.25, $M.54, assertsPassed;



implementation parse_insn_loop_$bb110(in_$p2: ref, in_$i305: i32, in_$p308: ref, in_$i312: i64, in_$p313: ref, in_$i314: i32, in_$i315: i1, in_$i335: i32, in_$i336: i32, in_$i337: i1, in_$i311: i32) returns (out_$i312: i64, out_$p313: ref, out_$i314: i32, out_$i315: i1, out_$i335: i32, out_$i336: i32, out_$i337: i1, out_$i311: i32)
{

  entry:
    out_$i312, out_$p313, out_$i314, out_$i315, out_$i335, out_$i336, out_$i337, out_$i311 := in_$i312, in_$p313, in_$i314, in_$i315, in_$i335, in_$i336, in_$i337, in_$i311;
    goto $bb110, exit;

  $bb110:
    assume {:verifier.code 0} true;
    goto corral_source_split_10055;

  $bb119:
    assume out_$i337 == 1;
    assume {:verifier.code 0} true;
    out_$i311 := out_$i335;
    goto $bb119_dummy;

  corral_source_split_10096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    out_$i337 := $ult.i32(out_$i335, out_$i336);
    goto corral_source_split_10096;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    out_$i336 := $load.i32($M.0, in_$p308);
    goto corral_source_split_10095;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i335 := $add.i32(out_$i311, 1);
    call {:si_unique_call 1720} {:cexpr "i"} boogie_si_record_i32(out_$i335);
    goto corral_source_split_10094;

  $bb113:
    assume !(out_$i315 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    out_$i315 := $ugt.i32(out_$i314, in_$i305);
    goto corral_source_split_10060;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.0, out_$p313);
    goto corral_source_split_10059;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$p313 := $add.ref(in_$p2, $mul.ref(out_$i312, 4));
    goto corral_source_split_10058;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i312 := $sext.i32.i64(out_$i311);
    goto corral_source_split_10057;

  corral_source_split_10055:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb119_dummy:
    call {:si_unique_call 1} out_$i312, out_$p313, out_$i314, out_$i315, out_$i335, out_$i336, out_$i337, out_$i311 := parse_insn_loop_$bb110(in_$p2, in_$i305, in_$p308, out_$i312, out_$p313, out_$i314, out_$i315, out_$i335, out_$i336, out_$i337, out_$i311);
    return;

  exit:
    return;
}



procedure parse_insn_loop_$bb110(in_$p2: ref, in_$i305: i32, in_$p308: ref, in_$i312: i64, in_$p313: ref, in_$i314: i32, in_$i315: i1, in_$i335: i32, in_$i336: i32, in_$i337: i1, in_$i311: i32) returns (out_$i312: i64, out_$p313: ref, out_$i314: i32, out_$i315: i1, out_$i335: i32, out_$i336: i32, out_$i337: i1, out_$i311: i32);



implementation is_device_busy_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i8 := in_$p9, in_$p10, in_$i11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i8;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10743;

  $bb19:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i24;
    goto $bb19_dummy;

  corral_source_split_10770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    out_$i26 := $sgt.i32(out_$i25, out_$i24);
    goto corral_source_split_10770;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, in_$p5);
    goto corral_source_split_10769;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i24 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1825} {:cexpr "i"} boogie_si_record_i32(out_$i24);
    goto corral_source_split_10768;

  $bb14:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume !(out_$i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_10763:
    assume {:verifier.code 0} true;
    out_$i23 := $trunc.i8.i1(out_$i22);
    goto corral_source_split_10764;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i8(out_$i21);
    call {:si_unique_call 1824} {:cexpr "tmp"} boogie_si_record_i8(out_$i22);
    goto corral_source_split_10763;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} out_$i21 := comedi_buf_is_mmapped(out_$p12);
    goto corral_source_split_10762;

  $bb13:
    assume out_$i20 == 1;
    goto corral_source_split_10761;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_10759;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    out_$i19 := $p2i.ref.i64(out_$p18);
    goto corral_source_split_10758;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    out_$p18 := $load.ref($M.0, out_$p17);
    goto corral_source_split_10757;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 296)), $mul.ref(40, 1));
    goto corral_source_split_10756;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_10752;

  corral_source_split_10750:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_10751;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_10750;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p10, $mul.ref(out_$i11, 296)), $mul.ref(56, 1));
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 296));
    goto corral_source_split_10748;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i8);
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_10746;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(480, 1));
    goto corral_source_split_10745;

  corral_source_split_10743:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb19_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i8 := is_device_busy_loop_$bb8(in_$p0, in_$p5, out_$p9, out_$p10, out_$i11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i8);
    return;

  exit:
    return;
}



procedure is_device_busy_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p17: ref, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$i21: i1, in_$i22: i8, in_$i23: i1, in_$i24: i32, in_$i25: i32, in_$i26: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p17: ref, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$i21: i1, out_$i22: i8, out_$i23: i1, out_$i24: i32, out_$i25: i32, out_$i26: i1, out_$i8: i32);



implementation comedi_device_attach_loop_$bb35(in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p51: ref)
{

  entry:
    out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51 := in_$p52, in_$p53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$p51;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_10858;

  $bb44:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$p51 := out_$p62;
    goto $bb44_dummy;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i64(out_$i63, 0);
    goto corral_source_split_10876;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    out_$i63 := $p2i.ref.i64(out_$p62);
    goto corral_source_split_10875;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_10874;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p51, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10873;

  corral_source_split_10881:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb40:
    assume out_$i58 == 1;
    goto corral_source_split_10871;

  corral_source_split_10869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i32(out_$i57, 0);
    goto corral_source_split_10869;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_10868;

  $bb38:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := 1;
    goto $bb39;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    out_$i57 := 0;
    goto $bb39;

  $bb37:
    assume out_$i56 == 1;
    goto corral_source_split_10866;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_10863:
    assume {:verifier.code 0} true;
    out_$i56 := $trunc.i8.i1(out_$i55);
    goto corral_source_split_10864;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    out_$i55 := $zext.i1.i8(out_$i54);
    call {:si_unique_call 1835} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i55);
    goto corral_source_split_10863;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1834} out_$i54 := ldv_try_module_get_28(out_$p53);
    goto corral_source_split_10862;

  corral_source_split_10860:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_10861;

  $bb36:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10860;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    goto $bb36;

  SeqInstr_555:
    goto corral_source_split_10881;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1837} ldv_module_put_29(out_$p60);
    goto SeqInstr_554;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_10880;

  corral_source_split_10878:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(out_$p51, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10879;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} comedi_report_boards(out_$p51);
    goto corral_source_split_10878;

  $bb41:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb44_dummy:
    call {:si_unique_call 1} out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51 := comedi_device_attach_loop_$bb35(out_$p52, out_$p53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$p51);
    return;

  exit:
    return;
}



procedure comedi_device_attach_loop_$bb35(in_$p52: ref, in_$p53: ref, in_$i54: i1, in_$i55: i8, in_$i56: i1, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$i64: i1, in_$p51: ref) returns (out_$p52: ref, out_$p53: ref, out_$i54: i1, out_$i55: i8, out_$i56: i1, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$i64: i1, out_$p51: ref);
  modifies $M.23, assertsPassed;



implementation comedi_device_attach_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p18: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p10: ref, in_$p45: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p18: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p10: ref, out_$p45: ref)
{

  entry:
    out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p18, out_$p41, out_$p42, out_$i43, out_$i44, out_$p10, out_$p45 := in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$i28, in_$i29, in_$p30, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p18, in_$p41, in_$p42, in_$i43, in_$i44, in_$p10, in_$p45;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_10793;

  $bb27:
    assume out_$i44 == 1;
    assume {:verifier.code 0} true;
    out_$p10 := out_$p42;
    goto $bb27_dummy;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    out_$p45 := out_$p42;
    assume true;
    goto $bb27;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    out_$i44 := $ne.i64(out_$i43, 0);
    goto corral_source_split_10812;

  corral_source_split_10810:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p42);
    goto corral_source_split_10811;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_10810;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(out_$p18, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_10809;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_10808;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p10;
    goto $bb15;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    out_$p18 := out_$p10;
    goto $bb15;

  $bb13:
    assume out_$i17 == 1;
    goto corral_source_split_10806;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i32(out_$i16, 0);
    goto corral_source_split_10804;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_10803;

  $bb11:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := 1;
    goto $bb12;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    out_$i16 := 0;
    goto $bb12;

  $bb10:
    assume out_$i15 == 1;
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i8.i1(out_$i14);
    goto corral_source_split_10799;

  corral_source_split_10797:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i1.i8(out_$i13);
    call {:si_unique_call 1829} {:cexpr "tmp"} boogie_si_record_i8(out_$i14);
    goto corral_source_split_10798;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1828} out_$i13 := ldv_try_module_get_26(out_$p12);
    goto corral_source_split_10797;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_10796;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10795;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_552:
    goto corral_source_split_10845;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_10844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} ldv_module_put_27(out_$p40);
    goto SeqInstr_551;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_10844;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_10843;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_10827:
    assume {:verifier.code 0} true;
    out_$p30 := out_$p10;
    assume true;
    goto $bb20;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    out_$i29 := $ne.i64(out_$i28, 0);
    goto corral_source_split_10827;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_10826;

  corral_source_split_10824:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_10825;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(64, 1));
    goto corral_source_split_10824;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p25, out_$p24);
    goto corral_source_split_10823;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(in_$p0, $mul.ref(0, 560)), $mul.ref(64, 1));
    goto corral_source_split_10822;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1830} out_$p24 := comedi_recognize(out_$p10, out_$p23);
    goto corral_source_split_10821;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_10820;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_10819;

  $bb17:
    assume out_$i21 == 1;
    goto corral_source_split_10818;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    out_$i21 := $ne.i32(out_$i20, 0);
    goto corral_source_split_10816;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_10815;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_10814;

  $bb14:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb25:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    out_$p38 := out_$p10;
    assume true;
    goto $bb25;

  corral_source_split_10834:
    assume {:verifier.code 0} true;
    out_$i37 := $eq.i32(out_$i36, 0);
    goto corral_source_split_10835;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} out_$i36 := strcmp(out_$p33, out_$p35);
    call {:si_unique_call 1832} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i36);
    goto corral_source_split_10834;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    out_$p35 := $bitcast.ref.ref(out_$p34);
    goto corral_source_split_10833;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p1, $mul.ref(0, 148)), $mul.ref(0, 1));
    goto corral_source_split_10832;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_10831;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p10, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_10830;

  $bb18:
    assume !(out_$i21 == 1);
    goto corral_source_split_10829;

  $bb27_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p18, out_$p41, out_$p42, out_$i43, out_$i44, out_$p10, out_$p45 := comedi_device_attach_loop_$bb8(in_$p0, in_$p1, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$i28, out_$i29, out_$p30, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p18, out_$p41, out_$p42, out_$i43, out_$i44, out_$p10, out_$p45);
    return;

  exit:
    return;
}



procedure comedi_device_attach_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p11: ref, in_$p12: ref, in_$i13: i1, in_$i14: i8, in_$i15: i1, in_$i16: i32, in_$i17: i1, in_$p19: ref, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$p30: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i1, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p18: ref, in_$p41: ref, in_$p42: ref, in_$i43: i64, in_$i44: i1, in_$p10: ref, in_$p45: ref) returns (out_$p11: ref, out_$p12: ref, out_$i13: i1, out_$i14: i8, out_$i15: i1, out_$i16: i32, out_$i17: i1, out_$p19: ref, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$p30: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i1, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p18: ref, out_$p41: ref, out_$p42: ref, out_$i43: i64, out_$i44: i1, out_$p10: ref, out_$p45: ref);
  modifies $M.23, assertsPassed, $M.0;



implementation comedi_recognize_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$p8: ref)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i7, out_$p8 := in_$p9, in_$i10, in_$i11, in_$p12, in_$p15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i21, in_$i7, in_$p8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10954;

  $bb10:
    assume out_$i21 == 1;
    assume {:verifier.code 0} true;
    out_$i7, out_$p8 := out_$i19, out_$p18;
    goto $bb10_dummy;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$i21 := $ult.i32(out_$i19, out_$i20);
    goto corral_source_split_10971;

  corral_source_split_10969:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, in_$p4);
    goto corral_source_split_10970;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1851} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_10969;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p8, $mul.ref(out_$i17, 8));
    goto corral_source_split_10968;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_10967;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i32($M.0, out_$p15);
    goto corral_source_split_10966;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_10965;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    out_$p12 := out_$p8;
    assume true;
    goto $bb7;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_10958;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1849} out_$i10 := strcmp(out_$p9, in_$p1);
    call {:si_unique_call 1850} {:cexpr "tmp"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_10957;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_10956;

  corral_source_split_10954:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i7, out_$p8 := comedi_recognize_loop_$bb4(in_$p0, in_$p1, in_$p4, out_$p9, out_$i10, out_$i11, out_$p12, out_$p15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i21, out_$i7, out_$p8);
    return;

  exit:
    return;
}



procedure comedi_recognize_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p4: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$p15: ref, in_$i16: i32, in_$i17: i64, in_$p18: ref, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$i7: i32, in_$p8: ref) returns (out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$p15: ref, out_$i16: i32, out_$i17: i64, out_$p18: ref, out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$i7: i32, out_$p8: ref);



implementation comedi_report_boards_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p9: ref, in_$i10: i32, in_vslice_dummy_var_105: i32) returns (out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p9: ref, out_$i10: i32, out_vslice_dummy_var_105: i32)
{

  entry:
    out_$p11, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p9, out_$i10, out_vslice_dummy_var_105 := in_$p11, in_$p13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p9, in_$i10, in_vslice_dummy_var_105;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_10994;

  $bb6:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$p9, out_$i10 := out_$p16, out_$i17;
    goto $bb6_dummy;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_11003:
    assume {:verifier.code 0} true;
    out_$i19 := $ugt.i32(out_$i18, out_$i17);
    goto corral_source_split_11004;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p6);
    goto corral_source_split_11003;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i10, 1);
    call {:si_unique_call 1857} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_11002;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p9, $mul.ref(out_$i15, 8));
    goto corral_source_split_11001;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_11000;

  corral_source_split_10998:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i32($M.0, out_$p13);
    goto corral_source_split_10999;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_10998;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} out_vslice_dummy_var_105 := printk.ref.ref(.str.95, out_$p11);
    goto corral_source_split_10997;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p9);
    goto corral_source_split_10996;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p9, out_$i10, out_vslice_dummy_var_105 := comedi_report_boards_loop_$bb4(in_$p0, in_$p6, out_$p11, out_$p13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p9, out_$i10, out_vslice_dummy_var_105);
    return;

  exit:
    return;
}



procedure comedi_report_boards_loop_$bb4(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$p13: ref, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$p9: ref, in_$i10: i32, in_vslice_dummy_var_105: i32) returns (out_$p11: ref, out_$p13: ref, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$p9: ref, out_$i10: i32, out_vslice_dummy_var_105: i32);



implementation comedi_read___0_loop_$bb23(in_$p0: ref, in_$p33: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$p29: ref, in_vslice_dummy_var_120: i32) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_vslice_dummy_var_120: i32)
{

  entry:
    out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, out_vslice_dummy_var_120 := in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i46, in_$i47, in_$i48, in_$i36, in_vslice_dummy_var_120;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_11610;

  $bb25:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i46;
    goto $bb25_dummy;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i46, out_$i47);
    goto corral_source_split_11623;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, in_$p33);
    goto corral_source_split_11622;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i36, 1);
    call {:si_unique_call 1981} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_11621;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} out_vslice_dummy_var_120 := seq_printf.ref.ref.ref(in_$p0, .str.105, out_$p44);
    goto corral_source_split_11620;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_11619;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p38, $mul.ref(out_$i42, 8));
    goto corral_source_split_11618;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_11617;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i32(out_$i40, out_$i36);
    goto corral_source_split_11616;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_11615;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p29, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_11614;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_11613;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p29, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_11612;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb25_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, out_vslice_dummy_var_120 := comedi_read___0_loop_$bb23(in_$p0, in_$p33, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, in_$p29, out_vslice_dummy_var_120);
    return;

  exit:
    return;
}



procedure comedi_read___0_loop_$bb23(in_$p0: ref, in_$p33: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$p29: ref, in_vslice_dummy_var_120: i32) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_vslice_dummy_var_120: i32);



implementation comedi_read___0_loop_$bb18(in_$p0: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p29: ref, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32) returns (out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p29: ref, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32)
{

  entry:
    out_$p30, out_$p31, out_$p33, out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p55, out_$p56, out_$i57, out_$i58, out_$p29, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121 := in_$p30, in_$p31, in_$p33, in_$i34, in_$i35, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i46, in_$i47, in_$i48, in_$i36, in_$p49, in_$i50, in_$i51, in_$p52, in_$p53, in_$p55, in_$p56, in_$i57, in_$i58, in_$p29, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_11599;

  $bb31:
    assume out_$i58 == 1;
    assume {:verifier.code 0} true;
    out_$p29 := out_$p56;
    goto $bb31_dummy;

  corral_source_split_11639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_11638:
    assume {:verifier.code 0} true;
    out_$i58 := $ne.i64(out_$i57, 0);
    goto corral_source_split_11639;

  corral_source_split_11637:
    assume {:verifier.code 0} true;
    out_$i57 := $p2i.ref.i64(out_$p56);
    goto corral_source_split_11638;

  corral_source_split_11636:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_11637;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p29, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_11636;

  $bb29:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_11634:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_11633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1982} out_vslice_dummy_var_121 := seq_printf.ref.ref.ref(in_$p0, .str.105, out_$p53);
    goto corral_source_split_11634;

  corral_source_split_11632:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_11633;

  corral_source_split_11631:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref($add.ref(out_$p29, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11632;

  $bb28:
    assume out_$i51 == 1;
    goto corral_source_split_11631;

  corral_source_split_11629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_11628:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i50, 0);
    goto corral_source_split_11629;

  corral_source_split_11627:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_11628;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(out_$p29, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_11627;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb22;

  corral_source_split_11625:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb26:
    assume !(out_$i48 == 1);
    goto corral_source_split_11625;

  corral_source_split_11623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_11622:
    assume {:verifier.code 0} true;
    out_$i48 := $ult.i32(out_$i46, out_$i47);
    goto corral_source_split_11623;

  corral_source_split_11621:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i32($M.0, out_$p33);
    goto corral_source_split_11622;

  corral_source_split_11620:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i36, 1);
    call {:si_unique_call 1981} {:cexpr "i"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_11621;

  corral_source_split_11619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1980} out_vslice_dummy_var_120 := seq_printf.ref.ref.ref(in_$p0, .str.105, out_$p44);
    goto corral_source_split_11620;

  corral_source_split_11618:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_11619;

  corral_source_split_11617:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref(out_$p38, $mul.ref(out_$i42, 8));
    goto corral_source_split_11618;

  corral_source_split_11616:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_11617;

  corral_source_split_11615:
    assume {:verifier.code 0} true;
    out_$i41 := $mul.i32(out_$i40, out_$i36);
    goto corral_source_split_11616;

  corral_source_split_11614:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    goto corral_source_split_11615;

  corral_source_split_11613:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p29, $mul.ref(0, 72)), $mul.ref(64, 1));
    goto corral_source_split_11614;

  corral_source_split_11612:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_11613;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p29, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_11612;

  corral_source_split_11610:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb23:
    call out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, out_vslice_dummy_var_120 := comedi_read___0_loop_$bb23(in_$p0, out_$p33, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, out_$p29, out_vslice_dummy_var_120);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_11610;

  corral_source_split_11608:
    assume {:verifier.code 0} true;
    out_$i36 := 0;
    goto $bb23;

  $bb25:
    assume out_$i48 == 1;
    assume {:verifier.code 0} true;
    out_$i36 := out_$i46;
    assume false;
    return;

  $bb20:
    assume out_$i35 == 1;
    goto corral_source_split_11608;

  corral_source_split_11606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_11605:
    assume {:verifier.code 0} true;
    out_$i35 := $ult.i32(0, out_$i34);
    goto corral_source_split_11606;

  corral_source_split_11604:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_11605;

  corral_source_split_11603:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p29, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_11604;

  corral_source_split_11602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1979} out_vslice_dummy_var_119 := seq_printf.ref.ref.ref(in_$p0, .str.104, out_$p31);
    goto corral_source_split_11603;

  corral_source_split_11601:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_11602;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_11601;

  corral_source_split_11599:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$p33, out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p55, out_$p56, out_$i57, out_$i58, out_$p29, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121 := comedi_read___0_loop_$bb18(in_$p0, out_$p30, out_$p31, out_$p33, out_$i34, out_$i35, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i46, out_$i47, out_$i48, out_$i36, out_$p49, out_$i50, out_$i51, out_$p52, out_$p53, out_$p55, out_$p56, out_$i57, out_$i58, out_$p29, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121);
    return;

  exit:
    return;
}



procedure comedi_read___0_loop_$bb18(in_$p0: ref, in_$p30: ref, in_$p31: ref, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i64, in_$p43: ref, in_$p44: ref, in_$i46: i32, in_$i47: i32, in_$i48: i1, in_$i36: i32, in_$p49: ref, in_$i50: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p29: ref, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32) returns (out_$p30: ref, out_$p31: ref, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i64, out_$p43: ref, out_$p44: ref, out_$i46: i32, out_$i47: i32, out_$i48: i1, out_$i36: i32, out_$p49: ref, out_$i50: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p29: ref, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32);



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i64, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i64, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i64, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i64, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$p164: ref, in_$i165: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$p170: ref, in_$i171: i32, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$p193: ref, in_$i195: i32, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i64, in_$i201: i32, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i64, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$p220: ref, in_$i221: i64, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$i255: i64, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$p260: ref, in_vslice_dummy_var_230: i64, in_vslice_dummy_var_231: i64, in_vslice_dummy_var_232: i64, in_vslice_dummy_var_233: i64, in_vslice_dummy_var_234: i64, in_vslice_dummy_var_235: i64, in_vslice_dummy_var_236: i64, in_vslice_dummy_var_237: i64, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i64, in_vslice_dummy_var_246: i64, in_vslice_dummy_var_247: i64, in_vslice_dummy_var_248: i64, in_vslice_dummy_var_249: i64, in_vslice_dummy_var_250: i64) returns (out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i64, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i64, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i64, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i64, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$p164: ref, out_$i165: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$p170: ref, out_$i171: i32, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$p193: ref, out_$i195: i32, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i64, out_$i201: i32, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i64, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$p220: ref, out_$i221: i64, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$i255: i64, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$p260: ref, out_vslice_dummy_var_230: i64, out_vslice_dummy_var_231: i64, out_vslice_dummy_var_232: i64, out_vslice_dummy_var_233: i64, out_vslice_dummy_var_234: i64, out_vslice_dummy_var_235: i64, out_vslice_dummy_var_236: i64, out_vslice_dummy_var_237: i64, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i64, out_vslice_dummy_var_246: i64, out_vslice_dummy_var_247: i64, out_vslice_dummy_var_248: i64, out_vslice_dummy_var_249: i64, out_vslice_dummy_var_250: i64)
{

  entry:
    out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i113, out_$i114, out_$p115, out_$p116, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$p193, out_$i195, out_$i196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p220, out_$i221, out_$i223, out_$i224, out_$p225, out_$p226, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$i255, out_$i257, out_$i258, out_$p259, out_$p260, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250 := in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i82, in_$i83, in_$p84, in_$p85, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i93, in_$i94, in_$p95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$p109, in_$p110, in_$i111, in_$i113, in_$i114, in_$p115, in_$p116, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$p134, in_$i135, in_$i137, in_$i138, in_$p139, in_$i140, in_$i142, in_$i143, in_$p144, in_$i145, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$i153, in_$i154, in_$p155, in_$i157, in_$i158, in_$p159, in_$i161, in_$i162, in_$i163, in_$p164, in_$i165, in_$i167, in_$i168, in_$i169, in_$p170, in_$i171, in_$i173, in_$i174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$p184, in_$i186, in_$i187, in_$p188, in_$i190, in_$i191, in_$p192, in_$p193, in_$i195, in_$i196, in_$i197, in_$i198, in_$p199, in_$i200, in_$i201, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$p219, in_$p220, in_$i221, in_$i223, in_$i224, in_$p225, in_$p226, in_$i228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i241, in_$i242, in_$i243, in_$i244, in_$i245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$p253, in_$p254, in_$i255, in_$i257, in_$i258, in_$p259, in_$p260, in_vslice_dummy_var_230, in_vslice_dummy_var_231, in_vslice_dummy_var_232, in_vslice_dummy_var_233, in_vslice_dummy_var_234, in_vslice_dummy_var_235, in_vslice_dummy_var_236, in_vslice_dummy_var_237, in_vslice_dummy_var_238, in_vslice_dummy_var_239, in_vslice_dummy_var_240, in_vslice_dummy_var_241, in_vslice_dummy_var_242, in_vslice_dummy_var_243, in_vslice_dummy_var_244, in_vslice_dummy_var_245, in_vslice_dummy_var_246, in_vslice_dummy_var_247, in_vslice_dummy_var_248, in_vslice_dummy_var_249, in_vslice_dummy_var_250;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2298} out_$i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 2299} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i60);
    call {:si_unique_call 2300} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i60);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb42_dummy;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb230:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb180:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb23:
    assume !(out_$i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb33:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_13223:
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_13222:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2305} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13223;

  SeqInstr_759:
    goto corral_source_split_13222;

  SeqInstr_758:
    assume assertsPassed;
    goto SeqInstr_759;

  corral_source_split_13221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2304} out_vslice_dummy_var_230 := read_buffer_kb_store(out_$p78, out_$p79, in_$p15, out_$i80);
    goto SeqInstr_758;

  corral_source_split_13220:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i64($M.62, in_$p0);
    goto corral_source_split_13221;

  corral_source_split_13219:
    assume {:verifier.code 0} true;
    out_$p79 := $M.72;
    goto corral_source_split_13220;

  corral_source_split_13218:
    assume {:verifier.code 0} true;
    out_$p78 := $M.73;
    goto corral_source_split_13219;

  $bb32:
    assume out_$i77 == 1;
    goto corral_source_split_13218;

  corral_source_split_13216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_13215:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 1);
    goto corral_source_split_13216;

  corral_source_split_13214:
    assume {:verifier.code 0} true;
    out_$i76 := $M.74;
    goto corral_source_split_13215;

  $bb30:
    assume out_$i75 == 1;
    goto corral_source_split_13214;

  $bb25:
    assume out_$i73 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i72, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i73 := $slt.i32(out_$i72, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_13208:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2301} out_$i72 := __VERIFIER_nondet_int();
    call {:si_unique_call 2302} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i72);
    call {:si_unique_call 2303} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i72);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i71 == 1;
    goto corral_source_split_13208;

  corral_source_split_13206:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_13205:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i70, 0);
    goto corral_source_split_13206;

  corral_source_split_13204:
    assume {:verifier.code 0} true;
    out_$i70 := $M.74;
    goto corral_source_split_13205;

  $bb20:
    assume out_$i69 == 1;
    goto corral_source_split_13204;

  $bb18:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i66 == 1;
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i60, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i61 == 1;
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i60, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i60, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb37:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_13229:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_13228:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2307} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13229;

  SeqInstr_762:
    goto corral_source_split_13228;

  SeqInstr_761:
    assume assertsPassed;
    goto SeqInstr_762;

  corral_source_split_13227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2306} out_vslice_dummy_var_231 := read_buffer_kb_show(out_$p84, out_$p85, in_$p14);
    goto SeqInstr_761;

  corral_source_split_13226:
    assume {:verifier.code 0} true;
    out_$p85 := $M.72;
    goto corral_source_split_13227;

  corral_source_split_13225:
    assume {:verifier.code 0} true;
    out_$p84 := $M.73;
    goto corral_source_split_13226;

  $bb36:
    assume out_$i83 == 1;
    goto corral_source_split_13225;

  corral_source_split_13212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_13211:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 1);
    goto corral_source_split_13212;

  corral_source_split_13210:
    assume {:verifier.code 0} true;
    out_$i82 := $M.74;
    goto corral_source_split_13211;

  $bb27:
    assume out_$i74 == 1;
    goto corral_source_split_13210;

  $bb26:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i72, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_13231:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2308} ldv_stop();
    goto corral_source_split_13231;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i74 == 1);
    goto $bb29;

  $bb31:
    assume {:verifier.code 0} true;
    assume !(out_$i75 == 1);
    goto $bb29;

  $bb44:
    assume !(out_$i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_13246:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_13245:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2313} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13246;

  SeqInstr_765:
    goto corral_source_split_13245;

  SeqInstr_764:
    assume assertsPassed;
    goto SeqInstr_765;

  corral_source_split_13244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2312} comedi_vm_close(out_$p95);
    goto SeqInstr_764;

  corral_source_split_13243:
    assume {:verifier.code 0} true;
    out_$p95 := $M.63;
    goto corral_source_split_13244;

  $bb53:
    assume out_$i94 == 1;
    goto corral_source_split_13243;

  corral_source_split_13241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_13240:
    assume {:verifier.code 0} true;
    out_$i94 := $eq.i32(out_$i93, 2);
    goto corral_source_split_13241;

  corral_source_split_13239:
    assume {:verifier.code 0} true;
    out_$i93 := $M.75;
    goto corral_source_split_13240;

  $bb51:
    assume out_$i92 == 1;
    goto corral_source_split_13239;

  $bb46:
    assume out_$i90 == 1;
    assume {:verifier.code 0} true;
    out_$i92 := $eq.i32(out_$i89, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i90 := $slt.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_13233:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2309} out_$i89 := __VERIFIER_nondet_int();
    call {:si_unique_call 2310} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i89);
    call {:si_unique_call 2311} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i89);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume out_$i88 == 1;
    goto corral_source_split_13233;

  corral_source_split_13202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_13201:
    assume {:verifier.code 0} true;
    out_$i88 := $ne.i32(out_$i87, 0);
    goto corral_source_split_13202;

  corral_source_split_13200:
    assume {:verifier.code 0} true;
    out_$i87 := $M.75;
    goto corral_source_split_13201;

  $bb19:
    assume !(out_$i68 == 1);
    goto corral_source_split_13200;

  $bb58:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_13254:
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_13253:
    assume {:verifier.code 0} true;
    $M.80 := out_$i100;
    call {:si_unique_call 2316} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_13254;

  corral_source_split_13252:
    assume {:verifier.code 0} true;
    out_$i100 := $add.i32(out_$i99, 1);
    goto corral_source_split_13253;

  corral_source_split_13251:
    assume {:verifier.code 0} true;
    out_$i99 := $M.80;
    goto corral_source_split_13252;

  corral_source_split_13250:
    assume {:verifier.code 0} true;
    $M.75 := 2;
    call {:si_unique_call 2315} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_13251;

  corral_source_split_13249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2314} comedi_vm_open(out_$p98);
    goto corral_source_split_13250;

  corral_source_split_13248:
    assume {:verifier.code 0} true;
    out_$p98 := $M.63;
    goto corral_source_split_13249;

  $bb57:
    assume out_$i97 == 1;
    goto corral_source_split_13248;

  corral_source_split_13237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_13236:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i32(out_$i96, 1);
    goto corral_source_split_13237;

  corral_source_split_13235:
    assume {:verifier.code 0} true;
    out_$i96 := $M.75;
    goto corral_source_split_13236;

  $bb48:
    assume out_$i91 == 1;
    goto corral_source_split_13235;

  $bb47:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i89, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_13256:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2317} ldv_stop();
    goto corral_source_split_13256;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb50;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i92 == 1);
    goto $bb50;

  $bb64:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb76:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb74:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_13273:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_13272:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2322} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_13273;

  SeqInstr_768:
    goto corral_source_split_13272;

  SeqInstr_767:
    assume assertsPassed;
    goto SeqInstr_768;

  corral_source_split_13271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2321} out_vslice_dummy_var_232 := max_read_buffer_kb_store(out_$p109, out_$p110, in_$p17, out_$i111);
    goto SeqInstr_767;

  corral_source_split_13270:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i64($M.62, in_$p1);
    goto corral_source_split_13271;

  corral_source_split_13269:
    assume {:verifier.code 0} true;
    out_$p110 := $M.68;
    goto corral_source_split_13270;

  corral_source_split_13268:
    assume {:verifier.code 0} true;
    out_$p109 := $M.69;
    goto corral_source_split_13269;

  $bb73:
    assume out_$i108 == 1;
    goto corral_source_split_13268;

  corral_source_split_13266:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_13265:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 1);
    goto corral_source_split_13266;

  corral_source_split_13264:
    assume {:verifier.code 0} true;
    out_$i107 := $M.76;
    goto corral_source_split_13265;

  $bb71:
    assume out_$i106 == 1;
    goto corral_source_split_13264;

  $bb66:
    assume out_$i104 == 1;
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i103, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i104 := $slt.i32(out_$i103, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  corral_source_split_13258:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2318} out_$i103 := __VERIFIER_nondet_int();
    call {:si_unique_call 2319} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i103);
    call {:si_unique_call 2320} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i103);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb63:
    assume out_$i102 == 1;
    goto corral_source_split_13258;

  corral_source_split_13194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_13193:
    assume {:verifier.code 0} true;
    out_$i102 := $ne.i32(out_$i101, 0);
    goto corral_source_split_13194;

  corral_source_split_13192:
    assume {:verifier.code 0} true;
    out_$i101 := $M.76;
    goto corral_source_split_13193;

  $bb16:
    assume out_$i67 == 1;
    goto corral_source_split_13192;

  $bb15:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i60, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb78:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_13279:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_13278:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2324} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_13279;

  SeqInstr_771:
    goto corral_source_split_13278;

  SeqInstr_770:
    assume assertsPassed;
    goto SeqInstr_771;

  corral_source_split_13277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2323} out_vslice_dummy_var_233 := max_read_buffer_kb_show(out_$p115, out_$p116, in_$p16);
    goto SeqInstr_770;

  corral_source_split_13276:
    assume {:verifier.code 0} true;
    out_$p116 := $M.68;
    goto corral_source_split_13277;

  corral_source_split_13275:
    assume {:verifier.code 0} true;
    out_$p115 := $M.69;
    goto corral_source_split_13276;

  $bb77:
    assume out_$i114 == 1;
    goto corral_source_split_13275;

  corral_source_split_13262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_13261:
    assume {:verifier.code 0} true;
    out_$i114 := $eq.i32(out_$i113, 1);
    goto corral_source_split_13262;

  corral_source_split_13260:
    assume {:verifier.code 0} true;
    out_$i113 := $M.76;
    goto corral_source_split_13261;

  $bb68:
    assume out_$i105 == 1;
    goto corral_source_split_13260;

  $bb67:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    out_$i105 := $eq.i32(out_$i103, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_13281:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2325} ldv_stop();
    goto corral_source_split_13281;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb69:
    assume {:verifier.code 0} true;
    assume !(out_$i105 == 1);
    goto $bb70;

  $bb72:
    assume {:verifier.code 0} true;
    assume !(out_$i106 == 1);
    goto $bb70;

  $bb84:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb154:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb148:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb121:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb114:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb113:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_13338:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_13337:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2332} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13338;

  corral_source_split_13336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2331} out_vslice_dummy_var_235 := comedi_write(out_$p139, in_$p25, out_$i140, in_$p27);
    goto corral_source_split_13337;

  corral_source_split_13335:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i64($M.62, in_$p3);
    goto corral_source_split_13336;

  corral_source_split_13334:
    assume {:verifier.code 0} true;
    out_$p139 := $M.65;
    goto corral_source_split_13335;

  $bb112:
    assume out_$i138 == 1;
    goto corral_source_split_13334;

  corral_source_split_13332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_13331:
    assume {:verifier.code 0} true;
    out_$i138 := $eq.i32(out_$i137, 2);
    goto corral_source_split_13332;

  $bb111:
    assume {:verifier.code 0} true;
    out_$i137 := $M.77;
    goto corral_source_split_13331;

  $bb110:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_13329:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_13328:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2330} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13329;

  corral_source_split_13327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2329} out_vslice_dummy_var_234 := comedi_write(out_$p134, in_$p25, out_$i135, in_$p27);
    goto corral_source_split_13328;

  corral_source_split_13326:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i64($M.62, in_$p3);
    goto corral_source_split_13327;

  corral_source_split_13325:
    assume {:verifier.code 0} true;
    out_$p134 := $M.65;
    goto corral_source_split_13326;

  $bb109:
    assume out_$i133 == 1;
    goto corral_source_split_13325;

  corral_source_split_13323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_13322:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, 1);
    goto corral_source_split_13323;

  corral_source_split_13321:
    assume {:verifier.code 0} true;
    out_$i132 := $M.77;
    goto corral_source_split_13322;

  $bb107:
    assume out_$i131 == 1;
    goto corral_source_split_13321;

  $bb105:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i120, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb99:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i120, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb86:
    assume out_$i121 == 1;
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i120, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i120, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_13283:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2326} out_$i120 := __VERIFIER_nondet_int();
    call {:si_unique_call 2327} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i120);
    call {:si_unique_call 2328} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i120);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb83:
    assume out_$i119 == 1;
    goto corral_source_split_13283;

  corral_source_split_13198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_13197:
    assume {:verifier.code 0} true;
    out_$i119 := $ne.i32(out_$i118, 0);
    goto corral_source_split_13198;

  corral_source_split_13196:
    assume {:verifier.code 0} true;
    out_$i118 := $M.77;
    goto corral_source_split_13197;

  $bb17:
    assume !(out_$i67 == 1);
    goto corral_source_split_13196;

  $bb117:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_13344:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_13343:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2334} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13344;

  corral_source_split_13342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2333} out_vslice_dummy_var_236 := comedi_read(out_$p144, in_$p18, out_$i145, in_$p24);
    goto corral_source_split_13343;

  corral_source_split_13341:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i64($M.62, in_$p11);
    goto corral_source_split_13342;

  corral_source_split_13340:
    assume {:verifier.code 0} true;
    out_$p144 := $M.65;
    goto corral_source_split_13341;

  $bb116:
    assume out_$i143 == 1;
    goto corral_source_split_13340;

  corral_source_split_13319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_13318:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 2);
    goto corral_source_split_13319;

  corral_source_split_13317:
    assume {:verifier.code 0} true;
    out_$i142 := $M.77;
    goto corral_source_split_13318;

  $bb106:
    assume !(out_$i130 == 1);
    goto corral_source_split_13317;

  $bb120:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_13351:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_13350:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2336} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13351;

  SeqInstr_774:
    goto corral_source_split_13350;

  SeqInstr_773:
    assume assertsPassed;
    goto SeqInstr_774;

  corral_source_split_13349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2335} out_vslice_dummy_var_237 := comedi_compat_ioctl(out_$p149, out_$i150, out_$i151);
    goto SeqInstr_773;

  corral_source_split_13348:
    assume {:verifier.code 0} true;
    out_$i151 := $load.i64($M.62, in_$p10);
    goto corral_source_split_13349;

  corral_source_split_13347:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i32($M.62, in_$p9);
    goto corral_source_split_13348;

  corral_source_split_13346:
    assume {:verifier.code 0} true;
    out_$p149 := $M.65;
    goto corral_source_split_13347;

  $bb119:
    assume out_$i148 == 1;
    goto corral_source_split_13346;

  corral_source_split_13307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_13306:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 2);
    goto corral_source_split_13307;

  corral_source_split_13305:
    assume {:verifier.code 0} true;
    out_$i147 := $M.77;
    goto corral_source_split_13306;

  $bb101:
    assume out_$i128 == 1;
    goto corral_source_split_13305;

  $bb100:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i120, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb126:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_13364:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_13363:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2340} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13364;

  corral_source_split_13362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2339} out_vslice_dummy_var_239 := comedi_poll(out_$p159, in_$p20);
    goto corral_source_split_13363;

  corral_source_split_13361:
    assume {:verifier.code 0} true;
    out_$p159 := $M.65;
    goto corral_source_split_13362;

  $bb125:
    assume out_$i158 == 1;
    goto corral_source_split_13361;

  corral_source_split_13359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_13358:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 2);
    goto corral_source_split_13359;

  $bb124:
    assume {:verifier.code 0} true;
    out_$i157 := $M.77;
    goto corral_source_split_13358;

  $bb123:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_13356:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_13355:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2338} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13356;

  corral_source_split_13354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2337} out_vslice_dummy_var_238 := comedi_poll(out_$p155, in_$p20);
    goto corral_source_split_13355;

  corral_source_split_13353:
    assume {:verifier.code 0} true;
    out_$p155 := $M.65;
    goto corral_source_split_13354;

  $bb122:
    assume out_$i154 == 1;
    goto corral_source_split_13353;

  corral_source_split_13311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_13310:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 1);
    goto corral_source_split_13311;

  corral_source_split_13309:
    assume {:verifier.code 0} true;
    out_$i153 := $M.77;
    goto corral_source_split_13310;

  $bb103:
    assume out_$i129 == 1;
    goto corral_source_split_13309;

  $bb102:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i120, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb132:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_13381:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_13380:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2344} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13381;

  corral_source_split_13379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2343} out_vslice_dummy_var_241 := comedi_fasync(out_$i169, out_$p170, out_$i171);
    goto corral_source_split_13380;

  corral_source_split_13378:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i32($M.62, in_$p5);
    goto corral_source_split_13379;

  corral_source_split_13377:
    assume {:verifier.code 0} true;
    out_$p170 := $M.65;
    goto corral_source_split_13378;

  corral_source_split_13376:
    assume {:verifier.code 0} true;
    out_$i169 := $load.i32($M.62, in_$p2);
    goto corral_source_split_13377;

  $bb131:
    assume out_$i168 == 1;
    goto corral_source_split_13376;

  corral_source_split_13374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_13373:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 2);
    goto corral_source_split_13374;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i167 := $M.77;
    goto corral_source_split_13373;

  $bb129:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_13371:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_13370:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2342} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13371;

  corral_source_split_13369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2341} out_vslice_dummy_var_240 := comedi_fasync(out_$i163, out_$p164, out_$i165);
    goto corral_source_split_13370;

  corral_source_split_13368:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.62, in_$p5);
    goto corral_source_split_13369;

  corral_source_split_13367:
    assume {:verifier.code 0} true;
    out_$p164 := $M.65;
    goto corral_source_split_13368;

  corral_source_split_13366:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i32($M.62, in_$p2);
    goto corral_source_split_13367;

  $bb128:
    assume out_$i162 == 1;
    goto corral_source_split_13366;

  corral_source_split_13315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_13314:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 1);
    goto corral_source_split_13315;

  corral_source_split_13313:
    assume {:verifier.code 0} true;
    out_$i161 := $M.77;
    goto corral_source_split_13314;

  $bb104:
    assume !(out_$i129 == 1);
    goto corral_source_split_13313;

  $bb135:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_13395:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_13394:
    assume {:verifier.code 0} true;
    $M.80 := out_$i181;
    call {:si_unique_call 2348} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_13395;

  corral_source_split_13393:
    assume {:verifier.code 0} true;
    out_$i181 := $add.i32(out_$i180, 1);
    goto corral_source_split_13394;

  corral_source_split_13392:
    assume {:verifier.code 0} true;
    out_$i180 := $M.80;
    goto corral_source_split_13393;

  corral_source_split_13391:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2347} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13392;

  $bb136:
    assume out_$i179 == 1;
    goto corral_source_split_13391;

  corral_source_split_13389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_13388:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 0);
    goto corral_source_split_13389;

  corral_source_split_13387:
    assume {:verifier.code 0} true;
    out_$i178 := $M.83;
    goto corral_source_split_13388;

  corral_source_split_13386:
    assume {:verifier.code 0} true;
    $M.83 := out_$i177;
    call {:si_unique_call 2346} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_13387;

  SeqInstr_777:
    goto corral_source_split_13386;

  SeqInstr_776:
    assume assertsPassed;
    goto SeqInstr_777;

  corral_source_split_13385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2345} out_$i177 := comedi_open(out_$p175, out_$p176);
    goto SeqInstr_776;

  corral_source_split_13384:
    assume {:verifier.code 0} true;
    out_$p176 := $M.65;
    goto corral_source_split_13385;

  corral_source_split_13383:
    assume {:verifier.code 0} true;
    out_$p175 := $M.64;
    goto corral_source_split_13384;

  $bb134:
    assume out_$i174 == 1;
    goto corral_source_split_13383;

  corral_source_split_13299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_13298:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 1);
    goto corral_source_split_13299;

  corral_source_split_13297:
    assume {:verifier.code 0} true;
    out_$i173 := $M.77;
    goto corral_source_split_13298;

  $bb97:
    assume out_$i126 == 1;
    goto corral_source_split_13297;

  $bb88:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i120, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb87:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i120, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb144:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_13408:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_13407:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2352} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13408;

  SeqInstr_783:
    goto corral_source_split_13407;

  SeqInstr_782:
    assume assertsPassed;
    goto SeqInstr_783;

  corral_source_split_13406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2351} out_vslice_dummy_var_243 := comedi_mmap(out_$p188, in_$p22);
    goto SeqInstr_782;

  corral_source_split_13405:
    assume {:verifier.code 0} true;
    out_$p188 := $M.65;
    goto corral_source_split_13406;

  $bb143:
    assume out_$i187 == 1;
    goto corral_source_split_13405;

  corral_source_split_13403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_13402:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_13403;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i186 := $M.77;
    goto corral_source_split_13402;

  $bb141:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_13400:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_13399:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2350} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13400;

  SeqInstr_780:
    goto corral_source_split_13399;

  SeqInstr_779:
    assume assertsPassed;
    goto SeqInstr_780;

  corral_source_split_13398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2349} out_vslice_dummy_var_242 := comedi_mmap(out_$p184, in_$p22);
    goto SeqInstr_779;

  corral_source_split_13397:
    assume {:verifier.code 0} true;
    out_$p184 := $M.65;
    goto corral_source_split_13398;

  $bb140:
    assume out_$i183 == 1;
    goto corral_source_split_13397;

  corral_source_split_13303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_13302:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_13303;

  corral_source_split_13301:
    assume {:verifier.code 0} true;
    out_$i182 := $M.77;
    goto corral_source_split_13302;

  $bb98:
    assume !(out_$i126 == 1);
    goto corral_source_split_13301;

  $bb147:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_13417:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_13416:
    assume {:verifier.code 0} true;
    $M.80 := out_$i196;
    call {:si_unique_call 2355} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_13417;

  corral_source_split_13415:
    assume {:verifier.code 0} true;
    out_$i196 := $sub.i32(out_$i195, 1);
    goto corral_source_split_13416;

  corral_source_split_13414:
    assume {:verifier.code 0} true;
    out_$i195 := $M.80;
    goto corral_source_split_13415;

  corral_source_split_13413:
    assume {:verifier.code 0} true;
    $M.77 := 1;
    call {:si_unique_call 2354} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_13414;

  SeqInstr_786:
    goto corral_source_split_13413;

  SeqInstr_785:
    assume assertsPassed;
    goto SeqInstr_786;

  corral_source_split_13412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2353} out_vslice_dummy_var_244 := comedi_close(out_$p192, out_$p193);
    goto SeqInstr_785;

  corral_source_split_13411:
    assume {:verifier.code 0} true;
    out_$p193 := $M.65;
    goto corral_source_split_13412;

  corral_source_split_13410:
    assume {:verifier.code 0} true;
    out_$p192 := $M.64;
    goto corral_source_split_13411;

  $bb146:
    assume out_$i191 == 1;
    goto corral_source_split_13410;

  corral_source_split_13287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_13286:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 2);
    goto corral_source_split_13287;

  corral_source_split_13285:
    assume {:verifier.code 0} true;
    out_$i190 := $M.77;
    goto corral_source_split_13286;

  $bb90:
    assume out_$i123 == 1;
    goto corral_source_split_13285;

  $bb89:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i120, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb150:
    assume !(out_$i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_13424:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_13423:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2357} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13424;

  corral_source_split_13422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2356} out_vslice_dummy_var_245 := noop_llseek(out_$p199, out_$i200, out_$i201);
    goto corral_source_split_13423;

  corral_source_split_13421:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i32($M.62, in_$p6);
    goto corral_source_split_13422;

  corral_source_split_13420:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i64($M.62, in_$p7);
    goto corral_source_split_13421;

  corral_source_split_13419:
    assume {:verifier.code 0} true;
    out_$p199 := $M.65;
    goto corral_source_split_13420;

  $bb149:
    assume out_$i198 == 1;
    goto corral_source_split_13419;

  corral_source_split_13291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_13290:
    assume {:verifier.code 0} true;
    out_$i198 := $eq.i32(out_$i197, 2);
    goto corral_source_split_13291;

  corral_source_split_13289:
    assume {:verifier.code 0} true;
    out_$i197 := $M.77;
    goto corral_source_split_13290;

  $bb92:
    assume out_$i124 == 1;
    goto corral_source_split_13289;

  $bb91:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i120, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb153:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_13431:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_13430:
    assume {:verifier.code 0} true;
    $M.77 := 2;
    call {:si_unique_call 2359} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_13431;

  SeqInstr_789:
    goto corral_source_split_13430;

  SeqInstr_788:
    assume assertsPassed;
    goto SeqInstr_789;

  corral_source_split_13429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2358} out_vslice_dummy_var_246 := comedi_unlocked_ioctl(out_$p205, out_$i206, out_$i207);
    goto SeqInstr_788;

  corral_source_split_13428:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i64($M.62, in_$p8);
    goto corral_source_split_13429;

  corral_source_split_13427:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i32($M.62, in_$p4);
    goto corral_source_split_13428;

  corral_source_split_13426:
    assume {:verifier.code 0} true;
    out_$p205 := $M.65;
    goto corral_source_split_13427;

  $bb152:
    assume out_$i204 == 1;
    goto corral_source_split_13426;

  corral_source_split_13295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_13294:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 2);
    goto corral_source_split_13295;

  corral_source_split_13293:
    assume {:verifier.code 0} true;
    out_$i203 := $M.77;
    goto corral_source_split_13294;

  $bb94:
    assume out_$i125 == 1;
    goto corral_source_split_13293;

  $bb93:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i120, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_13433:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2360} ldv_stop();
    goto corral_source_split_13433;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb95:
    assume {:verifier.code 0} true;
    assume !(out_$i125 == 1);
    goto $bb96;

  $bb108:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb96;

  $bb159:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_13436:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_13435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2361} ldv_main_exported_1();
    goto corral_source_split_13436;

  $bb158:
    assume out_$i210 == 1;
    goto corral_source_split_13435;

  corral_source_split_13186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_13185:
    assume {:verifier.code 0} true;
    out_$i210 := $ne.i32(out_$i209, 0);
    goto corral_source_split_13186;

  corral_source_split_13184:
    assume {:verifier.code 0} true;
    out_$i209 := $M.78;
    goto corral_source_split_13185;

  $bb12:
    assume out_$i65 == 1;
    goto corral_source_split_13184;

  $bb5:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i60, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i60, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb162:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb174:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb174;

  $bb172:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_13453:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_13452:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2366} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13453;

  SeqInstr_792:
    goto corral_source_split_13452;

  SeqInstr_791:
    assume assertsPassed;
    goto SeqInstr_792;

  corral_source_split_13451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2365} out_vslice_dummy_var_247 := write_buffer_kb_store(out_$p219, out_$p220, in_$p29, out_$i221);
    goto SeqInstr_791;

  corral_source_split_13450:
    assume {:verifier.code 0} true;
    out_$i221 := $load.i64($M.62, in_$p12);
    goto corral_source_split_13451;

  corral_source_split_13449:
    assume {:verifier.code 0} true;
    out_$p220 := $M.70;
    goto corral_source_split_13450;

  corral_source_split_13448:
    assume {:verifier.code 0} true;
    out_$p219 := $M.71;
    goto corral_source_split_13449;

  $bb171:
    assume out_$i218 == 1;
    goto corral_source_split_13448;

  corral_source_split_13446:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_13445:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_13446;

  corral_source_split_13444:
    assume {:verifier.code 0} true;
    out_$i217 := $M.79;
    goto corral_source_split_13445;

  $bb169:
    assume out_$i216 == 1;
    goto corral_source_split_13444;

  $bb164:
    assume out_$i214 == 1;
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i213, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i214 := $slt.i32(out_$i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_13438:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2362} out_$i213 := __VERIFIER_nondet_int();
    call {:si_unique_call 2363} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i213);
    call {:si_unique_call 2364} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i213);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume out_$i212 == 1;
    goto corral_source_split_13438;

  corral_source_split_13190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_13189:
    assume {:verifier.code 0} true;
    out_$i212 := $ne.i32(out_$i211, 0);
    goto corral_source_split_13190;

  corral_source_split_13188:
    assume {:verifier.code 0} true;
    out_$i211 := $M.79;
    goto corral_source_split_13189;

  $bb13:
    assume !(out_$i65 == 1);
    goto corral_source_split_13188;

  $bb176:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_13459:
    assume {:verifier.code 0} true;
    goto $bb177;

  corral_source_split_13458:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2368} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13459;

  SeqInstr_795:
    goto corral_source_split_13458;

  SeqInstr_794:
    assume assertsPassed;
    goto SeqInstr_795;

  corral_source_split_13457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2367} out_vslice_dummy_var_248 := write_buffer_kb_show(out_$p225, out_$p226, in_$p28);
    goto SeqInstr_794;

  corral_source_split_13456:
    assume {:verifier.code 0} true;
    out_$p226 := $M.70;
    goto corral_source_split_13457;

  corral_source_split_13455:
    assume {:verifier.code 0} true;
    out_$p225 := $M.71;
    goto corral_source_split_13456;

  $bb175:
    assume out_$i224 == 1;
    goto corral_source_split_13455;

  corral_source_split_13442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175, $bb176;

  corral_source_split_13441:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i32(out_$i223, 1);
    goto corral_source_split_13442;

  corral_source_split_13440:
    assume {:verifier.code 0} true;
    out_$i223 := $M.79;
    goto corral_source_split_13441;

  $bb166:
    assume out_$i215 == 1;
    goto corral_source_split_13440;

  $bb165:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    out_$i215 := $eq.i32(out_$i213, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_13461:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2369} ldv_stop();
    goto corral_source_split_13461;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i215 == 1);
    goto $bb168;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(out_$i216 == 1);
    goto $bb168;

  $bb182:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb198:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb197:
    assume {:verifier.code 0} true;
    goto $bb198;

  $bb193:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume {:verifier.code 0} true;
    assume !(out_$i235 == 1);
    goto $bb193;

  $bb195:
    assume {:verifier.code 0} true;
    assume !(out_$i237 == 1);
    goto $bb193;

  corral_source_split_13475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195;

  corral_source_split_13474:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 0);
    goto corral_source_split_13475;

  corral_source_split_13473:
    assume {:verifier.code 0} true;
    out_$i236 := $M.80;
    goto corral_source_split_13474;

  $bb191:
    assume out_$i235 == 1;
    goto corral_source_split_13473;

  corral_source_split_13471:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_13470:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 2);
    goto corral_source_split_13471;

  corral_source_split_13469:
    assume {:verifier.code 0} true;
    out_$i234 := $M.81;
    goto corral_source_split_13470;

  $bb189:
    assume out_$i233 == 1;
    goto corral_source_split_13469;

  $bb184:
    assume out_$i231 == 1;
    assume {:verifier.code 0} true;
    out_$i233 := $eq.i32(out_$i230, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i231 := $slt.i32(out_$i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  corral_source_split_13463:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2370} out_$i230 := __VERIFIER_nondet_int();
    call {:si_unique_call 2371} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i230);
    call {:si_unique_call 2372} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i230);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb181:
    assume out_$i229 == 1;
    goto corral_source_split_13463;

  corral_source_split_13178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_13177:
    assume {:verifier.code 0} true;
    out_$i229 := $ne.i32(out_$i228, 0);
    goto corral_source_split_13178;

  corral_source_split_13176:
    assume {:verifier.code 0} true;
    out_$i228 := $M.81;
    goto corral_source_split_13177;

  $bb7:
    assume out_$i63 == 1;
    goto corral_source_split_13176;

  $bb6:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb200:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb205:
    assume !(out_$i244 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_13506:
    assume {:verifier.code 0} true;
    goto $bb206;

  corral_source_split_13505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2389} ldv_initialize_device_attribute_6();
    goto corral_source_split_13506;

  corral_source_split_13504:
    assume {:verifier.code 0} true;
    $M.74 := 1;
    call {:si_unique_call 2388} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_13505;

  corral_source_split_13503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2387} ldv_initialize_device_attribute_4();
    goto corral_source_split_13504;

  corral_source_split_13502:
    assume {:verifier.code 0} true;
    $M.79 := 1;
    call {:si_unique_call 2386} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_13503;

  corral_source_split_13501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2385} ldv_initialize_vm_operations_struct_3();
    goto corral_source_split_13502;

  corral_source_split_13500:
    assume {:verifier.code 0} true;
    $M.75 := 1;
    call {:si_unique_call 2384} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_13501;

  corral_source_split_13499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2383} ldv_initialize_device_attribute_7();
    goto corral_source_split_13500;

  corral_source_split_13498:
    assume {:verifier.code 0} true;
    $M.76 := 1;
    call {:si_unique_call 2382} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_13499;

  corral_source_split_13497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2381} ldv_initialize_device_attribute_5();
    goto corral_source_split_13498;

  corral_source_split_13496:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2380} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13497;

  corral_source_split_13495:
    assume {:verifier.code 0} true;
    $M.81 := 2;
    call {:si_unique_call 2379} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_13496;

  $bb204:
    assume out_$i244 == 1;
    goto corral_source_split_13495;

  corral_source_split_13493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  corral_source_split_13492:
    assume {:verifier.code 0} true;
    out_$i244 := $eq.i32(out_$i243, 0);
    goto corral_source_split_13493;

  $bb203:
    assume {:verifier.code 0} true;
    out_$i243 := $M.84;
    goto corral_source_split_13492;

  $bb202:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_13487:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202;

  corral_source_split_13486:
    assume {:verifier.code 0} true;
    out_$i242 := $ne.i32(out_$i241, 0);
    goto corral_source_split_13487;

  corral_source_split_13485:
    assume {:verifier.code 0} true;
    out_$i241 := $M.84;
    goto corral_source_split_13486;

  corral_source_split_13484:
    assume {:verifier.code 0} true;
    $M.84 := out_$i240;
    call {:si_unique_call 2377} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_13485;

  SeqInstr_804:
    goto corral_source_split_13484;

  SeqInstr_803:
    assume assertsPassed;
    goto SeqInstr_804;

  corral_source_split_13483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2376} out_$i240 := comedi_init();
    goto SeqInstr_803;

  $bb199:
    assume out_$i239 == 1;
    goto corral_source_split_13483;

  corral_source_split_13467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb199, $bb200;

  corral_source_split_13466:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 1);
    goto corral_source_split_13467;

  corral_source_split_13465:
    assume {:verifier.code 0} true;
    out_$i238 := $M.81;
    goto corral_source_split_13466;

  $bb186:
    assume out_$i232 == 1;
    goto corral_source_split_13465;

  $bb185:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i230, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_13508:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2390} ldv_stop();
    goto corral_source_split_13508;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb187:
    assume {:verifier.code 0} true;
    assume !(out_$i232 == 1);
    goto $bb188;

  $bb190:
    assume {:verifier.code 0} true;
    assume !(out_$i233 == 1);
    goto $bb188;

  $bb212:
    assume !(out_$i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb222:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_13525:
    assume {:verifier.code 0} true;
    goto $bb223;

  corral_source_split_13524:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2395} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13525;

  SeqInstr_807:
    goto corral_source_split_13524;

  SeqInstr_806:
    assume assertsPassed;
    goto SeqInstr_807;

  corral_source_split_13523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2394} out_vslice_dummy_var_249 := max_write_buffer_kb_store(out_$p253, out_$p254, in_$p30, out_$i255);
    goto SeqInstr_806;

  corral_source_split_13522:
    assume {:verifier.code 0} true;
    out_$i255 := $load.i64($M.62, in_$p13);
    goto corral_source_split_13523;

  corral_source_split_13521:
    assume {:verifier.code 0} true;
    out_$p254 := $M.66;
    goto corral_source_split_13522;

  corral_source_split_13520:
    assume {:verifier.code 0} true;
    out_$p253 := $M.67;
    goto corral_source_split_13521;

  $bb221:
    assume out_$i252 == 1;
    goto corral_source_split_13520;

  corral_source_split_13518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  corral_source_split_13517:
    assume {:verifier.code 0} true;
    out_$i252 := $eq.i32(out_$i251, 1);
    goto corral_source_split_13518;

  corral_source_split_13516:
    assume {:verifier.code 0} true;
    out_$i251 := $M.82;
    goto corral_source_split_13517;

  $bb219:
    assume out_$i250 == 1;
    goto corral_source_split_13516;

  $bb214:
    assume out_$i248 == 1;
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i247, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i248 := $slt.i32(out_$i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  corral_source_split_13510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2391} out_$i247 := __VERIFIER_nondet_int();
    call {:si_unique_call 2392} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i247);
    call {:si_unique_call 2393} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i247);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb211:
    assume out_$i246 == 1;
    goto corral_source_split_13510;

  corral_source_split_13182:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_13181:
    assume {:verifier.code 0} true;
    out_$i246 := $ne.i32(out_$i245, 0);
    goto corral_source_split_13182;

  corral_source_split_13180:
    assume {:verifier.code 0} true;
    out_$i245 := $M.82;
    goto corral_source_split_13181;

  $bb9:
    assume out_$i64 == 1;
    goto corral_source_split_13180;

  $bb8:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $eq.i32(out_$i60, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb226:
    assume !(out_$i258 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_13531:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_13530:
    assume {:verifier.code 0} true;
    $M.82 := 1;
    call {:si_unique_call 2397} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_13531;

  SeqInstr_810:
    goto corral_source_split_13530;

  SeqInstr_809:
    assume assertsPassed;
    goto SeqInstr_810;

  corral_source_split_13529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2396} out_vslice_dummy_var_250 := max_write_buffer_kb_show(out_$p259, out_$p260, in_$p31);
    goto SeqInstr_809;

  corral_source_split_13528:
    assume {:verifier.code 0} true;
    out_$p260 := $M.66;
    goto corral_source_split_13529;

  corral_source_split_13527:
    assume {:verifier.code 0} true;
    out_$p259 := $M.67;
    goto corral_source_split_13528;

  $bb225:
    assume out_$i258 == 1;
    goto corral_source_split_13527;

  corral_source_split_13514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_13513:
    assume {:verifier.code 0} true;
    out_$i258 := $eq.i32(out_$i257, 1);
    goto corral_source_split_13514;

  corral_source_split_13512:
    assume {:verifier.code 0} true;
    out_$i257 := $M.82;
    goto corral_source_split_13513;

  $bb216:
    assume out_$i249 == 1;
    goto corral_source_split_13512;

  $bb215:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i247, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_13533:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2398} ldv_stop();
    goto corral_source_split_13533;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb217:
    assume {:verifier.code 0} true;
    assume !(out_$i249 == 1);
    goto $bb218;

  $bb220:
    assume {:verifier.code 0} true;
    assume !(out_$i250 == 1);
    goto $bb218;

  corral_source_split_13535:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2399} ldv_stop();
    goto corral_source_split_13535;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i64 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb11;

  $bb42_dummy:
    call {:si_unique_call 1} out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i113, out_$i114, out_$p115, out_$p116, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$p193, out_$i195, out_$i196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p220, out_$i221, out_$i223, out_$i224, out_$p225, out_$p226, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$i255, out_$i257, out_$i258, out_$p259, out_$p260, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p20, in_$p22, in_$p24, in_$p25, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$p109, out_$p110, out_$i111, out_$i113, out_$i114, out_$p115, out_$p116, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$p134, out_$i135, out_$i137, out_$i138, out_$p139, out_$i140, out_$i142, out_$i143, out_$p144, out_$i145, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$i163, out_$p164, out_$i165, out_$i167, out_$i168, out_$i169, out_$p170, out_$i171, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$p193, out_$i195, out_$i196, out_$i197, out_$i198, out_$p199, out_$i200, out_$i201, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$p220, out_$i221, out_$i223, out_$i224, out_$p225, out_$p226, out_$i228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i241, out_$i242, out_$i243, out_$i244, out_$i245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$i255, out_$i257, out_$i258, out_$p259, out_$p260, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243, out_vslice_dummy_var_244, out_vslice_dummy_var_245, out_vslice_dummy_var_246, out_vslice_dummy_var_247, out_vslice_dummy_var_248, out_vslice_dummy_var_249, out_vslice_dummy_var_250);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p25: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i60: i32, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i1, in_$i69: i1, in_$i70: i32, in_$i71: i1, in_$i72: i32, in_$i73: i1, in_$i74: i1, in_$i75: i1, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i64, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$i87: i32, in_$i88: i1, in_$i89: i32, in_$i90: i1, in_$i91: i1, in_$i92: i1, in_$i93: i32, in_$i94: i1, in_$p95: ref, in_$i96: i32, in_$i97: i1, in_$p98: ref, in_$i99: i32, in_$i100: i32, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i1, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$p110: ref, in_$i111: i64, in_$i113: i32, in_$i114: i1, in_$p115: ref, in_$p116: ref, in_$i118: i32, in_$i119: i1, in_$i120: i32, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i32, in_$i133: i1, in_$p134: ref, in_$i135: i64, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$i140: i64, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i145: i64, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i64, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$i163: i32, in_$p164: ref, in_$i165: i32, in_$i167: i32, in_$i168: i1, in_$i169: i32, in_$p170: ref, in_$i171: i32, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$p193: ref, in_$i195: i32, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$p199: ref, in_$i200: i64, in_$i201: i32, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i64, in_$i209: i32, in_$i210: i1, in_$i211: i32, in_$i212: i1, in_$i213: i32, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$p220: ref, in_$i221: i64, in_$i223: i32, in_$i224: i1, in_$p225: ref, in_$p226: ref, in_$i228: i32, in_$i229: i1, in_$i230: i32, in_$i231: i1, in_$i232: i1, in_$i233: i1, in_$i234: i32, in_$i235: i1, in_$i236: i32, in_$i237: i1, in_$i238: i32, in_$i239: i1, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$i243: i32, in_$i244: i1, in_$i245: i32, in_$i246: i1, in_$i247: i32, in_$i248: i1, in_$i249: i1, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$i255: i64, in_$i257: i32, in_$i258: i1, in_$p259: ref, in_$p260: ref, in_vslice_dummy_var_230: i64, in_vslice_dummy_var_231: i64, in_vslice_dummy_var_232: i64, in_vslice_dummy_var_233: i64, in_vslice_dummy_var_234: i64, in_vslice_dummy_var_235: i64, in_vslice_dummy_var_236: i64, in_vslice_dummy_var_237: i64, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32, in_vslice_dummy_var_244: i32, in_vslice_dummy_var_245: i64, in_vslice_dummy_var_246: i64, in_vslice_dummy_var_247: i64, in_vslice_dummy_var_248: i64, in_vslice_dummy_var_249: i64, in_vslice_dummy_var_250: i64) returns (out_$i60: i32, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i1, out_$i69: i1, out_$i70: i32, out_$i71: i1, out_$i72: i32, out_$i73: i1, out_$i74: i1, out_$i75: i1, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i64, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$i87: i32, out_$i88: i1, out_$i89: i32, out_$i90: i1, out_$i91: i1, out_$i92: i1, out_$i93: i32, out_$i94: i1, out_$p95: ref, out_$i96: i32, out_$i97: i1, out_$p98: ref, out_$i99: i32, out_$i100: i32, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i1, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$p110: ref, out_$i111: i64, out_$i113: i32, out_$i114: i1, out_$p115: ref, out_$p116: ref, out_$i118: i32, out_$i119: i1, out_$i120: i32, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i32, out_$i133: i1, out_$p134: ref, out_$i135: i64, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$i140: i64, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i145: i64, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i64, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$i163: i32, out_$p164: ref, out_$i165: i32, out_$i167: i32, out_$i168: i1, out_$i169: i32, out_$p170: ref, out_$i171: i32, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$p193: ref, out_$i195: i32, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$p199: ref, out_$i200: i64, out_$i201: i32, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i64, out_$i209: i32, out_$i210: i1, out_$i211: i32, out_$i212: i1, out_$i213: i32, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$p220: ref, out_$i221: i64, out_$i223: i32, out_$i224: i1, out_$p225: ref, out_$p226: ref, out_$i228: i32, out_$i229: i1, out_$i230: i32, out_$i231: i1, out_$i232: i1, out_$i233: i1, out_$i234: i32, out_$i235: i1, out_$i236: i32, out_$i237: i1, out_$i238: i32, out_$i239: i1, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$i243: i32, out_$i244: i1, out_$i245: i32, out_$i246: i1, out_$i247: i32, out_$i248: i1, out_$i249: i1, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$i255: i64, out_$i257: i32, out_$i258: i1, out_$p259: ref, out_$p260: ref, out_vslice_dummy_var_230: i64, out_vslice_dummy_var_231: i64, out_vslice_dummy_var_232: i64, out_vslice_dummy_var_233: i64, out_vslice_dummy_var_234: i64, out_vslice_dummy_var_235: i64, out_vslice_dummy_var_236: i64, out_vslice_dummy_var_237: i64, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32, out_vslice_dummy_var_244: i32, out_vslice_dummy_var_245: i64, out_vslice_dummy_var_246: i64, out_vslice_dummy_var_247: i64, out_vslice_dummy_var_248: i64, out_vslice_dummy_var_249: i64, out_vslice_dummy_var_250: i64);
  modifies $M.74, $M.61, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.0, $M.24, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $CurrAddr, $M.25, $M.54, $M.2, $M.28, $M.23, $M.3, assertsPassed, $M.75, $M.80, $M.76, $M.77, $M.30, $M.31, $M.32, $M.33, $M.34, $M.29, $M.43, $M.44, $M.41, $M.42, $M.55, $M.56, $M.58, $M.57, $M.83, $M.62, $M.78, $M.87, $M.79, $M.72, $M.73, $M.70, $M.71, $M.63, $M.68, $M.69, $M.66, $M.67, $M.82, $M.81, $M.84, $M.88, $M.22, $M.64, $M.65;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation comedi_cleanup_loop_$bb15()
{

  entry:
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb15_dummy;

  $bb15_dummy:
    call {:si_unique_call 1} comedi_cleanup_loop_$bb15();
    return;

  exit:
    return;
}



procedure comedi_cleanup_loop_$bb15();



implementation comedi_cleanup_loop_$bb6()
{

  entry:
    goto $bb6, exit;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb6_dummy;

  $bb6_dummy:
    call {:si_unique_call 1} comedi_cleanup_loop_$bb6();
    return;

  exit:
    return;
}



procedure comedi_cleanup_loop_$bb6();



implementation comedi_init_loop_$bb23(in_$p30: ref, in_$p31: ref, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$p35: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$p35: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i29: i32)
{

  entry:
    out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i29 := in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p39, in_$i40, in_$i41, in_$i42, in_$i29;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_15725;

  $bb28:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i40;
    goto $bb28_dummy;

  corral_source_split_15745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_15744:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, out_$i41);
    goto corral_source_split_15745;

  corral_source_split_15743:
    assume {:verifier.code 0} true;
    out_$i41 := $M.21;
    goto corral_source_split_15744;

  corral_source_split_15742:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(out_$i29, 1);
    call {:si_unique_call 2718} {:cexpr "i"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_15743;

  corral_source_split_15741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2717} mutex_unlock(out_$p39);
    goto corral_source_split_15742;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p30, $mul.ref(0, 560)), $mul.ref(152, 1));
    goto corral_source_split_15741;

  $bb26:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  corral_source_split_15731:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p30;
    assume true;
    goto $bb26;

  corral_source_split_15730:
    assume {:verifier.code 0} true;
    out_$i34 := $trunc.i8.i1(out_$i33);
    goto corral_source_split_15731;

  corral_source_split_15729:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i1.i8(out_$i32);
    call {:si_unique_call 2711} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i33);
    goto corral_source_split_15730;

  corral_source_split_15728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2710} out_$i32 := IS_ERR(out_$p31);
    goto corral_source_split_15729;

  corral_source_split_15727:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_15728;

  SeqInstr_816:
    goto corral_source_split_15727;

  SeqInstr_815:
    assume assertsPassed;
    goto SeqInstr_816;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2709} out_$p30 := comedi_alloc_board_minor($0.ref);
    goto SeqInstr_815;

  corral_source_split_15725:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i29 := comedi_init_loop_$bb23(out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p39, out_$i40, out_$i41, out_$i42, out_$i29);
    return;

  exit:
    return;
}



procedure comedi_init_loop_$bb23(in_$p30: ref, in_$p31: ref, in_$i32: i1, in_$i33: i8, in_$i34: i1, in_$p35: ref, in_$p39: ref, in_$i40: i32, in_$i41: i32, in_$i42: i1, in_$i29: i32) returns (out_$p30: ref, out_$p31: ref, out_$i32: i1, out_$i33: i8, out_$i34: i1, out_$p35: ref, out_$p39: ref, out_$i40: i32, out_$i41: i32, out_$i42: i1, out_$i29: i32);
  modifies $M.0, $M.2, $CurrAddr, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $M.54, $M.25;



implementation {:SIextraRecBound 48} comedi_cleanup_board_minors_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i0: i32) returns (out_$i1: i32, out_$i2: i1, out_$i0: i32)
{

  entry:
    out_$i1, out_$i2, out_$i0 := in_$i1, in_$i2, in_$i0;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_15785;

  $bb3:
    assume out_$i2 == 1;
    assume {:verifier.code 0} true;
    out_$i0 := out_$i1;
    goto $bb3_dummy;

  corral_source_split_15789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3;

  corral_source_split_15788:
    assume {:verifier.code 0} true;
    out_$i2 := $ule.i32(out_$i1, 47);
    goto corral_source_split_15789;

  corral_source_split_15787:
    assume {:verifier.code 0} true;
    out_$i1 := $add.i32(out_$i0, 1);
    call {:si_unique_call 2740} {:cexpr "i"} boogie_si_record_i32(out_$i1);
    goto corral_source_split_15788;

  SeqInstr_825:
    goto corral_source_split_15787;

  SeqInstr_824:
    assume assertsPassed;
    goto SeqInstr_825;

  $bb2:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2739} comedi_free_board_minor(out_$i0);
    goto SeqInstr_824;

  corral_source_split_15785:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb3_dummy:
    call {:si_unique_call 1} out_$i1, out_$i2, out_$i0 := comedi_cleanup_board_minors_loop_$bb1(out_$i1, out_$i2, out_$i0);
    return;

  exit:
    return;
}



procedure comedi_cleanup_board_minors_loop_$bb1(in_$i1: i32, in_$i2: i1, in_$i0: i32) returns (out_$i1: i32, out_$i2: i1, out_$i0: i32);
  modifies $M.2, $M.0, $M.28, $M.23, $M.3, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.24, assertsPassed, $CurrAddr, $M.54, $M.25;



implementation comedi_free_board_minor_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} comedi_free_board_minor_loop_$bb3();
    return;

  exit:
    return;
}



procedure comedi_free_board_minor_loop_$bb3();


