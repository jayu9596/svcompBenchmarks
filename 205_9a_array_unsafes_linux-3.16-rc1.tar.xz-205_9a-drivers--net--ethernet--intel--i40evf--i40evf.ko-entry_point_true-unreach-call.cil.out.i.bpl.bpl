var $M.0: [ref]i8;

var $M.1: [ref]i32;

var $M.2: ref;

var $M.3: i32;

var $M.4: [ref]ref;

var $M.5: i32;

var $M.6: i32;

var $M.7: i32;

var $M.8: i32;

var $M.9: i32;

var $M.10: i32;

var $M.11: i32;

var $M.12: i32;

var $M.13: [ref]i8;

var $M.14: ref;

var $M.15: i32;

var $M.16: ref;

var $M.17: ref;

var $M.18: ref;

var $M.19: ref;

var $M.20: i32;

var $M.21: [ref]i8;

var $M.24: ref;

var $M.28: [ref]i8;

var $M.29: [ref]i64;

var $M.30: [ref]i32;

var $M.31: [ref]i32;

var $M.32: [ref]i32;

var $M.33: [ref]i32;

var $M.34: [ref]i8;

var $M.35: i32;

var $M.36: i32;

var $M.37: ref;

var $M.38: i32;

var $M.39: i32;

var $M.40: ref;

var $M.41: i32;

var $M.42: i32;

var $M.43: ref;

var $M.44: i32;

var $M.45: i32;

var $M.46: ref;

var $M.48: ref;

var $M.49: [ref]i8;

var $M.50: [ref]i8;

var $M.51: [ref]i8;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.60: i32;

var $M.61: i32;

var $M.62: i32;

var $M.63: i32;

var $M.64: i32;

var $M.65: ref;

var $M.66: ref;

var $M.67: ref;

var $M.68: ref;

var $M.76: [ref]i8;

var $M.77: [ref]i8;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 765296);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const ldv_irq_1_3: ref;

axiom ldv_irq_1_3 == $sub.ref(0, 1028);

const ldv_irq_1_0: ref;

axiom ldv_irq_1_0 == $sub.ref(0, 2056);

const ldv_timer_state_3: ref;

axiom ldv_timer_state_3 == $sub.ref(0, 3084);

const ldv_irq_2_0: ref;

axiom ldv_irq_2_0 == $sub.ref(0, 4112);

const ldv_irq_1_2: ref;

axiom ldv_irq_1_2 == $sub.ref(0, 5140);

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 6168);

const ldv_irq_1_1: ref;

axiom ldv_irq_1_1 == $sub.ref(0, 7196);

const ldv_irq_2_3: ref;

axiom ldv_irq_2_3 == $sub.ref(0, 8224);

const ldv_irq_2_2: ref;

axiom ldv_irq_2_2 == $sub.ref(0, 9252);

const ldv_irq_2_1: ref;

axiom ldv_irq_2_1 == $sub.ref(0, 10280);

const {:count 7} i40evf_driver_name: ref;

axiom i40evf_driver_name == $sub.ref(0, 11311);

const {:count 7} i40evf_driver_version: ref;

axiom i40evf_driver_version == $sub.ref(0, 12342);

const ldv_timer_list_3: ref;

axiom ldv_timer_list_3 == $sub.ref(0, 13374);

const i40evf_netdev_ops_group1: ref;

axiom i40evf_netdev_ops_group1 == $sub.ref(0, 14406);

const ldv_irq_line_2_0: ref;

axiom ldv_irq_line_2_0 == $sub.ref(0, 15434);

const ldv_irq_data_2_0: ref;

axiom ldv_irq_data_2_0 == $sub.ref(0, 16466);

const ldv_irq_line_2_1: ref;

axiom ldv_irq_line_2_1 == $sub.ref(0, 17494);

const ldv_irq_data_2_1: ref;

axiom ldv_irq_data_2_1 == $sub.ref(0, 18526);

const ldv_irq_line_2_2: ref;

axiom ldv_irq_line_2_2 == $sub.ref(0, 19554);

const ldv_irq_data_2_2: ref;

axiom ldv_irq_data_2_2 == $sub.ref(0, 20586);

const ldv_irq_line_2_3: ref;

axiom ldv_irq_line_2_3 == $sub.ref(0, 21614);

const ldv_irq_data_2_3: ref;

axiom ldv_irq_data_2_3 == $sub.ref(0, 22646);

const i40evf_driver_group0: ref;

axiom i40evf_driver_group0 == $sub.ref(0, 23678);

const ldv_irq_line_1_0: ref;

axiom ldv_irq_line_1_0 == $sub.ref(0, 24706);

const ldv_irq_line_1_1: ref;

axiom ldv_irq_line_1_1 == $sub.ref(0, 25734);

const ldv_irq_line_1_2: ref;

axiom ldv_irq_line_1_2 == $sub.ref(0, 26762);

const ldv_irq_line_1_3: ref;

axiom ldv_irq_line_1_3 == $sub.ref(0, 27790);

const ldv_irq_data_1_0: ref;

axiom ldv_irq_data_1_0 == $sub.ref(0, 28822);

const ldv_irq_data_1_1: ref;

axiom ldv_irq_data_1_1 == $sub.ref(0, 29854);

const ldv_irq_data_1_2: ref;

axiom ldv_irq_data_1_2 == $sub.ref(0, 30886);

const ldv_irq_data_1_3: ref;

axiom ldv_irq_data_1_3 == $sub.ref(0, 31918);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 32946);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 33974);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 35002);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 36030);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 37058);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 38086);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 39114);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 40142);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 41170);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 42198);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 43226);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 44254);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 45282);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 46310);

const i40evf_ethtool_ops_group1: ref;

axiom i40evf_ethtool_ops_group1 == $sub.ref(0, 47342);

const i40evf_ethtool_ops_group0: ref;

axiom i40evf_ethtool_ops_group0 == $sub.ref(0, 48374);

const i40evf_ethtool_ops_group2: ref;

axiom i40evf_ethtool_ops_group2 == $sub.ref(0, 49406);

const i40evf_ethtool_ops_group3: ref;

axiom i40evf_ethtool_ops_group3 == $sub.ref(0, 50438);

const {:count 256} i40evf_ptype_lookup: ref;

axiom i40evf_ptype_lookup == $sub.ref(0, 52486);

const last_index: ref;

axiom last_index == $sub.ref(0, 53514);

const LDV_SKBS: ref;

axiom LDV_SKBS == $sub.ref(0, 54546);

const __mod_pci__i40evf_pci_tbl_device_table: ref;

axiom __mod_pci__i40evf_pci_tbl_device_table == $sub.ref(0, 55602);

const {:count 15} set_impl: ref;

axiom set_impl == $sub.ref(0, 56746);

const {:count 12} i40evf_gstrings_stats: ref;

axiom i40evf_gstrings_stats == $sub.ref(0, 58202);

const i40evf_ethtool_ops: ref;

axiom i40evf_ethtool_ops == $sub.ref(0, 59602);

const i40evf_netdev_ops: ref;

axiom i40evf_netdev_ops == $sub.ref(0, 61106);

const {:count 45} i40evf_copyright: ref;

axiom i40evf_copyright == $sub.ref(0, 62175);

const {:count 52} i40evf_driver_string: ref;

axiom i40evf_driver_string == $sub.ref(0, 63251);

const {:count 2} i40evf_pci_tbl: ref;

axiom i40evf_pci_tbl == $sub.ref(0, 64339);

const i40evf_driver: ref;

axiom i40evf_driver == $sub.ref(0, 65675);

const {:count 37} .str.52: ref;

axiom .str.52 == $sub.ref(0, 66736);

const pv_irq_ops: ref;

axiom pv_irq_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 34} .str.53: ref;

axiom .str.53 == $sub.ref(0, 67794);

const dma_ops: ref;

axiom dma_ops == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 41} .str.117: ref;

axiom .str.117 == $sub.ref(0, 68859);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 26} .str.54: ref;

axiom .str.54 == $sub.ref(0, 69909);

const {:count 63} .str.55: ref;

axiom .str.55 == $sub.ref(0, 70996);

const cpu_number: ref;

axiom cpu_number == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const {:count 40} .str.109: ref;

axiom .str.109 == $sub.ref(0, 72060);

const {:count 33} .str.110: ref;

axiom .str.110 == $sub.ref(0, 73117);

const {:count 30} .str.111: ref;

axiom .str.111 == $sub.ref(0, 74171);

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 11} .str.107: ref;

axiom .str.107 == $sub.ref(0, 75206);

const {:count 31} .str.108: ref;

axiom .str.108 == $sub.ref(0, 76261);

const cpu_online_mask: ref;

axiom cpu_online_mask == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32816));

const {:count 37} .str.56: ref;

axiom .str.56 == $sub.ref(0, 77322);

const nr_cpu_ids: ref;

axiom nr_cpu_ids == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32824));

const {:count 36} .str.43: ref;

axiom .str.43 == $sub.ref(0, 78382);

const {:count 17} .str.44: ref;

axiom .str.44 == $sub.ref(0, 79423);

const {:count 32} .str.45: ref;

axiom .str.45 == $sub.ref(0, 80479);

const {:count 50} .str.46: ref;

axiom .str.46 == $sub.ref(0, 81553);

const {:count 28} .str.47: ref;

axiom .str.47 == $sub.ref(0, 82605);

const {:count 42} .str.48: ref;

axiom .str.48 == $sub.ref(0, 83671);

const {:count 26} .str.49: ref;

axiom .str.49 == $sub.ref(0, 84721);

const {:count 68} .str.35: ref;

axiom .str.35 == $sub.ref(0, 85813);

const {:count 29} .str.36: ref;

axiom .str.36 == $sub.ref(0, 86866);

const {:count 29} .str.37: ref;

axiom .str.37 == $sub.ref(0, 87919);

const {:count 29} .str.38: ref;

axiom .str.38 == $sub.ref(0, 88972);

const {:count 16} .str.39: ref;

axiom .str.39 == $sub.ref(0, 90012);

const {:count 30} .str.40: ref;

axiom .str.40 == $sub.ref(0, 91066);

const .str: ref;

axiom .str == $sub.ref(0, 92094);

const {:count 32} .str.71: ref;

axiom .str.71 == $sub.ref(0, 93150);

const {:count 33} .str.72: ref;

axiom .str.72 == $sub.ref(0, 94207);

const {:count 23} .str.73: ref;

axiom .str.73 == $sub.ref(0, 95254);

const {:count 24} .str.74: ref;

axiom .str.74 == $sub.ref(0, 96302);

const {:count 26} .str.75: ref;

axiom .str.75 == $sub.ref(0, 97352);

const {:count 31} .str.76: ref;

axiom .str.76 == $sub.ref(0, 98407);

const {:count 32} .str.77: ref;

axiom .str.77 == $sub.ref(0, 99463);

const {:count 29} .str.93: ref;

axiom .str.93 == $sub.ref(0, 100516);

const {:count 41} .str.94: ref;

axiom .str.94 == $sub.ref(0, 101581);

const {:count 33} .str.95: ref;

axiom .str.95 == $sub.ref(0, 102638);

const {:count 27} .str.96: ref;

axiom .str.96 == $sub.ref(0, 103689);

const {:count 37} .str.97: ref;

axiom .str.97 == $sub.ref(0, 104750);

const {:count 45} .str.98: ref;

axiom .str.98 == $sub.ref(0, 105819);

const {:count 33} .str.99: ref;

axiom .str.99 == $sub.ref(0, 106876);

const {:count 30} .str.100: ref;

axiom .str.100 == $sub.ref(0, 107930);

const {:count 18} .str.101: ref;

axiom .str.101 == $sub.ref(0, 108972);

const {:count 39} .str.102: ref;

axiom .str.102 == $sub.ref(0, 110035);

const {:count 18} .str.103: ref;

axiom .str.103 == $sub.ref(0, 111077);

const {:count 16} .str.104: ref;

axiom .str.104 == $sub.ref(0, 112117);

const {:count 4} .str.105: ref;

axiom .str.105 == $sub.ref(0, 113145);

const {:count 42} .str.106: ref;

axiom .str.106 == $sub.ref(0, 114211);

const {:count 40} .str.1: ref;

axiom .str.1 == $sub.ref(0, 115275);

const {:count 45} .str.2: ref;

axiom .str.2 == $sub.ref(0, 116344);

const {:count 38} .str.3: ref;

axiom .str.3 == $sub.ref(0, 117406);

const {:count 8} .str.5: ref;

axiom .str.5 == $sub.ref(0, 118438);

const {:count 9} .str.6: ref;

axiom .str.6 == $sub.ref(0, 119471);

const {:count 37} .str.4: ref;

axiom .str.4 == $sub.ref(0, 120532);

const {:count 48} .str.121: ref;

axiom .str.121 == $sub.ref(0, 121604);

const {:count 19} .str.122: ref;

axiom .str.122 == $sub.ref(0, 122647);

const numa_node: ref;

axiom numa_node == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32832));

const {:count 135} .str.118: ref;

axiom .str.118 == $sub.ref(0, 123806);

const {:count 80} .str.119: ref;

axiom .str.119 == $sub.ref(0, 124910);

const {:count 49} .str.120: ref;

axiom .str.120 == $sub.ref(0, 125983);

const {:count 36} .str.9: ref;

axiom .str.9 == $sub.ref(0, 127043);

const {:count 21} .str.10: ref;

axiom .str.10 == $sub.ref(0, 128088);

const {:count 38} .str.11: ref;

axiom .str.11 == $sub.ref(0, 129150);

const {:count 23} .str.50: ref;

axiom .str.50 == $sub.ref(0, 130197);

const {:count 39} .str.51: ref;

axiom .str.51 == $sub.ref(0, 131260);

const {:count 56} .str.116: ref;

axiom .str.116 == $sub.ref(0, 132340);

const {:count 18} .str.41: ref;

axiom .str.41 == $sub.ref(0, 133382);

const {:count 18} .str.42: ref;

axiom .str.42 == $sub.ref(0, 134424);

const x86_dma_fallback_dev: ref;

axiom x86_dma_fallback_dev == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32840));

const {:count 48} .str.91: ref;

axiom .str.91 == $sub.ref(0, 135496);

const {:count 25} .str.92: ref;

axiom .str.92 == $sub.ref(0, 136545);

const {:count 24} .str.12: ref;

axiom .str.12 == $sub.ref(0, 137593);

const {:count 21} .str.14: ref;

axiom .str.14 == $sub.ref(0, 138638);

const {:count 24} .str.13: ref;

axiom .str.13 == $sub.ref(0, 139686);

const {:count 22} .str.15: ref;

axiom .str.15 == $sub.ref(0, 140732);

const {:count 17} .str.22: ref;

axiom .str.22 == $sub.ref(0, 141773);

const {:count 42} .str.21: ref;

axiom .str.21 == $sub.ref(0, 142839);

const {:count 23} .str.19: ref;

axiom .str.19 == $sub.ref(0, 143886);

const {:count 49} .str.18: ref;

axiom .str.18 == $sub.ref(0, 144959);

const {:count 17} .str.20: ref;

axiom .str.20 == $sub.ref(0, 146000);

const {:count 23} .str.17: ref;

axiom .str.17 == $sub.ref(0, 147047);

const {:count 18} .str.16: ref;

axiom .str.16 == $sub.ref(0, 148089);

const {:count 28} .str.83: ref;

axiom .str.83 == $sub.ref(0, 149141);

const {:count 19} .str.84: ref;

axiom .str.84 == $sub.ref(0, 150184);

const {:count 23} .str.85: ref;

axiom .str.85 == $sub.ref(0, 151231);

const {:count 29} .str.86: ref;

axiom .str.86 == $sub.ref(0, 152284);

const {:count 29} .str.87: ref;

axiom .str.87 == $sub.ref(0, 153337);

const {:count 23} .str.88: ref;

axiom .str.88 == $sub.ref(0, 154384);

const {:count 29} .str.89: ref;

axiom .str.89 == $sub.ref(0, 155437);

const {:count 29} .str.90: ref;

axiom .str.90 == $sub.ref(0, 156490);

const {:count 16} .str.24: ref;

axiom .str.24 == $sub.ref(0, 157530);

const {:count 18} .str.25: ref;

axiom .str.25 == $sub.ref(0, 158572);

const {:count 27} .str.26: ref;

axiom .str.26 == $sub.ref(0, 159623);

const {:count 23} .str.27: ref;

axiom .str.27 == $sub.ref(0, 160670);

const {:count 30} .str.28: ref;

axiom .str.28 == $sub.ref(0, 161724);

const {:count 27} .str.29: ref;

axiom .str.29 == $sub.ref(0, 162775);

const {:count 35} .str.30: ref;

axiom .str.30 == $sub.ref(0, 163834);

const {:count 44} .str.31: ref;

axiom .str.31 == $sub.ref(0, 164902);

const {:count 44} .str.32: ref;

axiom .str.32 == $sub.ref(0, 165970);

const {:count 26} .str.78: ref;

axiom .str.78 == $sub.ref(0, 167020);

const {:count 27} .str.79: ref;

axiom .str.79 == $sub.ref(0, 168071);

const {:count 49} .str.80: ref;

axiom .str.80 == $sub.ref(0, 169144);

const {:count 18} .str.81: ref;

axiom .str.81 == $sub.ref(0, 170186);

const {:count 28} .str.82: ref;

axiom .str.82 == $sub.ref(0, 171238);

const {:count 44} .str.8: ref;

axiom .str.8 == $sub.ref(0, 172306);

const {:count 39} .str.59: ref;

axiom .str.59 == $sub.ref(0, 173369);

const {:count 30} .str.60: ref;

axiom .str.60 == $sub.ref(0, 174423);

const {:count 63} .str.34: ref;

axiom .str.34 == $sub.ref(0, 175510);

const {:count 39} .str.57: ref;

axiom .str.57 == $sub.ref(0, 176573);

const {:count 30} .str.58: ref;

axiom .str.58 == $sub.ref(0, 177627);

const {:count 63} .str.33: ref;

axiom .str.33 == $sub.ref(0, 178714);

const {:count 245} .str.7: ref;

axiom .str.7 == $sub.ref(0, 179983);

const __preempt_count: ref;

axiom __preempt_count == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32848));

const {:count 19} .str.123: ref;

axiom .str.123 == $sub.ref(0, 181026);

const {:count 37} .str.124: ref;

axiom .str.124 == $sub.ref(0, 182087);

const {:count 49} .str.61: ref;

axiom .str.61 == $sub.ref(0, 183160);

const {:count 16} .str.62: ref;

axiom .str.62 == $sub.ref(0, 184200);

const {:count 5} .str.63: ref;

axiom .str.63 == $sub.ref(0, 185229);

const {:count 3} .str.64: ref;

axiom .str.64 == $sub.ref(0, 186256);

const {:count 3} .str.65: ref;

axiom .str.65 == $sub.ref(0, 187283);

const {:count 35} .str.66: ref;

axiom .str.66 == $sub.ref(0, 188342);

const {:count 28} .str.67: ref;

axiom .str.67 == $sub.ref(0, 189394);

const {:count 14} .str.112: ref;

axiom .str.112 == $sub.ref(0, 190432);

const {:count 12} .str.113: ref;

axiom .str.113 == $sub.ref(0, 191468);

const {:count 14} .str.114: ref;

axiom .str.114 == $sub.ref(0, 192506);

const {:count 12} .str.115: ref;

axiom .str.115 == $sub.ref(0, 193542);

const {:count 26} .str.68: ref;

axiom .str.68 == $sub.ref(0, 194592);

const {:count 5} .str.69: ref;

axiom .str.69 == $sub.ref(0, 195621);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32856));

const {:count 7} .str.70: ref;

axiom .str.70 == $sub.ref(0, 196652);

const {:count 23} .str.23: ref;

axiom .str.23 == $sub.ref(0, 197699);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 198731);

const {:count 3} .str.1.264: ref;

axiom .str.1.264 == $sub.ref(0, 199758);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 200796);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 201824);

const __kmalloc: ref;

axiom __kmalloc == $sub.ref(0, 202856);

procedure __kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 0} {:cexpr "__kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 1} {:cexpr "__kmalloc:arg:t"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := ldv_malloc($i0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 203888);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const ldv_malloc: ref;

axiom ldv_malloc == $sub.ref(0, 204920);

procedure ldv_malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_malloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 3} {:cexpr "ldv_malloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 1} true;
    call {:si_unique_call 4} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 5} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 6} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p4 := malloc($i0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 1} true;
    call {:si_unique_call 8} __VERIFIER_assume($i7);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const malloc: ref;

axiom malloc == $sub.ref(0, 205952);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 9} $r := $malloc($i0);
    return;
}



const i40evf_probe: ref;

axiom i40evf_probe == $sub.ref(0, 206984);

procedure i40evf_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.20, $CurrAddr;



implementation i40evf_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p33: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p49: ref;
  var $i50: i64;
  var $p53: ref;
  var $i54: i64;
  var $i55: i1;
  var $p58: ref;
  var $i59: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p67: ref;
  var $i68: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $i83: i16;
  var $p84: ref;
  var $p85: ref;
  var $i86: i16;
  var $p87: ref;
  var $p88: ref;
  var $p90: ref;
  var $i91: i16;
  var $p92: ref;
  var $p93: ref;
  var $i94: i16;
  var $p95: ref;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i16;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i16;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p120: ref;
  var $p122: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p132: ref;
  var $p134: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p144: ref;
  var $p146: ref;
  var $p148: ref;
  var $p150: ref;
  var $p151: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p159: ref;
  var $p162: ref;
  var $p165: ref;
  var $p167: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i64;
  var $p175: ref;
  var $p176: ref;
  var $i32: i32;
  var $i27: i32;
  var $i22: i32;
  var $i13: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $p6 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p8 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} $p10 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i11 := pci_enable_device($p0);
    call {:si_unique_call 20} {:cexpr "err"} boogie_si_record_i32($i11);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} $i15 := dma_set_mask_and_coherent($p14, $sub.i64(0, 1));
    call {:si_unique_call 22} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $i23 := pci_request_regions($p0, i40evf_driver_name);
    call {:si_unique_call 28} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} vslice_dummy_var_132 := pci_enable_pcie_error_reporting($p0);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} pci_set_master($p0);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} $p29 := alloc_etherdev_mqs(3432, 8, 8);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 3176)), $mul.ref(1296, 1)), $mul.ref(0, 1));
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p33);
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p29);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} pci_set_drvdata($p0, $p36);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p37 := netdev_priv($p29);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p29);
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p0);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(8, 1));
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p43, $p37);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(2776, 1));
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, 7);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} vslice_dummy_var_133 := pci_save_state($p0);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i50 := $load.i64($M.0, $p49);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i55 == 1);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $i63 := $load.i64($M.0, $p62);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i59, $i63);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i64 == 1);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $p76 := ioremap($i50, $i75);
    $p77 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p77, $p76);
    $p78 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i80 := $p2i.ref.i64($p79);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i81 := $eq.i64($i80, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(60, 1));
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $i83 := $load.i16($M.0, $p82);
    $p84 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(162, 1));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p84, $i83);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(62, 1));
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    $p87 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(160, 1));
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, $i86);
    $p88 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(168, 1));
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_134 := pci_read_config_byte($p0, 8, $p88);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(64, 1));
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    $p92 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(166, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p92, $i91);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(66, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $i94 := $load.i16($M.0, $p93);
    $p95 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(164, 1));
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p95, $i94);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $i98 := $lshr.i32($i97, 3);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, 31);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $i102 := $trunc.i32.i16($i101);
    $p104 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(100, 1)), $mul.ref(14, 1));
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p104, $i102);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.0, $p105);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i16($i106);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i108 := $zext.i16.i32($i107);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i109 := $and.i32($i108, 7);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i110 := $trunc.i32.i16($i109);
    $p112 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(100, 1)), $mul.ref(12, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p112, $i110);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(128, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} __init_work($p113, 0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p3, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p114, 137438953408);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(128, 1)), $mul.ref(0, 1));
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p3);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 41} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p117, $p118, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(128, 1)), $mul.ref(32, 1));
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} lockdep_init_map($p120, .str.73, $p2, 0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(128, 1)), $mul.ref(8, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} INIT_LIST_HEAD($p122);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(128, 1)), $mul.ref(24, 1));
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p124, i40evf_reset_task);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(208, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} __init_work($p125, 0);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p5, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p126, 137438953408);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p128);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p5);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 45} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p129, $p130, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(208, 1)), $mul.ref(32, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} lockdep_init_map($p132, .str.74, $p4, 0);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(208, 1)), $mul.ref(8, 1));
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} INIT_LIST_HEAD($p134);
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(208, 1)), $mul.ref(24, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p136, i40evf_adminq_task);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(2672, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __init_work($p137, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p138, 137438953408);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(2672, 1)), $mul.ref(0, 1));
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p7);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 49} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p141, $p142, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(2672, 1)), $mul.ref(32, 1));
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} lockdep_init_map($p144, .str.75, $p6, 0);
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(2672, 1)), $mul.ref(8, 1));
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} INIT_LIST_HEAD($p146);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(2672, 1)), $mul.ref(24, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p148, i40evf_watchdog_task);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(0, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} __init_work($p150, 0);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p9, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p151, 137438953408);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p155 := $bitcast.ref.ref($p154);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p156 := $bitcast.ref.ref($p9);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 53} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p155, $p156, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(32, 1));
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} lockdep_init_map($p159, .str.76, $p8, 0);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} INIT_LIST_HEAD($p162);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(0, 1)), $mul.ref(24, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p165, i40evf_init_task);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(80, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} init_timer_key($p167, 2, .str.77, $p10);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(32, 1));
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p170, delayed_work_timer_fn);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1));
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i172 := $p2i.ref.i64($p171);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1)), $mul.ref(80, 1)), $mul.ref(40, 1));
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p175, $i172);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p38, $mul.ref(0, 3448)), $mul.ref(288, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} vslice_dummy_var_135 := schedule_delayed_work($p176, 10);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb26:
    assume $i81 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} ldv_free_netdev_27($p29);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 5);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} pci_release_regions($p0);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $i27 := $i32;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i22 := $i27;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} pci_disable_device($p0);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i64 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i68 := $load.i64($M.0, $p67);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(1584, 1)), $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i73 := $sub.i64($i68, $i72);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 1);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $i75 := $i74;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb21;

  $bb16:
    assume $i31 == 1;
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32(0, 12);
    goto $bb18;

  $bb12:
    assume $i24 == 1;
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} vslice_dummy_var_131 := dev_err.ref.ref.i32($p25, .str.72, $i23);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $i27 := $i23;
    goto $bb14;

  $bb5:
    assume $i16 == 1;
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} $i18 := dma_set_mask_and_coherent($p17, 4294967295);
    call {:si_unique_call 24} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb7:
    assume $i19 == 1;
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} vslice_dummy_var_130 := dev_err.ref.ref.i32($p20, .str.71, $i18);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i22 := $i18;
    goto $bb9;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb3;
}



const i40evf_remove: ref;

axiom i40evf_remove == $sub.ref(0, 208016);

procedure i40evf_remove($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.20, $M.5, $M.7, $M.9, $M.11, $M.15, $M.14, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $CurrAddr, $M.21, $M.4, $M.3;



implementation i40evf_remove($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var vslice_dummy_var_136: i1;
  var vslice_dummy_var_137: i1;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 58} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} $p3 := netdev_priv($p2);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(288, 1));
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} vslice_dummy_var_136 := cancel_delayed_work_sync($p6);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(128, 1));
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} vslice_dummy_var_137 := cancel_work_sync($p8);
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2752, 1));
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 1);
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(0, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} vslice_dummy_var_138 := ldv_del_timer_sync_29($p19);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} flush_scheduled_work();
    $p23 := $add.ref($add.ref($add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p28 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} iounmap($p29);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} pci_release_regions($p0);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} i40evf_free_queues($p4);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2760, 1));
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} kfree($p32);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} ldv_free_netdev_30($p2);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} vslice_dummy_var_140 := pci_disable_pcie_error_reporting($p0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} pci_disable_device($p0);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i26 == 1;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} vslice_dummy_var_139 := i40evf_shutdown_adminq($p5);
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} i40evf_misc_irq_disable($p4);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} i40evf_free_misc_irq($p4);
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} i40evf_reset_interrupt_capability($p4);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} ldv_unregister_netdev_28($p2);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2752, 1));
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_suspend: ref;

axiom i40evf_suspend == $sub.ref(0, 209048);

procedure i40evf_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.0, $CurrAddr, $M.5, $M.7, $M.9, $M.11, $M.14, $M.15, $M.4, $M.3, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19;



implementation i40evf_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.1 := $store.i32($M.1, $p3, $i1);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} $p4 := pci_get_drvdata($p0);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p6 := netdev_priv($p5);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} netif_device_detach($p5);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i8 := netif_running($p5);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 81} {:cexpr "tmp___1"} boogie_si_record_i8($i9);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} i40evf_free_misc_irq($p7);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} i40evf_reset_interrupt_capability($p7);
    goto corral_source_split_280;

  corral_source_split_280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i11 := pci_save_state($p0);
    call {:si_unique_call 88} {:cexpr "retval"} boogie_si_record_i32($i11);
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} pci_disable_device($p0);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i13 := $i11;
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} rtnl_lock();
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} i40evf_down($p7);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} rtnl_unlock();
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_resume: ref;

axiom i40evf_resume == $sub.ref(0, 210080);

procedure i40evf_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $CurrAddr;



implementation i40evf_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p20: ref;
  var $i11: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} vslice_dummy_var_141 := pci_set_power_state($p0, 0);
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} pci_restore_state($p0);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} vslice_dummy_var_142 := pci_save_state($p0);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i7 := pci_enable_device_mem($p0);
    call {:si_unique_call 95} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} pci_set_master($p0);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} rtnl_lock();
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $i12 := i40evf_set_interrupt_capability($p2);
    call {:si_unique_call 100} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i16 := i40evf_request_misc_irq($p2);
    call {:si_unique_call 103} {:cexpr "tmp___2"} boogie_si_record_i32($i16);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} rtnl_unlock();
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(128, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 106} vslice_dummy_var_146 := schedule_work($p20);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} netif_device_attach($p4);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} vslice_dummy_var_145 := dev_err.ref.ref($p18, .str.111);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i11 := $i16;
    goto $bb3;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} vslice_dummy_var_144 := dev_err.ref.ref($p14, .str.110);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $i11 := $i12;
    goto $bb3;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} vslice_dummy_var_143 := dev_err.ref.ref($p9, .str.109);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb3;
}



const i40evf_shutdown: ref;

axiom i40evf_shutdown == $sub.ref(0, 211112);

procedure i40evf_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.4, $M.3, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $CurrAddr;



implementation i40evf_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $p1 := pci_get_drvdata($p0);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} netif_device_detach($p2);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} $i3 := netif_running($p2);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 111} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} vslice_dummy_var_148 := pci_save_state($p0);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} pci_disable_device($p0);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} vslice_dummy_var_147 := i40evf_close($p2);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_get_drvdata: ref;

axiom pci_get_drvdata == $sub.ref(0, 212144);

procedure pci_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const netif_device_detach: ref;

axiom netif_device_detach == $sub.ref(0, 213176);

procedure netif_device_detach($p0: ref);
  free requires assertsPassed;



implementation netif_device_detach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    return;
}



const netif_running: ref;

axiom netif_running == $sub.ref(0, 214208);

procedure netif_running($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation netif_running($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(72, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 117} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const i40evf_close: ref;

axiom i40evf_close == $sub.ref(0, 215240);

procedure i40evf_close($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.4, $M.3, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $CurrAddr;



implementation i40evf_close($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} $p1 := netdev_priv($p0);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $i5 := $ule.i32($i4, 6);
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(536, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} set_bit(6, $p7);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} i40evf_down($p2);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 6);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} i40evf_free_traffic_irqs($p2);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} i40evf_free_all_tx_resources($p2);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} i40evf_free_all_rx_resources($p2);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_save_state: ref;

axiom pci_save_state == $sub.ref(0, 216272);

procedure pci_save_state($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_save_state($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 1} true;
    call {:si_unique_call 124} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 125} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const pci_disable_device: ref;

axiom pci_disable_device == $sub.ref(0, 217304);

procedure pci_disable_device($p0: ref);
  free requires assertsPassed;



implementation pci_disable_device($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    return;
}



const netdev_priv: ref;

axiom netdev_priv == $sub.ref(0, 218336);

procedure netdev_priv($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_priv($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(3264, 1));
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 219368);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 127} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_down: ref;

axiom i40evf_down == $sub.ref(0, 220400);

procedure i40evf_down($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.4, $M.3, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $CurrAddr;



implementation i40evf_down($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p15: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p33: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var vslice_dummy_var_149: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 6);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(728, 1)), $mul.ref(0, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(728, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i11, $i13);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(544, 1)), $mul.ref(0, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(544, 1));
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i29, $i31);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 256);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} netif_tx_disable($p2);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} netif_tx_stop_all_queues($p2);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} i40evf_irq_disable($p0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} i40evf_napi_disable_all($p0);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 134} netif_carrier_off($p2);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} i40evf_clean_all_tx_rings($p0);
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} i40evf_clean_all_rx_rings($p0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i45 == 1;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 5);
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    assume {:branchcond $i48} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb23;

  $bb24:
    assume $i48 == 1;
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i51 := $or.i32($i50, 16);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i55 := $or.i32($i54, 32);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p56, $i55);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, 2);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(0, 1));
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i62 := $load.i64($M.0, jiffies);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i63 := $add.i64($i62, 1);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} vslice_dummy_var_149 := ldv_mod_timer_pending_21($p61, $i63);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} msleep(20);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i32 == 1;
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p33 := $p26;
    goto $bb16;

  $bb16:
    call $p34, $p36, $p37, $p38, $p39, $i40, $i41, $p33 := i40evf_down_loop_$bb16($i31, $p34, $p36, $p37, $p38, $p39, $i40, $i41, $p33);
    goto $bb16_last;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, 1);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p33, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, $i31);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $p33 := $p37;
    goto $bb18_dummy;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p15 := $p8;
    goto $bb8;

  $bb8:
    call $p16, $p18, $p19, $p20, $p21, $i22, $i23, $p15 := i40evf_down_loop_$bb8($i13, $p16, $p18, $p19, $p20, $p21, $i22, $i23, $p15);
    goto $bb8_last;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, $i13);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i23 == 1);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $p15 := $p19;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;
}



const i40evf_free_traffic_irqs: ref;

axiom i40evf_free_traffic_irqs == $sub.ref(0, 221432);

procedure i40evf_free_traffic_irqs($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation i40evf_free_traffic_irqs($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i64;
  var $p11: ref;
  var $i12: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i5: i32;
  var vslice_dummy_var_150: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    call {:si_unique_call 137} {:cexpr "q_vectors"} boogie_si_record_i32($i3);
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $p6, $p7, $i8, $i9, $p11, $i12, $p14, $p15, $i16, $i17, $p19, $i20, $i21, $p23, $p24, $p25, $i26, $i27, $i5, vslice_dummy_var_150 := i40evf_free_traffic_irqs_loop_$bb4($p0, $i3, $p6, $p7, $i8, $i9, $p11, $i12, $p14, $p15, $i16, $i17, $p19, $i20, $i21, $p23, $p24, $p25, $i26, $i27, $i5, vslice_dummy_var_150);
    goto $bb4_last;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, 1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref($i9, 8)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} vslice_dummy_var_150 := irq_set_affinity_hint($i12, $0.ref);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i5);
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $i17 := $add.i64($i16, 1);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p15, $mul.ref($i17, 8)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i5);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref($i21, 8));
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_free_irq_18($i20, $p25);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i5, 1);
    call {:si_unique_call 140} {:cexpr "i"} boogie_si_record_i32($i26);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, $i3);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i26;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_487;
}



const i40evf_free_all_tx_resources: ref;

axiom i40evf_free_all_tx_resources == $sub.ref(0, 222464);

procedure i40evf_free_all_tx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_free_all_tx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i7 := i40evf_free_all_tx_resources_loop_$bb4($p0, $p1, $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i7);
    goto $bb4_last;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i8, 8));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i7, 1);
    call {:si_unique_call 142} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p1);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, $i20);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb9_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i16, 8));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} i40evf_free_tx_resources($p19);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_524;
}



const i40evf_free_all_rx_resources: ref;

axiom i40evf_free_all_rx_resources == $sub.ref(0, 223496);

procedure i40evf_free_all_rx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3;



implementation i40evf_free_all_rx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i16: i64;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i7 := i40evf_free_all_rx_resources_loop_$bb4($p0, $p1, $i8, $p10, $p11, $p12, $p13, $i14, $i15, $i16, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i7);
    goto $bb4_last;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i8, 8));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i7, 1);
    call {:si_unique_call 144} {:cexpr "i"} boogie_si_record_i32($i20);
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p1);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i25 := $sgt.i32($i24, $i20);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i25 == 1);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb9_dummy;

  $bb6:
    assume $i15 == 1;
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i16, 8));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} i40evf_free_rx_resources($p19);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_559;
}



const i40evf_free_rx_resources: ref;

axiom i40evf_free_rx_resources == $sub.ref(0, 224528);

procedure i40evf_free_rx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3;



implementation i40evf_free_rx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} i40evf_clean_rx_ring($p0);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} kfree($p4);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} dma_free_attrs($p12, $i15, $p17, $i19, $0.ref);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_clean_rx_ring: ref;

axiom i40evf_clean_rx_ring == $sub.ref(0, 225560);

procedure i40evf_clean_rx_ring($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3;



implementation i40evf_clean_rx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i16;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i32;
  var $i51: i16;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i1;
  var $i12: i16;
  var $p56: ref;
  var $i57: i16;
  var $i58: i64;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i64;
  var $p69: ref;
  var $p70: ref;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 0);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i64($i57);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i59 := $mul.i64($i58, 40);
    call {:si_unique_call 153} {:cexpr "bi_size"} boogie_si_record_i64($i59);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 154} cmdloc_dummy_var_13 := $memset.i8(cmdloc_dummy_var_12, $p63, 0, $i59, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $i68 := $zext.i32.i64($i67);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 155} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p65, 0, $i68, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p69, 0);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, 0);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb8:
    call $p13, $p14, $p15, $i16, $p18, $i19, $i20, $p21, $i22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i12 := i40evf_clean_rx_ring_loop_$bb8($p0, $p2, $p8, $p13, $p14, $p15, $i16, $p18, $i19, $i20, $p21, $i22, $p23, $i24, $i25, $p26, $p27, $p28, $i29, $i30, $p31, $p32, $p33, $p34, $p35, $p36, $i37, $i38, $p39, $i40, $i41, $p42, $i43, $p44, $p45, $p46, $p47, $p48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i12);
    goto $bb8_last;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i64($i12);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(8, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p36);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i12);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i50 := $add.i32($i49, 1);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    call {:si_unique_call 152} {:cexpr "i"} boogie_si_record_i16($i51);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $i52 := $load.i16($M.0, $p8);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i52);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i54 := $zext.i16.i32($i51);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $i55 := $sgt.i32($i53, $i54);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i55 == 1);
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb22:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i12 := $i51;
    goto $bb22_dummy;

  $bb16:
    assume $i38 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(24, 1));
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.0, $p39);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __free_pages($p46, 0);
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p47, $0.ref);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(32, 1));
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, 0);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb18:
    assume $i41 == 1;
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(24, 1));
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} dma_unmap_page($p2, $i43, 2048, 2);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(24, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p44, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i30 == 1;
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} ldv_skb_free($p33);
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p34, $0.ref);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i20 == 1;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(8, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $i22 := $load.i64($M.0, $p21);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i24);
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} dma_unmap_single_attrs($p2, $i22, $i25, 2, $0.ref);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p15, $mul.ref($i16, 40)), $mul.ref(8, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p26, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb22_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_631;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 226592);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} free_($p0);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    return;
}



const dma_free_attrs: ref;

axiom dma_free_attrs == $sub.ref(0, 227624);

procedure dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref);
  free requires assertsPassed;



implementation dma_free_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i64, $p4: ref)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var vslice_dummy_var_151: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} {:cexpr "dma_free_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 158} {:cexpr "dma_free_attrs:arg:bus"} boogie_si_record_i64($i3);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p5 := get_dma_ops($p0);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 160} $i6 := arch_local_save_flags();
    call {:si_unique_call 161} {:cexpr "_flags"} boogie_si_record_i64($i6);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} $i7 := arch_irqs_disabled_flags($i6);
    call {:si_unique_call 163} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    call {:si_unique_call 164} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i9);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 166} {:cexpr "tmp___1"} boogie_si_record_i64($i13);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i9, 0);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} vslice_dummy_var_151 := ldv__builtin_expect($i17, 0);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} debug_dma_free_coherent($p0, $i1, $p2, $i3);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(8, 1));
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    call {:si_unique_call 170} devirtbounce.1($p24, $p0, $i1, $p2, $i3, $p4);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} warn_slowpath_null(.str.52, 166);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_dma_ops: ref;

axiom get_dma_ops == $sub.ref(0, 228656);

procedure get_dma_ops($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation get_dma_ops($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p15: ref;
  var $p16: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 172} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1224, 1)), $mul.ref(0, 1));
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $p13 := $p16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $r := $p13;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, dma_ops);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p13 := $p12;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const arch_local_save_flags: ref;

axiom arch_local_save_flags == $sub.ref(0, 229688);

procedure arch_local_save_flags() returns ($r: i64);
  free requires assertsPassed;



implementation arch_local_save_flags() returns ($r: i64)
{
  var $p0: ref;
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p0 := $load.ref($M.0, pv_irq_ops);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 174} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 176} $i7 := devirtbounce.3(0, 44, pv_irq_ops, 1);
    call {:si_unique_call 177} {:cexpr "__eax"} boogie_si_record_i64($i7);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 175} devirtbounce.2(0, .str.53, 804, 12);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call arch_local_save_flags_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const arch_irqs_disabled_flags: ref;

axiom arch_irqs_disabled_flags == $sub.ref(0, 230720);

procedure arch_irqs_disabled_flags($i0: i64) returns ($r: i32);
  free requires assertsPassed;



implementation arch_irqs_disabled_flags($i0: i64) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} {:cexpr "arch_irqs_disabled_flags:arg:flags"} boogie_si_record_i64($i0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $i1 := $and.i64($i0, 512);
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 231752);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 180} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 232784);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_free_coherent: ref;

axiom debug_dma_free_coherent == $sub.ref(0, 233816);

procedure debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation debug_dma_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} {:cexpr "debug_dma_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 183} {:cexpr "debug_dma_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 234848);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 184} $free($p0);
    return;
}



const dma_unmap_single_attrs: ref;

axiom dma_unmap_single_attrs == $sub.ref(0, 235880);

procedure dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref);
  free requires assertsPassed;



implementation dma_unmap_single_attrs($p0: ref, $i1: i64, $i2: i64, $i3: i32, $p4: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} {:cexpr "dma_unmap_single_attrs:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 186} {:cexpr "dma_unmap_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 187} {:cexpr "dma_unmap_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p5 := get_dma_ops($p0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $i6 := valid_dma_direction($i3);
    call {:si_unique_call 190} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $i10 := ldv__builtin_expect($i9, 0);
    call {:si_unique_call 192} {:cexpr "tmp___1"} boogie_si_record_i64($i10);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i15 := $ne.i64($i14, 0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} debug_dma_unmap_page($p0, $i1, $i2, $i3, 1);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    call {:si_unique_call 194} devirtbounce.4($p17, $p0, $i1, $i2, $i3, $p4);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i11 == 1;
    call {:si_unique_call 193} devirtbounce.2(0, .str.117, 36, 12);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ldv_skb_free: ref;

axiom ldv_skb_free == $sub.ref(0, 236912);

procedure ldv_skb_free($p0: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_skb_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p1 := $M.2;
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} ldv_set_remove($p1, $p2);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    return;
}



const dma_unmap_page: ref;

axiom dma_unmap_page == $sub.ref(0, 237944);

procedure dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32);
  free requires assertsPassed;



implementation dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} {:cexpr "dma_unmap_page:arg:addr"} boogie_si_record_i64($i1);
    call {:si_unique_call 198} {:cexpr "dma_unmap_page:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 199} {:cexpr "dma_unmap_page:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} $p4 := get_dma_ops($p0);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $i5 := valid_dma_direction($i3);
    call {:si_unique_call 202} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 204} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} debug_dma_unmap_page($p0, $i1, $i2, $i3, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 206} devirtbounce.4($p16, $p0, $i1, $i2, $i3, $0.ref);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 205} devirtbounce.2(0, .str.117, 91, 12);
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_unmap_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const __free_pages: ref;

axiom __free_pages == $sub.ref(0, 238976);

procedure __free_pages($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __free_pages($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} {:cexpr "__free_pages:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 240008);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const valid_dma_direction: ref;

axiom valid_dma_direction == $sub.ref(0, 241040);

procedure valid_dma_direction($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation valid_dma_direction($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i3: i1;
  var $i4: i1;
  var $i2: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} {:cexpr "valid_dma_direction:arg:dma_direction"} boogie_si_record_i32($i0);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $i1 := $eq.i32($i0, 0);
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i1} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i1 == 1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 1);
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $i2 := 1;
    assume {:branchcond $i3} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i3 == 1);
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, 2);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i2 := $i4;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i2);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i1 == 1;
    goto $bb2;
}



const debug_dma_unmap_page: ref;

axiom debug_dma_unmap_page == $sub.ref(0, 242072);

procedure debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1);
  free requires assertsPassed;



implementation debug_dma_unmap_page($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} {:cexpr "debug_dma_unmap_page:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 211} {:cexpr "debug_dma_unmap_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 212} {:cexpr "debug_dma_unmap_page:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 213} {:cexpr "debug_dma_unmap_page:arg:arg4"} boogie_si_record_i1($i4);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    return;
}



const ldv_set_remove: ref;

axiom ldv_set_remove == $sub.ref(0, 243104);

procedure ldv_set_remove($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.4, $M.3;



implementation ldv_set_remove($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i5: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i30: i32;
  var $i31: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i2 := $M.3;
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32(0, $i2);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i16 == 1;
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i5, 1);
    call {:si_unique_call 215} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i18 := $M.3;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, $i18);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i30 := $M.3;
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32($i30, 1);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.3 := $i31;
    call {:si_unique_call 217} {:cexpr "last_index"} boogie_si_record_i32($i31);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb14:
    assume $i19 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $i20 := $i17;
    goto $bb17;

  $bb17:
    call $i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29 := ldv_set_remove_loop_$bb17($i20, $i21, $p22, $p23, $i24, $i25, $p26, $i27, $i28, $i29);
    goto $bb17_last;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i20);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i21, 8));
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.4, $p22);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    $i24 := $sub.i32($i20, 1);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i25, 8));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, $p23);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i20, 1);
    call {:si_unique_call 216} {:cexpr "i"} boogie_si_record_i32($i27);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i28 := $M.3;
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i27, $i28);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb19;

  $bb19:
    assume !($i29 == 1);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i20 := $i27;
    goto $bb21_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15 := ldv_set_remove_loop_$bb4($p1, $i4, $i6, $p7, $p8, $i9, $i10, $i11, $i12, $i13, $i14, $i15);
    goto $bb4_last;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i4);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref($i6, 8));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.4, $p7);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i9, $i10);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i12 := $i4;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i4, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32($i13);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i14 := $M.3;
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, $i14);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i13;
    goto $bb11_dummy;

  $bb8:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $i5 := $i12;
    goto $bb7;

  $bb21_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_869;
}



const i40evf_free_tx_resources: ref;

axiom i40evf_free_tx_resources == $sub.ref(0, 244136);

procedure i40evf_free_tx_resources($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_free_tx_resources($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} i40evf_clean_tx_ring($p0);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} kfree($p4);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i15 := $zext.i32.i64($i14);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i19 := $load.i64($M.0, $p18);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} dma_free_attrs($p12, $i15, $p17, $i19, $0.ref);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $0.ref);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_clean_tx_ring: ref;

axiom i40evf_clean_tx_ring == $sub.ref(0, 245168);

procedure i40evf_clean_tx_ring($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_clean_tx_ring($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i10: i16;
  var $p23: ref;
  var $i24: i16;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i64;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $p47: ref;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $i9 := $sgt.i32($i8, 0);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i24);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    $i26 := $mul.i64($i25, 48);
    call {:si_unique_call 223} {:cexpr "bi_size"} boogie_si_record_i64($i26);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    call {:si_unique_call 224} cmdloc_dummy_var_17 := $memset.i8(cmdloc_dummy_var_16, $p30, 0, $i26, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_17;
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i34);
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 225} cmdloc_dummy_var_19 := $memset.i8(cmdloc_dummy_var_18, $p32, 0, $i35, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, 0);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p37, 0);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $p47 := netdev_get_tx_queue($p43, $i46);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} netdev_tx_reset_queue($p47);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i41 == 1;
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb8;

  $bb8:
    call $p11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i10 := i40evf_clean_tx_ring_loop_$bb8($p0, $p6, $p11, $p12, $p13, $i14, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i10);
    goto $bb8_last;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i64($i10);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 48));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} i40e_unmap_and_free_tx_resource($p0, $p15);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i10);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    call {:si_unique_call 222} {:cexpr "i"} boogie_si_record_i16($i18);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p6);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i18);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i22 := $sgt.i32($i20, $i21);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i22 == 1);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i10 := $i18;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;
}



const i40e_unmap_and_free_tx_resource: ref;

axiom i40e_unmap_and_free_tx_resource == $sub.ref(0, 246200);

procedure i40e_unmap_and_free_tx_resource($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_unmap_and_free_tx_resource($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $0.ref);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, 0);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.0, $p23);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $i27 := $zext.i32.i64($i26);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} dma_unmap_page($p22, $i24, $i27, 1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} dev_kfree_skb_any($p7);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} dma_unmap_single_attrs($p12, $i14, $i17, 1, $0.ref);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const netdev_get_tx_queue: ref;

axiom netdev_get_tx_queue == $sub.ref(0, 247232);

procedure netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_get_tx_queue($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} {:cexpr "netdev_get_tx_queue:arg:index"} boogie_si_record_i32($i1);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(920, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p3, $mul.ref($i4, 496));
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const netdev_tx_reset_queue: ref;

axiom netdev_tx_reset_queue == $sub.ref(0, 248264);

procedure netdev_tx_reset_queue($p0: ref);
  free requires assertsPassed;



implementation netdev_tx_reset_queue($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} clear_bit(1, $p1);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(432, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} dql_reset($p2);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 249296);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 235} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    return;
}



const dql_reset: ref;

axiom dql_reset == $sub.ref(0, 250328);

procedure dql_reset($p0: ref);
  free requires assertsPassed;



implementation dql_reset($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    return;
}



const dev_kfree_skb_any: ref;

axiom dev_kfree_skb_any == $sub.ref(0, 251360);

procedure dev_kfree_skb_any($p0: ref);
  free requires assertsPassed;



implementation dev_kfree_skb_any($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 236} __dev_kfree_skb_any($p0, 1);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    return;
}



const __dev_kfree_skb_any: ref;

axiom __dev_kfree_skb_any == $sub.ref(0, 252392);

procedure __dev_kfree_skb_any($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __dev_kfree_skb_any($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} {:cexpr "__dev_kfree_skb_any:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    return;
}



const irq_set_affinity_hint: ref;

axiom irq_set_affinity_hint == $sub.ref(0, 253424);

procedure irq_set_affinity_hint($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_affinity_hint($i0: i32, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 238} {:cexpr "irq_set_affinity_hint:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 1} true;
    call {:si_unique_call 239} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 240} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_free_irq_18: ref;

axiom ldv_free_irq_18 == $sub.ref(0, 254456);

procedure ldv_free_irq_18($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_free_irq_18($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} {:cexpr "ldv_free_irq_18:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} free_irq($i0, $p1);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    return;
}



const free_irq: ref;

axiom free_irq == $sub.ref(0, 255488);

procedure free_irq($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation free_irq($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} {:cexpr "free_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    return;
}



const disable_suitable_irq_1: ref;

axiom disable_suitable_irq_1 == $sub.ref(0, 256520);

procedure disable_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation disable_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} {:cexpr "disable_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.7;
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $M.9;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $M.11;
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i16 := $M.12;
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i0, $i16);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb22;

  $bb23:
    assume $i17 == 1;
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $M.11 := 0;
    call {:si_unique_call 249} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i11 == 1;
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $i12 := $M.10;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i0, $i12);
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb16;

  $bb17:
    assume $i13 == 1;
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.9 := 0;
    call {:si_unique_call 248} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i8 := $M.8;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i0, $i8);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb10;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1106;

  corral_source_split_1106:
    assume {:verifier.code 0} true;
    $M.7 := 0;
    call {:si_unique_call 247} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i4 := $M.6;
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, $i4);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $M.5 := 0;
    call {:si_unique_call 246} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_mod_timer_pending_21: ref;

axiom ldv_mod_timer_pending_21 == $sub.ref(0, 257552);

procedure ldv_mod_timer_pending_21($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.15;



implementation ldv_mod_timer_pending_21($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} {:cexpr "ldv_mod_timer_pending_21:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i2 := mod_timer_pending($p0, $i1);
    call {:si_unique_call 252} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} activate_pending_timer_3($p0, $i1, 0);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 258584);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_disable: ref;

axiom netif_tx_disable == $sub.ref(0, 259616);

procedure netif_tx_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation netif_tx_disable($p0: ref)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i9: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} local_bh_disable();
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i64(4, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} __bad_size_call_parameter();
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i9 := $u0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i15 := $ugt.i32($i14, 0);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} local_bh_enable();
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume $i15 == 1;
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb26;

  $bb26:
    call $p17, $i18, $i19, $i20, $i16 := netif_tx_disable_loop_$bb26($p0, $i9, $p13, $p17, $i18, $i19, $i20, $i16);
    goto $bb26_last;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $p17 := netdev_get_tx_queue($p0, $i16);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} __netif_tx_lock($p17, $i9);
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} netif_tx_stop_queue($p17);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} __netif_tx_unlock($p17);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i16, 1);
    call {:si_unique_call 269} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p13);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i20 := $ugt.i32($i19, $i18);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i20 == 1);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i16 := $i18;
    goto $bb28_dummy;

  $bb6:
    assume $i3 == 1;
    call {:si_unique_call 256} $i12 := devirtbounce.5(0, cpu_number);
    call {:si_unique_call 257} {:cexpr "pfo_ret_____2"} boogie_si_record_i32($i12);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i9 := $i12;
    goto $bb18;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i64(4, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume $i4 == 1;
    call {:si_unique_call 258} $i11 := devirtbounce.5(0, cpu_number);
    call {:si_unique_call 259} {:cexpr "pfo_ret_____1"} boogie_si_record_i32($i11);
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb18;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i64(4, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i64(4, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb13:
    assume $i6 == 1;
    call {:si_unique_call 260} $i10 := devirtbounce.5(0, cpu_number);
    call {:si_unique_call 261} {:cexpr "pfo_ret_____0"} boogie_si_record_i32($i10);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb18;

  $bb11:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i64(4, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb15:
    assume $i7 == 1;
    call {:si_unique_call 262} $i8 := devirtbounce.5(0, cpu_number);
    call {:si_unique_call 263} {:cexpr "pfo_ret__"} boogie_si_record_i32($i8);
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb18;

  $bb28_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;
}



const netif_tx_stop_all_queues: ref;

axiom netif_tx_stop_all_queues == $sub.ref(0, 260648);

procedure netif_tx_stop_all_queues($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_all_queues($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(928, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i3 := $ugt.i32($i2, 0);
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb4;

  $bb4:
    call $p5, $i6, $i7, $i8, $i4 := netif_tx_stop_all_queues_loop_$bb4($p0, $p1, $p5, $i6, $i7, $i8, $i4);
    goto $bb4_last;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p5 := netdev_get_tx_queue($p0, $i4);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} netif_tx_stop_queue($p5);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i4, 1);
    call {:si_unique_call 273} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p1);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i8 := $ugt.i32($i7, $i6);
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;
}



const i40evf_irq_disable: ref;

axiom i40evf_irq_disable == $sub.ref(0, 261680);

procedure i40evf_irq_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_irq_disable($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i9: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_152: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $i8 := $sgt.i32($i7, 1);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(34816, 1));
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} vslice_dummy_var_152 := readl($p27);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    call $p10, $p11, $i12, $i13, $i14, $p15, $p16, $p17, $i18, $p20, $i21, $i22, $i23, $i24, $i9 := i40evf_irq_disable_loop_$bb8($p0, $p6, $p10, $p11, $i12, $i13, $i14, $p15, $p16, $p17, $i18, $p20, $i21, $i22, $i23, $i24, $i9);
    goto $bb8_last;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i9, 3583);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $i13 := $mul.i32($i12, 4);
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p11, $mul.ref($i14, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} writel(0, $p15);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i9);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref($i18, 8)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} synchronize_irq($i21);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i9, 1);
    call {:si_unique_call 276} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p6);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i22);
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb10_dummy;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;
}



const i40evf_napi_disable_all: ref;

axiom i40evf_napi_disable_all == $sub.ref(0, 262712);

procedure i40evf_napi_disable_all($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation i40evf_napi_disable_all($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    call {:si_unique_call 278} {:cexpr "q_vectors"} boogie_si_record_i32($i3);
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $p10, $i11, $i12, $i5 := i40evf_napi_disable_all_loop_$bb4($p0, $i3, $i6, $p8, $p9, $p10, $i11, $i12, $i5);
    goto $bb4_last;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref($i6, 8));
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 320)), $mul.ref(16, 1));
    goto corral_source_split_1240;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} napi_disable($p10);
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 1);
    call {:si_unique_call 280} {:cexpr "q_idx"} boogie_si_record_i32($i11);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, $i3);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;
}



const netif_carrier_off: ref;

axiom netif_carrier_off == $sub.ref(0, 263744);

procedure netif_carrier_off($p0: ref);
  free requires assertsPassed;



implementation netif_carrier_off($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_clean_all_tx_rings: ref;

axiom i40evf_clean_all_tx_rings == $sub.ref(0, 264776);

procedure i40evf_clean_all_tx_rings($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_clean_all_tx_rings($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $i7 := i40evf_clean_all_tx_rings_loop_$bb4($p0, $p1, $i8, $p10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $i7);
    goto $bb4_last;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i8, 8));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} i40evf_clean_tx_ring($p11);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i7, 1);
    call {:si_unique_call 282} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p1);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, $i12);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;
}



const i40evf_clean_all_rx_rings: ref;

axiom i40evf_clean_all_rx_rings == $sub.ref(0, 265808);

procedure i40evf_clean_all_rx_rings($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.4, $M.3;



implementation i40evf_clean_all_rx_rings($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $i8, $p10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $i7 := i40evf_clean_all_rx_rings_loop_$bb4($p0, $p1, $i8, $p10, $p11, $i12, $p13, $p14, $i15, $i16, $i17, $i7);
    goto $bb4_last;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i8, 8));
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} i40evf_clean_rx_ring($p11);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i7, 1);
    call {:si_unique_call 284} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p1);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, $i12);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i17 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1284;
}



const napi_disable: ref;

axiom napi_disable == $sub.ref(0, 266840);

procedure napi_disable($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_disable($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} __might_sleep(.str.54, 476, 0);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} set_bit(1, $p1);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 287} $i3 := test_and_set_bit(0, $p2);
    call {:si_unique_call 288} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} clear_bit(1, $p7);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call $i5, $i6 := napi_disable_loop_$bb4($p2, $i5, $i6);
    goto $bb4_last;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} msleep(1);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $i5 := test_and_set_bit(0, $p2);
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 267872);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 294} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    return;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 268904);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 296} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 297} devirtbounce.6(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.13, $p2);
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 269936);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 299} devirtbounce.7(0, $i0, $p2);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    return;
}



const synchronize_irq: ref;

axiom synchronize_irq == $sub.ref(0, 270968);

procedure synchronize_irq($i0: i32);
  free requires assertsPassed;



implementation synchronize_irq($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 300} {:cexpr "synchronize_irq:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 272000);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 301} $i2 := devirtbounce.5(0, $p1);
    call {:si_unique_call 302} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const netif_tx_stop_queue: ref;

axiom netif_tx_stop_queue == $sub.ref(0, 273032);

procedure netif_tx_stop_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_stop_queue($p0: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var vslice_dummy_var_153: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, 0);
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    call {:si_unique_call 303} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i3);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 305} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i3, 0);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 308} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} set_bit(0, $p15);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} vslice_dummy_var_153 := printk.ref(.str.55);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} warn_slowpath_null(.str.54, 2212);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const printk: ref;

axiom printk == $sub.ref(0, 274064);

procedure printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref($p0: ref, p.1: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 1} true;
    call {:si_unique_call 311} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 312} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref.ref.ref($p0: ref, p.1: ref, p.2: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 1} true;
    call {:si_unique_call 313} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 314} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 1} true;
    call {:si_unique_call 315} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 316} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const local_bh_disable: ref;

axiom local_bh_disable == $sub.ref(0, 275096);

procedure local_bh_disable();
  free requires assertsPassed;



implementation local_bh_disable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} __local_bh_disable_ip(0, 512);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    return;
}



const __bad_size_call_parameter: ref;

axiom __bad_size_call_parameter == $sub.ref(0, 276128);

procedure __bad_size_call_parameter();



const __netif_tx_lock: ref;

axiom __netif_tx_lock == $sub.ref(0, 277160);

procedure __netif_tx_lock($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_lock($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} {:cexpr "__netif_tx_lock:arg:cpu"} boogie_si_record_i32($i1);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(328, 1));
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} spin_lock($p2);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(400, 1));
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p3, $i1);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    return;
}



const __netif_tx_unlock: ref;

axiom __netif_tx_unlock == $sub.ref(0, 278192);

procedure __netif_tx_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __netif_tx_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(400, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $sub.i32(0, 1));
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(328, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} spin_unlock($p2);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    return;
}



const local_bh_enable: ref;

axiom local_bh_enable == $sub.ref(0, 279224);

procedure local_bh_enable();
  free requires assertsPassed;



implementation local_bh_enable()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __local_bh_enable_ip(0, 512);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_enable_ip: ref;

axiom __local_bh_enable_ip == $sub.ref(0, 280256);

procedure __local_bh_enable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_enable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} {:cexpr "__local_bh_enable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 323} {:cexpr "__local_bh_enable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 281288);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;



implementation spin_unlock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} _raw_spin_unlock($p2);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 282320);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 283352);

procedure spin_lock($p0: ref);
  free requires assertsPassed;



implementation spin_lock($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} _raw_spin_lock($p2);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 284384);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    return;
}



const __local_bh_disable_ip: ref;

axiom __local_bh_disable_ip == $sub.ref(0, 285416);

procedure __local_bh_disable_ip($i0: i64, $i1: i32);
  free requires assertsPassed;



implementation __local_bh_disable_ip($i0: i64, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} {:cexpr "__local_bh_disable_ip:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 327} {:cexpr "__local_bh_disable_ip:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    return;
}



const mod_timer_pending: ref;

axiom mod_timer_pending == $sub.ref(0, 286448);

procedure mod_timer_pending($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer_pending($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 328} {:cexpr "mod_timer_pending:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 1} true;
    call {:si_unique_call 329} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 330} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_3: ref;

axiom activate_pending_timer_3 == $sub.ref(0, 287480);

procedure activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.15;



implementation activate_pending_timer_3($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_154: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} {:cexpr "activate_pending_timer_3:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 332} {:cexpr "activate_pending_timer_3:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p3 := $M.14;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} vslice_dummy_var_154 := reg_timer_3($p0);
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $p13 := $M.14;
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p14, $i1);
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i7 := $M.15;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $p10 := $M.14;
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 333} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(1);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const reg_timer_3: ref;

axiom reg_timer_3 == $sub.ref(0, 288512);

procedure reg_timer_3($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.15;



implementation reg_timer_3($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.14 := $p0;
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $M.15 := 1;
    call {:si_unique_call 335} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(1);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 289544);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 290576);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_set_power_state: ref;

axiom pci_set_power_state == $sub.ref(0, 291608);

procedure pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_set_power_state($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 337} {:cexpr "pci_set_power_state:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 1} true;
    call {:si_unique_call 338} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 339} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_restore_state: ref;

axiom pci_restore_state == $sub.ref(0, 292640);

procedure pci_restore_state($p0: ref);
  free requires assertsPassed;



implementation pci_restore_state($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device_mem: ref;

axiom pci_enable_device_mem == $sub.ref(0, 293672);

procedure pci_enable_device_mem($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device_mem($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 1} true;
    call {:si_unique_call 340} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 294704);

procedure dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 1} true;
    call {:si_unique_call 342} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 343} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 1} true;
    call {:si_unique_call 344} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 345} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 1} true;
    call {:si_unique_call 346} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 347} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure dev_err.ref.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32) returns ($r: i32);



procedure dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32) returns ($r: i32);



const pci_set_master: ref;

axiom pci_set_master == $sub.ref(0, 295736);

procedure pci_set_master($p0: ref);
  free requires assertsPassed;



implementation pci_set_master($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    return;
}



const rtnl_lock: ref;

axiom rtnl_lock == $sub.ref(0, 296768);

procedure rtnl_lock();
  free requires assertsPassed;



implementation rtnl_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_set_interrupt_capability: ref;

axiom i40evf_set_interrupt_capability == $sub.ref(0, 297800);

procedure i40evf_set_interrupt_capability($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_set_interrupt_capability($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $i33: i1;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i34: i32;
  var $i5: i32;
  var $i6: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var vslice_dummy_var_155: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    call {:si_unique_call 348} {:cexpr "pairs"} boogie_si_record_i32($i11);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, cpu_online_mask);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i13 := cpumask_weight($p12);
    call {:si_unique_call 350} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 2);
    call {:si_unique_call 351} {:cexpr "__min2"} boogie_si_record_i32($i14);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i11, $i14);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 1);
    call {:si_unique_call 352} {:cexpr "v_budget"} boogie_si_record_i32($i17);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2760, 1));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    call {:si_unique_call 353} {:cexpr "__min2___0"} boogie_si_record_i32($i22);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i17, $i22);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $p26 := kcalloc($i25, 8, 208);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p26);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i31, 0);
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i33 := $slt.i32(0, $i24);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} vslice_dummy_var_155 := i40evf_acquire_msix_vectors($p0, $i24);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i5, $i6 := $i11, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 3176)), $mul.ref(932, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i5);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb14:
    assume $i33 == 1;
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb17;

  $bb17:
    call $i35, $p36, $p37, $i38, $p40, $i41, $i42, $i34 := i40evf_set_interrupt_capability_loop_$bb17($p0, $i24, $i35, $p36, $p37, $i38, $p40, $i41, $i42, $i34);
    goto $bb17_last;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i38 := $sext.i32.i64($i34);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p37, $mul.ref($i38, 8)), $mul.ref(4, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $i35);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i34, 1);
    call {:si_unique_call 355} {:cexpr "vector"} boogie_si_record_i32($i41);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i41, $i24);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i42 == 1);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb19:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i34 := $i41;
    goto $bb19_dummy;

  $bb11:
    assume $i32 == 1;
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i5, $i6 := $i11, $sub.i32(0, 12);
    goto $bb3;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i24 := $i17;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i16 := $i11;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i5, $i6 := 0, $sub.i32(0, 5);
    goto $bb3;

  $bb19_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1529;
}



const i40evf_request_misc_irq: ref;

axiom i40evf_request_misc_irq == $sub.ref(0, 298832);

procedure i40evf_request_misc_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19;



implementation i40evf_request_misc_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(560, 1));
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} vslice_dummy_var_156 := sprintf.ref.ref($p4, .str.107);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(560, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p2);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} $i13 := ldv_request_irq_16($i9, i40evf_msix_aq, 0, $p11, $p12);
    call {:si_unique_call 359} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(560, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_157 := dev_err.ref.ref.ref.i32($p17, .str.108, $p19, $i13);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p2);
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} ldv_free_irq_17($i24, $p25);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rtnl_unlock: ref;

axiom rtnl_unlock == $sub.ref(0, 299864);

procedure rtnl_unlock();
  free requires assertsPassed;



implementation rtnl_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 300896);

procedure schedule_work($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_work($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $p1 := $load.ref($M.0, system_wq);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} $i2 := queue_work($p1, $p0);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 363} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const netif_device_attach: ref;

axiom netif_device_attach == $sub.ref(0, 301928);

procedure netif_device_attach($p0: ref);
  free requires assertsPassed;



implementation netif_device_attach($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    return;
}



const queue_work: ref;

axiom queue_work == $sub.ref(0, 302960);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work($p0: ref, $p1: ref) returns ($r: i1)
{
  var $i2: i1;
  var $i3: i8;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $i2 := queue_work_on(8192, $p0, $p1);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i2);
    call {:si_unique_call 365} {:cexpr "tmp"} boogie_si_record_i8($i3);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i3);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 303992);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);
  free requires assertsPassed;



implementation queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1)
{
  var $i3: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 366} {:cexpr "queue_work_on:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 1} true;
    call {:si_unique_call 367} $i3 := __VERIFIER_nondet_bool();
    call {:si_unique_call 368} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i3);
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 305024);

procedure sprintf.ref.ref($p0: ref, $p1: ref) returns ($r: i32);



const i40evf_msix_aq: ref;

axiom i40evf_msix_aq == $sub.ref(0, 306056);

procedure i40evf_msix_aq($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_msix_aq($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var vslice_dummy_var_158: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} {:cexpr "i40evf_msix_aq:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $p3 := netdev_priv($p2);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(18432, 1));
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} $i9 := readl($p8);
    call {:si_unique_call 372} {:cexpr "val"} boogie_si_record_i32($i9);
    $p10 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(20480, 1));
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} $i13 := readl($p12);
    call {:si_unique_call 374} {:cexpr "ena_mask"} boogie_si_record_i32($i13);
    $p14 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p15, $mul.ref(23552, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} $i17 := readl($p16);
    call {:si_unique_call 376} {:cexpr "val"} boogie_si_record_i32($i17);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, 2);
    call {:si_unique_call 377} {:cexpr "val"} boogie_si_record_i32($i18);
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(23552, 1));
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} writel($i18, $p21);
    $p22 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p23, $mul.ref(20480, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} writel($i13, $p24);
    $p25 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p26, $mul.ref(23552, 1));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} writel(1, $p27);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(208, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} vslice_dummy_var_158 := schedule_work($p28);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $r := 1;
    return;
}



const ldv_request_irq_16: ref;

axiom ldv_request_irq_16 == $sub.ref(0, 307088);

procedure ldv_request_irq_16($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11;



implementation ldv_request_irq_16($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} {:cexpr "ldv_request_irq_16:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 383} {:cexpr "ldv_request_irq_16:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 385} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $i6 := reg_check_1($p1);
    call {:si_unique_call 387} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_free_irq_17: ref;

axiom ldv_free_irq_17 == $sub.ref(0, 308120);

procedure ldv_free_irq_17($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_free_irq_17($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} {:cexpr "ldv_free_irq_17:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} free_irq($i0, $p1);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    return;
}



const request_irq: ref;

axiom request_irq == $sub.ref(0, 309152);

procedure request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_irq($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} {:cexpr "request_irq:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 393} {:cexpr "request_irq:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} $i5 := request_threaded_irq($i0, $p1, $0.ref, $i2, $p3, $p4);
    call {:si_unique_call 395} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const reg_check_1: ref;

axiom reg_check_1 == $sub.ref(0, 310184);

procedure reg_check_1($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation reg_check_1($p0: ref) returns ($r: i32)
{
  var $i1: i64;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $i2 := $eq.i64($i1, $p2i.ref.i64(i40evf_msix_clean_rings));
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i3 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i3 := 1;
    goto $bb3;
}



const activate_suitable_irq_1: ref;

axiom activate_suitable_irq_1 == $sub.ref(0, 311216);

procedure activate_suitable_irq_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11;



implementation activate_suitable_irq_1($i0: i32, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} {:cexpr "activate_suitable_irq_1:arg:line"} boogie_si_record_i32($i0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $i2 := $M.5;
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i4 := $M.7;
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $M.9;
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i8 := $M.11;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $M.12 := $i0;
    call {:si_unique_call 403} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32($i0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $M.19 := $p1;
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    $M.11 := 1;
    call {:si_unique_call 404} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb8:
    assume $i7 == 1;
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $M.10 := $i0;
    call {:si_unique_call 401} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32($i0);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $M.18 := $p1;
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $M.9 := 1;
    call {:si_unique_call 402} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb5:
    assume $i5 == 1;
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $M.8 := $i0;
    call {:si_unique_call 399} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32($i0);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $M.17 := $p1;
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $M.7 := 1;
    call {:si_unique_call 400} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.6 := $i0;
    call {:si_unique_call 397} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32($i0);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $M.16 := $p1;
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $M.5 := 1;
    call {:si_unique_call 398} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_msix_clean_rings: ref;

axiom i40evf_msix_clean_rings == $sub.ref(0, 312248);

procedure i40evf_msix_clean_rings($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation i40evf_msix_clean_rings($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} {:cexpr "i40evf_msix_clean_rings:arg:irq"} boogie_si_record_i32($i0);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(16, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} napi_schedule($p13);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := 1;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const napi_schedule: ref;

axiom napi_schedule == $sub.ref(0, 313280);

procedure napi_schedule($p0: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule($p0: ref)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i1 := napi_schedule_prep($p0);
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 408} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} __napi_schedule($p0);
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const napi_schedule_prep: ref;

axiom napi_schedule_prep == $sub.ref(0, 314312);

procedure napi_schedule_prep($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation napi_schedule_prep($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i1 := napi_disable_pending($p0);
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 411} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} $i7 := test_and_set_bit(0, $p6);
    call {:si_unique_call 413} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const __napi_schedule: ref;

axiom __napi_schedule == $sub.ref(0, 315344);

procedure __napi_schedule($p0: ref);
  free requires assertsPassed;



implementation __napi_schedule($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    return;
}



const napi_disable_pending: ref;

axiom napi_disable_pending == $sub.ref(0, 316376);

procedure napi_disable_pending($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation napi_disable_pending($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $i2 := constant_test_bit(1, $p1);
    call {:si_unique_call 415} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const request_threaded_irq: ref;

axiom request_threaded_irq == $sub.ref(0, 317408);

procedure request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_threaded_irq($i0: i32, $p1: ref, $p2: ref, $i3: i64, $p4: ref, $p5: ref) returns ($r: i32)
{
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 416} {:cexpr "request_threaded_irq:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 417} {:cexpr "request_threaded_irq:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 1} true;
    call {:si_unique_call 418} $i6 := __VERIFIER_nondet_int();
    call {:si_unique_call 419} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i6);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const cpumask_weight: ref;

axiom cpumask_weight == $sub.ref(0, 318440);

procedure cpumask_weight($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation cpumask_weight($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1024)), $mul.ref(0, 1));
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, nr_cpu_ids);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $i4 := bitmap_weight($p2, $i3);
    call {:si_unique_call 421} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 319472);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 423} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 424} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $p4 := kmalloc_array($i0, $i1, $i3);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const i40evf_acquire_msix_vectors: ref;

axiom i40evf_acquire_msix_vectors == $sub.ref(0, 320504);

procedure i40evf_acquire_msix_vectors($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_acquire_msix_vectors($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p17: ref;
  var $i16: i32;
  var vslice_dummy_var_159: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} {:cexpr "i40evf_acquire_msix_vectors:arg:vectors"} boogie_si_record_i32($i1);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i6 := pci_enable_msix_range($p3, $p5, 2, $i1);
    call {:si_unique_call 428} {:cexpr "err"} boogie_si_record_i32($i6);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 0);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i6);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} vslice_dummy_var_159 := dev_err.ref.ref($p10, .str.56);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} kfree($p14);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p15, $0.ref);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i16 := $i6;
    goto $bb3;
}



const pci_enable_msix_range: ref;

axiom pci_enable_msix_range == $sub.ref(0, 321536);

procedure pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_msix_range($p0: ref, $p1: ref, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 431} {:cexpr "pci_enable_msix_range:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 432} {:cexpr "pci_enable_msix_range:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 433} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 434} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const kmalloc_array: ref;

axiom kmalloc_array == $sub.ref(0, 322568);

procedure kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc_array($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i1;
  var $i4: i64;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} {:cexpr "kmalloc_array:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 436} {:cexpr "kmalloc_array:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 437} {:cexpr "kmalloc_array:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i3 := $ne.i64($i1, 0);
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $p8 := __kmalloc($i7, $i2);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $p6 := $p8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i4 := $udiv.i64($sub.i64(0, 1), $i1);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i5 := $ult.i64($i4, $i0);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb6;
}



const bitmap_weight: ref;

axiom bitmap_weight == $sub.ref(0, 323600);

procedure bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} {:cexpr "bitmap_weight:arg:nbits"} boogie_si_record_i32($i1);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} $i2 := __bitmap_weight($p0, $i1);
    call {:si_unique_call 441} {:cexpr "tmp___0"} boogie_si_record_i32($i2);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __bitmap_weight: ref;

axiom __bitmap_weight == $sub.ref(0, 324632);

procedure __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __bitmap_weight($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 442} {:cexpr "__bitmap_weight:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 1} true;
    call {:si_unique_call 443} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 444} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i40evf_free_misc_irq: ref;

axiom i40evf_free_misc_irq == $sub.ref(0, 325664);

procedure i40evf_free_misc_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation i40evf_free_misc_irq($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p2);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} ldv_free_irq_19($i6, $p7);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_reset_interrupt_capability: ref;

axiom i40evf_reset_interrupt_capability == $sub.ref(0, 326696);

procedure i40evf_reset_interrupt_capability($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_reset_interrupt_capability($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} pci_disable_msix($p2);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} kfree($p5);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, $0.ref);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_msix: ref;

axiom pci_disable_msix == $sub.ref(0, 327728);

procedure pci_disable_msix($p0: ref);
  free requires assertsPassed;



implementation pci_disable_msix($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    return;
}



const ldv_free_irq_19: ref;

axiom ldv_free_irq_19 == $sub.ref(0, 328760);

procedure ldv_free_irq_19($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_free_irq_19($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} {:cexpr "ldv_free_irq_19:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} free_irq($i0, $p1);
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    return;
}



const cancel_delayed_work_sync: ref;

axiom cancel_delayed_work_sync == $sub.ref(0, 329792);

procedure cancel_delayed_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_delayed_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 1} true;
    call {:si_unique_call 451} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 452} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 330824);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 1} true;
    call {:si_unique_call 453} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 454} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_unregister_netdev_28: ref;

axiom ldv_unregister_netdev_28 == $sub.ref(0, 331856);

procedure ldv_unregister_netdev_28($p0: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation ldv_unregister_netdev_28($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} unregister_netdev($p0);
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 456} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_misc_irq_disable: ref;

axiom i40evf_misc_irq_disable == $sub.ref(0, 332888);

procedure i40evf_misc_irq_disable($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_misc_irq_disable($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var vslice_dummy_var_160: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(23552, 1));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} writel(0, $p4);
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(34816, 1));
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} vslice_dummy_var_160 := readl($p7);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} synchronize_irq($i12);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_sync_29: ref;

axiom ldv_del_timer_sync_29 == $sub.ref(0, 333920);

procedure ldv_del_timer_sync_29($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.15;



implementation ldv_del_timer_sync_29($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} $i1 := del_timer_sync($p0);
    call {:si_unique_call 461} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} disable_suitable_timer_3($p0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const flush_scheduled_work: ref;

axiom flush_scheduled_work == $sub.ref(0, 334952);

procedure flush_scheduled_work();
  free requires assertsPassed;



implementation flush_scheduled_work()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_shutdown_adminq: ref;

axiom i40evf_shutdown_adminq == $sub.ref(0, 335984);

procedure i40evf_shutdown_adminq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $CurrAddr, $M.21, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3;



implementation i40evf_shutdown_adminq($p0: ref) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i1 := i40evf_check_asq_alive($p0);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 464} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} vslice_dummy_var_162 := i40e_shutdown_asq($p0);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} vslice_dummy_var_163 := i40e_shutdown_arq($p0);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} vslice_dummy_var_161 := i40evf_aq_queue_shutdown($p0, 1);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const iounmap: ref;

axiom iounmap == $sub.ref(0, 337016);

procedure iounmap($p0: ref);
  free requires assertsPassed;



implementation iounmap($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    return;
}



const pci_release_regions: ref;

axiom pci_release_regions == $sub.ref(0, 338048);

procedure pci_release_regions($p0: ref);
  free requires assertsPassed;



implementation pci_release_regions($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_free_queues: ref;

axiom i40evf_free_queues == $sub.ref(0, 339080);

procedure i40evf_free_queues($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_free_queues($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p25: ref;
  var $i26: i64;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32($i9, 0);
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb8;

  $bb8:
    call $i12, $p14, $p15, $i16, $i17, $i18, $p20, $p21, $p22, $i23, $p25, $i26, $p28, $i29, $p30, $p31, $i32, $i33, $i34, $i11 := i40evf_free_queues_loop_$bb8($p0, $p5, $i12, $p14, $p15, $i16, $i17, $i18, $p20, $p21, $p22, $i23, $p25, $i26, $p28, $i29, $p30, $p31, $i32, $i33, $i34, $i11);
    goto $bb8_last;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i12, 8));
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i11);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i23, 8));
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $0.ref);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i11);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i26, 8));
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i11, 1);
    call {:si_unique_call 469} {:cexpr "i"} boogie_si_record_i32($i29);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p5);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, $i29);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i34 == 1);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i11 := $i29;
    goto $bb13_dummy;

  $bb10:
    assume $i17 == 1;
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i11);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i18, 8));
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 176)), $mul.ref(160, 1));
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} kfree_call_rcu($p22, $i2p.i64.ref(160));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;
}



const ldv_free_netdev_30: ref;

axiom ldv_free_netdev_30 == $sub.ref(0, 340112);

procedure ldv_free_netdev_30($p0: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation ldv_free_netdev_30($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} free_netdev($p0);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 471} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    return;
}



const pci_disable_pcie_error_reporting: ref;

axiom pci_disable_pcie_error_reporting == $sub.ref(0, 341144);

procedure pci_disable_pcie_error_reporting($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_disable_pcie_error_reporting($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 1} true;
    call {:si_unique_call 472} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_netdev: ref;

axiom free_netdev == $sub.ref(0, 342176);

procedure free_netdev($p0: ref);
  free requires assertsPassed;



implementation free_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    return;
}



const kfree_call_rcu: ref;

axiom kfree_call_rcu == $sub.ref(0, 343208);

procedure kfree_call_rcu($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation kfree_call_rcu($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_check_asq_alive: ref;

axiom i40evf_check_asq_alive == $sub.ref(0, 344240);

procedure i40evf_check_asq_alive($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_check_asq_alive($p0: ref) returns ($r: i1)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(80, 1));
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(80, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i11);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p7, $mul.ref($i12, 1));
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $i14 := readl($p13);
    call {:si_unique_call 475} {:cexpr "tmp"} boogie_si_record_i32($i14);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 0);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb3;
}



const i40evf_aq_queue_shutdown: ref;

axiom i40evf_aq_queue_shutdown == $sub.ref(0, 345272);

procedure i40evf_aq_queue_shutdown($p0: ref, $i1: i1) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.21, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3;



implementation i40evf_aq_queue_shutdown($p0: ref, $i1: i1) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i8($i1);
    call {:si_unique_call 477} {:cexpr "i40evf_aq_queue_shutdown:arg:unloading"} boogie_si_record_i1($i1);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} i40evf_fill_default_direct_cmd_desc($p2, 3);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i8.i1($i3);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $i9 := i40evf_asq_send_command($p0, $p2, $0.ref, 0, $0.ref);
    call {:si_unique_call 480} {:cexpr "status"} boogie_si_record_i32($i9);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, 1);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40e_shutdown_asq: ref;

axiom i40e_shutdown_asq == $sub.ref(0, 346304);

procedure i40e_shutdown_asq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_shutdown_asq($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p33: ref;
  var $p36: ref;
  var $p38: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(72, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p9, $mul.ref($i14, 1));
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} writel(0, $p15);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(76, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p17, $mul.ref($i22, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} writel(0, $p23);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(80, 1));
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p25, $mul.ref($i30, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} writel(0, $p31);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(200, 1));
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} mutex_lock_nested($p33, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, 0);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} i40e_free_asq_bufs($p0);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(200, 1));
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} mutex_unlock($p38);
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 63);
    goto $bb3;
}



const i40e_shutdown_arq: ref;

axiom i40e_shutdown_arq == $sub.ref(0, 347336);

procedure i40e_shutdown_arq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_shutdown_arq($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p33: ref;
  var $p36: ref;
  var $p38: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(72, 1));
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p9, $mul.ref($i14, 1));
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} writel(0, $p15);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(76, 1));
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    $i22 := $zext.i32.i64($i21);
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p17, $mul.ref($i22, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} writel(0, $p23);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(80, 1));
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p25, $mul.ref($i30, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} writel(0, $p31);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(368, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} mutex_lock_nested($p33, 0);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(64, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} i40e_free_arq_bufs($p0);
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(368, 1));
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} mutex_unlock($p38);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 63);
    goto $bb3;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 348368);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    return;
}



const i40e_free_arq_bufs: ref;

axiom i40e_free_arq_bufs == $sub.ref(0, 349400);

procedure i40e_free_arq_bufs($p0: ref);
  free requires assertsPassed;



implementation i40e_free_arq_bufs($p0: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i15: i32;
  var $i16: i16;
  var $i17: i32;
  var $i18: i1;
  var $i6: i32;
  var $p21: ref;
  var $p25: ref;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(176, 1));
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(16, 1));
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} vslice_dummy_var_165 := i40evf_free_dma_mem_d($p0, $p21);
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} vslice_dummy_var_166 := i40evf_free_virt_mem_d($p0, $p25);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $i12, $p13, $i15, $i16, $i17, $i18, $i6, vslice_dummy_var_164 := i40e_free_arq_bufs_loop_$bb4($p0, $p2, $p9, $p10, $p11, $i12, $p13, $i15, $i16, $i17, $i18, $i6, vslice_dummy_var_164);
    goto $bb4_last;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i6);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 24));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} vslice_dummy_var_164 := i40evf_free_dma_mem_d($p0, $p13);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i6, 1);
    call {:si_unique_call 495} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p2);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $i18 := $sgt.i32($i17, $i15);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 350432);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_free_dma_mem_d: ref;

axiom i40evf_free_dma_mem_d == $sub.ref(0, 351464);

procedure i40evf_free_dma_mem_d($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i40evf_free_dma_mem_d($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i64;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(8, 1));
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p1);
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i17 := $zext.i32.i64($i16);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} dma_free_attrs($p14, $i17, $p19, $i21, $0.ref);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 5);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const i40evf_free_virt_mem_d: ref;

axiom i40evf_free_virt_mem_d == $sub.ref(0, 352496);

procedure i40evf_free_virt_mem_d($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i40evf_free_virt_mem_d($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} kfree($p6);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2098;

  corral_source_split_2098:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const i40e_free_asq_bufs: ref;

axiom i40e_free_asq_bufs == $sub.ref(0, 353528);

procedure i40e_free_asq_bufs($p0: ref);
  free requires assertsPassed;



implementation i40e_free_asq_bufs($p0: ref)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $i5: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i6: i32;
  var $p31: ref;
  var $p35: ref;
  var $p39: ref;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(178, 1));
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 0);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(40, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} vslice_dummy_var_168 := i40evf_free_virt_mem_d($p0, $p31);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(16, 1));
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} vslice_dummy_var_169 := i40evf_free_dma_mem_d($p0, $p35);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} vslice_dummy_var_170 := i40evf_free_virt_mem_d($p0, $p39);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $p11, $i12, $p14, $i15, $i16, $p19, $p20, $p21, $i22, $p23, $i25, $i26, $i27, $i28, $i6, vslice_dummy_var_167 := i40e_free_asq_bufs_loop_$bb4($p0, $p2, $p9, $p10, $p11, $i12, $p14, $i15, $i16, $p19, $p20, $p21, $i22, $p23, $i25, $i26, $i27, $i28, $i6, vslice_dummy_var_167);
    goto $bb4_last;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i6);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 24)), $mul.ref(8, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i15 := $load.i64($M.0, $p14);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i6, 1);
    call {:si_unique_call 501} {:cexpr "i"} boogie_si_record_i32($i25);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p2);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i28 := $sgt.i32($i27, $i25);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i28 == 1);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i25;
    goto $bb9_dummy;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i22 := $sext.i32.i64($i6);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p21, $mul.ref($i22, 24));
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} vslice_dummy_var_167 := i40evf_free_dma_mem_d($p0, $p23);
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;
}



const i40evf_fill_default_direct_cmd_desc: ref;

axiom i40evf_fill_default_direct_cmd_desc == $sub.ref(0, 354560);

procedure i40evf_fill_default_direct_cmd_desc($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_fill_default_direct_cmd_desc($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} {:cexpr "i40evf_fill_default_direct_cmd_desc:arg:opcode"} boogie_si_record_i16($i1);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 506} cmdloc_dummy_var_21 := $memset.i8(cmdloc_dummy_var_20, $p2, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, 8192);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_asq_send_command: ref;

axiom i40evf_asq_send_command == $sub.ref(0, 355592);

procedure i40evf_asq_send_command($p0: ref, $p1: ref, $p2: ref, $i3: i16, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.21, $CurrAddr, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3;



implementation i40evf_asq_send_command($p0: ref, $p1: ref, $p2: ref, $i3: i16, $p4: ref) returns ($r: i32)
{
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p17: ref;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p29: ref;
  var $i30: i16;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $p53: ref;
  var $i54: i16;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i16;
  var $i62: i32;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i32;
  var $i67: i16;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $i73: i16;
  var $i74: i32;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i78: i32;
  var $p80: ref;
  var $i81: i8;
  var $i82: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i1;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p99: ref;
  var $i100: i16;
  var $i101: i64;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i64;
  var $i106: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $i115: i16;
  var $i116: i64;
  var $p117: ref;
  var $i118: i64;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i64;
  var $i125: i32;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $i131: i32;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p139: ref;
  var $i140: i16;
  var $i141: i32;
  var $i142: i32;
  var $i143: i16;
  var $p146: ref;
  var $p149: ref;
  var $i150: i16;
  var $i151: i32;
  var $p154: ref;
  var $i155: i16;
  var $i156: i32;
  var $i157: i1;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i1;
  var $p166: ref;
  var $i167: i16;
  var $i168: i32;
  var $p169: ref;
  var $p170: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i64;
  var $p176: ref;
  var $p177: ref;
  var $i178: i8;
  var $i179: i1;
  var $p180: ref;
  var $i181: i8;
  var $i182: i1;
  var $i183: i1;
  var $i184: i8;
  var $i185: i1;
  var $i187: i32;
  var $i188: i1;
  var $i189: i8;
  var $i190: i1;
  var $i186: i32;
  var $i191: i64;
  var $i192: i32;
  var $i193: i1;
  var $i194: i1;
  var $i195: i8;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $i200: i1;
  var $i201: i64;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i16;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i16;
  var $i213: i16;
  var $i214: i32;
  var $i215: i1;
  var $i216: i32;
  var $i217: i32;
  var $p219: ref;
  var $i220: i32;
  var $i221: i8;
  var $i222: i1;
  var $i223: i8;
  var $i224: i1;
  var $p226: ref;
  var $i227: i1;
  var $p228: ref;
  var $i229: i8;
  var $i230: i1;
  var $p231: ref;
  var $i232: i8;
  var $i233: i1;
  var $p234: ref;
  var $i235: i32;
  var $i79: i32;
  var $p237: ref;
  var $i12: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var cmdloc_dummy_var_38: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} {:cexpr "i40evf_asq_send_command:arg:buff_size"} boogie_si_record_i16($i3);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i13 := i40e_is_nvm_update_op($p1);
    goto corral_source_split_2167;

  corral_source_split_2167:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 510} {:cexpr "tmp"} boogie_si_record_i8($i14);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i15 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i64($i30);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p26, $mul.ref($i31, 24));
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p4);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p32);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 513} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p49, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $i52 := $sext.i16.i32($i51);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(18, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i54 := $load.i16($M.0, $p53);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i55 := $sext.i16.i32($i54);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i56 := $xor.i32($i55, $sub.i32(0, 1));
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i52, $i56);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $i58 := $trunc.i32.i16($i57);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p59, $i58);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i61 := $load.i16($M.0, $p60);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i61);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(16, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i66 := $or.i32($i62, $i65);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i67 := $trunc.i32.i16($i66);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p68, $i67);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(200, 1));
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} mutex_lock_nested($p70, 0);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(182, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i73 := $load.i16($M.0, $p72);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i74 := $zext.i16.i32($i73);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $i75 := $zext.i16.i32($i3);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i74, $i75);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(21, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i8.i1($i81);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i87 := i40e_clean_asq($p0);
    call {:si_unique_call 519} {:cexpr "tmp___0"} boogie_si_record_i16($i87);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    assume {:branchcond $i89} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i100 := $load.i16($M.0, $p99);
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i64($i100);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p96, $mul.ref($i101, 32));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p1);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 521} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p103, $p104, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i105 := $p2i.ref.i64($p2);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i106 := $ne.i64($i105, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i106} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $p135 := $0.ref;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p102);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} i40evf_debug_aq($p0, 100663296, $p136, $p2);
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i140 := $load.i16($M.0, $p139);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i141 := $zext.i16.i32($i140);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i141, 1);
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i32.i16($i142);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p146, $i143);
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i150 := $load.i16($M.0, $p149);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i151 := $zext.i16.i32($i150);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $i155 := $load.i16($M.0, $p154);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i156 := $zext.i16.i32($i155);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i157 := $eq.i32($i151, $i156);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(21, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i162);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    assume {:branchcond $i163} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i163 == 1);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i167 := $load.i16($M.0, $p166);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i167);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(76, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i174 := $load.i32($M.0, $p173);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i175 := $zext.i32.i64($i174);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($p170, $mul.ref($i175, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} writel($i168, $p176);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(20, 1));
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i179 := $trunc.i8.i1($i178);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i179} true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i179 == 1);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(21, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i8.i1($i181);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i182 == 1);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} $i183 := i40evf_asq_done($p0);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i184 := $zext.i1.i8($i183);
    call {:si_unique_call 527} {:cexpr "tmp___1"} boogie_si_record_i8($i184);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i8.i1($i184);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb46;

  $bb46:
    assume !($i185 == 1);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $i186 := 0;
    goto $bb47;

  $bb47:
    call $i187, $i188, $i189, $i190, $i186, $i191, $i192, $i193 := i40evf_asq_send_command_loop_$bb47($p0, $i187, $i188, $i189, $i190, $i186, $i191, $i192, $i193);
    goto $bb47_last;

  $bb52:
    assume {:verifier.code 0} true;
    $i191 := $zext.i32.i64(10);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __udelay($i191);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i192 := $add.i32($i186, 10);
    call {:si_unique_call 531} {:cexpr "total_delay"} boogie_si_record_i32($i192);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i193 := $ule.i32($i192, 99999);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i187 := $i192;
    assume true;
    goto $bb48, $bb53;

  $bb53:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $i194 := i40evf_asq_done($p0);
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $i195 := $zext.i1.i8($i194);
    call {:si_unique_call 533} {:cexpr "tmp___2"} boogie_si_record_i8($i195);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i8.i1($i195);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    assume {:branchcond $i196} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    $i220, $i221 := 0, 0;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i222 := i40e_is_nvm_update_op($p1);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i223 := $zext.i1.i8($i222);
    call {:si_unique_call 541} {:cexpr "tmp___3"} boogie_si_record_i8($i223);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i8.i1($i223);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i227 := $trunc.i8.i1($i221);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    assume {:branchcond $i227} true;
    goto $bb71, $bb73;

  $bb73:
    assume !($i227 == 1);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(20, 1));
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i229 := $load.i8($M.0, $p228);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $i230 := $trunc.i8.i1($i229);
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i230} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i230 == 1);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(21, 1));
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i232 := $load.i8($M.0, $p231);
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i233 := $trunc.i8.i1($i232);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i233 == 1);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $p234 := $bitcast.ref.ref($p0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} i40evf_debug_d.ref.i32.ref($p234, 16777216, .str.49);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i235 := $sub.i32(0, 54);
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i79 := $i235;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p237 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(200, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} mutex_unlock($p237);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i12 := $i79;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i233 == 1;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i235 := $i220;
    goto $bb78;

  $bb74:
    assume {:verifier.code 0} true;
    assume $i230 == 1;
    goto $bb72;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i227 == 1;
    goto $bb72;

  $bb68:
    assume $i224 == 1;
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(192, 1));
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p226, 1);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb56:
    assume $i196 == 1;
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p102);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 534} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p197, $p198, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i199 := $p2i.ref.i64($p2);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i200 := $ne.i64($i199, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(6, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i205 := $load.i16($M.0, $p204);
    call {:si_unique_call 537} {:cexpr "retval"} boogie_si_record_i16($i205);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $i206 := $zext.i16.i32($i205);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    $i213 := $i205;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $i215 := $eq.i32($i214, 0);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    $i216 := $sub.i32(0, 53);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i213);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(536, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, $i217);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i220, $i221 := $i216, 1;
    goto $bb67;

  $bb64:
    assume $i215 == 1;
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $i216 := 0;
    goto $bb66;

  $bb61:
    assume $i207 == 1;
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p0);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i205);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} i40evf_debug_d.ref.i32.ref.i32($p208, 16777216, .str.48, $i209);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i210 := $zext.i16.i32($i205);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i211 := $and.i32($i210, 255);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $i212 := $trunc.i32.i16($i211);
    call {:si_unique_call 539} {:cexpr "retval"} boogie_si_record_i16($i212);
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $i213 := $i212;
    goto $bb63;

  $bb58:
    assume $i200 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i64($i3);
    call {:si_unique_call 535} {:cexpr "__len___0"} boogie_si_record_i64($i201);
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p135, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.0;
    cmdloc_dummy_var_37 := $M.0;
    call {:si_unique_call 536} cmdloc_dummy_var_38 := $memcpy.i8(cmdloc_dummy_var_36, cmdloc_dummy_var_37, $p2, $p203, $i201, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_38;
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb48:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} $i188 := i40evf_asq_done($p0);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i189 := $zext.i1.i8($i188);
    call {:si_unique_call 529} {:cexpr "tmp___1"} boogie_si_record_i8($i189);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $i190 := $trunc.i8.i1($i189);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    $i186 := $i187;
    goto $bb50_dummy;

  $bb49:
    assume $i190 == 1;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i185 == 1;
    goto $bb45;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i182 == 1;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i179 == 1;
    goto $bb40;

  $bb36:
    assume $i163 == 1;
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i157 == 1;
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p160, 0);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i106 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i64($i115);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p111, $mul.ref($i116, 24));
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i64($i3);
    call {:si_unique_call 522} {:cexpr "__len"} boogie_si_record_i64($i118);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p111, $mul.ref($i116, 24)), $mul.ref(0, 1));
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 523} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p120, $p2, $i118, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p96, $mul.ref($i101, 32)), $mul.ref(4, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p121, $i3);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p111, $mul.ref($i116, 24)), $mul.ref(8, 1));
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    $i123 := $load.i64($M.0, $p122);
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $i124 := $lshr.i64($i123, 32);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $i125 := $trunc.i64.i32($i124);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p96, $mul.ref($i101, 32)), $mul.ref(16, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $p127 := $bitcast.ref.ref($p126);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i125);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p111, $mul.ref($i116, 24)), $mul.ref(8, 1));
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $i130 := $load.i64($M.0, $p129);
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i64.i32($i130);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p96, $mul.ref($i101, 32)), $mul.ref(16, 1));
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p134, $i131);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p135 := $p117;
    goto $bb32;

  $bb27:
    assume $i89 == 1;
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p0);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} i40evf_debug_d.ref.i32.ref($p90, 16777216, .str.47);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 56);
    goto $bb19;

  $bb21:
    assume $i82 == 1;
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(20, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i8.i1($i84);
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i85 == 1);
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p0);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} i40evf_debug_d.ref.i32.ref($p86, 16777216, .str.46);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 5);
    goto $bb19;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i85 == 1;
    goto $bb23;

  $bb17:
    assume $i76 == 1;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p0);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i3);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} i40evf_debug_d.ref.i32.ref.i32($p77, 16777216, .str.45, $i78);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    $i79 := $sub.i32(0, 26);
    goto $bb19;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p32);
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p4);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 512} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p35, $p36, 24, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(8, 1));
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(8, 1));
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    $i41 := $load.i64($M.0, $p40);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i64($i41, 32);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i32($i42);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p26, $mul.ref($i31, 24)), $mul.ref(8, 1));
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    $i46 := $load.i64($M.0, $p45);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    $i47 := $trunc.i64.i32($i46);
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(192, 1));
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb8:
    assume $i19 == 1;
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} i40evf_debug_d.ref.i32.ref($p20, 16777216, .str.44);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 1);
    goto $bb3;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} i40evf_debug_d.ref.i32.ref($p11, 16777216, .str.43);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 32);
    goto $bb3;

  $bb50_dummy:
    assume false;
    return;

  $bb47_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb52;
}



const i40evf_debug_d: ref;

axiom i40evf_debug_d == $sub.ref(0, 356624);

procedure i40evf_debug_d.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation i40evf_debug_d.ref.i32.ref.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p3 := $alloc($mul.ref(512, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 545} {:cexpr "i40evf_debug_d:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1536)), $mul.ref(1532, 1));
    goto corral_source_split_2452;

  corral_source_split_2452:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i1);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} ldv__builtin_va_start($p11);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} vslice_dummy_var_171 := vsnprintf($p12, 512, $p2, $p13);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ldv__builtin_va_end($p16);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} vslice_dummy_var_172 := printk.ref.ref(.str, $p17);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    goto $bb3;
}



procedure i40evf_debug_d.ref.i32.ref($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation i40evf_debug_d.ref.i32.ref($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;

  $bb5:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p3 := $alloc($mul.ref(512, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 552} {:cexpr "i40evf_debug_d:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1536)), $mul.ref(1532, 1));
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i1);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} ldv__builtin_va_start($p11);
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} vslice_dummy_var_173 := vsnprintf($p12, 512, $p2, $p13);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} ldv__builtin_va_end($p16);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} vslice_dummy_var_174 := printk.ref.ref(.str, $p17);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    goto $bb8;
}



procedure i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p3 := $alloc($mul.ref(512, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 559} {:cexpr "i40evf_debug_d:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1536)), $mul.ref(1532, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} ldv__builtin_va_start($p11);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 561} vslice_dummy_var_175 := vsnprintf($p12, 512, $p2, $p13);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} ldv__builtin_va_end($p16);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} vslice_dummy_var_176 := printk.ref.ref(.str, $p17);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i9 == 1;
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    goto $bb13;
}



procedure i40evf_debug_d.ref.i32.ref.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation i40evf_debug_d.ref.i32.ref.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $p3 := $alloc($mul.ref(512, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 566} {:cexpr "i40evf_debug_d:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1536)), $mul.ref(1532, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i1);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} ldv__builtin_va_start($p11);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} vslice_dummy_var_177 := vsnprintf($p12, 512, $p2, $p13);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} ldv__builtin_va_end($p16);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} vslice_dummy_var_178 := printk.ref.ref(.str, $p17);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i9 == 1;
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    goto $bb18;
}



procedure i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32($p0: ref, $i1: i32, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} $p3 := $alloc($mul.ref(512, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p4 := $alloc($mul.ref(24, $zext.i32.i64(1)));
    call {:si_unique_call 573} {:cexpr "i40evf_debug_d:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p0);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 1536)), $mul.ref(1532, 1));
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i1);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p4);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} ldv__builtin_va_start($p11);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p4);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} vslice_dummy_var_179 := vsnprintf($p12, 512, $p2, $p13);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p4);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} ldv__builtin_va_end($p16);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p3);
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} vslice_dummy_var_180 := printk.ref.ref(.str, $p17);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i9 == 1;
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    goto $bb23;
}



const i40e_is_nvm_update_op: ref;

axiom i40e_is_nvm_update_op == $sub.ref(0, 357656);

procedure i40e_is_nvm_update_op($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation i40e_is_nvm_update_op($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 1794);
    goto corral_source_split_2559;

  corral_source_split_2559:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 1795);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 358688);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const i40e_clean_asq: ref;

axiom i40e_clean_asq == $sub.ref(0, 359720);

procedure i40e_clean_asq($p0: ref) returns ($r: i16);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3;



implementation i40e_clean_asq($p0: ref) returns ($r: i16)
{
  var $p1: ref;
  var $p4: ref;
  var $i5: i16;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i64;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i16;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i16;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $i71: i1;
  var $p30: ref;
  var $i31: i16;
  var $p32: ref;
  var $i72: i16;
  var $i29: i16;
  var $p73: ref;
  var $p74: ref;
  var $i75: i16;
  var $i76: i32;
  var $p77: ref;
  var $i78: i16;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i16;
  var $i83: i32;
  var $i84: i32;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i16;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;
  var cmdloc_dummy_var_45: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $p1 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_2569;

  corral_source_split_2569:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(70, 1));
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    call {:si_unique_call 579} {:cexpr "ntc"} boogie_si_record_i16($i5);
    $p7 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i64($i5);
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 32));
    $p13 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i64($i5);
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p15, $mul.ref($i16, 24));
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(72, 1));
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i24 := $zext.i32.i64($i23);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($p19, $mul.ref($i24, 1));
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $i26 := readl($p25);
    call {:si_unique_call 581} {:cexpr "tmp"} boogie_si_record_i32($i26);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i5);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i26, $i27);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i29 := $i5;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p73 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(70, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p73, $i29);
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(70, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i75 := $load.i16($M.0, $p74);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i76 := $zext.i16.i32($i75);
    $p77 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i78 := $load.i16($M.0, $p77);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $i79 := $zext.i16.i32($i78);
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i80 := $sle.i32($i76, $i79);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i80 == 1);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $i84 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(70, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.0, $p85);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $i88 := $add.i32($i84, $i87);
    $p89 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $i92 := $sub.i32($i88, $i91);
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i93 := $add.i32($i92, 65535);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i94 := $trunc.i32.i16($i93);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $r := $i94;
    return;

  $bb15:
    assume $i80 == 1;
    $p81 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i82 := $load.i16($M.0, $p81);
    goto corral_source_split_2649;

  corral_source_split_2649:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i82);
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i84 := $i83;
    goto $bb17;

  $bb1:
    assume $i28 == 1;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p30, $i31, $p32 := $p11, $i5, $p17;
    goto $bb4;

  $bb4:
    call $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $p54, $p55, $p56, $i57, $p58, $p60, $p61, $p62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $p30, $i31, $p32, $i72, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44, cmdloc_dummy_var_45 := i40e_clean_asq_loop_$bb4($p0, $p1, $p18, $p22, $p33, $p34, $i35, $i36, $p37, $p38, $p39, $p40, $p41, $p42, $p43, $i44, $i45, $i46, $p47, $i48, $i49, $i50, $i51, $i52, $p54, $p55, $p56, $i57, $p58, $p60, $p61, $p62, $i63, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $p30, $i31, $p32, $i72, cmdloc_dummy_var_39, cmdloc_dummy_var_40, cmdloc_dummy_var_41, cmdloc_dummy_var_42, cmdloc_dummy_var_43, cmdloc_dummy_var_44, cmdloc_dummy_var_45);
    goto $bb4_last;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $i35 := $p2i.ref.i64($p34);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p30);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 584} cmdloc_dummy_var_43 := $memset.i8(cmdloc_dummy_var_42, $p42, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_43;
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p32);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 585} cmdloc_dummy_var_45 := $memset.i8(cmdloc_dummy_var_44, $p43, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_45;
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i31);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i45 := $add.i32($i44, 1);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i32.i16($i45);
    call {:si_unique_call 586} {:cexpr "ntc"} boogie_si_record_i16($i46);
    $p47 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i46);
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i49, $i50);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $i46;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i64($i52);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p56, $mul.ref($i57, 32));
    $p60 := $add.ref($add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i64($i52);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($p62, $mul.ref($i63, 24));
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p18);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p22);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i66);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p65, $mul.ref($i67, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} $i69 := readl($p68);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32($i69);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i52);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i71 := $ne.i32($i69, $i70);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i72 := $i52;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i29 := $i72;
    goto $bb3;

  $bb12:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $p30, $i31, $p32 := $p58, $i52, $p64;
    goto $bb12_dummy;

  $bb9:
    assume $i51 == 1;
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i52 := 0;
    goto $bb11;

  $bb6:
    assume $i36 == 1;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p32, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p30);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_39 := $M.0;
    cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 582} cmdloc_dummy_var_41 := $memcpy.i8(cmdloc_dummy_var_39, cmdloc_dummy_var_40, $p40, $p41, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_41;
    call {:si_unique_call 583} devirtbounce.8($p39, $p0, $p1);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb12_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;
}



const i40evf_debug_aq: ref;

axiom i40evf_debug_aq == $sub.ref(0, 360752);

procedure i40evf_debug_aq($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;
  modifies $M.21, $CurrAddr;



implementation i40evf_debug_aq($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i1;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $i59: i1;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i64;
  var $p78: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $p91: ref;
  var $i92: i32;
  var $i93: i16;
  var $i94: i32;
  var $i95: i1;
  var $i61: i32;
  var $i96: i32;
  var $i60: i32;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $p101: ref;
  var $i102: i32;
  var $p103: ref;
  var $i104: i32;
  var $p105: ref;
  var $i106: i32;
  var $p107: ref;
  var $i108: i32;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 590} {:cexpr "i40evf_debug_aq:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p2);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(1532, 1));
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $i1);
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i9 == 1);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p2);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i10, 0);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(2, 1));
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(6, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32($p12, $i1, .str.35, $i15, $i18, $i21, $i24);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p0);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(12, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} i40evf_debug_d.ref.i32.ref.i32.i32($p25, $i1, .str.36, $i27, $i29);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p0);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2699;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} i40evf_debug_d.ref.i32.ref.i32.i32($p30, $i1, .str.37, $i34, $i38);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p0);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(16, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} i40evf_debug_d.ref.i32.ref.i32.i32($p39, $i1, .str.38, $i43, $i47);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p3);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i49 == 1;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i52, 0);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb10;

  $bb11:
    assume $i53 == 1;
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p4);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_46 := $M.21;
    call {:si_unique_call 595} cmdloc_dummy_var_47 := $memset.i8(cmdloc_dummy_var_46, $p54, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.21 := cmdloc_dummy_var_47;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p0);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} i40evf_debug_d.ref.i32.ref($p55, $i1, .str.39);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 32)), $mul.ref(4, 1));
    goto corral_source_split_2729;

  corral_source_split_2729:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i59 := $ugt.i32($i58, 0);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i60 := 0;
    assume {:branchcond $i59} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i60, 15);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i98 := $ne.i32($i97, 0);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb24:
    assume $i98 == 1;
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p0);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i100 := $and.i32($i60, $sub.i32(0, 16));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $i102 := $load.i32($M.21, $p101);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i104 := $load.i32($M.21, $p103);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.21, $p105);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.21, $p107);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32.i32($p99, $i1, .str.40, $i100, $i102, $i104, $i106, $i108);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb13:
    assume $i59 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb16;

  $bb16:
    call $i62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $p83, $i84, $p85, $i86, $p87, $i88, $p89, $i90, $p91, $i92, $i93, $i94, $i95, $i61, $i96, cmdloc_dummy_var_48, cmdloc_dummy_var_49 := i40evf_debug_aq_loop_$bb16($p0, $i1, $p3, $p4, $p56, $i62, $i63, $i64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $i79, $i80, $p81, $i82, $p83, $i84, $p85, $i86, $p87, $i88, $p89, $i90, $p91, $i92, $i93, $i94, $i95, $i61, $i96, cmdloc_dummy_var_48, cmdloc_dummy_var_49);
    goto $bb16_last;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i61, 15);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i63 := $udiv.i32($i62, 4);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $i64 := $zext.i32.i64($i63);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref($i64, 4));
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.21, $p65);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i67 := $zext.i32.i64($i61);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($p3, $mul.ref($i67, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i61, 3);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $i72 := $mul.i32($i71, 8);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $i73 := $shl.i32($i70, $i72);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i66, $i73);
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i61, 15);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i76 := $udiv.i32($i75, 4);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $i77 := $zext.i32.i64($i76);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref($i77, 4));
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, $p78, $i74);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i61, 15);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 15);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i92 := $add.i32($i61, 1);
    call {:si_unique_call 599} {:cexpr "i"} boogie_si_record_i32($i92);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i93 := $load.i16($M.0, $p56);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i94 := $zext.i16.i32($i93);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $i95 := $ugt.i32($i94, $i92);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i96 := $i92;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2779;

  corral_source_split_2779:
    assume {:verifier.code 0} true;
    $i60 := $i96;
    goto $bb15;

  $bb21:
    assume $i95 == 1;
    assume {:verifier.code 0} true;
    $i61 := $i92;
    goto $bb21_dummy;

  $bb18:
    assume $i80 == 1;
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p0);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i82 := $sub.i32($i61, 15);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.21, $p83);
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.21, $p85);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.21, $p87);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $i90 := $load.i32($M.21, $p89);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32.i32($p81, $i1, .str.40, $i82, $i84, $i86, $i88, $i90);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p4);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.21;
    call {:si_unique_call 598} cmdloc_dummy_var_49 := $memset.i8(cmdloc_dummy_var_48, $p91, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.21 := cmdloc_dummy_var_49;
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb21_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2736;
}



const i40evf_asq_done: ref;

axiom i40evf_asq_done == $sub.ref(0, 361784);

procedure i40evf_asq_done($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_asq_done($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $i9: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(0, 1));
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(72, 1));
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p2, $mul.ref($i7, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} $i9 := readl($p8);
    call {:si_unique_call 602} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(68, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i9, $i14);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;
}



const __udelay: ref;

axiom __udelay == $sub.ref(0, 362816);

procedure __udelay($i0: i64);
  free requires assertsPassed;



implementation __udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} {:cexpr "__udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_va_start: ref;

axiom ldv__builtin_va_start == $sub.ref(0, 363848);

procedure ldv__builtin_va_start($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_start($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    return;
}



const vsnprintf: ref;

axiom vsnprintf == $sub.ref(0, 364880);

procedure vsnprintf($p0: ref, $i1: i64, $p2: ref, $p3: ref) returns ($r: i32);



const ldv__builtin_va_end: ref;

axiom ldv__builtin_va_end == $sub.ref(0, 365912);

procedure ldv__builtin_va_end($p0: ref);
  free requires assertsPassed;



implementation ldv__builtin_va_end($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    return;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 366944);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 1} true;
    call {:si_unique_call 604} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 605} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_3: ref;

axiom disable_suitable_timer_3 == $sub.ref(0, 367976);

procedure disable_suitable_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation disable_suitable_timer_3($p0: ref)
{
  var $i1: i64;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p2 := $M.14;
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i1, $i3);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $M.15 := 0;
    call {:si_unique_call 606} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const unregister_netdev: ref;

axiom unregister_netdev == $sub.ref(0, 369008);

procedure unregister_netdev($p0: ref);
  free requires assertsPassed;



implementation unregister_netdev($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    return;
}



const pci_enable_device: ref;

axiom pci_enable_device == $sub.ref(0, 370040);

procedure pci_enable_device($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_device($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 607} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 608} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const dma_set_mask_and_coherent: ref;

axiom dma_set_mask_and_coherent == $sub.ref(0, 371072);

procedure dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_mask_and_coherent($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var vslice_dummy_var_181: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} {:cexpr "dma_set_mask_and_coherent:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i2 := dma_set_mask($p0, $i1);
    call {:si_unique_call 611} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} vslice_dummy_var_181 := dma_set_coherent_mask($p0, $i1);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const pci_request_regions: ref;

axiom pci_request_regions == $sub.ref(0, 372104);

procedure pci_request_regions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_request_regions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 1} true;
    call {:si_unique_call 613} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 614} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const pci_enable_pcie_error_reporting: ref;

axiom pci_enable_pcie_error_reporting == $sub.ref(0, 373136);

procedure pci_enable_pcie_error_reporting($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_enable_pcie_error_reporting($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 1} true;
    call {:si_unique_call 615} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 616} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const alloc_etherdev_mqs: ref;

axiom alloc_etherdev_mqs == $sub.ref(0, 374168);

procedure alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_etherdev_mqs($i0: i32, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} {:cexpr "alloc_etherdev_mqs:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 618} {:cexpr "alloc_etherdev_mqs:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 619} {:cexpr "alloc_etherdev_mqs:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} $p3 := external_alloc();
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const pci_set_drvdata: ref;

axiom pci_set_drvdata == $sub.ref(0, 375200);

procedure pci_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation pci_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    return;
}



const ioremap: ref;

axiom ioremap == $sub.ref(0, 376232);

procedure ioremap($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} {:cexpr "ioremap:arg:offset"} boogie_si_record_i64($i0);
    call {:si_unique_call 623} {:cexpr "ioremap:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} $p2 := ioremap_nocache($i0, $i1);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const pci_read_config_byte: ref;

axiom pci_read_config_byte == $sub.ref(0, 377264);

procedure pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_read_config_byte($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} {:cexpr "pci_read_config_byte:arg:where"} boogie_si_record_i32($i1);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(16, 1));
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(56, 1));
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 626} $i7 := pci_bus_read_config_byte($p4, $i6, $i1, $p2);
    call {:si_unique_call 627} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 378296);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 379328);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 380360);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_reset_task: ref;

axiom i40evf_reset_task == $sub.ref(0, 381392);

procedure i40evf_reset_task($p0: ref);



const i40evf_adminq_task: ref;

axiom i40evf_adminq_task == $sub.ref(0, 382424);

procedure i40evf_adminq_task($p0: ref);



const i40evf_watchdog_task: ref;

axiom i40evf_watchdog_task == $sub.ref(0, 383456);

procedure i40evf_watchdog_task($p0: ref);



const i40evf_init_task: ref;

axiom i40evf_init_task == $sub.ref(0, 384488);

procedure i40evf_init_task($p0: ref);



const init_timer_key: ref;

axiom init_timer_key == $sub.ref(0, 385520);

procedure init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref);
  free requires assertsPassed;



implementation init_timer_key($p0: ref, $i1: i32, $p2: ref, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} {:cexpr "init_timer_key:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    return;
}



const delayed_work_timer_fn: ref;

axiom delayed_work_timer_fn == $sub.ref(0, 386552);

procedure delayed_work_timer_fn($i0: i64);



const schedule_delayed_work: ref;

axiom schedule_delayed_work == $sub.ref(0, 387584);

procedure schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1);
  free requires assertsPassed;



implementation schedule_delayed_work($p0: ref, $i1: i64) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} {:cexpr "schedule_delayed_work:arg:delay"} boogie_si_record_i64($i1);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, system_wq);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i3 := queue_delayed_work($p2, $p0, $i1);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const ldv_free_netdev_27: ref;

axiom ldv_free_netdev_27 == $sub.ref(0, 388616);

procedure ldv_free_netdev_27($p0: ref);
  free requires assertsPassed;
  modifies $M.20;



implementation ldv_free_netdev_27($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} free_netdev($p0);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 635} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    return;
}



const queue_delayed_work: ref;

axiom queue_delayed_work == $sub.ref(0, 389648);

procedure queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work($p0: ref, $p1: ref, $i2: i64) returns ($r: i1)
{
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} {:cexpr "queue_delayed_work:arg:delay"} boogie_si_record_i64($i2);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $i3 := queue_delayed_work_on(8192, $p0, $p1, $i2);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 638} {:cexpr "tmp"} boogie_si_record_i8($i4);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const queue_delayed_work_on: ref;

axiom queue_delayed_work_on == $sub.ref(0, 390680);

procedure queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1);
  free requires assertsPassed;



implementation queue_delayed_work_on($i0: i32, $p1: ref, $p2: ref, $i3: i64) returns ($r: i1)
{
  var $i4: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 639} {:cexpr "queue_delayed_work_on:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 640} {:cexpr "queue_delayed_work_on:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 1} true;
    call {:si_unique_call 641} $i4 := __VERIFIER_nondet_bool();
    call {:si_unique_call 642} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i4);
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const i40e_set_mac_type: ref;

axiom i40e_set_mac_type == $sub.ref(0, 391712);

procedure i40e_set_mac_type($p0: ref) returns ($r: i32);



const i40evf_check_reset_complete: ref;

axiom i40evf_check_reset_complete == $sub.ref(0, 392744);

procedure i40evf_check_reset_complete($p0: ref) returns ($r: i32);



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 393776);

procedure _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb1:
    assume {:verifier.code 1} true;
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 1} true;
    call {:si_unique_call 645} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 646} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 1} true;
    call {:si_unique_call 647} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 648} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



procedure _dev_info.ref.ref.i64.i64($p0: ref, $p1: ref, p.2: i64, p.3: i64) returns ($r: i32);



procedure _dev_info.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32) returns ($r: i32);



procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



const i40evf_init_adminq: ref;

axiom i40evf_init_adminq == $sub.ref(0, 394808);

procedure i40evf_init_adminq($p0: ref) returns ($r: i32);



const i40evf_send_api_ver: ref;

axiom i40evf_send_api_ver == $sub.ref(0, 395840);

procedure i40evf_send_api_ver($p0: ref) returns ($r: i32);



const i40evf_verify_api_ver: ref;

axiom i40evf_verify_api_ver == $sub.ref(0, 396872);

procedure i40evf_verify_api_ver($p0: ref) returns ($r: i32);



const i40evf_send_vf_config_msg: ref;

axiom i40evf_send_vf_config_msg == $sub.ref(0, 397904);

procedure i40evf_send_vf_config_msg($p0: ref) returns ($r: i32);



const kzalloc: ref;

axiom kzalloc == $sub.ref(0, 398936);

procedure kzalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kzalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} {:cexpr "kzalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 650} {:cexpr "kzalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i2 := $or.i32($i1, 32768);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p3 := kmalloc($i0, $i2);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const i40evf_get_vf_config: ref;

axiom i40evf_get_vf_config == $sub.ref(0, 399968);

procedure i40evf_get_vf_config($p0: ref) returns ($r: i32);



const i40evf_set_ethtool_ops: ref;

axiom i40evf_set_ethtool_ops == $sub.ref(0, 401000);

procedure i40evf_set_ethtool_ops($p0: ref);



const is_valid_ether_addr: ref;

axiom is_valid_ether_addr == $sub.ref(0, 402032);

procedure is_valid_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_valid_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i8;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i1 := is_multicast_ether_addr($p0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 653} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} $i6 := is_zero_ether_addr($p0);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i8($i6);
    call {:si_unique_call 655} {:cexpr "tmp___1"} boogie_si_record_i8($i7);
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb12;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb11;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;
}



const eth_random_addr: ref;

axiom eth_random_addr == $sub.ref(0, 403064);

procedure eth_random_addr($p0: ref);



const ether_addr_copy: ref;

axiom ether_addr_copy == $sub.ref(0, 404096);

procedure ether_addr_copy($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ether_addr_copy($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $p8: ref;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p0);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(4, 2));
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p0);
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(4, 2));
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p9, $i7);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    return;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 405128);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} __list_add($p0, $p1, $p3);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_watchdog_timer: ref;

axiom i40evf_watchdog_timer == $sub.ref(0, 406160);

procedure i40evf_watchdog_timer($i0: i64);
  free requires assertsPassed;



implementation i40evf_watchdog_timer($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var vslice_dummy_var_182: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} {:cexpr "i40evf_watchdog_timer:arg:data"} boogie_si_record_i64($i0);
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 3448)), $mul.ref(2672, 1));
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} vslice_dummy_var_182 := schedule_work($p2);
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_25: ref;

axiom ldv_mod_timer_25 == $sub.ref(0, 407192);

procedure ldv_mod_timer_25($p0: ref, $i1: i64) returns ($r: i32);



const i40evf_init_interrupt_scheme: ref;

axiom i40evf_init_interrupt_scheme == $sub.ref(0, 408224);

procedure i40evf_init_interrupt_scheme($p0: ref) returns ($r: i32);



const i40evf_map_rings_to_vectors: ref;

axiom i40evf_map_rings_to_vectors == $sub.ref(0, 409256);

procedure i40evf_map_rings_to_vectors($p0: ref) returns ($r: i32);



const i40evf_configure_rss: ref;

axiom i40evf_configure_rss == $sub.ref(0, 410288);

procedure i40evf_configure_rss($p0: ref);



const ldv_register_netdev_26: ref;

axiom ldv_register_netdev_26 == $sub.ref(0, 411320);

procedure ldv_register_netdev_26($p0: ref) returns ($r: i32);



const i40evf_misc_irq_enable: ref;

axiom i40evf_misc_irq_enable == $sub.ref(0, 412352);

procedure i40evf_misc_irq_enable($p0: ref);



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 413384);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);



const register_netdev: ref;

axiom register_netdev == $sub.ref(0, 414416);

procedure register_netdev($p0: ref) returns ($r: i32);



const ldv_net_device_ops_6: ref;

axiom ldv_net_device_ops_6 == $sub.ref(0, 415448);

procedure ldv_net_device_ops_6();



const ldv_zalloc: ref;

axiom ldv_zalloc == $sub.ref(0, 416480);

procedure ldv_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_zalloc($i0: i64) returns ($r: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 659} {:cexpr "ldv_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 1} true;
    call {:si_unique_call 660} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 662} {:cexpr "tmp___0"} boogie_si_record_i32($i1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 663} $p4 := calloc(1, $i0);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 1} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 1} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 1} true;
    call {:si_unique_call 664} __VERIFIER_assume($i7);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $p3 := $p4;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $p3 := $0.ref;
    goto $bb3;
}



const next_queue: ref;

axiom next_queue == $sub.ref(0, 417512);

procedure next_queue($p0: ref, $i1: i32) returns ($r: i32);



const i40evf_map_vector_to_rxq: ref;

axiom i40evf_map_vector_to_rxq == $sub.ref(0, 418544);

procedure i40evf_map_vector_to_rxq($p0: ref, $i1: i32, $i2: i32);



const i40evf_map_vector_to_txq: ref;

axiom i40evf_map_vector_to_txq == $sub.ref(0, 419576);

procedure i40evf_map_vector_to_txq($p0: ref, $i1: i32, $i2: i32);



const i40evf_alloc_q_vectors: ref;

axiom i40evf_alloc_q_vectors == $sub.ref(0, 420608);

procedure i40evf_alloc_q_vectors($p0: ref) returns ($r: i32);



const i40evf_alloc_queues: ref;

axiom i40evf_alloc_queues == $sub.ref(0, 421640);

procedure i40evf_alloc_queues($p0: ref) returns ($r: i32);



const i40evf_free_q_vectors: ref;

axiom i40evf_free_q_vectors == $sub.ref(0, 422672);

procedure i40evf_free_q_vectors($p0: ref);



const netif_napi_del: ref;

axiom netif_napi_del == $sub.ref(0, 423704);

procedure netif_napi_del($p0: ref);



const i40evf_napi_poll: ref;

axiom i40evf_napi_poll == $sub.ref(0, 424736);

procedure i40evf_napi_poll($p0: ref, $i1: i32) returns ($r: i32);



const netif_napi_add: ref;

axiom netif_napi_add == $sub.ref(0, 425768);

procedure netif_napi_add($p0: ref, $p1: ref, $p2: ref, $i3: i32);



const napi_complete: ref;

axiom napi_complete == $sub.ref(0, 426800);

procedure napi_complete($p0: ref);



const i40e_clean_tx_irq: ref;

axiom i40e_clean_tx_irq == $sub.ref(0, 427832);

procedure i40e_clean_tx_irq($p0: ref, $i1: i32) returns ($r: i1);



const i40e_clean_rx_irq: ref;

axiom i40e_clean_rx_irq == $sub.ref(0, 428864);

procedure i40e_clean_rx_irq($p0: ref, $i1: i32) returns ($r: i32);



const i40e_update_dynamic_itr: ref;

axiom i40e_update_dynamic_itr == $sub.ref(0, 429896);

procedure i40e_update_dynamic_itr($p0: ref);



const i40evf_irq_enable_queues: ref;

axiom i40evf_irq_enable_queues == $sub.ref(0, 430928);

procedure i40evf_irq_enable_queues($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation i40evf_irq_enable_queues($p0: ref, $i1: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} {:cexpr "i40evf_irq_enable_queues:arg:mask"} boogie_si_record_i32($i1);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i5 := $sgt.i32($i4, 1);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb4;

  $bb4:
    call $i7, $i8, $i9, $i10, $p11, $p12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i6 := i40evf_irq_enable_queues_loop_$bb4($p0, $i1, $p3, $i7, $i8, $i9, $i10, $p11, $p12, $i13, $i14, $i15, $p16, $i17, $i18, $i19, $i6);
    goto $bb4_last;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, $sub.i32(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32(1, $i7);
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $i1);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i6, 1);
    call {:si_unique_call 667} {:cexpr "i"} boogie_si_record_i32($i17);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p3);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i17);
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i19 == 1);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb9:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb9_dummy;

  $bb6:
    assume $i10 == 1;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i6, 3583);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i14 := $mul.i32($i13, 4);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p12, $mul.ref($i15, 1));
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} writel(3, $p16);
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;
}



const i40e_set_new_dynamic_itr: ref;

axiom i40e_set_new_dynamic_itr == $sub.ref(0, 431960);

procedure i40e_set_new_dynamic_itr($p0: ref);



const numa_node_id: ref;

axiom numa_node_id == $sub.ref(0, 432992);

procedure numa_node_id() returns ($r: i32);



const llvm.prefetch: ref;

axiom llvm.prefetch == $sub.ref(0, 434024);

procedure llvm.prefetch($p0: ref, $i1: i32, $i2: i32, $i3: i32);



const skb_put: ref;

axiom skb_put == $sub.ref(0, 435056);

procedure skb_put($p0: ref, $i1: i32) returns ($r: ref);



const skb_end_pointer: ref;

axiom skb_end_pointer == $sub.ref(0, 436088);

procedure skb_end_pointer($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_end_pointer($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(204, 1));
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i4);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_fill_page_desc: ref;

axiom skb_fill_page_desc == $sub.ref(0, 437120);

procedure skb_fill_page_desc($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32);



const page_count: ref;

axiom page_count == $sub.ref(0, 438152);

procedure page_count($p0: ref) returns ($r: i32);



const page_to_nid: ref;

axiom page_to_nid == $sub.ref(0, 439184);

procedure page_to_nid($p0: ref) returns ($r: i32);



const get_page: ref;

axiom get_page == $sub.ref(0, 440216);

procedure get_page($p0: ref);



const i40e_ptype_to_hash: ref;

axiom i40e_ptype_to_hash == $sub.ref(0, 441248);

procedure i40e_ptype_to_hash($i0: i8) returns ($r: i32);



const i40e_rx_hash: ref;

axiom i40e_rx_hash == $sub.ref(0, 442280);

procedure i40e_rx_hash($p0: ref, $p1: ref) returns ($r: i32);



const skb_set_hash: ref;

axiom skb_set_hash == $sub.ref(0, 443312);

procedure skb_set_hash($p0: ref, $i1: i32, $i2: i32);



const eth_type_trans: ref;

axiom eth_type_trans == $sub.ref(0, 444344);

procedure eth_type_trans($p0: ref, $p1: ref) returns ($r: i16);



const i40e_rx_checksum: ref;

axiom i40e_rx_checksum == $sub.ref(0, 445376);

procedure i40e_rx_checksum($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i16);



const i40e_receive_skb: ref;

axiom i40e_receive_skb == $sub.ref(0, 446408);

procedure i40e_receive_skb($p0: ref, $p1: ref, $i2: i16);



const i40evf_alloc_rx_buffers: ref;

axiom i40evf_alloc_rx_buffers == $sub.ref(0, 447440);

procedure i40evf_alloc_rx_buffers($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_alloc_rx_buffers($p0: ref, $i1: i16)
{
  var $p2: ref;
  var $i3: i16;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i16;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i16;
  var $i65: i64;
  var $i66: i64;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i64;
  var $i72: i32;
  var $i73: i1;
  var $i74: i16;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $i97: i1;
  var $i98: i16;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i32;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i32;
  var $i128: i1;
  var $i129: i16;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $p147: ref;
  var $p149: ref;
  var $i150: i64;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i148: i16;
  var $i155: i32;
  var $i156: i32;
  var $i157: i16;
  var $p158: ref;
  var $i159: i16;
  var $i160: i32;
  var $i161: i32;
  var $i162: i1;
  var $i163: i16;
  var $i164: i32;
  var $i165: i32;
  var $i166: i16;
  var $i167: i32;
  var $i168: i1;
  var $i16: i16;
  var $i17: i16;
  var $i169: i16;
  var $i15: i16;
  var $i49: i16;
  var $p170: ref;
  var $i171: i16;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} {:cexpr "i40evf_alloc_rx_buffers:arg:cleaned_count"} boogie_si_record_i16($i1);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    call {:si_unique_call 669} {:cexpr "i"} boogie_si_record_i16($i3);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i1);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    call {:si_unique_call 670} {:cexpr "i40evf_alloc_rx_buffers:arg:tmp___2"} boogie_si_record_i16($i1);
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32($i10, 1);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    call {:si_unique_call 671} {:cexpr "cleaned_count"} boogie_si_record_i16($i12);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i1);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $i15 := $i3;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i49 := $i15;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i171 := $load.i16($M.0, $p170);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i172 := $zext.i16.i32($i171);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i49);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i174 := $ne.i32($i172, $i173);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb47:
    assume $i174 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i175 := $zext.i16.i32($i49);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} i40e_release_rx_desc($p0, $i175);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i12, $i3;
    goto $bb11;

  $bb11:
    call $p18, $p19, $p20, $i21, $p22, $p23, $p24, $p25, $i26, $p27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $i71, $i72, $i73, $i74, $p75, $p85, $i86, $i87, $p88, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $p107, $i108, $i109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $i121, $p122, $p123, $p124, $p125, $i126, $i127, $i128, $i129, $p130, $p140, $i141, $p142, $p143, $p144, $i145, $p146, $p147, $p149, $i150, $p151, $p152, $p153, $p154, $i148, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i16, $i17, $i169 := i40evf_alloc_rx_buffers_loop_$bb11($p0, $p18, $p19, $p20, $i21, $p22, $p23, $p24, $p25, $i26, $p27, $p28, $p29, $i30, $i31, $p32, $p33, $p34, $i35, $i36, $p37, $i38, $i39, $i40, $p50, $i51, $i52, $i53, $p54, $p55, $p56, $i57, $i58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $i71, $i72, $i73, $i74, $p75, $p85, $i86, $i87, $p88, $p89, $i90, $i91, $p92, $p93, $p94, $p95, $i96, $i97, $i98, $p107, $i108, $i109, $p110, $i111, $i112, $p113, $p114, $p115, $p116, $p117, $p118, $i119, $i120, $i121, $p122, $p123, $p124, $p125, $i126, $i127, $i128, $i129, $p130, $p140, $i141, $p142, $p143, $p144, $i145, $p146, $p147, $p149, $i150, $p151, $p152, $p153, $p154, $i148, $i155, $i156, $i157, $p158, $i159, $i160, $i161, $i162, $i163, $i164, $i165, $i166, $i167, $i168, $i16, $i17, $i169);
    goto $bb11_last;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i64($i17);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p20, $mul.ref($i21, 32));
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i64($i17);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 40));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $p55 := $p29;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i58 := $eq.i64($i57, 0);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(40, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $i86 := constant_test_bit(4, $p85);
    call {:si_unique_call 678} {:cexpr "tmp___1"} boogie_si_record_i32($i86);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i86, 0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i87 == 1);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $i150 := $load.i64($M.0, $p149);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p151 := $bitcast.ref.ref($p22);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p152, $i150);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $p153 := $bitcast.ref.ref($p22);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p153, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p154, 0);
    assume {:verifier.code 0} true;
    $i148 := $i17;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i148);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i156 := $add.i32($i155, 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i157 := $trunc.i32.i16($i156);
    call {:si_unique_call 683} {:cexpr "i"} boogie_si_record_i16($i157);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $i159 := $load.i16($M.0, $p158);
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i159);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i161 := $zext.i16.i32($i157);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i160, $i161);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    $i163 := $i157;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i16);
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $i165 := $sub.i32($i164, 1);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    call {:si_unique_call 684} {:cexpr "cleaned_count"} boogie_si_record_i16($i166);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i16);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i168 := $ne.i32($i167, 0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $i169 := $i163;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i15 := $i169;
    goto $bb10;

  $bb44:
    assume $i168 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i166, $i163;
    goto $bb44_dummy;

  $bb41:
    assume $i162 == 1;
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i163 := 0;
    goto $bb43;

  $bb26:
    assume $i87 == 1;
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $i91 := $eq.i64($i90, 0);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $i108 := $load.i64($M.0, $p107);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $i109 := $eq.i64($i108, 0);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, $p140);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p22);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p143, $i141);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i145 := $load.i64($M.0, $p144);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p22);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p146, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p147, $i145);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i148 := $i17;
    goto $bb40;

  $bb34:
    assume $i109 == 1;
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(32, 1));
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i112 := $xor.i32($i111, 2048);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(32, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, $i112);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(32, 1));
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i119 := $load.i32($M.0, $p118);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $i120 := $zext.i32.i64($i119);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $i121 := dma_map_page($p115, $p117, $i120, 2048, 2);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p122, $i121);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i126 := $load.i64($M.0, $p125);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i127 := dma_mapping_error($p124, $i126);
    call {:si_unique_call 682} {:cexpr "tmp___0"} boogie_si_record_i32($i127);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i129, $p130 := $i17, $p27;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p131);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p132, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i134 := $load.i64($M.0, $p133);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i135 := $add.i64($i134, 1);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p136);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p138, $i135);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p130, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p139, 0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i49 := $i129;
    goto $bb17;

  $bb28:
    assume $i91 == 1;
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $p92 := alloc_pages(32, 0);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p93, $p92);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i96 := $p2i.ref.i64($p95);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i97 := $eq.i64($i96, 0);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i98 := $i17;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i97 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p99);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p100, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, 1);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p106, $i103);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i49 := $i98;
    goto $bb17;

  $bb20:
    assume $i58 == 1;
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p55, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i64($i64);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $i66 := dma_map_single_attrs($p60, $p62, $i65, 2, $0.ref);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i66);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i71 := $load.i64($M.0, $p70);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} $i72 := dma_mapping_error($p69, $i71);
    call {:si_unique_call 676} {:cexpr "tmp"} boogie_si_record_i32($i72);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i74, $p75 := $i17, $p27;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i73 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i79 := $load.i64($M.0, $p78);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $i80 := $add.i64($i79, 1);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p82, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i80);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p75, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p84, 0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i49 := $i74;
    goto $bb17;

  $bb13:
    assume $i31 == 1;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p37 := netdev_alloc_skb_ip_align($p33, $i36);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i40 := $i17;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} skb_record_rx_queue($p37, $i53);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p25, $mul.ref($i26, 40)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $p37);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p55 := $p37;
    goto $bb19;

  $bb15:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i44 := $load.i64($M.0, $p43);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i45 := $add.i64($i44, 1);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p48, $i45);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i49 := $i40;
    goto $bb17;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb44_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;
}



const u64_stats_update_begin: ref;

axiom u64_stats_update_begin == $sub.ref(0, 448472);

procedure u64_stats_update_begin($p0: ref);



const netdev_alloc_skb_ip_align: ref;

axiom netdev_alloc_skb_ip_align == $sub.ref(0, 449504);

procedure netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation netdev_alloc_skb_ip_align($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} {:cexpr "netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p2 := __netdev_alloc_skb_ip_align($p0, $i1, 32);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_record_rx_queue: ref;

axiom skb_record_rx_queue == $sub.ref(0, 450536);

procedure skb_record_rx_queue($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_record_rx_queue($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} {:cexpr "skb_record_rx_queue:arg:rx_queue"} boogie_si_record_i16($i1);
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i4);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    return;
}



const dma_map_single_attrs: ref;

axiom dma_map_single_attrs == $sub.ref(0, 451568);

procedure dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_single_attrs($p0: ref, $p1: ref, $i2: i64, $i3: i32, $p4: ref) returns ($r: i64)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} {:cexpr "dma_map_single_attrs:arg:size"} boogie_si_record_i64($i2);
    call {:si_unique_call 690} {:cexpr "dma_map_single_attrs:arg:dir"} boogie_si_record_i32($i3);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} $p5 := get_dma_ops($p0);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i2);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} kmemcheck_mark_initialized($p1, $i6);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $i7 := valid_dma_direction($i3);
    call {:si_unique_call 694} {:cexpr "tmp___0"} boogie_si_record_i32($i7);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 696} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p1);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $i14 := __phys_addr($i13);
    call {:si_unique_call 699} {:cexpr "tmp___2"} boogie_si_record_i64($i14);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i64($i14, 12);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i17, 64));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p1);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 4095);
    call {:si_unique_call 700} $i21 := devirtbounce.11($p16, $p0, $p18, $i20, $i2, $i3, $p4);
    call {:si_unique_call 701} {:cexpr "addr"} boogie_si_record_i64($i21);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p1);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i23 := __phys_addr($i22);
    call {:si_unique_call 703} {:cexpr "tmp___3"} boogie_si_record_i64($i23);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i64($i23, 12);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($i2p.i64.ref($sub.i64(0, 24189255811072)), $mul.ref($i24, 64));
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p1);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 4095);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} debug_dma_map_page($p0, $p25, $i27, $i2, $i3, $i21, 1);
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $r := $i21;
    return;

  $bb1:
    assume $i12 == 1;
    call {:si_unique_call 697} devirtbounce.2(0, .str.117, 19, 12);
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_single_attrs_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const dma_mapping_error: ref;

axiom dma_mapping_error == $sub.ref(0, 452600);

procedure dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_mapping_error($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i11: i1;
  var $i12: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} {:cexpr "dma_mapping_error:arg:dma_addr"} boogie_si_record_i64($i1);
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p2 := get_dma_ops($p0);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} debug_dma_mapping_error($p0, $i1);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $eq.i64($i1, 0);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i10 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 128)), $mul.ref(96, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    call {:si_unique_call 708} $i9 := devirtbounce.12($p8, $p0, $i1);
    call {:si_unique_call 709} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb3;
}



const alloc_pages: ref;

axiom alloc_pages == $sub.ref(0, 453632);

procedure alloc_pages($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} {:cexpr "alloc_pages:arg:gfp_mask"} boogie_si_record_i32($i0);
    call {:si_unique_call 711} {:cexpr "alloc_pages:arg:order"} boogie_si_record_i32($i1);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 712} $p2 := alloc_pages_current($i0, $i1);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dma_map_page: ref;

axiom dma_map_page == $sub.ref(0, 454664);

procedure dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} {:cexpr "dma_map_page:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 714} {:cexpr "dma_map_page:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 715} {:cexpr "dma_map_page:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $p5 := get_dma_ops($p0);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} $p6 := lowmem_page_address($p1);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref($i2, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i3);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} kmemcheck_mark_initialized($p7, $i8);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i9 := valid_dma_direction($i4);
    call {:si_unique_call 720} {:cexpr "tmp___1"} boogie_si_record_i32($i9);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i11 := $zext.i1.i32($i10);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} $i13 := ldv__builtin_expect($i12, 0);
    call {:si_unique_call 722} {:cexpr "tmp___2"} boogie_si_record_i64($i13);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    call {:si_unique_call 724} $i17 := devirtbounce.11($p16, $p0, $p1, $i2, $i3, $i4, $0.ref);
    call {:si_unique_call 725} {:cexpr "addr"} boogie_si_record_i64($i17);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} debug_dma_map_page($p0, $p1, $i2, $i3, $i4, $i17, 0);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb1:
    assume $i14 == 1;
    call {:si_unique_call 723} devirtbounce.2(0, .str.117, 79, 12);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dma_map_page_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const i40e_release_rx_desc: ref;

axiom i40e_release_rx_desc == $sub.ref(0, 455696);

procedure i40e_release_rx_desc($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_release_rx_desc($p0: ref, $i1: i32)
{
  var $i2: i16;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} {:cexpr "i40e_release_rx_desc:arg:val"} boogie_si_record_i32($i1);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i2 := $trunc.i32.i16($i1);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p3, $i2);
    call {:si_unique_call 728} devirtbounce.10(0);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} writel($i1, $p5);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    return;
}



const lowmem_page_address: ref;

axiom lowmem_page_address == $sub.ref(0, 456728);

procedure lowmem_page_address($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation lowmem_page_address($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i2 := $add.i64($i1, 24189255811072);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    $i3 := $sdiv.i64($i2, 64);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i4 := $shl.i64($i3, 12);
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    $i5 := $add.i64($i4, $sub.i64(0, 131941395333120));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $p6 := $i2p.i64.ref($i5);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const kmemcheck_mark_initialized: ref;

axiom kmemcheck_mark_initialized == $sub.ref(0, 457760);

procedure kmemcheck_mark_initialized($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation kmemcheck_mark_initialized($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "kmemcheck_mark_initialized:arg:n"} boogie_si_record_i32($i1);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    return;
}



const debug_dma_map_page: ref;

axiom debug_dma_map_page == $sub.ref(0, 458792);

procedure debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1);
  free requires assertsPassed;



implementation debug_dma_map_page($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32, $i5: i64, $i6: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} {:cexpr "debug_dma_map_page:arg:arg2"} boogie_si_record_i64($i2);
    call {:si_unique_call 732} {:cexpr "debug_dma_map_page:arg:arg3"} boogie_si_record_i64($i3);
    call {:si_unique_call 733} {:cexpr "debug_dma_map_page:arg:arg4"} boogie_si_record_i32($i4);
    call {:si_unique_call 734} {:cexpr "debug_dma_map_page:arg:arg5"} boogie_si_record_i64($i5);
    call {:si_unique_call 735} {:cexpr "debug_dma_map_page:arg:arg6"} boogie_si_record_i1($i6);
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    return;
}



const alloc_pages_current: ref;

axiom alloc_pages_current == $sub.ref(0, 459824);

procedure alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_pages_current($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} {:cexpr "alloc_pages_current:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 737} {:cexpr "alloc_pages_current:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $p2 := external_alloc();
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 460856);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 1} true;
    call {:si_unique_call 739} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 740} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const debug_dma_mapping_error: ref;

axiom debug_dma_mapping_error == $sub.ref(0, 461888);

procedure debug_dma_mapping_error($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation debug_dma_mapping_error($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} {:cexpr "debug_dma_mapping_error:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    return;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 462920);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 742} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 1} true;
    call {:si_unique_call 743} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 744} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __netdev_alloc_skb_ip_align: ref;

axiom __netdev_alloc_skb_ip_align == $sub.ref(0, 463952);

procedure __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb_ip_align($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} {:cexpr "__netdev_alloc_skb_ip_align:arg:length"} boogie_si_record_i32($i1);
    call {:si_unique_call 746} {:cexpr "__netdev_alloc_skb_ip_align:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p3 := __netdev_alloc_skb($p0, $i1, $i2);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const __netdev_alloc_skb: ref;

axiom __netdev_alloc_skb == $sub.ref(0, 464984);

procedure __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation __netdev_alloc_skb($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} {:cexpr "__netdev_alloc_skb:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 749} {:cexpr "__netdev_alloc_skb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $p3 := external_alloc();
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __vlan_hwaccel_put_tag: ref;

axiom __vlan_hwaccel_put_tag == $sub.ref(0, 466016);

procedure __vlan_hwaccel_put_tag($p0: ref, $i1: i16, $i2: i16) returns ($r: ref);



const ldv_netif_rx_87: ref;

axiom ldv_netif_rx_87 == $sub.ref(0, 467048);

procedure ldv_netif_rx_87($p0: ref) returns ($r: i32);



const napi_gro_receive: ref;

axiom napi_gro_receive == $sub.ref(0, 468080);

procedure napi_gro_receive($p0: ref, $p1: ref) returns ($r: i32);



const ldv_skb_free_int: ref;

axiom ldv_skb_free_int == $sub.ref(0, 469112);

procedure ldv_skb_free_int($p0: ref) returns ($r: i32);



const decode_rx_desc_ptype: ref;

axiom decode_rx_desc_ptype == $sub.ref(0, 470144);

procedure decode_rx_desc_ptype($i0: i8) returns ($r: i32);



const ip_hdr: ref;

axiom ip_hdr == $sub.ref(0, 471176);

procedure ip_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ip_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 751} $p1 := skb_network_header($p0);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const udp_csum: ref;

axiom udp_csum == $sub.ref(0, 472208);

procedure udp_csum($p0: ref) returns ($r: i32);



const skb_transport_offset: ref;

axiom skb_transport_offset == $sub.ref(0, 473240);

procedure skb_transport_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_transport_offset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} $p1 := skb_transport_header($p0);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i3, $i7);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const csum_tcpudp_magic: ref;

axiom csum_tcpudp_magic == $sub.ref(0, 474272);

procedure csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_tcpudp_magic($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i32;
  var $i6: i16;
  var $i7: i32;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} {:cexpr "csum_tcpudp_magic:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 754} {:cexpr "csum_tcpudp_magic:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 755} {:cexpr "csum_tcpudp_magic:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 756} {:cexpr "csum_tcpudp_magic:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 757} {:cexpr "csum_tcpudp_magic:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i3);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i16($i7);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} $i9 := csum_tcpudp_nofold($i0, $i1, $i6, $i8, $i4);
    call {:si_unique_call 759} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i10 := csum_fold($i9);
    call {:si_unique_call 761} {:cexpr "tmp___0"} boogie_si_record_i16($i10);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const udp_hdr: ref;

axiom udp_hdr == $sub.ref(0, 475304);

procedure udp_hdr($p0: ref) returns ($r: ref);



const skb_transport_header: ref;

axiom skb_transport_header == $sub.ref(0, 476336);

procedure skb_transport_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_transport_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const csum_tcpudp_nofold: ref;

axiom csum_tcpudp_nofold == $sub.ref(0, 477368);

procedure csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation csum_tcpudp_nofold($i0: i32, $i1: i32, $i2: i16, $i3: i16, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "csum_tcpudp_nofold:arg:saddr"} boogie_si_record_i32($i0);
    call {:si_unique_call 763} {:cexpr "csum_tcpudp_nofold:arg:daddr"} boogie_si_record_i32($i1);
    call {:si_unique_call 764} {:cexpr "csum_tcpudp_nofold:arg:len"} boogie_si_record_i16($i2);
    call {:si_unique_call 765} {:cexpr "csum_tcpudp_nofold:arg:proto"} boogie_si_record_i16($i3);
    call {:si_unique_call 766} {:cexpr "csum_tcpudp_nofold:arg:sum"} boogie_si_record_i32($i4);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i3);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i5, $i6);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i8 := $shl.i32($i7, 8);
    call {:si_unique_call 767} $i9 := devirtbounce.13(0, $i1, $i0, $i8, $i4);
    call {:si_unique_call 768} {:cexpr "sum"} boogie_si_record_i32($i9);
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const csum_fold: ref;

axiom csum_fold == $sub.ref(0, 478400);

procedure csum_fold($i0: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_fold($i0: i32) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 769} {:cexpr "csum_fold:arg:sum"} boogie_si_record_i32($i0);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $i1 := $shl.i32($i0, 16);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i2 := $and.i32($i0, $sub.i32(0, 65536));
    call {:si_unique_call 770} $i3 := devirtbounce.14(0, $i1, $i2);
    call {:si_unique_call 771} {:cexpr "sum"} boogie_si_record_i32($i3);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $i4 := $xor.i32($i3, $sub.i32(0, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i4, 16);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const csum_partial: ref;

axiom csum_partial == $sub.ref(0, 479432);

procedure csum_partial($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);



const csum_add: ref;

axiom csum_add == $sub.ref(0, 480464);

procedure csum_add($i0: i32, $i1: i32) returns ($r: i32);



const add32_with_carry: ref;

axiom add32_with_carry == $sub.ref(0, 481496);

procedure add32_with_carry($i0: i32, $i1: i32) returns ($r: i32);



const skb_network_header: ref;

axiom skb_network_header == $sub.ref(0, 482528);

procedure skb_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(194, 1));
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const PageTail: ref;

axiom PageTail == $sub.ref(0, 483560);

procedure PageTail($p0: ref) returns ($r: i32);



const __get_page_tail: ref;

axiom __get_page_tail == $sub.ref(0, 484592);

procedure __get_page_tail($p0: ref) returns ($r: i1);



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 485624);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dump_page: ref;

axiom dump_page == $sub.ref(0, 486656);

procedure dump_page($p0: ref, $p1: ref);



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 487688);

procedure atomic_inc($p0: ref);



const compound_head: ref;

axiom compound_head == $sub.ref(0, 488720);

procedure compound_head($p0: ref) returns ($r: ref);



const compound_head_by_tail: ref;

axiom compound_head_by_tail == $sub.ref(0, 489752);

procedure compound_head_by_tail($p0: ref) returns ($r: ref);



const __skb_fill_page_desc: ref;

axiom __skb_fill_page_desc == $sub.ref(0, 490784);

procedure __skb_fill_page_desc($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32);



const skb_frag_size_set: ref;

axiom skb_frag_size_set == $sub.ref(0, 491816);

procedure skb_frag_size_set($p0: ref, $i1: i32);



const i40e_get_head: ref;

axiom i40e_get_head == $sub.ref(0, 492848);

procedure i40e_get_head($p0: ref) returns ($r: i32);



const i40e_check_tx_hang: ref;

axiom i40e_check_tx_hang == $sub.ref(0, 493880);

procedure i40e_check_tx_hang($p0: ref) returns ($r: i1);



const netif_stop_subqueue: ref;

axiom netif_stop_subqueue == $sub.ref(0, 494912);

procedure netif_stop_subqueue($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation netif_stop_subqueue($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} {:cexpr "netif_stop_subqueue:arg:queue_index"} boogie_si_record_i16($i1);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p3 := netdev_get_tx_queue($p0, $i2);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} netif_tx_stop_queue($p3);
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    return;
}



const netdev_tx_completed_queue: ref;

axiom netdev_tx_completed_queue == $sub.ref(0, 495944);

procedure netdev_tx_completed_queue($p0: ref, $i1: i32, $i2: i32);



const netif_carrier_ok: ref;

axiom netif_carrier_ok == $sub.ref(0, 496976);

procedure netif_carrier_ok($p0: ref) returns ($r: i1);



const __netif_subqueue_stopped: ref;

axiom __netif_subqueue_stopped == $sub.ref(0, 498008);

procedure __netif_subqueue_stopped($p0: ref, $i1: i16) returns ($r: i1);



const netif_wake_subqueue: ref;

axiom netif_wake_subqueue == $sub.ref(0, 499040);

procedure netif_wake_subqueue($p0: ref, $i1: i16);



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 500072);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);



const __netif_schedule: ref;

axiom __netif_schedule == $sub.ref(0, 501104);

procedure __netif_schedule($p0: ref);



const netif_tx_queue_stopped: ref;

axiom netif_tx_queue_stopped == $sub.ref(0, 502136);

procedure netif_tx_queue_stopped($p0: ref) returns ($r: i1);



const dql_completed: ref;

axiom dql_completed == $sub.ref(0, 503168);

procedure dql_completed($p0: ref, $i1: i32);



const dql_avail: ref;

axiom dql_avail == $sub.ref(0, 504200);

procedure dql_avail($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation dql_avail($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(4, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const netif_schedule_queue: ref;

axiom netif_schedule_queue == $sub.ref(0, 505232);

procedure netif_schedule_queue($p0: ref);



const i40e_get_tx_pending: ref;

axiom i40e_get_tx_pending == $sub.ref(0, 506264);

procedure i40e_get_tx_pending($p0: ref) returns ($r: i32);



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 507296);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);



const __list_add: ref;

axiom __list_add == $sub.ref(0, 508328);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    return;
}



const get_random_bytes: ref;

axiom get_random_bytes == $sub.ref(0, 509360);

procedure get_random_bytes($p0: ref, $i1: i32);



const is_multicast_ether_addr: ref;

axiom is_multicast_ether_addr == $sub.ref(0, 510392);

procedure is_multicast_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_multicast_ether_addr($p0: ref) returns ($r: i1)
{
  var $i1: i8;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i1 := $load.i8($M.0, $p0);
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 1);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const is_zero_ether_addr: ref;

axiom is_zero_ether_addr == $sub.ref(0, 511424);

procedure is_zero_ether_addr($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation is_zero_ether_addr($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(4, 2));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i2, $i6);
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const i40evf_clean_arq_element: ref;

axiom i40evf_clean_arq_element == $sub.ref(0, 512456);

procedure i40evf_clean_arq_element($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);



const i40e_vf_parse_hw_config: ref;

axiom i40e_vf_parse_hw_config == $sub.ref(0, 513488);

procedure i40e_vf_parse_hw_config($p0: ref, $p1: ref);



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 514520);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 776} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} $p2 := __kmalloc($i0, $i1);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const i40evf_send_pf_msg: ref;

axiom i40evf_send_pf_msg == $sub.ref(0, 515552);

procedure i40evf_send_pf_msg($p0: ref, $i1: i32, $p2: ref, $i3: i16) returns ($r: i32);



const i40e_aq_send_msg_to_pf: ref;

axiom i40e_aq_send_msg_to_pf == $sub.ref(0, 516584);

procedure i40e_aq_send_msg_to_pf($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i16, $p5: ref) returns ($r: i32);



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 517616);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);



const i40e_adminq_init_regs: ref;

axiom i40e_adminq_init_regs == $sub.ref(0, 518648);

procedure i40e_adminq_init_regs($p0: ref);



const i40e_init_asq: ref;

axiom i40e_init_asq == $sub.ref(0, 519680);

procedure i40e_init_asq($p0: ref) returns ($r: i32);



const i40e_init_arq: ref;

axiom i40e_init_arq == $sub.ref(0, 520712);

procedure i40e_init_arq($p0: ref) returns ($r: i32);



const i40e_alloc_adminq_arq_ring: ref;

axiom i40e_alloc_adminq_arq_ring == $sub.ref(0, 521744);

procedure i40e_alloc_adminq_arq_ring($p0: ref) returns ($r: i32);



const i40e_alloc_arq_bufs: ref;

axiom i40e_alloc_arq_bufs == $sub.ref(0, 522776);

procedure i40e_alloc_arq_bufs($p0: ref) returns ($r: i32);



const i40e_config_arq_regs: ref;

axiom i40e_config_arq_regs == $sub.ref(0, 523808);

procedure i40e_config_arq_regs($p0: ref) returns ($r: i32);



const i40e_free_adminq_arq: ref;

axiom i40e_free_adminq_arq == $sub.ref(0, 524840);

procedure i40e_free_adminq_arq($p0: ref);



const i40evf_allocate_virt_mem_d: ref;

axiom i40evf_allocate_virt_mem_d == $sub.ref(0, 525872);

procedure i40evf_allocate_virt_mem_d($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);



const i40evf_allocate_dma_mem_d: ref;

axiom i40evf_allocate_dma_mem_d == $sub.ref(0, 526904);

procedure i40evf_allocate_dma_mem_d($p0: ref, $p1: ref, $i2: i64, $i3: i32) returns ($r: i32);



const dma_alloc_attrs: ref;

axiom dma_alloc_attrs == $sub.ref(0, 527936);

procedure dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dma_alloc_attrs($p0: ref, $i1: i64, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $i6: i32;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} {:cexpr "dma_alloc_attrs:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 779} {:cexpr "dma_alloc_attrs:arg:gfp"} boogie_si_record_i32($i3);
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p5 := get_dma_ops($p0);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, $sub.i32(0, 8));
    call {:si_unique_call 781} {:cexpr "gfp"} boogie_si_record_i32($i6);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $p9 := $p0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i10 := is_device_dma_capable($p9);
    call {:si_unique_call 783} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $i17 := dma_alloc_coherent_gfp_flags($p9, $i6);
    call {:si_unique_call 785} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 128)), $mul.ref(0, 1));
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    call {:si_unique_call 786} $p20 := devirtbounce.16($p19, $p9, $i1, $p2, $i17, $p4);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p2);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} debug_dma_alloc_coherent($p9, $i1, $i21, $p20);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p12 := $p20;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $r := $p12;
    return;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p12 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $p9 := x86_dma_fallback_dev;
    goto $bb3;
}



const is_device_dma_capable: ref;

axiom is_device_dma_capable == $sub.ref(0, 528968);

procedure is_device_dma_capable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation is_device_dma_capable($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i5: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i5);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    assume {:verifier.code 0} true;
    $i5 := $i9;
    goto $bb3;
}



const dma_alloc_coherent_gfp_flags: ref;

axiom dma_alloc_coherent_gfp_flags == $sub.ref(0, 530000);

procedure dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dma_alloc_coherent_gfp_flags($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} {:cexpr "dma_alloc_coherent_gfp_flags:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i2 := dma_alloc_coherent_mask($p0, $i1);
    call {:si_unique_call 790} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i3 := $ule.i64($i2, 16777215);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i5 := $i1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i6 := $ule.i64($i2, 4294967295);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i5, 1);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i5, 4);
    call {:si_unique_call 792} {:cexpr "gfp"} boogie_si_record_i32($i9);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $i10 := $i9;
    goto $bb9;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i4 := $or.i32($i1, 1);
    call {:si_unique_call 791} {:cexpr "gfp"} boogie_si_record_i32($i4);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i5 := $i4;
    goto $bb3;
}



const debug_dma_alloc_coherent: ref;

axiom debug_dma_alloc_coherent == $sub.ref(0, 531032);

procedure debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref);
  free requires assertsPassed;



implementation debug_dma_alloc_coherent($p0: ref, $i1: i64, $i2: i64, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} {:cexpr "debug_dma_alloc_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 794} {:cexpr "debug_dma_alloc_coherent:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    return;
}



const dma_alloc_coherent_mask: ref;

axiom dma_alloc_coherent_mask == $sub.ref(0, 532064);

procedure dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64);
  free requires assertsPassed;



implementation dma_alloc_coherent_mask($p0: ref, $i1: i32) returns ($r: i64)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i64;
  var $i8: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 795} {:cexpr "dma_alloc_coherent_mask:arg:gfp"} boogie_si_record_i32($i1);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    call {:si_unique_call 796} {:cexpr "dma_mask"} boogie_si_record_i64($i3);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i8 := $i3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i1, 1);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 16777215 else 4294967295);
    call {:si_unique_call 797} {:cexpr "dma_mask"} boogie_si_record_i64($i7);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const i40e_alloc_adminq_asq_ring: ref;

axiom i40e_alloc_adminq_asq_ring == $sub.ref(0, 533096);

procedure i40e_alloc_adminq_asq_ring($p0: ref) returns ($r: i32);



const i40e_alloc_asq_bufs: ref;

axiom i40e_alloc_asq_bufs == $sub.ref(0, 534128);

procedure i40e_alloc_asq_bufs($p0: ref) returns ($r: i32);



const i40e_config_asq_regs: ref;

axiom i40e_config_asq_regs == $sub.ref(0, 535160);

procedure i40e_config_asq_regs($p0: ref) returns ($r: i32);



const i40e_free_adminq_asq: ref;

axiom i40e_free_adminq_asq == $sub.ref(0, 536192);

procedure i40e_free_adminq_asq($p0: ref);



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 537224);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_map_queues: ref;

axiom i40evf_map_queues == $sub.ref(0, 538256);

procedure i40evf_map_queues($p0: ref);



const i40evf_add_ether_addrs: ref;

axiom i40evf_add_ether_addrs == $sub.ref(0, 539288);

procedure i40evf_add_ether_addrs($p0: ref);



const i40evf_add_vlans: ref;

axiom i40evf_add_vlans == $sub.ref(0, 540320);

procedure i40evf_add_vlans($p0: ref);



const i40evf_del_ether_addrs: ref;

axiom i40evf_del_ether_addrs == $sub.ref(0, 541352);

procedure i40evf_del_ether_addrs($p0: ref);



const i40evf_del_vlans: ref;

axiom i40evf_del_vlans == $sub.ref(0, 542384);

procedure i40evf_del_vlans($p0: ref);



const i40evf_disable_queues: ref;

axiom i40evf_disable_queues == $sub.ref(0, 543416);

procedure i40evf_disable_queues($p0: ref);



const i40evf_configure_queues: ref;

axiom i40evf_configure_queues == $sub.ref(0, 544448);

procedure i40evf_configure_queues($p0: ref);



const i40evf_enable_queues: ref;

axiom i40evf_enable_queues == $sub.ref(0, 545480);

procedure i40evf_enable_queues($p0: ref);



const i40evf_request_stats: ref;

axiom i40evf_request_stats == $sub.ref(0, 546512);

procedure i40evf_request_stats($p0: ref);



const i40evf_irq_enable: ref;

axiom i40evf_irq_enable == $sub.ref(0, 547544);

procedure i40evf_irq_enable($p0: ref, $i1: i1);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_irq_enable($p0: ref, $i1: i1)
{
  var $i2: i8;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var vslice_dummy_var_183: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 799} {:cexpr "i40evf_irq_enable:arg:flush"} boogie_si_record_i1($i1);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} i40evf_irq_enable_queues($p0, $sub.i32(0, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i8.i1($i2);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(34816, 1));
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} vslice_dummy_var_183 := readl($p7);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_fire_sw_int: ref;

axiom i40evf_fire_sw_int == $sub.ref(0, 548576);

procedure i40evf_fire_sw_int($p0: ref, $i1: i32);



const ldv_mod_timer_22: ref;

axiom ldv_mod_timer_22 == $sub.ref(0, 549608);

procedure ldv_mod_timer_22($p0: ref, $i1: i64) returns ($r: i32);



const ldv_mod_timer_23: ref;

axiom ldv_mod_timer_23 == $sub.ref(0, 550640);

procedure ldv_mod_timer_23($p0: ref, $i1: i64) returns ($r: i32);



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 551672);

procedure dev_warn.ref.ref.ref($p0: ref, $p1: ref, p.2: ref) returns ($r: i32);



procedure dev_warn.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32) returns ($r: i32);



const list_del: ref;

axiom list_del == $sub.ref(0, 552704);

procedure list_del($p0: ref);



const i40evf_virtchnl_completion: ref;

axiom i40evf_virtchnl_completion == $sub.ref(0, 553736);

procedure i40evf_virtchnl_completion($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i16);



const netif_carrier_on: ref;

axiom netif_carrier_on == $sub.ref(0, 554768);

procedure netif_carrier_on($p0: ref);



const netif_tx_wake_all_queues: ref;

axiom netif_tx_wake_all_queues == $sub.ref(0, 555800);

procedure netif_tx_wake_all_queues($p0: ref);



const netif_tx_stop_all_queues___0: ref;

axiom netif_tx_stop_all_queues___0 == $sub.ref(0, 556832);

procedure netif_tx_stop_all_queues___0($p0: ref);



const netif_tx_start_all_queues: ref;

axiom netif_tx_start_all_queues == $sub.ref(0, 557864);

procedure netif_tx_start_all_queues($p0: ref);



const netif_tx_start_queue: ref;

axiom netif_tx_start_queue == $sub.ref(0, 558896);

procedure netif_tx_start_queue($p0: ref);
  free requires assertsPassed;



implementation netif_tx_start_queue($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} clear_bit(0, $p1);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    return;
}



const netif_tx_wake_queue: ref;

axiom netif_tx_wake_queue == $sub.ref(0, 559928);

procedure netif_tx_wake_queue($p0: ref);



const i40evf_request_reset: ref;

axiom i40evf_request_reset == $sub.ref(0, 560960);

procedure i40evf_request_reset($p0: ref);



const ldv_mod_timer_24: ref;

axiom ldv_mod_timer_24 == $sub.ref(0, 561992);

procedure ldv_mod_timer_24($p0: ref, $i1: i64) returns ($r: i32);



const i40evf_setup_all_tx_resources: ref;

axiom i40evf_setup_all_tx_resources == $sub.ref(0, 563024);

procedure i40evf_setup_all_tx_resources($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_setup_all_tx_resources($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i8: i32;
  var $i36: i32;
  var $i7: i32;
  var $i29: i32;
  var vslice_dummy_var_184: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $i7;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $i12, $p14, $p15, $p16, $i17, $p19, $p20, $i21, $i22, $i23, $i24, $i30, $p31, $p32, $i33, $i34, $i35, $i8, $i36 := i40evf_setup_all_tx_resources_loop_$bb4($p0, $p1, $p9, $i10, $i11, $i12, $p14, $p15, $p16, $i17, $p19, $p20, $i21, $i22, $i23, $i24, $i30, $p31, $p32, $i33, $i34, $i35, $i8, $i36);
    goto $bb4_last;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(744, 1));
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i12, 8));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i11);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i8);
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i17, 8));
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} $i21 := i40evf_setup_tx_descriptors($p20);
    call {:si_unique_call 804} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i8, $i21;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} vslice_dummy_var_184 := dev_err.ref.ref.ref.i32($p27, .str.57, .str.58, $i23);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i29 := $i24;
    goto $bb10;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i8, 1);
    call {:si_unique_call 805} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p1);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, $i30);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i36 := $i21;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $i7 := $i36;
    goto $bb3;

  $bb11:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;
}



const i40evf_setup_all_rx_resources: ref;

axiom i40evf_setup_all_rx_resources == $sub.ref(0, 564056);

procedure i40evf_setup_all_rx_resources($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_setup_all_rx_resources($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i8: i32;
  var $i36: i32;
  var $i7: i32;
  var $i29: i32;
  var vslice_dummy_var_185: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i29 := $i7;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $r := $i29;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $i10, $i11, $i12, $p14, $p15, $p16, $i17, $p19, $p20, $i21, $i22, $i23, $i24, $i30, $p31, $p32, $i33, $i34, $i35, $i8, $i36 := i40evf_setup_all_rx_resources_loop_$bb4($p0, $p1, $p9, $i10, $i11, $i12, $p14, $p15, $p16, $i17, $p19, $p20, $i21, $i22, $i23, $i24, $i30, $p31, $p32, $i33, $i34, $i35, $i8, $i36);
    goto $bb4_last;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(888, 1));
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i12, 8));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, $i11);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i8);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i17, 8));
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $i21 := i40evf_setup_rx_descriptors($p20);
    call {:si_unique_call 808} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i8, $i21;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} vslice_dummy_var_185 := dev_err.ref.ref.ref.i32($p27, .str.59, .str.60, $i23);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i29 := $i24;
    goto $bb10;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i8, 1);
    call {:si_unique_call 809} {:cexpr "i"} boogie_si_record_i32($i30);
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i33 := $load.i16($M.0, $p32);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i35 := $sgt.i32($i34, $i30);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i36 := $i21;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i7 := $i36;
    goto $bb3;

  $bb11:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i30;
    goto $bb11_dummy;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3584;
}



const i40evf_configure: ref;

axiom i40evf_configure == $sub.ref(0, 565088);

procedure i40evf_configure($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_configure($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i16;
  var $p22: ref;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} i40evf_set_rx_mode($p2);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} i40evf_configure_tx($p0);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} i40evf_configure_rx($p0);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 64);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb4;

  $bb4:
    call $i14, $p16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $p27, $p28, $i29, $i30, $p31, $p32, $i33, $p34, $p35, $i36, $i37, $i38, $i13 := i40evf_configure_loop_$bb4($p0, $p7, $i14, $p16, $p17, $p18, $i19, $i20, $i21, $p22, $i23, $i24, $i25, $i26, $p27, $p28, $i29, $i30, $p31, $p32, $i33, $p34, $p35, $i36, $i37, $i38, $i13);
    goto $bb4_last;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i14, 8));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i32.i16($i20);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} i40evf_alloc_rx_buffers($p17, $i21);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i23);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 65535);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i26);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} writel($i30, $p32);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i13, 1);
    call {:si_unique_call 816} {:cexpr "i"} boogie_si_record_i32($i33);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p7);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i36 := $load.i16($M.0, $p35);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i38 := $sgt.i32($i37, $i33);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i38 == 1);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i33;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;
}



const i40evf_up_complete: ref;

axiom i40evf_up_complete == $sub.ref(0, 566120);

procedure i40evf_up_complete($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15;



implementation i40evf_up_complete($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var vslice_dummy_var_186: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, 8);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(536, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 817} clear_bit(6, $p3);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} i40evf_napi_enable_all($p0);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 1);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(0, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i9 := $load.i64($M.0, jiffies);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 1);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 819} vslice_dummy_var_186 := ldv_mod_timer_pending_20($p8, $i10);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const i40evf_napi_enable_all: ref;

axiom i40evf_napi_enable_all == $sub.ref(0, 567152);

procedure i40evf_napi_enable_all($p0: ref);
  free requires assertsPassed;



implementation i40evf_napi_enable_all($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i6: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, $sub.i32(0, 1));
    call {:si_unique_call 820} {:cexpr "q_vectors"} boogie_si_record_i32($i3);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32(0, $i3);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $p8, $p9, $p10, $i11, $i12, $i5 := i40evf_napi_enable_all_loop_$bb4($p0, $i3, $i6, $p8, $p9, $p10, $i11, $i12, $i5);
    goto $bb4_last;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref($i6, 8));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 320)), $mul.ref(16, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} napi_enable($p10);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i11 := $add.i32($i5, 1);
    call {:si_unique_call 822} {:cexpr "q_idx"} boogie_si_record_i32($i11);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32($i11, $i3);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i12 == 1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i11;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3694;
}



const ldv_mod_timer_pending_20: ref;

axiom ldv_mod_timer_pending_20 == $sub.ref(0, 568184);

procedure ldv_mod_timer_pending_20($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.14, $M.0, $M.15;



implementation ldv_mod_timer_pending_20($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} {:cexpr "ldv_mod_timer_pending_20:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $i2 := mod_timer_pending($p0, $i1);
    call {:si_unique_call 825} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} activate_pending_timer_3($p0, $i1, 0);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const napi_enable: ref;

axiom napi_enable == $sub.ref(0, 569216);

procedure napi_enable($p0: ref);
  free requires assertsPassed;



implementation napi_enable($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i2 := constant_test_bit(0, $p1);
    call {:si_unique_call 828} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i5 := $sext.i32.i64($i4);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $i6 := ldv__builtin_expect($i5, 0);
    call {:si_unique_call 830} {:cexpr "tmp___0"} boogie_si_record_i64($i6);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i7 := $ne.i64($i6, 0);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    call {:si_unique_call 832} devirtbounce.10(0);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} clear_bit(0, $p8);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    call {:si_unique_call 831} devirtbounce.2(0, .str.54, 492, 12);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call napi_enable_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const i40evf_set_rx_mode: ref;

axiom i40evf_set_rx_mode == $sub.ref(0, 570248);

procedure i40evf_set_rx_mode($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_set_rx_mode($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p14: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $p37: ref;
  var $p38: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p36: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i32;
  var $i51: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i1;
  var $i70: i8;
  var $i71: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i64;
  var $p80: ref;
  var $i81: i64;
  var $i82: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i1;
  var $i89: i8;
  var $i90: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i1;
  var $p83: ref;
  var $i91: i8;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p109: ref;
  var $i110: i64;
  var $i111: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i1;
  var $i119: i8;
  var $i120: i1;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $p113: ref;
  var $p112: ref;
  var $p121: ref;
  var $i122: i8;
  var $p99: ref;
  var $i100: i8;
  var $i130: i1;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i32;
  var $p135: ref;
  var $p137: ref;
  var $p138: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $p65: ref;
  var $p66: ref;
  var $p143: ref;
  var vslice_dummy_var_187: ref;
  var vslice_dummy_var_188: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p1 := netdev_priv($p0);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i9, $i12);
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p33);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i31, $i34);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(2664, 1));
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $i48 := test_and_set_bit(0, $p47);
    call {:si_unique_call 838} {:cexpr "tmp___1"} boogie_si_record_i32($i48);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(728, 1)), $mul.ref(0, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p55, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i61 := $p2i.ref.i64($p60);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(728, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i61, $i63);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(2664, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} clear_bit(0, $p143);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume $i64 == 1;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $p65, $p66 := $p54, $p58;
    goto $bb34;

  $bb34:
    call $p67, $p68, $i69, $i70, $i71, $p74, $p75, $p76, $p77, $i78, $p80, $i81, $i82, $p84, $p85, $p86, $p87, $i88, $i89, $i90, $p93, $p94, $p95, $p96, $i97, $i98, $p83, $i91, $p103, $p104, $p105, $p106, $i107, $p109, $i110, $i111, $p114, $p115, $p116, $p117, $i118, $i119, $i120, $p124, $p125, $p126, $p127, $i128, $i129, $p113, $p112, $p121, $i122, $p99, $i100, $i130, $p131, $p132, $i133, $i134, $p135, $p137, $p138, $p140, $i141, $i142, $p65, $p66 := i40evf_set_rx_mode_loop_$bb34($p0, $p2, $i63, $p67, $p68, $i69, $i70, $i71, $p74, $p75, $p76, $p77, $i78, $p80, $i81, $i82, $p84, $p85, $p86, $p87, $i88, $i89, $i90, $p93, $p94, $p95, $p96, $i97, $i98, $p83, $i91, $p103, $p104, $p105, $p106, $i107, $p109, $i110, $i111, $p114, $p115, $p116, $p117, $i118, $i119, $i120, $p124, $p125, $p126, $p127, $i128, $i129, $p113, $p112, $p121, $i122, $p99, $i100, $i130, $p131, $p132, $i133, $i134, $p135, $p137, $p138, $p140, $i141, $i142, $p65, $p66);
    goto $bb34_last;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i69 := is_multicast_ether_addr($p68);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i70 := $zext.i1.i8($i69);
    call {:si_unique_call 844} {:cexpr "tmp___4"} boogie_si_record_i8($i70);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i8.i1($i70);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i71 == 1);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p105 := $bitcast.ref.ref($p104);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i107 := $p2i.ref.i64($p106);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1));
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i110 := $p2i.ref.i64($p109);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i107, $i110);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p112 := $p65;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p121, $i122 := $p112, 0;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p99, $i100 := $p121, $i122;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i8.i1($i100);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p66, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p138 := $load.ref($M.0, $p137);
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p66, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, $i63);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i142 == 1);
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb66:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $p65, $p66 := $p66, $p138;
    goto $bb66_dummy;

  $bb63:
    assume $i130 == 1;
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p99, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 1);
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $i133 := $load.i32($M.0, $p132);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i134 := $or.i32($i133, 16);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p135, $i134);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb51:
    assume $i111 == 1;
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $p113 := $p104;
    goto $bb54;

  $bb54:
    call $p114, $p115, $p116, $p117, $i118, $i119, $i120, $p124, $p125, $p126, $p127, $i128, $i129, $p113 := i40evf_set_rx_mode_loop_$bb54($i110, $p114, $p115, $p116, $p117, $i118, $i119, $i120, $p124, $p125, $p126, $p127, $i128, $i129, $p113, $p65);
    goto $bb54_last;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p113, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p116);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $i118 := ether_addr_equal($p115, $p117);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i119 := $zext.i1.i8($i118);
    call {:si_unique_call 848} {:cexpr "tmp___3"} boogie_si_record_i8($i119);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i8.i1($i119);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($add.ref($p113, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p126, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i128 := $p2i.ref.i64($p127);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, $i110);
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i129 == 1);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p112 := $p65;
    goto $bb53;

  $bb60:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $p113 := $p125;
    goto $bb60_dummy;

  $bb56:
    assume $i120 == 1;
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p121, $i122 := $p65, 1;
    goto $bb58;

  $bb36:
    assume $i71 == 1;
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p77);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i81 := $p2i.ref.i64($p80);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i78, $i81);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i91 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p99, $i100 := $p65, $i91;
    goto $bb50;

  $bb38:
    assume $i82 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p83 := $p75;
    goto $bb41;

  $bb41:
    call $p84, $p85, $p86, $p87, $i88, $i89, $i90, $p93, $p94, $p95, $p96, $i97, $i98, $p83 := i40evf_set_rx_mode_loop_$bb41($i81, $p84, $p85, $p86, $p87, $i88, $i89, $i90, $p93, $p94, $p95, $p96, $i97, $i98, $p83, $p65);
    goto $bb41_last;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i88 := ether_addr_equal($p85, $p87);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i8($i88);
    call {:si_unique_call 846} {:cexpr "tmp___2"} boogie_si_record_i8($i89);
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i8.i1($i89);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p83, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $i97 := $p2i.ref.i64($p96);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, $i81);
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i98 == 1);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb47:
    assume $i98 == 1;
    assume {:verifier.code 0} true;
    $p83 := $p94;
    goto $bb47_dummy;

  $bb43:
    assume $i90 == 1;
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i91 := 1;
    goto $bb45;

  $bb17:
    assume $i49 == 1;
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    call $i50, $i51 := i40evf_set_rx_mode_loop_$bb20($p47, $i50, $i51);
    goto $bb20_last;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb22, $bb23;

  $bb23:
    assume !(1 == 1);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $i50 := test_and_set_bit(0, $p47);
    call {:si_unique_call 841} {:cexpr "tmp___1"} boogie_si_record_i32($i50);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i51 == 1);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb28_dummy;

  $bb22:
    assume 1 == 1;
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __const_udelay(4295000);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $p36 := $p28;
    goto $bb12;

  $bb12:
    call $p37, $p38, $p41, $p42, $p43, $p44, $i45, $i46, $p36, vslice_dummy_var_188 := i40evf_set_rx_mode_loop_$bb12($p2, $i34, $p37, $p38, $p41, $p42, $p43, $p44, $i45, $i46, $p36, vslice_dummy_var_188);
    goto $bb12_last;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} vslice_dummy_var_188 := i40evf_add_filter($p2, $p38);
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p36, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, $i34);
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $p36 := $p42;
    goto $bb14_dummy;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p14 := $p6;
    goto $bb4;

  $bb4:
    call $p15, $p16, $p19, $p20, $p21, $p22, $i23, $i24, $p14, vslice_dummy_var_187 := i40evf_set_rx_mode_loop_$bb4($p2, $i12, $p15, $p16, $p19, $p20, $p21, $p22, $i23, $i24, $p14, vslice_dummy_var_187);
    goto $bb4_last;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} vslice_dummy_var_187 := i40evf_add_filter($p2, $p16);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $i24 := $ne.i64($i23, $i12);
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p20;
    goto $bb6_dummy;

  $bb60_dummy:
    assume false;
    return;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  $bb47_dummy:
    assume false;
    return;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  $bb66_dummy:
    assume false;
    return;

  $bb34_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  $bb28_dummy:
    assume false;
    return;

  $bb20_last:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb14_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3764;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;
}



const i40evf_configure_tx: ref;

axiom i40evf_configure_tx == $sub.ref(0, 571280);

procedure i40evf_configure_tx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_configure_tx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $i7 := $sgt.i32($i6, 0);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb4;

  $bb4:
    call $p9, $p10, $i11, $i12, $p13, $i14, $p16, $p17, $p18, $i19, $p20, $p21, $i22, $i23, $i24, $i8 := i40evf_configure_tx_loop_$bb4($p0, $p2, $p9, $p10, $i11, $i12, $p13, $i14, $p16, $p17, $p18, $i19, $p20, $p21, $i22, $i23, $i24, $i8);
    goto $bb4_last;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i8, 4);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i11);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p10, $mul.ref($i12, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i8);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i14, 8));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $p13);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i8, 1);
    call {:si_unique_call 850} {:cexpr "i"} boogie_si_record_i32($i19);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p2);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, $i19);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i19;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3919;
}



const i40evf_configure_rx: ref;

axiom i40evf_configure_rx == $sub.ref(0, 572312);

procedure i40evf_configure_rx($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_configure_rx($p0: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $i51: i32;
  var $i52: i32;
  var $i50: i32;
  var $i46: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i16;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i16;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i80: i16;
  var $i81: i32;
  var $i82: i1;
  var $i59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i6 := $add.i32($i5, 18);
    call {:si_unique_call 851} {:cexpr "max_frame"} boogie_si_record_i32($i6);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, $sub.i32(0, 5));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 2);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $i17 := $ugt.i32($i16, 1500);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 2);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i33 == 1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i39, 8);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 8);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_3989;

  corral_source_split_3989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i45 == 1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $i49 := $ule.i32($i48, 1500);
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i49 == 1);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i51 := $add.i32($i6, 1023);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i52 := $and.i32($i51, $sub.i32(0, 1024));
    call {:si_unique_call 852} {:cexpr "rx_buf_len"} boogie_si_record_i32($i52);
    assume {:verifier.code 0} true;
    $i50 := $i52;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i46 := $i50;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i56 := $load.i16($M.0, $p55);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $i57 := $zext.i16.i32($i56);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $i58 := $sgt.i32($i57, 0);
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i58 == 1;
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb19;

  $bb19:
    call $p60, $p61, $i62, $i63, $i64, $p65, $i66, $p68, $p69, $p70, $i71, $i72, $p74, $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i59 := i40evf_configure_rx_loop_$bb19($p0, $i46, $p53, $p60, $p61, $i62, $i63, $i64, $p65, $i66, $p68, $p69, $p70, $i71, $i72, $p74, $p75, $p76, $i77, $p78, $p79, $i80, $i81, $i82, $i59);
    goto $bb19_last;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i59, 2048);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i62, 4);
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p61, $mul.ref($i64, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64($i59);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i66, 8));
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p69, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p65);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i46);
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i59);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i72, 8));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p75, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p76, $i71);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i77 := $add.i32($i59, 1);
    call {:si_unique_call 853} {:cexpr "i"} boogie_si_record_i32($i77);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p53);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p78, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i80 := $load.i16($M.0, $p79);
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i81 := $zext.i16.i32($i80);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i82 := $sgt.i32($i81, $i77);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i82 == 1);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i59 := $i77;
    goto $bb21_dummy;

  $bb13:
    assume $i49 == 1;
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i50 := 2048;
    goto $bb15;

  $bb10:
    assume $i45 == 1;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $i46 := 512;
    goto $bb12;

  $bb7:
    assume $i33 == 1;
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, $sub.i32(0, 9));
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p37, $i36);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 4);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, $sub.i32(0, 9));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 8);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i24);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4026;
}



const i40evf_add_filter: ref;

axiom i40evf_add_filter == $sub.ref(0, 573344);

procedure i40evf_add_filter($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_add_filter($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2664, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} $i6 := test_and_set_bit(0, $p5);
    call {:si_unique_call 855} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $p10 := i40evf_find_filter($p0, $p1);
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p27 := $p10;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2664, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} clear_bit(0, $p28);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $p4 := $p27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb19:
    assume $i12 == 1;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p13 := kzalloc(24, 32);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} ether_addr_copy($p19, $p1);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(728, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} list_add($p20, $p21);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(23, 1));
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, 1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 4);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $p27 := $p13;
    goto $bb24;

  $bb21:
    assume $i16 == 1;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(2664, 1));
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} clear_bit(0, $p17);
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb5:
    assume $i7 == 1;
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call $i8, $i9 := i40evf_add_filter_loop_$bb8($p5, $i8, $i9);
    goto $bb8_last;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb10, $bb11;

  $bb11:
    assume !(1 == 1);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} $i8 := test_and_set_bit(0, $p5);
    call {:si_unique_call 858} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb16_dummy;

  $bb10:
    assume 1 == 1;
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} __const_udelay(4295000);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto $bb9;
}



const ether_addr_equal: ref;

axiom ether_addr_equal == $sub.ref(0, 574376);

procedure ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ether_addr_equal($p0: ref, $p1: ref) returns ($r: i1)
{
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_4114;

  corral_source_split_4114:
    assume {:verifier.code 0} true;
    $i6 := $xor.i32($i3, $i5);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p0);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(4, 2));
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p1);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref(4, 2));
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i15 := $xor.i32($i10, $i14);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i6, $i15);
    call {:si_unique_call 866} {:cexpr "fold"} boogie_si_record_i32($i16);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;
}



const i40evf_find_filter: ref;

axiom i40evf_find_filter == $sub.ref(0, 575408);

procedure i40evf_find_filter($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i40evf_find_filter($p0: ref, $p1: ref) returns ($r: ref)
{
  var $i2: i64;
  var $i3: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p15: ref;
  var $p16: ref;
  var $i17: i1;
  var $i18: i8;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $i27: i1;
  var $p14: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(728, 1)), $mul.ref(0, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(728, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i10, $i12);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p14 := $p7;
    goto $bb8;

  $bb8:
    call $p15, $p16, $i17, $i18, $i19, $p20, $p22, $p23, $p24, $p25, $i26, $i27, $p14 := i40evf_find_filter_loop_$bb8($p1, $i12, $p15, $p16, $i17, $i18, $i19, $p20, $p22, $p23, $p24, $p25, $i26, $i27, $p14);
    goto $bb8_last;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $i17 := ether_addr_equal($p1, $p16);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i8($i17);
    call {:si_unique_call 868} {:cexpr "tmp"} boogie_si_record_i8($i18);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i8.i1($i18);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p20 := $p14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p14, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i26 := $p2i.ref.i64($p25);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, $i12);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i27 == 1);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb13:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $p14 := $p23;
    goto $bb13_dummy;

  $bb10:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p4 := $p20;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4147;
}



const i40evf_setup_rx_descriptors: ref;

axiom i40evf_setup_rx_descriptors == $sub.ref(0, 576440);

procedure i40evf_setup_rx_descriptors($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_setup_rx_descriptors($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i24: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $p48: ref;
  var $p49: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i50: i32;
  var vslice_dummy_var_189: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    $i6 := $mul.i32($i5, 40);
    call {:si_unique_call 869} {:cexpr "bi_size"} boogie_si_record_i32($i6);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p8 := kzalloc($i7, 208);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p8);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(40, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i18 := constant_test_bit(5, $p17);
    call {:si_unique_call 873} {:cexpr "tmp___0"} boogie_si_record_i32($i18);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i28 := $mul.i32($i27, 32);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i24 := $i28;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i24);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, 4095);
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, $sub.i32(0, 4096));
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i33);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i37 := $zext.i32.i64($i36);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p39 := dma_alloc_attrs($p2, $i37, $p38, 208, $0.ref);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p39);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, 0);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $i50 := 0;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb8:
    assume $i44 == 1;
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} vslice_dummy_var_189 := _dev_info.ref.ref.i32($p2, .str.34, $i46);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} kfree($p54);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p55);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $0.ref);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i50 := $sub.i32(0, 12);
    goto $bb11;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i22, 16);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb7;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_setup_tx_descriptors: ref;

axiom i40evf_setup_tx_descriptors == $sub.ref(0, 577472);

procedure i40evf_setup_tx_descriptors($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_setup_tx_descriptors($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $i21: i16;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i5: i32;
  var vslice_dummy_var_190: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i9 := $mul.i32($i8, 48);
    call {:si_unique_call 876} {:cexpr "bi_size"} boogie_si_record_i32($i9);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p11 := kzalloc($i10, 208);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $p11);
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i21 := $load.i16($M.0, $p20);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i23 := $mul.i32($i22, 16);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 4);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i30, 4095);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, $sub.i32(0, 4096));
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i35);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(136, 1));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p38 := dma_alloc_attrs($p2, $i36, $p37, 208, $0.ref);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i42 := $p2i.ref.i64($p41);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i43 := $eq.i64($i42, 0);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, 0);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p48, 0);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(128, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} vslice_dummy_var_190 := _dev_info.ref.ref.i32($p2, .str.33, $i45);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} kfree($p52);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p54, $0.ref);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 12);
    goto $bb3;
}



const pci_bus_read_config_byte: ref;

axiom pci_bus_read_config_byte == $sub.ref(0, 578504);

procedure pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation pci_bus_read_config_byte($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 881} {:cexpr "pci_bus_read_config_byte:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 882} {:cexpr "pci_bus_read_config_byte:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 1} true;
    call {:si_unique_call 883} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 884} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const ioremap_nocache: ref;

axiom ioremap_nocache == $sub.ref(0, 579536);

procedure ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ioremap_nocache($i0: i64, $i1: i64) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} {:cexpr "ioremap_nocache:arg:arg0"} boogie_si_record_i64($i0);
    call {:si_unique_call 886} {:cexpr "ioremap_nocache:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $p2 := external_alloc();
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 580568);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1));
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    return;
}



const dma_set_mask: ref;

axiom dma_set_mask == $sub.ref(0, 581600);

procedure dma_set_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_set_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 888} {:cexpr "dma_set_mask:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 1} true;
    call {:si_unique_call 889} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 890} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const dma_set_coherent_mask: ref;

axiom dma_set_coherent_mask == $sub.ref(0, 582632);

procedure dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dma_set_coherent_mask($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $p5: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} {:cexpr "dma_set_coherent_mask:arg:mask"} boogie_si_record_i64($i1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} $i2 := dma_supported($p0, $i1);
    call {:si_unique_call 893} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(1168, 1));
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p5, $i1);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 5);
    goto $bb3;
}



const dma_supported: ref;

axiom dma_supported == $sub.ref(0, 583664);

procedure dma_supported($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation dma_supported($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 894} {:cexpr "dma_supported:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 1} true;
    call {:si_unique_call 895} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 896} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const i40evf_open: ref;

axiom i40evf_open == $sub.ref(0, 584696);

procedure i40evf_open($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11, $M.4, $M.3, $CurrAddr;



implementation i40evf_open($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i18: i32;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i26: i32;
  var $i27: i1;
  var $i25: i32;
  var $i20: i32;
  var $i17: i32;
  var $i11: i32;
  var vslice_dummy_var_191: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $p1 := netdev_priv($p0);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 256);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(2656, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 6);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i15 := i40evf_setup_all_tx_resources($p2);
    call {:si_unique_call 900} {:cexpr "err"} boogie_si_record_i32($i15);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i18 := i40evf_setup_all_rx_resources($p2);
    call {:si_unique_call 903} {:cexpr "err"} boogie_si_record_i32($i18);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(0, 1));
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $i23 := i40evf_request_traffic_irqs($p2, $p22);
    call {:si_unique_call 906} {:cexpr "err"} boogie_si_record_i32($i23);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} i40evf_configure($p2);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $i26 := i40evf_up_complete($p2);
    call {:si_unique_call 911} {:cexpr "err"} boogie_si_record_i32($i26);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} i40evf_irq_enable($p2, 1);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb20:
    assume $i27 == 1;
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i25 := $i26;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} i40evf_down($p2);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} i40evf_free_traffic_irqs($p2);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $i20 := $i25;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} i40evf_free_all_rx_resources($p2);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i17 := $i20;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} i40evf_free_all_tx_resources($p2);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i11 := $i17;
    goto $bb3;

  $bb16:
    assume $i24 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i25 := $i23;
    goto $bb18;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    goto $bb14;

  $bb8:
    assume $i16 == 1;
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    goto $bb10;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 16);
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} vslice_dummy_var_191 := dev_err.ref.ref($p9, .str.61);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 5);
    goto $bb3;
}



const i40evf_xmit_frame: ref;

axiom i40evf_xmit_frame == $sub.ref(0, 585728);

procedure i40evf_xmit_frame($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $CurrAddr;



implementation i40evf_xmit_frame($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $i23: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p2 := netdev_priv($p1);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(168, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i7, 8));
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i13 := $ule.i32($i12, 16);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 915} {:cexpr "tmp___1"} boogie_si_record_i64($i16);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i25 := i40e_xmit_frame_ring($p0, $p10);
    call {:si_unique_call 920} {:cexpr "tmp___2"} boogie_si_record_i32($i25);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i23 := $i25;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $r := $i23;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(17, $i19);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i21 := skb_pad($p0, $i20);
    call {:si_unique_call 917} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 17);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} skb_set_tail_pointer($p0, 17);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i22 == 1;
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i23 := 0;
    goto $bb5;
}



const i40evf_set_mac: ref;

axiom i40evf_set_mac == $sub.ref(0, 586760);

procedure i40evf_set_mac($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_set_mac($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i1;
  var $i9: i8;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i1;
  var $i19: i8;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} $p2 := netdev_priv($p0);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p1);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i8 := is_valid_ether_addr($p7);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i8($i8);
    call {:si_unique_call 923} {:cexpr "tmp___0"} boogie_si_record_i8($i9);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1($i9);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i18 := ether_addr_equal($p15, $p17);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i8($i18);
    call {:si_unique_call 925} {:cexpr "tmp___2"} boogie_si_record_i8($i19);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i8.i1($i19);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $p23 := i40evf_add_filter($p3, $p22);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p23);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i38 := $eq.i64($i37, 0);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i39 := (if $i38 == 1 then $sub.i32(0, 12) else 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i13 := $i39;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb11:
    assume $i25 == 1;
    $p27 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(76, 1)), $mul.ref(4, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} ether_addr_copy($p28, $p30);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(840, 1));
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(76, 1)), $mul.ref(4, 1));
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} ether_addr_copy($p32, $p36);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb6;

  $bb4:
    assume $i12 == 1;
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 99);
    goto $bb6;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;
}



const eth_validate_addr: ref;

axiom eth_validate_addr == $sub.ref(0, 587792);

procedure eth_validate_addr($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation eth_validate_addr($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 929} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 930} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const i40evf_change_mtu: ref;

axiom i40evf_change_mtu == $sub.ref(0, 588824);

procedure i40evf_change_mtu($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.4, $M.3, $M.5, $M.7, $M.9, $M.11, $CurrAddr, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19;



implementation i40evf_change_mtu($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $p8: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} {:cexpr "i40evf_change_mtu:arg:new_mtu"} boogie_si_record_i32($i1);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $p2 := netdev_priv($p0);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i1, 18);
    call {:si_unique_call 933} {:cexpr "max_frame"} boogie_si_record_i32($i4);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i5 := $sle.i32($i1, 67);
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i4, 9728);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3176)), $mul.ref(536, 1));
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} i40evf_reinit_locked($p3);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const i40evf_tx_timeout: ref;

axiom i40evf_tx_timeout == $sub.ref(0, 589856);

procedure i40evf_tx_timeout($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_tx_timeout($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var vslice_dummy_var_192: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $p1 := netdev_priv($p0);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(720, 1));
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i5 := $add.i32($i4, 1);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(720, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 512);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 0);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i12, 1024);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(904, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(128, 1));
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_192 := schedule_work($p15);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_get_stats: ref;

axiom i40evf_get_stats == $sub.ref(0, 590888);

procedure i40evf_get_stats($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation i40evf_get_stats($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p1 := netdev_priv($p0);
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(936, 1));
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const i40evf_vlan_rx_add_vid: ref;

axiom i40evf_vlan_rx_add_vid == $sub.ref(0, 591920);

procedure i40evf_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_vlan_rx_add_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} {:cexpr "i40evf_vlan_rx_add_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 939} {:cexpr "i40evf_vlan_rx_add_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} $p3 := netdev_priv($p0);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $p7 := i40evf_add_vlan($p4, $i6);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 12);
    goto $bb3;
}



const i40evf_vlan_rx_kill_vid: ref;

axiom i40evf_vlan_rx_kill_vid == $sub.ref(0, 592952);

procedure i40evf_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_vlan_rx_kill_vid($p0: ref, $i1: i16, $i2: i16) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} {:cexpr "i40evf_vlan_rx_kill_vid:arg:proto"} boogie_si_record_i16($i1);
    call {:si_unique_call 943} {:cexpr "i40evf_vlan_rx_kill_vid:arg:vid"} boogie_si_record_i16($i2);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} $p3 := netdev_priv($p0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i2);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i32.i16($i5);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} i40evf_del_vlan($p4, $i6);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const i40evf_del_vlan: ref;

axiom i40evf_del_vlan == $sub.ref(0, 593984);

procedure i40evf_del_vlan($p0: ref, $i1: i16);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_del_vlan($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $i3: i16;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} {:cexpr "i40evf_del_vlan:arg:vlan"} boogie_si_record_i16($i1);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} $p4 := i40evf_find_vlan($p0, $i3);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 24)), $mul.ref(18, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 1);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, 32);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_find_vlan: ref;

axiom i40evf_find_vlan == $sub.ref(0, 595016);

procedure i40evf_find_vlan($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;



implementation i40evf_find_vlan($p0: ref, $i1: i16) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p11: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} {:cexpr "i40evf_find_vlan:arg:vlan"} boogie_si_record_i16($i1);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(544, 1)), $mul.ref(0, 1));
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(544, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i7, $i9);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p18 := $0.ref;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $r := $p18;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p11 := $p4;
    goto $bb4;

  $bb4:
    call $p12, $i13, $i14, $i15, $i16, $p17, $p20, $p21, $p22, $p23, $i24, $i25, $p11 := i40evf_find_vlan_loop_$bb4($i1, $i9, $p12, $i13, $i14, $i15, $i16, $p17, $p20, $p21, $p22, $p23, $i24, $i25, $p11);
    goto $bb4_last;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i1);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, $i15);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p17 := $p11;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p11, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, $i9);
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i25 == 1);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $p11 := $p21;
    goto $bb10_dummy;

  $bb6:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p18 := $p17;
    goto $bb8;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;
}



const i40evf_add_vlan: ref;

axiom i40evf_add_vlan == $sub.ref(0, 596048);

procedure i40evf_add_vlan($p0: ref, $i1: i16) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation i40evf_add_vlan($p0: ref, $i1: i16) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i16;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} {:cexpr "i40evf_add_vlan:arg:vlan"} boogie_si_record_i16($i1);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $p4 := i40evf_find_vlan($p0, $i3);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $p21 := $p4;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $p11 := $p21;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} $p7 := kzalloc(24, 32);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p12, $i1);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} INIT_LIST_HEAD($p13);
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(544, 1));
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} list_add($p14, $p15);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 24)), $mul.ref(19, 1));
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, 8);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i19);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p21 := $p7;
    goto $bb7;

  $bb3:
    assume $i10 == 1;
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb5;
}



const i40evf_reinit_locked: ref;

axiom i40evf_reinit_locked == $sub.ref(0, 597080);

procedure i40evf_reinit_locked($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.4, $M.3, $M.5, $M.7, $M.9, $M.11, $CurrAddr, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19;



implementation i40evf_reinit_locked($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var vslice_dummy_var_193: i64;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(920, 1));
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} $i3 := preempt_count();
    call {:si_unique_call 955} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i5 := $and.i64($i4, 2096896);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    call {:si_unique_call 956} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i7);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 957} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 958} {:cexpr "tmp___0"} boogie_si_record_i64($i11);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i7, 0);
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} vslice_dummy_var_193 := ldv__builtin_expect($i15, 0);
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} i40evf_down($p0);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i17 := i40evf_setup_all_tx_resources($p0);
    call {:si_unique_call 963} {:cexpr "err"} boogie_si_record_i32($i17);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $i19 := i40evf_setup_all_rx_resources($p0);
    call {:si_unique_call 967} {:cexpr "err"} boogie_si_record_i32($i19);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} i40evf_configure($p0);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $i21 := i40evf_up_complete($p0);
    call {:si_unique_call 970} {:cexpr "err"} boogie_si_record_i32($i21);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} i40evf_irq_enable($p0, 1);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} vslice_dummy_var_194 := dev_err.ref.ref($p25, .str.8);
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} vslice_dummy_var_195 := i40evf_close($p2);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} warn_slowpath_null(.str.7, 1950);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const preempt_count: ref;

axiom preempt_count == $sub.ref(0, 598112);

procedure preempt_count() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation preempt_count() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $i0 := devirtbounce.5(0, __preempt_count);
    call {:si_unique_call 973} {:cexpr "pfo_ret__"} boogie_si_record_i32($i0);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $and.i32($i0, 2147483647);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const skb_pad: ref;

axiom skb_pad == $sub.ref(0, 599144);

procedure skb_pad($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_pad($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 974} {:cexpr "skb_pad:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 1} true;
    call {:si_unique_call 975} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 976} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_set_tail_pointer: ref;

axiom skb_set_tail_pointer == $sub.ref(0, 600176);

procedure skb_set_tail_pointer($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_set_tail_pointer($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} {:cexpr "skb_set_tail_pointer:arg:offset"} boogie_si_record_i32($i1);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} skb_reset_tail_pointer($p0);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i1);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    return;
}



const i40e_xmit_frame_ring: ref;

axiom i40e_xmit_frame_ring == $sub.ref(0, 601208);

procedure i40e_xmit_frame_ring($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.0, $CurrAddr;



implementation i40e_xmit_frame_ring($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $i35: i1;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i64;
  var $i49: i32;
  var $i50: i32;
  var $i51: i8;
  var $i52: i32;
  var $i53: i8;
  var $i54: i32;
  var $i55: i32;
  var $i10: i32;
  var vslice_dummy_var_196: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 981} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} $p7 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p2, 1);
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p3, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p4, 0);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p5, 0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, 0);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p7, 0);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} $i8 := i40e_xmit_descriptor_count($p0, $p1);
    call {:si_unique_call 986} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 987} $i11 := i40e_tx_prepare_vlan_flags($p0, $p1, $p5);
    call {:si_unique_call 988} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    call {:si_unique_call 990} {:cexpr "protocol"} boogie_si_record_i16($i14);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i19);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p17, $mul.ref($i20, 48));
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i14);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 8);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i23 == 1);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i14);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, 56710);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.32, $p5);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i14);
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} $i33 := i40e_tso($p1, $p0, $i30, $i32, $p7, $p2, $p3);
    call {:si_unique_call 992} {:cexpr "tso"} boogie_si_record_i32($i33);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i33, 0);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i34 == 1);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i33, 0);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} skb_tx_timestamp($p0);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.33, $p6);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $i39 := $or.i32($i38, 4);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p6, $i39);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p0);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p40, $mul.ref(124, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 12);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i48 := $load.i64($M.29, $p2);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.30, $p3);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} i40e_create_tx_ctx($p1, $i48, $i49, 0);
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.32, $p5);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.34, $p7);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.33, $p6);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.31, $p4);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} i40e_tx_map($p1, $p0, $p21, $i50, $i53, $i54, $i55);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} vslice_dummy_var_196 := i40e_maybe_stop_tx($p1, 21);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb21:
    assume $i44 == 1;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.32, $p5);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i45, 1);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p5, $i46);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.32, $p5);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} i40e_tx_enable_csum($p0, $i47, $p6, $p4, $p1, $p3);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i35 == 1;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.32, $p5);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $i37 := $or.i32($i36, 8);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p5, $i37);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb15:
    assume $i34 == 1;
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} dev_kfree_skb_any($p0);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb12:
    assume $i27 == 1;
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.32, $p5);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i28, 32);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p5, $i29);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i23 == 1;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.32, $p5);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $i25 := $or.i32($i24, 16);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p5, $i25);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i10 := 16;
    goto $bb3;
}



const i40e_xmit_descriptor_count: ref;

axiom i40e_xmit_descriptor_count == $sub.ref(0, 602240);

procedure i40e_xmit_descriptor_count($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_xmit_descriptor_count($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i32;
  var $i27: i1;
  var $i9: i32;
  var $i10: i32;
  var $i28: i32;
  var $i8: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $p2 := skb_end_pointer($p0);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i7 := $ugt.i32($i6, 0);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i29 := skb_headlen($p0);
    call {:si_unique_call 1004} {:cexpr "tmp___1"} boogie_si_record_i32($i29);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    $i30 := $add.i32($i29, 8191);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $i31 := $udiv.i32($i30, 8192);
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i31, $i8);
    call {:si_unique_call 1005} {:cexpr "count"} boogie_si_record_i32($i32);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i32, 5);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} $i34 := i40e_maybe_stop_tx($p1, $i33);
    call {:si_unique_call 1007} {:cexpr "tmp___2"} boogie_si_record_i32($i34);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i44 := $i32;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb9:
    assume $i35 == 1;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i39, 1);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p42, $mul.ref(0, 24)), $mul.ref(8, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i40);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i44 := 0;
    goto $bb11;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i9, $i10 := 0, 0;
    goto $bb4;

  $bb4:
    call $p11, $i12, $p13, $p16, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i9, $i10, $i28 := i40e_xmit_descriptor_count_loop_$bb4($p0, $p11, $i12, $p13, $p16, $i17, $i18, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i9, $i10, $i28);
    goto $bb4_last;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p11 := skb_end_pointer($p0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i10);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p11);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($add.ref($p13, $mul.ref(0, 320)), $mul.ref(48, 1)), $mul.ref($i12, 16)), $mul.ref(12, 1));
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 8191);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i19 := $udiv.i32($i18, 8192);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, $i9);
    call {:si_unique_call 1000} {:cexpr "count"} boogie_si_record_i32($i20);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i10, 1);
    call {:si_unique_call 1001} {:cexpr "f"} boogie_si_record_i32($i21);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} $p22 := skb_end_pointer($p0);
    goto corral_source_split_4812;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i32($i25);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $i27 := $ugt.i32($i26, $i21);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i28 := $i20;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i8 := $i28;
    goto $bb3;

  $bb6:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i9, $i10 := $i20, $i21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;
}



const i40e_tx_prepare_vlan_flags: ref;

axiom i40e_tx_prepare_vlan_flags == $sub.ref(0, 603272);

procedure i40e_tx_prepare_vlan_flags($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.32, $CurrAddr;



implementation i40e_tx_prepare_vlan_flags($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i16;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i18: i32;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(126, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    call {:si_unique_call 1009} {:cexpr "protocol"} boogie_si_record_i16($i5);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(162, 1));
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 4096);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i5);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 129);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i18 := $i36;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $M.32 := $store.i32($M.32, $p2, $i18);
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4876;

  corral_source_split_4876:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} $p22 := skb_header_pointer($p0, 14, 4, $p21);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p23, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i28 := $load.i16($M.0, $p27);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i28);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i31 := __fswab16($i30);
    call {:si_unique_call 1014} {:cexpr "tmp___0"} boogie_si_record_i16($i31);
    goto corral_source_split_4882;

  corral_source_split_4882:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i31);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i33 := $shl.i32($i32, 16);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 0);
    call {:si_unique_call 1015} {:cexpr "tx_flags"} boogie_si_record_i32($i34);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 4);
    call {:si_unique_call 1016} {:cexpr "tx_flags"} boogie_si_record_i32($i35);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i36 := $i35;
    goto $bb10;

  $bb6:
    assume $i25 == 1;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb8;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(162, 1));
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, $sub.i32(0, 4097));
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 16);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 0);
    call {:si_unique_call 1010} {:cexpr "tx_flags"} boogie_si_record_i32($i16);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i16, 2);
    call {:si_unique_call 1011} {:cexpr "tx_flags"} boogie_si_record_i32($i17);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const i40e_tso: ref;

axiom i40e_tso == $sub.ref(0, 604304);

procedure i40e_tso($p0: ref, $p1: ref, $i2: i32, $i3: i16, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.34, $M.29;



implementation i40e_tso($p0: ref, $p1: ref, $i2: i32, $i3: i16, $p4: ref, $p5: ref, $p6: ref) returns ($r: i32)
{
  var $i7: i1;
  var $i8: i8;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p24: ref;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i8;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $p37: ref;
  var $i38: i32;
  var $i39: i16;
  var $i40: i32;
  var $i41: i32;
  var $i42: i16;
  var $p43: ref;
  var $i44: i1;
  var $i45: i8;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p54: ref;
  var $p53: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p62: ref;
  var $p61: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $i76: i32;
  var $i78: i32;
  var $i77: i32;
  var $p79: ref;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i64;
  var $i86: i8;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $i91: i8;
  var $i92: i32;
  var $i93: i32;
  var $i95: i32;
  var $i96: i8;
  var $i97: i32;
  var $i94: i32;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $i101: i8;
  var $p102: ref;
  var $i103: i32;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i16;
  var $i111: i32;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i64;
  var $i118: i64;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1017} {:cexpr "i40e_tso:arg:tx_flags"} boogie_si_record_i32($i2);
    call {:si_unique_call 1018} {:cexpr "i40e_tso:arg:protocol"} boogie_si_record_i16($i3);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1019} $i7 := skb_is_gso($p1);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i8($i7);
    call {:si_unique_call 1020} {:cexpr "tmp"} boogie_si_record_i8($i8);
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i8.i1($i8);
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $i13 := skb_cow_head($p1, 0);
    call {:si_unique_call 1022} {:cexpr "err"} boogie_si_record_i32($i13);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i3);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 8);
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i16 == 1);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1023} $i44 := skb_is_gso_v6($p1);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i45 := $zext.i1.i8($i44);
    call {:si_unique_call 1024} {:cexpr "tmp___11"} boogie_si_record_i8($i45);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i8.i1($i45);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(171, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i74, 0);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i75 == 1);
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} $i78 := tcp_hdrlen($p1);
    call {:si_unique_call 1040} {:cexpr "tmp___13"} boogie_si_record_i32($i78);
    assume {:verifier.code 0} true;
    $i77 := $i78;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p1);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(171, 1));
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i83 == 1);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $i95 := skb_transport_offset($p1);
    call {:si_unique_call 1044} {:cexpr "tmp___15"} boogie_si_record_i32($i95);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i95);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    call {:si_unique_call 1045} {:cexpr "tmp___16"} boogie_si_record_i32($i97);
    assume {:verifier.code 0} true;
    $i94 := $i97;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i77);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i100 := $add.i32($i94, $i99);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    $M.34 := $store.i8($M.34, $p4, $i101);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.34, $p4);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i106 := $sub.i32($i103, $i105);
    call {:si_unique_call 1046} {:cexpr "cd_tso_len"} boogie_si_record_i32($i106);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p107 := skb_end_pointer($p1);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i110 := $load.i16($M.0, $p109);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    $i111 := $zext.i16.i32($i110);
    call {:si_unique_call 1048} {:cexpr "cd_mss"} boogie_si_record_i32($i111);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.29, $p5);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $i113 := $zext.i32.i64(1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    $i114 := $shl.i64($i113, 4);
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i106);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $i116 := $shl.i64($i115, 30);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $i117 := $or.i64($i114, $i116);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i118 := $zext.i32.i64($i111);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i119 := $shl.i64($i118, 50);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    $i120 := $or.i64($i117, $i119);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i121 := $or.i64($i112, $i120);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    $M.29 := $store.i64($M.29, $p5, $i121);
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i12 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb32:
    assume $i83 == 1;
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p84 := skb_inner_transport_header($p1);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i64.i8($i85);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i90 := $p2i.ref.i64($p89);
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $i91 := $trunc.i64.i8($i90);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $i93 := $sub.i32($i87, $i92);
    call {:si_unique_call 1042} {:cexpr "tmp___16"} boogie_si_record_i32($i93);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $i94 := $i93;
    goto $bb34;

  $bb29:
    assume $i75 == 1;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i76 := inner_tcp_hdrlen($p1);
    call {:si_unique_call 1038} {:cexpr "tmp___12"} boogie_si_record_i32($i76);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb31;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($p47, $mul.ref(171, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i51 == 1);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $p54 := ipv6_hdr($p1);
    assume {:verifier.code 0} true;
    $p53 := $p54;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p1);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p55, $mul.ref(171, 1));
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i59 == 1);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $p62 := tcp_hdr($p1);
    assume {:verifier.code 0} true;
    $p61 := $p62;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p53, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p63, 0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p53, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p53, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i66 := csum_ipv6_magic($p64, $p65, 0, 6, 0);
    call {:si_unique_call 1036} {:cexpr "tmp___10"} boogie_si_record_i16($i66);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $i68 := $xor.i32($i67, $sub.i32(0, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p61, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i69);
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i59 == 1;
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p60 := inner_tcp_hdr($p1);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p61 := $p60;
    goto $bb27;

  $bb22:
    assume $i51 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p52 := inner_ipv6_hdr($p1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p53 := $p52;
    goto $bb24;

  $bb11:
    assume $i16 == 1;
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(171, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i21 == 1);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p24 := ip_hdr($p1);
    assume {:verifier.code 0} true;
    $p23 := $p24;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p1);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($p25, $mul.ref(171, 1));
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    $i27 := $load.i8($M.0, $p26);
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i28 := $zext.i8.i32($i27);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i29 == 1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p32 := tcp_hdr($p1);
    assume {:verifier.code 0} true;
    $p31 := $p32;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(2, 1));
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, 0);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(10, 1));
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, 0);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p23, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} $i39 := csum_tcpudp_magic($i36, $i38, 0, 6, 0);
    call {:si_unique_call 1030} {:cexpr "tmp___5"} boogie_si_record_i16($i39);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i41 := $xor.i32($i40, $sub.i32(0, 1));
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p31, $mul.ref(0, 20)), $mul.ref(16, 1));
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p43, $i42);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i29 == 1;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1027} $p30 := inner_tcp_hdr($p1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p31 := $p30;
    goto $bb18;

  $bb13:
    assume $i21 == 1;
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $p22 := inner_ip_hdr($p1);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p23 := $p22;
    goto $bb15;

  $bb8:
    assume $i14 == 1;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i12 := $i13;
    goto $bb6;

  $bb4:
    assume $i11 == 1;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb6;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const skb_tx_timestamp: ref;

axiom skb_tx_timestamp == $sub.ref(0, 605336);

procedure skb_tx_timestamp($p0: ref);
  free requires assertsPassed;



implementation skb_tx_timestamp($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5053;

  corral_source_split_5053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} skb_clone_tx_timestamp($p0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} sw_tx_timestamp($p0);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    return;
}



const i40e_tx_enable_csum: ref;

axiom i40e_tx_enable_csum == $sub.ref(0, 606368);

procedure i40e_tx_enable_csum($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref);
  free requires assertsPassed;
  modifies $M.30, $M.0, $M.33, $M.31;



implementation i40e_tx_enable_csum($p0: ref, $i1: i32, $p2: ref, $p3: ref, $p4: ref, $p5: ref)
{
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i32;
  var $i54: i32;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i8;
  var $i67: i8;
  var $i77: i32;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i1;
  var $i84: i1;
  var $i85: i1;
  var $i86: i1;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} {:cexpr "i40e_tx_enable_csum:arg:tx_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(171, 1));
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i50 := skb_network_header_len($p0);
    call {:si_unique_call 1059} {:cexpr "network_hdr_len"} boogie_si_record_i32($i50);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $p51 := ip_hdr($p0);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $p52 := ipv6_hdr($p0);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i53 := tcp_hdrlen($p0);
    call {:si_unique_call 1063} {:cexpr "this_tcp_hdrlen"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    $p46, $i47, $p48, $i49 := $p52, $i53, $p51, $i50;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i1, 16);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i1, 32);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i76 := 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i67 := $i76;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} $i77 := skb_network_offset($p0);
    call {:si_unique_call 1074} {:cexpr "tmp___4"} boogie_si_record_i32($i77);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.31, $p3);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $i79 := $ashr.i32($i77, 1);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i78, $i79);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p3, $i80);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i67);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    $i83 := $slt.i32($i81, 132);
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i81, 132);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    return;

  $bb30:
    assume $i84 == 1;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.33, $p2);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    $i94 := $or.i32($i93, 512);
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p2, $i94);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i95 := $load.i32($M.31, $p3);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i95, 49152);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p3, $i96);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb28:
    assume $i83 == 1;
    assume {:verifier.code 0} true;
    $i85 := $eq.i32($i81, 17);
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb32;

  $bb33:
    assume $i85 == 1;
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.33, $p2);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, 768);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p2, $i98);
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.31, $p3);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 32768);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p3, $i100);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i86 := $eq.i32($i81, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb32;

  $bb35:
    assume $i86 == 1;
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.33, $p2);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 256);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p2, $i88);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.31, $p3);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i90 := $lshr.i32($i47, 2);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i91 := $shl.i32($i90, 14);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i89, $i91);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p3, $i92);
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb22:
    assume $i69 == 1;
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p46, $mul.ref(0, 40)), $mul.ref(6, 1));
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    call {:si_unique_call 1075} {:cexpr "l4_hdr"} boogie_si_record_i8($i71);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.33, $p2);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i72, 32);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p2, $i73);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i74 := $lshr.i32($i49, 2);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i75 := $shl.i32($i74, 7);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p3, $i75);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i76 := $i71;
    goto $bb24;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p48, $mul.ref(0, 20)), $mul.ref(9, 1));
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    call {:si_unique_call 1072} {:cexpr "l4_hdr"} boogie_si_record_i8($i57);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i58 := $and.i32($i1, 8);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i59 == 1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.33, $p2);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i64 := $or.i32($i63, 64);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p2, $i64);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i65 := $lshr.i32($i49, 2);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i66 := $shl.i32($i65, 7);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $M.31 := $store.i32($M.31, $p3, $i66);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $i67 := $i57;
    goto $bb21;

  $bb18:
    assume $i59 == 1;
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.33, $p2);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, 96);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.33 := $store.i32($M.33, $p2, $i61);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p48, $mul.ref(0, 20)), $mul.ref(10, 1));
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p62, 0);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} $i11 := skb_inner_network_header_len($p0);
    call {:si_unique_call 1053} {:cexpr "network_hdr_len"} boogie_si_record_i32($i11);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} $p12 := inner_ip_hdr($p0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} $p13 := inner_ipv6_hdr($p0);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i14 := inner_tcp_hdrlen($p0);
    call {:si_unique_call 1057} {:cexpr "this_tcp_hdrlen"} boogie_si_record_i32($i14);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i1, 16);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i1, 32);
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i35 := skb_network_header_len($p0);
    call {:si_unique_call 1066} {:cexpr "tmp___1"} boogie_si_record_i32($i35);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i36 := skb_inner_network_offset($p0);
    call {:si_unique_call 1068} {:cexpr "tmp___2"} boogie_si_record_i32($i36);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i37 := skb_transport_offset($p0);
    call {:si_unique_call 1070} {:cexpr "tmp___3"} boogie_si_record_i32($i37);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.30, $p5);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i35, $sub.i32(0, 516));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i36, $i37);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $i41 := $ashr.i32($i40, 1);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $i42 := $shl.i32($i41, 12);
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i39, $i42);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i38, $i43);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i45 := $or.i32($i44, 512);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p5, $i45);
    goto corral_source_split_5108;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p46, $i47, $p48, $i49 := $p13, $i14, $p12, $i11;
    goto $bb15;

  $bb9:
    assume $i26 == 1;
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i1, 8);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i28 == 1);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.30, $p5);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i33, 2);
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p5, $i34);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i28 == 1;
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.30, $p5);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i29, 1);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p5, $i30);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $p31 := ip_hdr($p0);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 20)), $mul.ref(10, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p32, 0);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i1, 8);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.30, $p5);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, 2);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p5, $i24);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.30, $p5);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i19, 3);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $M.30 := $store.i32($M.30, $p5, $i20);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p21 := ip_hdr($p0);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 20)), $mul.ref(10, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p22, 0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    goto $bb7;
}



const i40e_create_tx_ctx: ref;

axiom i40e_create_tx_ctx == $sub.ref(0, 607400);

procedure i40e_create_tx_ctx($p0: ref, $i1: i64, $i2: i32, $i3: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_create_tx_ctx($p0: ref, $i1: i64, $i2: i32, $i3: i32)
{
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i15: i32;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i1;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $p24: ref;
  var $p25: ref;
  var $i26: i16;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} {:cexpr "i40e_create_tx_ctx:arg:cd_type_cmd_tso_mss"} boogie_si_record_i64($i1);
    call {:si_unique_call 1077} {:cexpr "i40e_create_tx_ctx:arg:cd_tunneling"} boogie_si_record_i32($i2);
    call {:si_unique_call 1078} {:cexpr "i40e_create_tx_ctx:arg:cd_l2tag2"} boogie_si_record_i32($i3);
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 1079} {:cexpr "i"} boogie_si_record_i32($i6);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i1, 1);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i6);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i15 := $add.i32($i6, 1);
    call {:si_unique_call 1080} {:cexpr "i"} boogie_si_record_i32($i15);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $i19 := $sgt.i32($i18, $i15);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i19 == 1);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $i22 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i23 := $trunc.i32.i16($i22);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p24, $i23);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(0, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, $i2);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i3);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(4, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, $i26);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p12, $mul.ref($i13, 16)), $mul.ref(8, 1));
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p28, $i1);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb10:
    assume $i19 == 1;
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i15);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 0);
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i3, 0);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb6:
    assume $i9 == 1;
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const i40e_tx_map: ref;

axiom i40e_tx_map == $sub.ref(0, 608432);

procedure i40e_tx_map($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i8, $i5: i32, $i6: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_tx_map($p0: ref, $p1: ref, $p2: ref, $i3: i32, $i4: i8, $i5: i32, $i6: i32)
{
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i16;
  var $i24: i16;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i64: i16;
  var $i56: i16;
  var $i57: i64;
  var $i58: i16;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i1;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $i80: i64;
  var $p81: ref;
  var $p82: ref;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $p86: ref;
  var $i87: i16;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p94: ref;
  var $i95: i16;
  var $i96: i64;
  var $i97: i32;
  var $p98: ref;
  var $i99: i1;
  var $i100: i32;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $i76: i64;
  var $i77: i16;
  var $p78: ref;
  var $i79: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i16;
  var $i73: i32;
  var $p74: ref;
  var $i75: i16;
  var $i107: i1;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $i112: i32;
  var $p113: ref;
  var $i114: i16;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i16;
  var $p121: ref;
  var $i122: i16;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $p126: ref;
  var $p127: ref;
  var $p129: ref;
  var $i130: i16;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $i152: i64;
  var $p153: ref;
  var $i154: i64;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i32;
  var $i162: i64;
  var $p163: ref;
  var $i164: i64;
  var $i165: i64;
  var $i166: i1;
  var $i167: i64;
  var $i168: i64;
  var $p169: ref;
  var $i171: i64;
  var $i172: i64;
  var $p173: ref;
  var $p170: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i16;
  var $i178: i32;
  var $p179: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $i185: i32;
  var $i186: i32;
  var $i187: i16;
  var $p188: ref;
  var $i189: i16;
  var $i190: i32;
  var $i191: i32;
  var $i192: i1;
  var $i193: i16;
  var $p194: ref;
  var $i195: i32;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i64;
  var $p205: ref;
  var $i206: i64;
  var $i207: i64;
  var $i208: i1;
  var $i211: i16;
  var $i209: i16;
  var $i210: i16;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i16;
  var $i216: i16;
  var $i217: i32;
  var $i218: i32;
  var $i219: i16;
  var $p220: ref;
  var $i221: i64;
  var $p222: ref;
  var $i223: i64;
  var $i224: i1;
  var $p225: ref;
  var vslice_dummy_var_197: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} {:cexpr "i40e_tx_map:arg:tx_flags"} boogie_si_record_i32($i3);
    call {:si_unique_call 1082} {:cexpr "i40e_tx_map:arg:hdr_len"} boogie_si_record_i8($i4);
    call {:si_unique_call 1083} {:cexpr "i40e_tx_map:arg:td_cmd"} boogie_si_record_i32($i5);
    call {:si_unique_call 1084} {:cexpr "i40e_tx_map:arg:td_offset"} boogie_si_record_i32($i6);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 1085} {:cexpr "data_len"} boogie_si_record_i32($i8);
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1086} $i9 := skb_headlen($p1);
    call {:si_unique_call 1087} {:cexpr "tmp"} boogie_si_record_i32($i9);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i11 := $load.i16($M.0, $p10);
    call {:si_unique_call 1088} {:cexpr "i"} boogie_si_record_i16($i11);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i3, 2);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    $i16, $i17 := $i5, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i3, 136);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i24 := 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i4);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32($i26, $i27);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i24);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i4);
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i31 := $mul.i32($i29, $i30);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i32 := $add.i32($i28, $i31);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i32);
    goto corral_source_split_5274;

  corral_source_split_5274:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(28, 1));
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p34, $i24);
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(16, 1));
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p1);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(44, 1));
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i3);
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $i41 := $zext.i32.i64($i9);
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i42 := dma_map_single_attrs($p38, $p40, $i41, 1, $0.ref);
    call {:si_unique_call 1094} {:cexpr "dma"} boogie_si_record_i64($i42);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i64($i11);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($p45, $mul.ref($i46, 16));
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $p48 := skb_end_pointer($p1);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 320)), $mul.ref(48, 1));
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} $i54 := dma_mapping_error($p53, $i42);
    call {:si_unique_call 1097} {:cexpr "tmp___2"} boogie_si_record_i32($i54);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i56 := $i11;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i55 == 1);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i57, $i58, $p59, $p60, $i61, $i62, $p63 := $i42, $i11, $p47, $p2, $i8, $i9, $p50;
    goto $bb10;

  $bb10:
    call $i64, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i80, $p81, $p82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $p91, $p92, $p94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i76, $i77, $p78, $i79, $i104, $p105, $i106, $i73, $p74, $i75, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $i125, $p126, $p127, $p129, $i130, $i131, $i132, $p133, $p134, $i135, $i136, $p137, $p138, $p139, $i140, $p141, $p142, $p143, $i144, $i145 := i40e_tx_map_loop_$bb10($p0, $i6, $i16, $i17, $p52, $i64, $i57, $i58, $p59, $p60, $i61, $i62, $p63, $p65, $p66, $p67, $i68, $i69, $i70, $i71, $i72, $i80, $p81, $p82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $p91, $p92, $p94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i76, $i77, $p78, $i79, $i104, $p105, $i106, $i73, $p74, $i75, $i107, $i108, $i109, $i110, $i111, $i112, $p113, $i114, $i115, $p116, $p117, $i118, $i119, $i120, $p121, $i122, $i123, $i124, $i125, $p126, $p127, $p129, $i130, $i131, $i132, $p133, $p134, $i135, $i136, $p137, $p138, $p139, $i140, $p141, $p142, $p143, $i144, $i145);
    goto $bb10_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p60, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i62);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p60, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p66, $i57);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p67, $i57);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    $i68 := $ugt.i32($i62, 8192);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $i69 := $zext.i1.i32($i68);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i70 := $sext.i32.i64($i69);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 1101} {:cexpr "tmp___3"} boogie_si_record_i64($i71);
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    $i73, $p74, $i75 := $i62, $p59, $i58;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i61, 0);
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i32($i107);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i108);
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i110 := ldv__builtin_expect($i109, 1);
    call {:si_unique_call 1109} {:cexpr "tmp___4"} boogie_si_record_i64($i110);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i112, $p113, $i114 := $i73, $p74, $i75;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i115 := build_ctob($i16, $i6, $i73, $i17);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p74, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p116, $i115);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p74, $mul.ref(1, 16));
    goto corral_source_split_5382;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    $i118 := $zext.i16.i32($i75);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i119 := $add.i32($i118, 1);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i119);
    call {:si_unique_call 1111} {:cexpr "i"} boogie_si_record_i16($i120);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5386;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    $i122 := $load.i16($M.0, $p121);
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i123 := $zext.i16.i32($i122);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i120);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i123, $i124);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $p129, $i130 := $p117, $i120;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} $i131 := skb_frag_size($p63);
    call {:si_unique_call 1113} {:cexpr "size"} boogie_si_record_i32($i131);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i132 := $sub.i32($i61, $i131);
    call {:si_unique_call 1114} {:cexpr "data_len"} boogie_si_record_i32($i132);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_5401;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    $i135 := $zext.i32.i64($i131);
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} $i136 := skb_frag_dma_map($p134, $p63, 0, $i135, 1);
    call {:si_unique_call 1116} {:cexpr "dma"} boogie_si_record_i64($i136);
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $i140 := $zext.i16.i64($i130);
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p139, $mul.ref($i140, 48));
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p63, $mul.ref(1, 16));
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p52);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $i144 := dma_mapping_error($p143, $i136);
    call {:si_unique_call 1118} {:cexpr "tmp___2"} boogie_si_record_i32($i144);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $i145 := $ne.i32($i144, 0);
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $i64 := $i130;
    assume true;
    goto $bb11, $bb32;

  $bb32:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i57, $i58, $p59, $p60, $i61, $i62, $p63 := $i136, $i130, $p129, $p141, $i132, $i131, $p142;
    goto $bb32_dummy;

  $bb11:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i56 := $i64;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p198);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} vslice_dummy_var_197 := _dev_info.ref.ref($p199, .str.123);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p202 := $bitcast.ref.ref($p201);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $p203 := $load.ref($M.0, $p202);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i64($i56);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($p203, $mul.ref($i204, 48));
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} i40e_unmap_and_free_tx_resource($p0, $p205);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i206 := $p2i.ref.i64($p205);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i207 := $p2i.ref.i64($p2);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i208 := $eq.i64($i206, $i207);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i209 := $i56;
    assume {:branchcond $i208} true;
    goto $bb45, $bb47;

  $bb47:
    assume !($i208 == 1);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $i210 := $i56;
    goto $bb48;

  $bb48:
    call $i211, $i210, $i212, $i213, $p214, $i215, $i216, $i217, $i218, $i219, $p220, $i221, $p222, $i223, $i224 := i40e_tx_map_loop_$bb48($p0, $p202, $i207, $i211, $i210, $i212, $i213, $p214, $i215, $i216, $i217, $i218, $i219, $p220, $i221, $p222, $i223, $i224);
    goto $bb48_last;

  $bb51:
    assume {:verifier.code 0} true;
    $i212 := $zext.i16.i32($i210);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 0);
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    $i216 := $i210;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $i218 := $sub.i32($i217, 1);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $i219 := $trunc.i32.i16($i218);
    call {:si_unique_call 1129} {:cexpr "i"} boogie_si_record_i16($i219);
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p202);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i221 := $zext.i16.i64($i219);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($p220, $mul.ref($i221, 48));
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} i40e_unmap_and_free_tx_resource($p0, $p222);
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p222);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i224 := $eq.i64($i223, $i207);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i211 := $i219;
    assume true;
    goto $bb49, $bb55;

  $bb55:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    $i210 := $i219;
    goto $bb55_dummy;

  $bb49:
    assume $i224 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i209 := $i211;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p225, $i209);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb52:
    assume $i213 == 1;
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i215 := $load.i16($M.0, $p214);
    call {:si_unique_call 1128} {:cexpr "i"} boogie_si_record_i16($i215);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $i216 := $i215;
    goto $bb54;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i208 == 1;
    goto $bb46;

  $bb29:
    assume $i125 == 1;
    goto corral_source_split_5392;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    $p129, $i130 := $p127, 0;
    goto $bb31;

  $bb25:
    assume $i111 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i146 := $zext.i16.i32($i114);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 3);
    goto corral_source_split_5376;

  corral_source_split_5376:
    assume {:verifier.code 0} true;
    $i148 := $ne.i32($i147, 3);
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    assume {:branchcond $i148} true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $i171 := build_ctob($i16, $i6, $i112, $i17);
    call {:si_unique_call 1120} {:cexpr "tmp___6"} boogie_si_record_i64($i171);
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $i172 := $or.i64($i171, 48);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p113, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p173, $i172);
    assume {:verifier.code 0} true;
    $p170 := $p113;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    $i177 := $load.i16($M.0, $p176);
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i178 := $zext.i16.i32($i177);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $p179 := netdev_get_tx_queue($p175, $i178);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(24, 1));
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1124} netdev_tx_sent_queue($p179, $i181);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i182 := $load.i64($M.0, jiffies);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p183, $i182);
    call {:si_unique_call 1125} devirtbounce.10(0);
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p2, $mul.ref(0, 48)), $mul.ref(0, 1));
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $p170);
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $i185 := $zext.i16.i32($i114);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i185, 1);
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i16($i186);
    call {:si_unique_call 1126} {:cexpr "i"} boogie_si_record_i16($i187);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i189 := $load.i16($M.0, $p188);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i189);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i191 := $zext.i16.i32($i187);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i192 := $eq.i32($i190, $i191);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    assume {:branchcond $i192} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i192 == 1);
    assume {:verifier.code 0} true;
    $i193 := $i187;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p194, $i193);
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $i195 := $zext.i16.i32($i193);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $p197 := $load.ref($M.0, $p196);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1127} writel($i195, $p197);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i192 == 1;
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i193 := 0;
    goto $bb43;

  $bb33:
    assume $i148 == 1;
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p150 := $bitcast.ref.ref($p149);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i64($i114);
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p151, $mul.ref($i152, 48));
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $i154 := $p2i.ref.i64($p153);
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i155 := $p2i.ref.i64($p2);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i156 := $uge.i64($i154, $i155);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb35;

  $bb36:
    assume $i156 == 1;
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $p159 := $load.ref($M.0, $p158);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i114);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i161 := $and.i32($i160, $sub.i32(0, 4));
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i162 := $sext.i32.i64($i161);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($p159, $mul.ref($i162, 48));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i164 := $p2i.ref.i64($p163);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i165 := $p2i.ref.i64($p2);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i166 := $ule.i64($i164, $i165);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i166} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i166 == 1);
    goto $bb35;

  $bb38:
    assume $i166 == 1;
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i167 := build_ctob($i16, $i6, $i112, $i17);
    call {:si_unique_call 1122} {:cexpr "tmp___5"} boogie_si_record_i64($i167);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i168 := $or.i64($i167, 16);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p113, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p169, $i168);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $p170 := $p113;
    goto $bb40;

  $bb14:
    assume $i72 == 1;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $i76, $i77, $p78, $i79 := $i57, $i58, $p59, $i62;
    goto $bb17;

  $bb17:
    call $i80, $p81, $p82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $p91, $p92, $p94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i76, $i77, $p78, $i79, $i104, $p105, $i106 := i40e_tx_map_loop_$bb17($p0, $i6, $i16, $i17, $i80, $p81, $p82, $i83, $i84, $i85, $p86, $i87, $i88, $i89, $i90, $p91, $p92, $p94, $i95, $i96, $i97, $p98, $i99, $i100, $i101, $i102, $i103, $i76, $i77, $p78, $i79, $i104, $p105, $i106);
    goto $bb17_last;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} $i80 := build_ctob($i16, $i6, 8192, $i17);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p78, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p81, $i80);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($p78, $mul.ref(1, 16));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $i83 := $zext.i16.i32($i77);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $i84 := $add.i32($i83, 1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    call {:si_unique_call 1103} {:cexpr "i"} boogie_si_record_i16($i85);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i87 := $load.i16($M.0, $p86);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i88 := $zext.i16.i32($i87);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i85);
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i88, $i89);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    $p94, $i95 := $p82, $i85;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $i96 := $add.i64($i76, 8192);
    call {:si_unique_call 1104} {:cexpr "dma"} boogie_si_record_i64($i96);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $i97 := $sub.i32($i79, 8192);
    call {:si_unique_call 1105} {:cexpr "size"} boogie_si_record_i32($i97);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p94, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p98, $i96);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $i99 := $ugt.i32($i97, 8192);
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $i100 := $zext.i1.i32($i99);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $i101 := $sext.i32.i64($i100);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 1107} {:cexpr "tmp___3"} boogie_si_record_i64($i102);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i104, $p105, $i106 := $i97, $p94, $i95;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i73, $p74, $i75 := $i104, $p105, $i106;
    goto $bb16;

  $bb22:
    assume $i103 == 1;
    assume {:verifier.code 0} true;
    $i76, $i77, $p78, $i79 := $i96, $i95, $p94, $i97;
    goto $bb22_dummy;

  $bb19:
    assume $i90 == 1;
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $p94, $i95 := $p92, 0;
    goto $bb21;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb8;

  $bb4:
    assume $i19 == 1;
    goto corral_source_split_5258;

  corral_source_split_5258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p20 := skb_end_pointer($p1);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 320)), $mul.ref(4, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $i23 := $load.i16($M.0, $p22);
    call {:si_unique_call 1092} {:cexpr "gso_segs"} boogie_si_record_i16($i23);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i24 := $i23;
    goto $bb6;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i5, 8);
    call {:si_unique_call 1089} {:cexpr "td_cmd"} boogie_si_record_i32($i14);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i3, 16);
    call {:si_unique_call 1090} {:cexpr "td_tag"} boogie_si_record_i32($i15);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    $i16, $i17 := $i14, $i15;
    goto $bb3;

  $bb55_dummy:
    assume false;
    return;

  $bb48_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb22_dummy:
    assume false;
    return;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  $bb32_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const i40e_maybe_stop_tx: ref;

axiom i40e_maybe_stop_tx == $sub.ref(0, 609464);

procedure i40e_maybe_stop_tx($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40e_maybe_stop_tx($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i16;
  var $i4: i32;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $i18: i16;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i28: i32;
  var $i27: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} {:cexpr "i40e_maybe_stop_tx:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $i4 := $zext.i16.i32($i3);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i8 := $sle.i32($i4, $i7);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i12, $i15);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $i18 := $load.i16($M.0, $p17);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i16, $i19);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i22 := $sge.i32($i21, $i1);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1132} $i25 := ldv__builtin_expect($i24, 1);
    call {:si_unique_call 1133} {:cexpr "tmp"} boogie_si_record_i64($i25);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1134} $i28 := __i40e_maybe_stop_tx($p0, $i1);
    call {:si_unique_call 1135} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i27 := $i28;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $r := $i27;
    return;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i27 := 0;
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i12 := $i11;
    goto $bb3;
}



const __i40e_maybe_stop_tx: ref;

axiom __i40e_maybe_stop_tx == $sub.ref(0, 610496);

procedure __i40e_maybe_stop_tx($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __i40e_maybe_stop_tx($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i16;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i16;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i16;
  var $i38: i32;
  var $i39: i16;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} {:cexpr "__i40e_maybe_stop_tx:arg:size"} boogie_si_record_i32($i1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} netif_stop_subqueue($p3, $i7);
    call {:si_unique_call 1138} devirtbounce.10(0);
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_5554;

  corral_source_split_5554:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5556;

  corral_source_split_5556:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i14 := $sle.i32($i10, $i13);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(76, 1));
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $i20 := $load.i16($M.0, $p19);
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i18, $i21);
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32($i22, $i25);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, $sub.i32(0, 1));
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i27, $i1);
    goto corral_source_split_5578;

  corral_source_split_5578:
    assume {:verifier.code 0} true;
    $i29 := $zext.i1.i32($i28);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    $i30 := $sext.i32.i64($i29);
    goto corral_source_split_5580;

  corral_source_split_5580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i31 := ldv__builtin_expect($i30, 1);
    call {:si_unique_call 1140} {:cexpr "tmp"} boogie_si_record_i64($i31);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $i37 := $load.i16($M.0, $p36);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i37);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} netif_start_subqueue($p35, $i39);
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $i44 := $add.i64($i43, 1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(104, 1));
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p47, $i44);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;

  $bb4:
    assume $i32 == 1;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $i33 := $sub.i32(0, 16);
    goto $bb6;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb3;
}



const netif_start_subqueue: ref;

axiom netif_start_subqueue == $sub.ref(0, 611528);

procedure netif_start_subqueue($p0: ref, $i1: i16);
  free requires assertsPassed;



implementation netif_start_subqueue($p0: ref, $i1: i16)
{
  var $i2: i32;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} {:cexpr "netif_start_subqueue:arg:queue_index"} boogie_si_record_i16($i1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    $i2 := $zext.i16.i32($i1);
    goto corral_source_split_5606;

  corral_source_split_5606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} $p3 := netdev_get_tx_queue($p0, $i2);
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} netif_tx_start_queue($p3);
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    return;
}



const skb_headlen: ref;

axiom skb_headlen == $sub.ref(0, 612560);

procedure skb_headlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(104, 1));
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(108, 1));
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_5614;

  corral_source_split_5614:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i2, $i4);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const build_ctob: ref;

axiom build_ctob == $sub.ref(0, 613592);

procedure build_ctob($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation build_ctob($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: i64)
{
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1145} {:cexpr "build_ctob:arg:td_cmd"} boogie_si_record_i32($i0);
    call {:si_unique_call 1146} {:cexpr "build_ctob:arg:td_offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1147} {:cexpr "build_ctob:arg:size"} boogie_si_record_i32($i2);
    call {:si_unique_call 1148} {:cexpr "build_ctob:arg:td_tag"} boogie_si_record_i32($i3);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i0);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    $i5 := $shl.i64($i4, 4);
    goto corral_source_split_5619;

  corral_source_split_5619:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i7 := $shl.i64($i6, 16);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i8 := $or.i64($i5, $i7);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i2);
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i10 := $shl.i64($i9, 34);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i11 := $or.i64($i8, $i10);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i3);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $i13 := $shl.i64($i12, 48);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i14 := $or.i64($i11, $i13);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const skb_frag_size: ref;

axiom skb_frag_size == $sub.ref(0, 614624);

procedure skb_frag_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_frag_size($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(12, 1));
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const skb_frag_dma_map: ref;

axiom skb_frag_dma_map == $sub.ref(0, 615656);

procedure skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64);
  free requires assertsPassed;



implementation skb_frag_dma_map($p0: ref, $p1: ref, $i2: i64, $i3: i64, $i4: i32) returns ($r: i64)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} {:cexpr "skb_frag_dma_map:arg:offset"} boogie_si_record_i64($i2);
    call {:si_unique_call 1150} {:cexpr "skb_frag_dma_map:arg:size"} boogie_si_record_i64($i3);
    call {:si_unique_call 1151} {:cexpr "skb_frag_dma_map:arg:dir"} boogie_si_record_i32($i4);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1152} $p5 := skb_frag_page($p1);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i9 := $add.i64($i8, $i2);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i10 := dma_map_page($p0, $p5, $i9, $i3, $i4);
    call {:si_unique_call 1154} {:cexpr "tmp___0"} boogie_si_record_i64($i10);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const netdev_tx_sent_queue: ref;

axiom netdev_tx_sent_queue == $sub.ref(0, 616688);

procedure netdev_tx_sent_queue($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation netdev_tx_sent_queue($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} {:cexpr "netdev_tx_sent_queue:arg:bytes"} boogie_si_record_i32($i1);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(432, 1));
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} dql_queued($p2, $i1);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(432, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1157} $i4 := dql_avail($p3);
    call {:si_unique_call 1158} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $i5 := $sge.i32($i4, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1159} $i8 := ldv__builtin_expect($i7, 1);
    call {:si_unique_call 1160} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} set_bit(1, $p10);
    call {:si_unique_call 1162} devirtbounce.10(0);
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(432, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $i12 := dql_avail($p11);
    call {:si_unique_call 1164} {:cexpr "tmp___1"} boogie_si_record_i32($i12);
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $i13 := $sge.i32($i12, 0);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 1166} {:cexpr "tmp___2"} boogie_si_record_i64($i16);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i17 == 1;
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 496)), $mul.ref(424, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} clear_bit(1, $p18);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dql_queued: ref;

axiom dql_queued == $sub.ref(0, 617720);

procedure dql_queued($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation dql_queued($p0: ref, $i1: i32)
{
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} {:cexpr "dql_queued:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i32($i1, 268435455);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 1170} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $i1);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(0, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 64)), $mul.ref(8, 1));
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i1);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    call {:si_unique_call 1171} devirtbounce.2(0, .str.124, 74, 12);
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call dql_queued_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const skb_frag_page: ref;

axiom skb_frag_page == $sub.ref(0, 618752);

procedure skb_frag_page($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_frag_page($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const skb_inner_network_header_len: ref;

axiom skb_inner_network_header_len == $sub.ref(0, 619784);

procedure skb_inner_network_header_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_inner_network_header_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(186, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(188, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i3, $i6);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const inner_ip_hdr: ref;

axiom inner_ip_hdr == $sub.ref(0, 620816);

procedure inner_ip_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation inner_ip_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p1 := skb_inner_network_header($p0);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const inner_ipv6_hdr: ref;

axiom inner_ipv6_hdr == $sub.ref(0, 621848);

procedure inner_ipv6_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation inner_ipv6_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p1 := skb_inner_network_header($p0);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const inner_tcp_hdrlen: ref;

axiom inner_tcp_hdrlen == $sub.ref(0, 622880);

procedure inner_tcp_hdrlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation inner_tcp_hdrlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p1 := inner_tcp_hdr($p0);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i16($i3, 4);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i5 := $and.i16($i4, 15);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i16.i8($i5);
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 4);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const skb_network_header_len: ref;

axiom skb_network_header_len == $sub.ref(0, 623912);

procedure skb_network_header_len($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_network_header_len($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(192, 1));
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(194, 1));
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i3, $i6);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const skb_inner_network_offset: ref;

axiom skb_inner_network_offset == $sub.ref(0, 624944);

procedure skb_inner_network_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_inner_network_offset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p1 := skb_inner_network_header($p0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i3, $i7);
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const ipv6_hdr: ref;

axiom ipv6_hdr == $sub.ref(0, 625976);

procedure ipv6_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ipv6_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p1 := skb_network_header($p0);
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tcp_hdrlen: ref;

axiom tcp_hdrlen == $sub.ref(0, 627008);

procedure tcp_hdrlen($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tcp_hdrlen($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i16;
  var $i4: i16;
  var $i5: i16;
  var $i6: i8;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p1 := tcp_hdr($p0);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 20)), $mul.ref(12, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $i3 := $load.i16($M.0, $p2);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i4 := $lshr.i16($i3, 4);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    $i5 := $and.i16($i4, 15);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i16.i8($i5);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $i8 := $mul.i32($i7, 4);
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const skb_network_offset: ref;

axiom skb_network_offset == $sub.ref(0, 628040);

procedure skb_network_offset($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_network_offset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p1 := skb_network_header($p0);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i64.i32($i2);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i64.i32($i6);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i3, $i7);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;
}



const tcp_hdr: ref;

axiom tcp_hdr == $sub.ref(0, 629072);

procedure tcp_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tcp_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p1 := skb_transport_header($p0);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_inner_network_header: ref;

axiom skb_inner_network_header == $sub.ref(0, 630104);

procedure skb_inner_network_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_inner_network_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(188, 1));
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const inner_tcp_hdr: ref;

axiom inner_tcp_hdr == $sub.ref(0, 631136);

procedure inner_tcp_hdr($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation inner_tcp_hdr($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $p1 := skb_inner_transport_header($p0);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const skb_inner_transport_header: ref;

axiom skb_inner_transport_header == $sub.ref(0, 632168);

procedure skb_inner_transport_header($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_inner_transport_header($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i64;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(186, 1));
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i64($i4);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref($i5, 1));
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;
}



const skb_clone_tx_timestamp: ref;

axiom skb_clone_tx_timestamp == $sub.ref(0, 633200);

procedure skb_clone_tx_timestamp($p0: ref);
  free requires assertsPassed;



implementation skb_clone_tx_timestamp($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    return;
}



const sw_tx_timestamp: ref;

axiom sw_tx_timestamp == $sub.ref(0, 634232);

procedure sw_tx_timestamp($p0: ref);
  free requires assertsPassed;



implementation sw_tx_timestamp($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $p1 := skb_end_pointer($p0);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(1, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 2);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} $p8 := skb_end_pointer($p0);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 320)), $mul.ref(1, 1));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i11);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i14 == 1;
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} skb_tstamp_tx($p0, $0.ref);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const skb_tstamp_tx: ref;

axiom skb_tstamp_tx == $sub.ref(0, 635264);

procedure skb_tstamp_tx($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation skb_tstamp_tx($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    return;
}



const skb_is_gso: ref;

axiom skb_is_gso == $sub.ref(0, 636296);

procedure skb_is_gso($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1184} $p1 := skb_end_pointer($p0);
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(2, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const skb_cow_head: ref;

axiom skb_cow_head == $sub.ref(0, 637328);

procedure skb_cow_head($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_cow_head($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} {:cexpr "skb_cow_head:arg:headroom"} boogie_si_record_i32($i1);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i2 := skb_header_cloned($p0);
    call {:si_unique_call 1187} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} $i3 := __skb_cow($p0, $i1, $i2);
    call {:si_unique_call 1189} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const skb_is_gso_v6: ref;

axiom skb_is_gso_v6 == $sub.ref(0, 638360);

procedure skb_is_gso_v6($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation skb_is_gso_v6($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $p1 := skb_end_pointer($p0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 320)), $mul.ref(6, 1));
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 16);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const csum_ipv6_magic: ref;

axiom csum_ipv6_magic == $sub.ref(0, 639392);

procedure csum_ipv6_magic($p0: ref, $p1: ref, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16);
  free requires assertsPassed;



implementation csum_ipv6_magic($p0: ref, $p1: ref, $i2: i32, $i3: i16, $i4: i32) returns ($r: i16)
{
  var $i5: i16;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1191} {:cexpr "csum_ipv6_magic:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1192} {:cexpr "csum_ipv6_magic:arg:arg3"} boogie_si_record_i16($i3);
    call {:si_unique_call 1193} {:cexpr "csum_ipv6_magic:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1194} $i5 := __VERIFIER_nondet_ushort();
    call {:si_unique_call 1195} {:cexpr "smack:ext:__VERIFIER_nondet_ushort"} boogie_si_record_i16($i5);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const skb_header_cloned: ref;

axiom skb_header_cloned == $sub.ref(0, 640424);

procedure skb_header_cloned($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_header_cloned($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(124, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1196} $p7 := skb_end_pointer($p0);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 320)), $mul.ref(36, 1));
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} $i10 := atomic_read($p9);
    call {:si_unique_call 1198} {:cexpr "dataref"} boogie_si_record_i32($i10);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65535);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    $i12 := $ashr.i32($i10, 16);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i11, $i12);
    call {:si_unique_call 1199} {:cexpr "dataref"} boogie_si_record_i32($i13);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 1);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $i6 := $i15;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;
}



const __skb_cow: ref;

axiom __skb_cow == $sub.ref(0, 641456);

procedure __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __skb_cow($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} {:cexpr "__skb_cow:arg:headroom"} boogie_si_record_i32($i1);
    call {:si_unique_call 1201} {:cexpr "__skb_cow:arg:cloned"} boogie_si_record_i32($i2);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1202} $i3 := skb_headroom($p0);
    call {:si_unique_call 1203} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i4 := $ult.i32($i3, $i1);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i8 == 1);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i10 := $sgt.i32(32, 64);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i10 == 1);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    $i11 := 64;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i11, $sub.i32(0, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, $i7);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32(32, 64);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i14 == 1);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    $i15 := 64;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, $i15);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i13, $i16);
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i18 := pskb_expand_head($p0, $i17, 0, 32);
    call {:si_unique_call 1208} {:cexpr "tmp___1"} boogie_si_record_i32($i18);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb15;

  $bb12:
    assume $i14 == 1;
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i15 := 32;
    goto $bb14;

  $bb9:
    assume $i10 == 1;
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    $i11 := 32;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb5;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i5 := skb_headroom($p0);
    call {:si_unique_call 1205} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i1, $i5);
    call {:si_unique_call 1206} {:cexpr "delta"} boogie_si_record_i32($i6);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i7 := $i6;
    goto $bb3;
}



const skb_headroom: ref;

axiom skb_headroom == $sub.ref(0, 642488);

procedure skb_headroom($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation skb_headroom($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const pskb_expand_head: ref;

axiom pskb_expand_head == $sub.ref(0, 643520);

procedure pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation pskb_expand_head($p0: ref, $i1: i32, $i2: i32, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1209} {:cexpr "pskb_expand_head:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1210} {:cexpr "pskb_expand_head:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1211} {:cexpr "pskb_expand_head:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1212} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1213} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_header_pointer: ref;

axiom skb_header_pointer == $sub.ref(0, 644552);

procedure skb_header_pointer($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation skb_header_pointer($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i12: i32;
  var $i13: i1;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} {:cexpr "skb_header_pointer:arg:offset"} boogie_si_record_i32($i1);
    call {:si_unique_call 1215} {:cexpr "skb_header_pointer:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i4 := skb_headlen($p0);
    call {:si_unique_call 1217} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, $i1);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $i6 := $sge.i32($i5, $i2);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} $i12 := skb_copy_bits($p0, $i1, $p3, $i2);
    call {:si_unique_call 1219} {:cexpr "tmp___0"} boogie_si_record_i32($i12);
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $i13 := $slt.i32($i12, 0);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $p3;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i1);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 1));
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    $p11 := $p10;
    goto $bb3;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 645584);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const skb_copy_bits: ref;

axiom skb_copy_bits == $sub.ref(0, 646616);

procedure skb_copy_bits($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation skb_copy_bits($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1221} {:cexpr "skb_copy_bits:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1222} {:cexpr "skb_copy_bits:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1223} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1224} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const skb_reset_tail_pointer: ref;

axiom skb_reset_tail_pointer == $sub.ref(0, 647648);

procedure skb_reset_tail_pointer($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation skb_reset_tail_pointer($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5937;

  corral_source_split_5937:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(208, 1));
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i64.i32($i7);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32($i4, $i8);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 232)), $mul.ref(200, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_request_traffic_irqs: ref;

axiom i40evf_request_traffic_irqs == $sub.ref(0, 648680);

procedure i40evf_request_traffic_irqs($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11, $M.0, $M.14, $M.15, $M.4, $M.3, $CurrAddr;



implementation i40evf_request_traffic_irqs($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i9: i64;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $i27: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i39: i32;
  var $i40: i32;
  var $i28: i32;
  var $i29: i32;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $i65: i32;
  var $i66: i32;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i64;
  var $i74: i64;
  var $p76: ref;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $i81: i32;
  var $i82: i1;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i84: i1;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $i90: i64;
  var $p92: ref;
  var $i93: i32;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i1;
  var $i85: i32;
  var $i83: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} i40evf_irq_disable($p0);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $sub.i32(0, 1));
    call {:si_unique_call 1226} {:cexpr "q_vectors"} boogie_si_record_i32($i4);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $i5 := $slt.i32(0, $i4);
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i83 := 0;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $r := $i83;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i6, $i7, $i8 := 0, 0, 0;
    goto $bb4;

  $bb4:
    call $i9, $p11, $p12, $p14, $p15, $i16, $i17, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $i27, $p31, $p32, $i33, $i34, $i35, $p36, $p37, $p42, $p43, $i44, $i45, $i46, $p47, $p48, $i39, $i40, $i28, $i29, $p53, $p54, $i55, $i56, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $i66, $p71, $p72, $i73, $i74, $p76, $i77, $p78, $p79, $i50, $i51, $i52, $i81, $i82, $i6, $i7, $i8, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_202 := i40evf_request_traffic_irqs_loop_$bb4($p0, $p1, $i4, $i9, $p11, $p12, $p14, $p15, $i16, $i17, $p19, $p20, $i21, $i22, $i23, $p24, $p25, $i27, $p31, $p32, $i33, $i34, $i35, $p36, $p37, $p42, $p43, $i44, $i45, $i46, $p47, $p48, $i39, $i40, $i28, $i29, $p53, $p54, $i55, $i56, $p58, $i59, $p60, $p61, $p62, $i63, $i64, $i65, $i66, $p71, $p72, $i73, $i74, $p76, $i77, $p78, $p79, $i50, $i51, $i52, $i81, $i82, $i6, $i7, $i8, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_202);
    goto $bb4_last;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref($i9, 8));
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i34 == 1);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $i50, $i51, $i52 := $i8, $i7, $i6;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i50, 1);
    call {:si_unique_call 1236} {:cexpr "vector"} boogie_si_record_i32($i81);
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i81, $i4);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i82 == 1);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23:
    assume $i82 == 1;
    assume {:verifier.code 0} true;
    $i6, $i7, $i8 := $i52, $i51, $i81;
    goto $bb23_dummy;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $i46 := $add.i32($i6, 1);
    call {:si_unique_call 1234} {:cexpr "tx_int_idx"} boogie_si_record_i32($i46);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} vslice_dummy_var_200 := snprintf.ref.i64.ref.ref.ref.i32($p48, 24, .str.62, $p1, .str.65, $i6);
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i7, $i46;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i28, $i29 := $i39, $i40;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i55 := $sext.i32.i64($i8);
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 1);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p54, $mul.ref($i56, 8)), $mul.ref(0, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p12);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} $i63 := ldv_request_irq_14($i59, i40evf_msix_clean_rings, 0, $p61, $p62);
    call {:si_unique_call 1231} {:cexpr "err"} boogie_si_record_i32($i63);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i65, $i66 := $i8, $i63;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $i73 := $sext.i32.i64($i8);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $i74 := $add.i64($i73, 1);
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p72, $mul.ref($i74, 8)), $mul.ref(0, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p76);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} vslice_dummy_var_202 := irq_set_affinity_hint($i77, $p79);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $i50, $i51, $i52 := $i8, $i28, $i29;
    goto $bb18;

  $bb19:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} vslice_dummy_var_201 := _dev_info.ref.ref.ref.i32($p69, .str.66, .str.67, $i66);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i65, 0);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i83 := $i66;
    goto $bb26;

  $bb27:
    assume $i84 == 1;
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $i85 := $i65;
    goto $bb30;

  $bb30:
    call $i86, $p87, $p88, $i89, $i90, $p92, $i93, $p95, $p96, $i97, $i98, $p100, $i101, $i102, $p104, $p105, $p106, $i107, $i85, vslice_dummy_var_203 := i40evf_request_traffic_irqs_loop_$bb30($p0, $i86, $p87, $p88, $i89, $i90, $p92, $i93, $p95, $p96, $i97, $i98, $p100, $i101, $i102, $p104, $p105, $p106, $i107, $i85, vslice_dummy_var_203);
    goto $bb30_last;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i85, 1);
    call {:si_unique_call 1239} {:cexpr "vector"} boogie_si_record_i32($i86);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i86);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $i90 := $add.i64($i89, 1);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p88, $mul.ref($i90, 8)), $mul.ref(0, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} vslice_dummy_var_203 := irq_set_affinity_hint($i93, $0.ref);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    $i97 := $sext.i32.i64($i86);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i98 := $add.i64($i97, 1);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p96, $mul.ref($i98, 8)), $mul.ref(0, 1));
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i86);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref($i102, 8));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} ldv_free_irq_15($i101, $p106);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i86, 0);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i107 == 1);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb32:
    assume $i107 == 1;
    assume {:verifier.code 0} true;
    $i85 := $i86;
    goto $bb32_dummy;

  $bb12:
    assume $i34 == 1;
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i7, 1);
    call {:si_unique_call 1232} {:cexpr "rx_int_idx"} boogie_si_record_i32($i35);
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} vslice_dummy_var_199 := snprintf.ref.i64.ref.ref.ref.i32($p37, 24, .str.62, $p1, .str.64, $i7);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i39, $i40 := $i35, $i6;
    goto $bb14;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb8;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i7, 1);
    call {:si_unique_call 1227} {:cexpr "rx_int_idx"} boogie_si_record_i32($i23);
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} vslice_dummy_var_198 := snprintf.ref.i64.ref.ref.ref.i32($p25, 24, .str.62, $p1, .str.63, $i7);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i6, 1);
    call {:si_unique_call 1229} {:cexpr "tx_int_idx"} boogie_si_record_i32($i27);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $i28, $i29 := $i23, $i27;
    goto $bb11;

  $bb32_dummy:
    assume false;
    return;

  $bb30_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6050;

  $bb23_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5959;
}



const snprintf: ref;

axiom snprintf == $sub.ref(0, 649712);

procedure snprintf.ref.i64.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: i32) returns ($r: i32);



procedure snprintf.ref.i64.ref.ref.ref.i32($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32) returns ($r: i32);



const ldv_request_irq_14: ref;

axiom ldv_request_irq_14 == $sub.ref(0, 650744);

procedure ldv_request_irq_14($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11;



implementation ldv_request_irq_14($i0: i32, $p1: ref, $i2: i64, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} {:cexpr "ldv_request_irq_14:arg:irq"} boogie_si_record_i32($i0);
    call {:si_unique_call 1243} {:cexpr "ldv_request_irq_14:arg:flags"} boogie_si_record_i64($i2);
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} $i5 := request_irq($i0, $p1, $i2, $p3, $p4);
    call {:si_unique_call 1245} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1246} $i6 := reg_check_1($p1);
    call {:si_unique_call 1247} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 0);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} activate_suitable_irq_1($i0, $p4);
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const ldv_free_irq_15: ref;

axiom ldv_free_irq_15 == $sub.ref(0, 651776);

procedure ldv_free_irq_15($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.5, $M.7, $M.9, $M.11;



implementation ldv_free_irq_15($i0: i32, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1249} {:cexpr "ldv_free_irq_15:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} free_irq($i0, $p1);
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1251} disable_suitable_irq_1($i0, $p1);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_get_settings: ref;

axiom i40evf_get_settings == $sub.ref(0, 652808);

procedure i40evf_get_settings($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_get_settings($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(18, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(17, 1));
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p4, 2);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(15, 1));
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $sub.i8(0, 17));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const i40evf_get_drvinfo: ref;

axiom i40evf_get_drvinfo == $sub.ref(0, 653840);

procedure i40evf_get_drvinfo($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation i40evf_get_drvinfo($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var vslice_dummy_var_204: i64;
  var vslice_dummy_var_205: i64;
  var vslice_dummy_var_206: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1252} $p2 := netdev_priv($p0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(4, 1));
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} vslice_dummy_var_204 := strlcpy($p5, i40evf_driver_name, 32);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(36, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} vslice_dummy_var_205 := strlcpy($p8, i40evf_driver_version, 32);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(928, 1));
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p12 := pci_name($p11);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 196)), $mul.ref(100, 1));
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} vslice_dummy_var_206 := strlcpy($p14, $p12, 32);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_get_msglevel: ref;

axiom i40evf_get_msglevel == $sub.ref(0, 654872);

procedure i40evf_get_msglevel($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i40evf_get_msglevel($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p1 := netdev_priv($p0);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3448)), $mul.ref(2776, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const i40evf_set_msglevel: ref;

axiom i40evf_set_msglevel == $sub.ref(0, 655904);

procedure i40evf_set_msglevel($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_set_msglevel($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} {:cexpr "i40evf_set_msglevel:arg:data"} boogie_si_record_i32($i1);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p2 := netdev_priv($p0);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i1);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2776, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p5, $i4);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    return;
}



const ethtool_op_get_link: ref;

axiom ethtool_op_get_link == $sub.ref(0, 656936);

procedure ethtool_op_get_link($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ethtool_op_get_link($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1260} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 1261} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const i40evf_get_coalesce: ref;

axiom i40evf_get_coalesce == $sub.ref(0, 657968);

procedure i40evf_get_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_get_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i16;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6135;

  corral_source_split_6135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p2 := netdev_priv($p0);
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(548, 1));
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(24, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    $p9 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(548, 1));
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(8, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    $p13 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i15 := $sext.i16.i32($i14);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, 0);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p18 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $i19 := $load.i16($M.0, $p18);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $i20 := $sext.i16.i32($i19);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 0);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p23 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 32769));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    $p28 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    $i29 := $load.i16($M.0, $p28);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, $sub.i32(0, 32769));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(44, 1));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 1);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 1);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const i40evf_set_coalesce: ref;

axiom i40evf_set_coalesce == $sub.ref(0, 659000);

procedure i40evf_set_coalesce($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_set_coalesce($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i16;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i16;
  var $p25: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i16;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $p49: ref;
  var $p50: ref;
  var $i51: i16;
  var $i52: i32;
  var $i53: i32;
  var $i54: i16;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i60: i16;
  var $i61: i32;
  var $i62: i32;
  var $i63: i16;
  var $p64: ref;
  var $p65: ref;
  var $i66: i16;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i76: i64;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i16;
  var $p87: ref;
  var $p89: ref;
  var $i90: i16;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i64;
  var $p97: ref;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $p105: ref;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i75: i32;
  var $i26: i32;
  var vslice_dummy_var_207: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $p2 := netdev_priv($p0);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(32, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(16, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, 7);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb7:
    assume $i18 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i21 := $ule.i32($i20, 8160);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb10:
    assume $i21 == 1;
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(4, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i16($i23);
    $p25 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p25, $i24);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i29 := $ugt.i32($i28, 7);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(44, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i39 == 1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 22);
    goto $bb13;

  $bb20:
    assume $i39 == 1;
    $p40 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p40, $sub.i16(0, 32644));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(40, 1));
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_6233;

  corral_source_split_6233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i43 == 1);
    $p50 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i51 := $load.i16($M.0, $p50);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i51);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 32767);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i16($i53);
    $p55 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p55, $i54);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(44, 1));
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i58 == 1);
    $p65 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $i66 := $load.i16($M.0, $p65);
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i67 := $zext.i16.i32($i66);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 32767);
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i68);
    $p70 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p70, $i69);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(892, 1));
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i72, $sub.i32(0, 1));
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i74 := $sgt.i32($i73, 0);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb13;

  $bb29:
    assume $i74 == 1;
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i75 := 0;
    goto $bb32;

  $bb32:
    call $i76, $p78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $p87, $p89, $i90, $i91, $p92, $p93, $i94, $i95, $i96, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $p105, $p107, $i108, $i109, $p110, $p111, $i112, $i113, $i114, $p115, $p116, $p117, $p118, $i120, $i121, $i122, $i123, $i75, vslice_dummy_var_207 := i40evf_set_coalesce_loop_$bb32($p3, $p71, $i76, $p78, $p79, $p80, $i81, $i82, $i83, $i84, $i85, $p87, $p89, $i90, $i91, $p92, $p93, $i94, $i95, $i96, $p97, $p98, $i99, $i100, $i101, $i102, $i103, $p105, $p107, $i108, $i109, $p110, $p111, $i112, $i113, $i114, $p115, $p116, $p117, $p118, $i120, $i121, $i122, $i123, $i75, vslice_dummy_var_207);
    goto $bb32_last;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i75);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref($i76, 8));
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    $p80 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i81 := $load.i16($M.0, $p80);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i82 := $zext.i16.i32($i81);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, $sub.i32(0, 32769));
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    $i84 := $ashr.i32($i83, 1);
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i85 := $trunc.i32.i16($i84);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(24, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p87, $i85);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(24, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $i90 := $load.i16($M.0, $p89);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    $p92 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i94 := $add.i32($i75, 2560);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i95 := $mul.i32($i94, 4);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i96 := $sext.i32.i64($i95);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p93, $mul.ref($i96, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} writel($i91, $p97);
    $p98 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.0, $p98);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $i101 := $and.i32($i100, $sub.i32(0, 32769));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $i102 := $ashr.i32($i101, 1);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i32.i16($i102);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(24, 1));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p105, $i103);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p79, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(24, 1));
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $i109 := $zext.i16.i32($i108);
    $p110 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i75, 2576);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i113 := $mul.i32($i112, 4);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i113);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p111, $mul.ref($i114, 1));
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} writel($i109, $p115);
    $p116 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p117, $mul.ref(34816, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} vslice_dummy_var_207 := readl($p118);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i120 := $add.i32($i75, 1);
    call {:si_unique_call 1267} {:cexpr "i"} boogie_si_record_i32($i120);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i121 := $load.i32($M.0, $p71);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i122 := $add.i32($i121, $sub.i32(0, 1));
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i123 := $sgt.i32($i122, $i120);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i123 == 1);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb34:
    assume $i123 == 1;
    assume {:verifier.code 0} true;
    $i75 := $i120;
    goto $bb34_dummy;

  $bb26:
    assume $i58 == 1;
    $p59 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $i60 := $load.i16($M.0, $p59);
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i61 := $zext.i16.i32($i60);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i62 := $or.i32($i61, 32768);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    $p64 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p64, $i63);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb23:
    assume $i43 == 1;
    $p44 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i46, 32768);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i48 := $trunc.i32.i16($i47);
    $p49 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p49, $i48);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb14:
    assume $i29 == 1;
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $i32 := $ule.i32($i31, 8160);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb16;

  $bb17:
    assume $i32 == 1;
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(20, 1));
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i16($i34);
    $p36 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p36, $i35);
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 92)), $mul.ref(32, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    $p15 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(548, 1));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p15, $i14);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb34_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6277;
}



const i40evf_get_ringparam: ref;

axiom i40evf_get_ringparam == $sub.ref(0, 660032);

procedure i40evf_get_ringparam($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_get_ringparam($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p2 := netdev_priv($p0);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(4, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 4096);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 4096);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(888, 1));
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i7);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(744, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_set_ringparam: ref;

axiom i40evf_set_ringparam == $sub.ref(0, 661064);

procedure i40evf_set_ringparam($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.4, $M.3, $M.5, $M.7, $M.9, $M.11, $CurrAddr, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19;



implementation i40evf_set_ringparam($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} $p2 := netdev_priv($p0);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(24, 1));
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 1270} {:cexpr "__val"} boogie_si_record_i32($i12);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32(64, $i12);
    goto corral_source_split_6356;

  corral_source_split_6356:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i13 == 1);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i14 := $i12;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i15 := $ult.i32(4096, $i14);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i16 := $i14;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i16, 31);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, $sub.i32(0, 32));
    call {:si_unique_call 1271} {:cexpr "new_tx_count"} boogie_si_record_i32($i18);
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(20, 1));
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    call {:si_unique_call 1272} {:cexpr "__val___0"} boogie_si_record_i32($i20);
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i21 := $ugt.i32(64, $i20);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i21 == 1);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32(4096, $i22);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i23 == 1);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i24 := $i22;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $i25 := $add.i32($i24, 31);
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 32));
    call {:si_unique_call 1273} {:cexpr "new_rx_count"} boogie_si_record_i32($i26);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(744, 1));
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_6391;

  corral_source_split_6391:
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i28, $i18);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(744, 1));
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, $i18);
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(888, 1));
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i26);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $i35 := netif_running($p0);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 1275} {:cexpr "tmp___0"} boogie_si_record_i8($i36);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb26:
    assume $i37 == 1;
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} i40evf_reinit_locked($p3);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb20:
    assume $i29 == 1;
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(888, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, $i26);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb22;

  $bb23:
    assume $i32 == 1;
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb17:
    assume $i23 == 1;
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i24 := 4096;
    goto $bb19;

  $bb14:
    assume $i21 == 1;
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i22 := 64;
    goto $bb16;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $i16 := 4096;
    goto $bb13;

  $bb8:
    assume $i13 == 1;
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $i14 := 64;
    goto $bb10;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 22);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const i40evf_get_strings: ref;

axiom i40evf_get_strings == $sub.ref(0, 662096);

procedure i40evf_get_strings($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_get_strings($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i16;
  var $i11: i32;
  var $i12: i1;
  var $p18: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $i25: i16;
  var $i26: i32;
  var $i27: i1;
  var $i15: i32;
  var $p16: ref;
  var $p28: ref;
  var $p13: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $p38: ref;
  var $i40: i64;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $i35: i32;
  var $p36: ref;
  var $i48: i64;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $p63: ref;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $p67: ref;
  var $i68: i64;
  var $p14: ref;
  var cmdloc_dummy_var_50: [ref]i8;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;
  var cmdloc_dummy_var_64: [ref]i8;
  var cmdloc_dummy_var_65: [ref]i8;
  var cmdloc_dummy_var_66: [ref]i8;
  var cmdloc_dummy_var_67: [ref]i8;
  var cmdloc_dummy_var_68: [ref]i8;
  var cmdloc_dummy_var_69: [ref]i8;
  var cmdloc_dummy_var_70: [ref]i8;
  var cmdloc_dummy_var_71: [ref]i8;
  var cmdloc_dummy_var_72: [ref]i8;
  var cmdloc_dummy_var_73: [ref]i8;
  var cmdloc_dummy_var_74: [ref]i8;
  var cmdloc_dummy_var_75: [ref]i8;
  var cmdloc_dummy_var_76: [ref]i8;
  var cmdloc_dummy_var_77: [ref]i8;
  var cmdloc_dummy_var_78: [ref]i8;
  var cmdloc_dummy_var_79: [ref]i8;
  var cmdloc_dummy_var_80: [ref]i8;
  var cmdloc_dummy_var_81: [ref]i8;
  var cmdloc_dummy_var_82: [ref]i8;
  var cmdloc_dummy_var_83: [ref]i8;
  var cmdloc_dummy_var_84: [ref]i8;
  var cmdloc_dummy_var_85: [ref]i8;
  var cmdloc_dummy_var_86: [ref]i8;
  var cmdloc_dummy_var_87: [ref]i8;
  var cmdloc_dummy_var_88: [ref]i8;
  var cmdloc_dummy_var_89: [ref]i8;
  var cmdloc_dummy_var_90: [ref]i8;
  var cmdloc_dummy_var_91: [ref]i8;
  var cmdloc_dummy_var_92: [ref]i8;
  var cmdloc_dummy_var_93: [ref]i8;
  var cmdloc_dummy_var_94: [ref]i8;
  var cmdloc_dummy_var_95: [ref]i8;
  var cmdloc_dummy_var_96: [ref]i8;
  var cmdloc_dummy_var_97: [ref]i8;
  var cmdloc_dummy_var_98: [ref]i8;
  var cmdloc_dummy_var_99: [ref]i8;
  var cmdloc_dummy_var_100: [ref]i8;
  var cmdloc_dummy_var_101: [ref]i8;
  var cmdloc_dummy_var_102: [ref]i8;
  var cmdloc_dummy_var_103: [ref]i8;
  var cmdloc_dummy_var_104: [ref]i8;
  var cmdloc_dummy_var_105: [ref]i8;
  var cmdloc_dummy_var_106: [ref]i8;
  var cmdloc_dummy_var_107: [ref]i8;
  var cmdloc_dummy_var_108: [ref]i8;
  var cmdloc_dummy_var_109: [ref]i8;
  var cmdloc_dummy_var_110: [ref]i8;
  var cmdloc_dummy_var_111: [ref]i8;
  var cmdloc_dummy_var_112: [ref]i8;
  var cmdloc_dummy_var_113: [ref]i8;
  var cmdloc_dummy_var_114: [ref]i8;
  var cmdloc_dummy_var_115: [ref]i8;
  var cmdloc_dummy_var_116: [ref]i8;
  var cmdloc_dummy_var_117: [ref]i8;
  var cmdloc_dummy_var_118: [ref]i8;
  var cmdloc_dummy_var_119: [ref]i8;
  var cmdloc_dummy_var_120: [ref]i8;
  var cmdloc_dummy_var_121: [ref]i8;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} {:cexpr "i40evf_get_strings:arg:sset"} boogie_si_record_i32($i1);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p3 := netdev_priv($p0);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i1, 1);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb5, $bb6;

  $bb6:
    assume !(0 == 1);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_53 := $M.0;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1280} cmdloc_dummy_var_55 := $memcpy.i8(cmdloc_dummy_var_53, cmdloc_dummy_var_54, $p2, i40evf_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p2, $mul.ref(32, 1));
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb27, $bb28;

  $bb28:
    assume !(0 == 1);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_59 := $M.0;
    cmdloc_dummy_var_60 := $M.0;
    call {:si_unique_call 1288} cmdloc_dummy_var_61 := $memcpy.i8(cmdloc_dummy_var_59, cmdloc_dummy_var_60, $p6, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_61;
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    $i48 := $add.i64(32, 32);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p2, $mul.ref($i48, 1));
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb31, $bb32;

  $bb32:
    assume !(0 == 1);
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_65 := $M.0;
    cmdloc_dummy_var_66 := $M.0;
    call {:si_unique_call 1290} cmdloc_dummy_var_67 := $memcpy.i8(cmdloc_dummy_var_65, cmdloc_dummy_var_66, $p49, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_67;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    $i50 := $add.i64($i48, 32);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p2, $mul.ref($i50, 1));
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb35, $bb36;

  $bb36:
    assume !(0 == 1);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_71 := $M.0;
    cmdloc_dummy_var_72 := $M.0;
    call {:si_unique_call 1292} cmdloc_dummy_var_73 := $memcpy.i8(cmdloc_dummy_var_71, cmdloc_dummy_var_72, $p51, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_73;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    $i52 := $add.i64($i50, 32);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p2, $mul.ref($i52, 1));
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb39, $bb40;

  $bb40:
    assume !(0 == 1);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_77 := $M.0;
    cmdloc_dummy_var_78 := $M.0;
    call {:si_unique_call 1294} cmdloc_dummy_var_79 := $memcpy.i8(cmdloc_dummy_var_77, cmdloc_dummy_var_78, $p53, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_79;
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    $i54 := $add.i64($i52, 32);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p2, $mul.ref($i54, 1));
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb43, $bb44;

  $bb44:
    assume !(0 == 1);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_83 := $M.0;
    cmdloc_dummy_var_84 := $M.0;
    call {:si_unique_call 1296} cmdloc_dummy_var_85 := $memcpy.i8(cmdloc_dummy_var_83, cmdloc_dummy_var_84, $p55, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_85;
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    $i56 := $add.i64($i54, 32);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p2, $mul.ref($i56, 1));
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb47, $bb48;

  $bb48:
    assume !(0 == 1);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_89 := $M.0;
    cmdloc_dummy_var_90 := $M.0;
    call {:si_unique_call 1298} cmdloc_dummy_var_91 := $memcpy.i8(cmdloc_dummy_var_89, cmdloc_dummy_var_90, $p57, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_91;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    $i58 := $add.i64($i56, 32);
    goto corral_source_split_6519;

  corral_source_split_6519:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($p2, $mul.ref($i58, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb51, $bb52;

  $bb52:
    assume !(0 == 1);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_95 := $M.0;
    cmdloc_dummy_var_96 := $M.0;
    call {:si_unique_call 1300} cmdloc_dummy_var_97 := $memcpy.i8(cmdloc_dummy_var_95, cmdloc_dummy_var_96, $p59, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_97;
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    $i60 := $add.i64($i58, 32);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($p2, $mul.ref($i60, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb55, $bb56;

  $bb56:
    assume !(0 == 1);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_101 := $M.0;
    cmdloc_dummy_var_102 := $M.0;
    call {:si_unique_call 1302} cmdloc_dummy_var_103 := $memcpy.i8(cmdloc_dummy_var_101, cmdloc_dummy_var_102, $p61, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_103;
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    $i62 := $add.i64($i60, 32);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p2, $mul.ref($i62, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb59, $bb60;

  $bb60:
    assume !(0 == 1);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_107 := $M.0;
    cmdloc_dummy_var_108 := $M.0;
    call {:si_unique_call 1304} cmdloc_dummy_var_109 := $memcpy.i8(cmdloc_dummy_var_107, cmdloc_dummy_var_108, $p63, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_109;
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    $i64 := $add.i64($i62, 32);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p2, $mul.ref($i64, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb63, $bb64;

  $bb64:
    assume !(0 == 1);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_113 := $M.0;
    cmdloc_dummy_var_114 := $M.0;
    call {:si_unique_call 1306} cmdloc_dummy_var_115 := $memcpy.i8(cmdloc_dummy_var_113, cmdloc_dummy_var_114, $p65, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_115;
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    $i66 := $add.i64($i64, 32);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p2, $mul.ref($i66, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume {:branchcond 0} true;
    goto $bb67, $bb68;

  $bb68:
    assume !(0 == 1);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_119 := $M.0;
    cmdloc_dummy_var_120 := $M.0;
    call {:si_unique_call 1308} cmdloc_dummy_var_121 := $memcpy.i8(cmdloc_dummy_var_119, cmdloc_dummy_var_120, $p67, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_121;
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    $i68 := $add.i64($i66, 32);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p2, $mul.ref($i68, 1));
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $i10 := $load.i16($M.0, $p9);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $i11 := $zext.i16.i32($i10);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, 0);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $p13 := $p14;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i32 := $load.i16($M.0, $p31);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    $i34 := $sgt.i32($i33, 0);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb18:
    assume $i34 == 1;
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $i35, $p36 := 0, $p13;
    goto $bb21;

  $bb21:
    call $p38, $i40, $p41, $i42, $p43, $p44, $i45, $i46, $i47, $i35, $p36, vslice_dummy_var_210, vslice_dummy_var_211 := i40evf_get_strings_loop_$bb21($p29, $p38, $i40, $p41, $i42, $p43, $p44, $i45, $i46, $i47, $i35, $p36, vslice_dummy_var_210, vslice_dummy_var_211);
    goto $bb21_last;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} vslice_dummy_var_210 := snprintf.ref.i64.ref.i32($p36, 32, .str.114, $i35);
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p36, $mul.ref(32, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} vslice_dummy_var_211 := snprintf.ref.i64.ref.i32($p38, 32, .str.115, $i35);
    $i40 := $add.i64(32, 32);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p36, $mul.ref($i40, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i35, 1);
    call {:si_unique_call 1286} {:cexpr "i"} boogie_si_record_i32($i42);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p29);
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i46, $i42);
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i47 == 1);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i47 == 1;
    assume {:verifier.code 0} true;
    $i35, $p36 := $i42, $p41;
    goto $bb23_dummy;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    $i15, $p16 := 0, $p14;
    goto $bb13;

  $bb13:
    call $p18, $i20, $p21, $i22, $p23, $p24, $i25, $i26, $i27, $i15, $p16, $p28, vslice_dummy_var_208, vslice_dummy_var_209 := i40evf_get_strings_loop_$bb13($p7, $p18, $i20, $p21, $i22, $p23, $p24, $i25, $i26, $i27, $i15, $p16, $p28, vslice_dummy_var_208, vslice_dummy_var_209);
    goto $bb13_last;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} vslice_dummy_var_208 := snprintf.ref.i64.ref.i32($p16, 32, .str.112, $i15);
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p16, $mul.ref(32, 1));
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} vslice_dummy_var_209 := snprintf.ref.i64.ref.i32($p18, 32, .str.113, $i15);
    $i20 := $add.i64(32, 32);
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p16, $mul.ref($i20, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i15, 1);
    call {:si_unique_call 1283} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p7);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i25 := $load.i16($M.0, $p24);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i25);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i27 := $sgt.i32($i26, $i22);
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $p28 := $p21;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p13 := $p28;
    goto $bb12;

  $bb15:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i15, $p16 := $i22, $p21;
    goto $bb15_dummy;

  $bb67:
    assume 0 == 1;
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_116 := $M.0;
    cmdloc_dummy_var_117 := $M.0;
    call {:si_unique_call 1307} cmdloc_dummy_var_118 := $memcpy.i8(cmdloc_dummy_var_116, cmdloc_dummy_var_117, $p67, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_118;
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb63:
    assume 0 == 1;
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_110 := $M.0;
    cmdloc_dummy_var_111 := $M.0;
    call {:si_unique_call 1305} cmdloc_dummy_var_112 := $memcpy.i8(cmdloc_dummy_var_110, cmdloc_dummy_var_111, $p65, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_112;
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume 0 == 1;
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_104 := $M.0;
    cmdloc_dummy_var_105 := $M.0;
    call {:si_unique_call 1303} cmdloc_dummy_var_106 := $memcpy.i8(cmdloc_dummy_var_104, cmdloc_dummy_var_105, $p63, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_106;
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb55:
    assume 0 == 1;
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_98 := $M.0;
    cmdloc_dummy_var_99 := $M.0;
    call {:si_unique_call 1301} cmdloc_dummy_var_100 := $memcpy.i8(cmdloc_dummy_var_98, cmdloc_dummy_var_99, $p61, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_100;
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume 0 == 1;
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_92 := $M.0;
    cmdloc_dummy_var_93 := $M.0;
    call {:si_unique_call 1299} cmdloc_dummy_var_94 := $memcpy.i8(cmdloc_dummy_var_92, cmdloc_dummy_var_93, $p59, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_94;
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb47:
    assume 0 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_86 := $M.0;
    cmdloc_dummy_var_87 := $M.0;
    call {:si_unique_call 1297} cmdloc_dummy_var_88 := $memcpy.i8(cmdloc_dummy_var_86, cmdloc_dummy_var_87, $p57, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_88;
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb43:
    assume 0 == 1;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_80 := $M.0;
    cmdloc_dummy_var_81 := $M.0;
    call {:si_unique_call 1295} cmdloc_dummy_var_82 := $memcpy.i8(cmdloc_dummy_var_80, cmdloc_dummy_var_81, $p55, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_82;
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume 0 == 1;
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_74 := $M.0;
    cmdloc_dummy_var_75 := $M.0;
    call {:si_unique_call 1293} cmdloc_dummy_var_76 := $memcpy.i8(cmdloc_dummy_var_74, cmdloc_dummy_var_75, $p53, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_76;
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb35:
    assume 0 == 1;
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_68 := $M.0;
    cmdloc_dummy_var_69 := $M.0;
    call {:si_unique_call 1291} cmdloc_dummy_var_70 := $memcpy.i8(cmdloc_dummy_var_68, cmdloc_dummy_var_69, $p51, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_70;
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb31:
    assume 0 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    cmdloc_dummy_var_63 := $M.0;
    call {:si_unique_call 1289} cmdloc_dummy_var_64 := $memcpy.i8(cmdloc_dummy_var_62, cmdloc_dummy_var_63, $p49, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_64;
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb27:
    assume 0 == 1;
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    cmdloc_dummy_var_57 := $M.0;
    call {:si_unique_call 1287} cmdloc_dummy_var_58 := $memcpy.i8(cmdloc_dummy_var_56, cmdloc_dummy_var_57, $p6, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_58;
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb5:
    assume 0 == 1;
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_50 := $M.0;
    cmdloc_dummy_var_51 := $M.0;
    call {:si_unique_call 1279} cmdloc_dummy_var_52 := $memcpy.i8(cmdloc_dummy_var_50, cmdloc_dummy_var_51, $p2, i40evf_gstrings_stats, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_52;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  $bb15_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6435;
}



const i40evf_get_ethtool_stats: ref;

axiom i40evf_get_ethtool_stats == $sub.ref(0, 663128);

procedure i40evf_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_get_ethtool_stats($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $i14: i1;
  var $i18: i32;
  var $i19: i64;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i1;
  var $i16: i32;
  var $i17: i32;
  var $i44: i32;
  var $i15: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;
  var $i53: i32;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p59: ref;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $i63: i32;
  var $i64: i64;
  var $p66: ref;
  var $p67: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $i76: i16;
  var $i77: i32;
  var $i78: i1;
  var $i51: i32;
  var $i52: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i64;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p3 := netdev_priv($p0);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p5, $mul.ref(2768, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i8 := $load.i64($M.0, $p7);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p2, $i8);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p4);
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p79, $mul.ref(2776, 1));
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i82 := $load.i64($M.0, $p81);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p2, $mul.ref(1, 8));
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p83, $i82);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p4);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($p84, $mul.ref(2784, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p85);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, $p86);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p2, $mul.ref(2, 8));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p88, $i87);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p4);
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p89, $mul.ref(2792, 1));
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p91 := $bitcast.ref.ref($p90);
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p2, $mul.ref(3, 8));
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p93, $i92);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p4);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($p94, $mul.ref(2800, 1));
    goto corral_source_split_6669;

  corral_source_split_6669:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($p2, $mul.ref(4, 8));
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p98, $i97);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p4);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p99, $mul.ref(2808, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $p101 := $bitcast.ref.ref($p100);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p2, $mul.ref(5, 8));
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p103, $i102);
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p4);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(2816, 1));
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i107 := $load.i64($M.0, $p106);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p2, $mul.ref(6, 8));
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p108, $i107);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p109 := $bitcast.ref.ref($p4);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($p109, $mul.ref(2824, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $i112 := $load.i64($M.0, $p111);
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p2, $mul.ref(7, 8));
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p113, $i112);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p114 := $bitcast.ref.ref($p4);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref(2832, 1));
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p115);
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $i117 := $load.i64($M.0, $p116);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p2, $mul.ref(8, 8));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p118, $i117);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p4);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($p119, $mul.ref(2840, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $i122 := $load.i64($M.0, $p121);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p2, $mul.ref(9, 8));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p123, $i122);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p4);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p124, $mul.ref(2848, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $i127 := $load.i64($M.0, $p126);
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p2, $mul.ref(10, 8));
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p128, $i127);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p129 := $bitcast.ref.ref($p4);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p129, $mul.ref(2856, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p130);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i132 := $load.i64($M.0, $p131);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p2, $mul.ref(11, 8));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p133, $i132);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6580;

  corral_source_split_6580:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i14 := $sgt.i32($i13, 0);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i15 := 12;
    assume {:branchcond $i14} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p46, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i48 := $load.i16($M.0, $p47);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $i50 := $sgt.i32($i49, 0);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i50 == 1;
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $i51, $i52 := 0, $i15;
    goto $bb16;

  $bb16:
    call $i53, $i54, $p56, $p57, $p59, $i60, $i61, $p62, $i63, $i64, $p66, $p67, $p69, $i70, $i71, $p72, $i73, $p74, $p75, $i76, $i77, $i78, $i51, $i52 := i40evf_get_ethtool_stats_loop_$bb16($p2, $p4, $p45, $i53, $i54, $p56, $p57, $p59, $i60, $i61, $p62, $i63, $i64, $p66, $p67, $p69, $i70, $i71, $p72, $i73, $p74, $p75, $i76, $i77, $i78, $i51, $i52);
    goto $bb16_last;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i53 := $add.i32($i52, 1);
    call {:si_unique_call 1313} {:cexpr "i"} boogie_si_record_i32($i53);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i51);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i54, 8));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p57, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $i60 := $load.i64($M.0, $p59);
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i52);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p2, $mul.ref($i61, 8));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i60);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i63 := $add.i32($i53, 1);
    call {:si_unique_call 1314} {:cexpr "i"} boogie_si_record_i32($i63);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i51);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref($i64, 8));
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p67, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i53);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p2, $mul.ref($i71, 8));
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p72, $i70);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $i73 := $add.i32($i51, 1);
    call {:si_unique_call 1315} {:cexpr "j"} boogie_si_record_i32($i73);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p45);
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p74, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $i76 := $load.i16($M.0, $p75);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i76);
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, $i73);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i78 == 1);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb18:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i51, $i52 := $i73, $i63;
    goto $bb18_dummy;

  $bb5:
    assume $i14 == 1;
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i16, $i17 := 0, 12;
    goto $bb8;

  $bb8:
    call $i18, $i19, $p21, $p22, $p24, $i25, $i26, $p27, $i28, $i29, $p31, $p32, $p34, $i35, $i36, $p37, $i38, $p39, $p40, $i41, $i42, $i43, $i16, $i17, $i44 := i40evf_get_ethtool_stats_loop_$bb8($p2, $p4, $p9, $i18, $i19, $p21, $p22, $p24, $i25, $i26, $p27, $i28, $i29, $p31, $p32, $p34, $i35, $i36, $p37, $i38, $p39, $p40, $i41, $i42, $i43, $i16, $i17, $i44);
    goto $bb8_last;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 1);
    call {:si_unique_call 1310} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i16);
    goto corral_source_split_6590;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i19, 8));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i17);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p2, $mul.ref($i26, 8));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p27, $i25);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i18, 1);
    call {:si_unique_call 1311} {:cexpr "i"} boogie_si_record_i32($i28);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i16);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref($i29, 8));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p32, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i35 := $load.i64($M.0, $p34);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i18);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p2, $mul.ref($i36, 8));
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p37, $i35);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i38 := $add.i32($i16, 1);
    call {:si_unique_call 1312} {:cexpr "j"} boogie_si_record_i32($i38);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p9);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i43 := $sgt.i32($i42, $i38);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i44 := $i28;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i15 := $i44;
    goto $bb7;

  $bb10:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i16, $i17 := $i38, $i28;
    goto $bb10_dummy;

  $bb18_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6625;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6587;
}



const i40evf_get_sset_count: ref;

axiom i40evf_get_sset_count == $sub.ref(0, 664160);

procedure i40evf_get_sset_count($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation i40evf_get_sset_count($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} {:cexpr "i40evf_get_sset_count:arg:sset"} boogie_si_record_i32($i1);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 1);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} $p3 := netdev_priv($p0);
    goto corral_source_split_6727;

  corral_source_split_6727:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i64($i8);
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i10 := $add.i64($i9, 3);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i64.i32($i10);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i11, 4);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i13 := $i12;
    goto $bb3;
}



const i40evf_get_rxnfc: ref;

axiom i40evf_get_rxnfc == $sub.ref(0, 665192);

procedure i40evf_get_rxnfc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_get_rxnfc($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i16;
  var $i14: i64;
  var $p15: ref;
  var $i17: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} $p3 := netdev_priv($p0);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i6, 45);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i6, 45);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 95);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i64($i13);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i14);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i16 := 0;
    goto $bb9;

  $bb2:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i6, 41);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb6;

  $bb7:
    assume $i9 == 1;
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i17 := i40evf_get_rss_hash_opts($p4, $p1);
    call {:si_unique_call 1320} {:cexpr "ret"} boogie_si_record_i32($i17);
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb9;
}



const i40evf_set_rxnfc: ref;

axiom i40evf_set_rxnfc == $sub.ref(0, 666224);

procedure i40evf_set_rxnfc($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_set_rxnfc($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p2 := netdev_priv($p0);
    goto corral_source_split_6762;

  corral_source_split_6762:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(0, 1));
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 42);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 95);
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb2:
    assume $i6 == 1;
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} $i7 := i40evf_set_rss_hash_opt($p3, $p1);
    call {:si_unique_call 1323} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb4;
}



const i40evf_get_rxfh_indir_size: ref;

axiom i40evf_get_rxfh_indir_size == $sub.ref(0, 667256);

procedure i40evf_get_rxfh_indir_size($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i40evf_get_rxfh_indir_size($p0: ref) returns ($r: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $r := 64;
    return;
}



const i40evf_get_rxfh: ref;

axiom i40evf_get_rxfh == $sub.ref(0, 668288);

procedure i40evf_get_rxfh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_get_rxfh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i32;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i32;
  var $p72: ref;
  var $i73: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $p80: ref;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $i95: i32;
  var $i96: i32;
  var $p97: ref;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i107: i32;
  var $p108: ref;
  var $i109: i32;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $i127: i32;
  var $p128: ref;
  var $i129: i32;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i32;
  var $i135: i32;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $p139: ref;
  var $i140: i32;
  var $i141: i32;
  var $p142: ref;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;
  var $i171: i32;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $i177: i32;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $p184: ref;
  var $i185: i32;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i32;
  var $i191: i32;
  var $p192: ref;
  var $i193: i32;
  var $i194: i32;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $i199: i32;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $i204: i32;
  var $i205: i32;
  var $p206: ref;
  var $i207: i32;
  var $i208: i32;
  var $p209: ref;
  var $i210: i32;
  var $i211: i32;
  var $p212: ref;
  var $i213: i32;
  var $p214: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $p3 := netdev_priv($p0);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($p7, $mul.ref(53248, 1));
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i9 := readl($p8);
    call {:si_unique_call 1326} {:cexpr "hlut_val"} boogie_si_record_i32($i9);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 255);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p1, $i10);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i9, 8);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 255);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, $i12);
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i9, 16);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 255);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i9, 24);
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(53252, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} $i22 := readl($p21);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 255);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i22, 8);
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, 255);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p1, $mul.ref(5, 4));
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i22, 16);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 255);
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($p1, $mul.ref(6, 4));
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i29);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i32($i22, 24);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(7, 4));
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    $p33 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($p34, $mul.ref(53256, 1));
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} $i36 := readl($p35);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 255);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p1, $mul.ref(8, 4));
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $i37);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i39 := $lshr.i32($i36, 8);
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, 255);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p1, $mul.ref(9, 4));
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i42 := $lshr.i32($i36, 16);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i43 := $and.i32($i42, 255);
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p1, $mul.ref(10, 4));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p44, $i43);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i45 := $lshr.i32($i36, 24);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($p1, $mul.ref(11, 4));
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    $p47 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p48, $mul.ref(53260, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} $i50 := readl($p49);
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $i51 := $and.i32($i50, 255);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p1, $mul.ref(12, 4));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p52, $i51);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i53 := $lshr.i32($i50, 8);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i53, 255);
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p1, $mul.ref(13, 4));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, $i54);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i56 := $lshr.i32($i50, 16);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 255);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p1, $mul.ref(14, 4));
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, $i57);
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i59 := $lshr.i32($i50, 24);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p1, $mul.ref(15, 4));
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    $p61 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(53264, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} $i64 := readl($p63);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i64, 255);
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref(16, 4));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i67 := $lshr.i32($i64, 8);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 255);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p1, $mul.ref(17, 4));
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p69, $i68);
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i70 := $lshr.i32($i64, 16);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i70, 255);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p1, $mul.ref(18, 4));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p72, $i71);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $i73 := $lshr.i32($i64, 24);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($p1, $mul.ref(19, 4));
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p74, $i73);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    $p75 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(53268, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} $i78 := readl($p77);
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, 255);
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($p1, $mul.ref(20, 4));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i79);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    $i81 := $lshr.i32($i78, 8);
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i82 := $and.i32($i81, 255);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p1, $mul.ref(21, 4));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p83, $i82);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $i84 := $lshr.i32($i78, 16);
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i84, 255);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($p1, $mul.ref(22, 4));
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_6886;

  corral_source_split_6886:
    assume {:verifier.code 0} true;
    $i87 := $lshr.i32($i78, 24);
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($p1, $mul.ref(23, 4));
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i87);
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    $p89 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_6892;

  corral_source_split_6892:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p90, $mul.ref(53272, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} $i92 := readl($p91);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 255);
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p1, $mul.ref(24, 4));
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p94, $i93);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i95 := $lshr.i32($i92, 8);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 255);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($p1, $mul.ref(25, 4));
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $i96);
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i98 := $lshr.i32($i92, 16);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $i99 := $and.i32($i98, 255);
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p1, $mul.ref(26, 4));
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p100, $i99);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i101 := $lshr.i32($i92, 24);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p1, $mul.ref(27, 4));
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p102, $i101);
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    $p103 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6910;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p104, $mul.ref(53276, 1));
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} $i106 := readl($p105);
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $i107 := $and.i32($i106, 255);
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($p1, $mul.ref(28, 4));
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p108, $i107);
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $i109 := $lshr.i32($i106, 8);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i109, 255);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p1, $mul.ref(29, 4));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i112 := $lshr.i32($i106, 16);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i113 := $and.i32($i112, 255);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p1, $mul.ref(30, 4));
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p114, $i113);
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $i115 := $lshr.i32($i106, 24);
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p1, $mul.ref(31, 4));
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p116, $i115);
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    $p117 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($p118, $mul.ref(53280, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i120 := readl($p119);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i120, 255);
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($p1, $mul.ref(32, 4));
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, $i121);
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $i123 := $lshr.i32($i120, 8);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 255);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($p1, $mul.ref(33, 4));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p125, $i124);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i126 := $lshr.i32($i120, 16);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i127 := $and.i32($i126, 255);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($p1, $mul.ref(34, 4));
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, $i127);
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i129 := $lshr.i32($i120, 24);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p1, $mul.ref(35, 4));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $i129);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    $p131 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p132, $mul.ref(53284, 1));
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} $i134 := readl($p133);
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $i135 := $and.i32($i134, 255);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($p1, $mul.ref(36, 4));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p136, $i135);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $i137 := $lshr.i32($i134, 8);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i137, 255);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p1, $mul.ref(37, 4));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p139, $i138);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i140 := $lshr.i32($i134, 16);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i141 := $and.i32($i140, 255);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p1, $mul.ref(38, 4));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p142, $i141);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $i143 := $lshr.i32($i134, 24);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($p1, $mul.ref(39, 4));
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p145 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p146, $mul.ref(53288, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} $i148 := readl($p147);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i149 := $and.i32($i148, 255);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p1, $mul.ref(40, 4));
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p150, $i149);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i151 := $lshr.i32($i148, 8);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $i152 := $and.i32($i151, 255);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p1, $mul.ref(41, 4));
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i152);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i154 := $lshr.i32($i148, 16);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i155 := $and.i32($i154, 255);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($p1, $mul.ref(42, 4));
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p156, $i155);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i157 := $lshr.i32($i148, 24);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p1, $mul.ref(43, 4));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i157);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    $p159 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($p160, $mul.ref(53292, 1));
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i162 := readl($p161);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, 255);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p1, $mul.ref(44, 4));
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, $i163);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i165 := $lshr.i32($i162, 8);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $i166 := $and.i32($i165, 255);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($p1, $mul.ref(45, 4));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, $i166);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i168 := $lshr.i32($i162, 16);
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i169 := $and.i32($i168, 255);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($p1, $mul.ref(46, 4));
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p170, $i169);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i171 := $lshr.i32($i162, 24);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($p1, $mul.ref(47, 4));
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, $i171);
    goto corral_source_split_7003;

  corral_source_split_7003:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    $p173 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $p174 := $load.ref($M.0, $p173);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p174, $mul.ref(53296, 1));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} $i176 := readl($p175);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i177 := $and.i32($i176, 255);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($p1, $mul.ref(48, 4));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p178, $i177);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $i179 := $lshr.i32($i176, 8);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 255);
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p1, $mul.ref(49, 4));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i180);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $i182 := $lshr.i32($i176, 16);
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $i183 := $and.i32($i182, 255);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($p1, $mul.ref(50, 4));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p184, $i183);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $i185 := $lshr.i32($i176, 24);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($p1, $mul.ref(51, 4));
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, $i185);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    $p187 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $p188 := $load.ref($M.0, $p187);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($p188, $mul.ref(53300, 1));
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} $i190 := readl($p189);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i191 := $and.i32($i190, 255);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p1, $mul.ref(52, 4));
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p192, $i191);
    goto corral_source_split_7030;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    $i193 := $lshr.i32($i190, 8);
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i194 := $and.i32($i193, 255);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($p1, $mul.ref(53, 4));
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p195, $i194);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i196 := $lshr.i32($i190, 16);
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i197 := $and.i32($i196, 255);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p1, $mul.ref(54, 4));
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p198, $i197);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i199 := $lshr.i32($i190, 24);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($p1, $mul.ref(55, 4));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p200, $i199);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p201 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $p202 := $load.ref($M.0, $p201);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($p202, $mul.ref(53304, 1));
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1340} $i204 := readl($p203);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i205 := $and.i32($i204, 255);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($p1, $mul.ref(56, 4));
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p206, $i205);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i207 := $lshr.i32($i204, 8);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i208 := $and.i32($i207, 255);
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p1, $mul.ref(57, 4));
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p209, $i208);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i210 := $lshr.i32($i204, 16);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i211 := $and.i32($i210, 255);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($p1, $mul.ref(58, 4));
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p212, $i211);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i213 := $lshr.i32($i204, 24);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($p1, $mul.ref(59, 4));
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p214, $i213);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const i40evf_set_rxfh: ref;

axiom i40evf_set_rxfh == $sub.ref(0, 669320);

procedure i40evf_set_rxfh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation i40evf_set_rxfh($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $p41: ref;
  var $i42: i32;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $p49: ref;
  var $i50: i32;
  var $i51: i32;
  var $i52: i32;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i32;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $p126: ref;
  var $i127: i32;
  var $i128: i32;
  var $i129: i32;
  var $p130: ref;
  var $i131: i32;
  var $i132: i32;
  var $i133: i32;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i32;
  var $p143: ref;
  var $i144: i32;
  var $i145: i32;
  var $i146: i32;
  var $p147: ref;
  var $i148: i32;
  var $i149: i32;
  var $i150: i32;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $i154: i32;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $i176: i32;
  var $p177: ref;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i32;
  var $p194: ref;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $p198: ref;
  var $i199: i32;
  var $i200: i32;
  var $i201: i32;
  var $p202: ref;
  var $i203: i32;
  var $i204: i32;
  var $i205: i32;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i32;
  var $p211: ref;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $p215: ref;
  var $i216: i32;
  var $i217: i32;
  var $i218: i32;
  var $p219: ref;
  var $i220: i32;
  var $i221: i32;
  var $i222: i32;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $i227: i32;
  var $p228: ref;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $p232: ref;
  var $i233: i32;
  var $i234: i32;
  var $i235: i32;
  var $p236: ref;
  var $i237: i32;
  var $i238: i32;
  var $i239: i32;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $i244: i32;
  var $p245: ref;
  var $i246: i32;
  var $i247: i32;
  var $i248: i32;
  var $p249: ref;
  var $i250: i32;
  var $i251: i32;
  var $i252: i32;
  var $p253: ref;
  var $i254: i32;
  var $i255: i32;
  var $i256: i32;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $p260: ref;
  var $i261: i32;
  var $p262: ref;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $p266: ref;
  var $i267: i32;
  var $i268: i32;
  var $i269: i32;
  var $p270: ref;
  var $i271: i32;
  var $i272: i32;
  var $i273: i32;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1341} $p3 := netdev_priv($p0);
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p1);
    call {:si_unique_call 1342} {:cexpr "hlut_val"} boogie_si_record_i32($i6);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p1, $mul.ref(1, 4));
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i9 := $shl.i32($i8, 8);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i10 := $or.i32($i9, $i6);
    call {:si_unique_call 1343} {:cexpr "hlut_val"} boogie_si_record_i32($i10);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p1, $mul.ref(2, 4));
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 16);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, $i10);
    call {:si_unique_call 1344} {:cexpr "hlut_val"} boogie_si_record_i32($i14);
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p1, $mul.ref(3, 4));
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i17 := $shl.i32($i16, 24);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i17, $i14);
    call {:si_unique_call 1345} {:cexpr "hlut_val"} boogie_si_record_i32($i18);
    $p19 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(53248, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1346} writel($i18, $p21);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p1, $mul.ref(4, 4));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($p1, $mul.ref(5, 4));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32($i25, 8);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $i27 := $or.i32($i26, $i23);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($p1, $mul.ref(6, 4));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 16);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $i31 := $or.i32($i30, $i27);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p1, $mul.ref(7, 4));
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i34 := $shl.i32($i33, 24);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, $i31);
    $p36 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p37, $mul.ref(53252, 1));
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} writel($i35, $p38);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p1, $mul.ref(8, 4));
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p1, $mul.ref(9, 4));
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $i43 := $shl.i32($i42, 8);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, $i40);
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p1, $mul.ref(10, 4));
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $i47 := $shl.i32($i46, 16);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, $i44);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($p1, $mul.ref(11, 4));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 24);
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i51, $i48);
    $p53 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($p54, $mul.ref(53256, 1));
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1348} writel($i52, $p55);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($p1, $mul.ref(12, 4));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i57 := $load.i32($M.0, $p56);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($p1, $mul.ref(13, 4));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $i60 := $shl.i32($i59, 8);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i60, $i57);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($p1, $mul.ref(14, 4));
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i64 := $shl.i32($i63, 16);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i65 := $or.i32($i64, $i61);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p1, $mul.ref(15, 4));
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    $i68 := $shl.i32($i67, 24);
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i68, $i65);
    $p70 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($p71, $mul.ref(53260, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1349} writel($i69, $p72);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($p1, $mul.ref(16, 4));
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($p1, $mul.ref(17, 4));
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $i77 := $shl.i32($i76, 8);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    $i78 := $or.i32($i77, $i74);
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p1, $mul.ref(18, 4));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.0, $p79);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $i81 := $shl.i32($i80, 16);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i81, $i78);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($p1, $mul.ref(19, 4));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $i85 := $shl.i32($i84, 24);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i85, $i82);
    $p87 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($p88, $mul.ref(53264, 1));
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} writel($i86, $p89);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($p1, $mul.ref(20, 4));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p1, $mul.ref(21, 4));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i94 := $shl.i32($i93, 8);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, $i91);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($p1, $mul.ref(22, 4));
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i98 := $shl.i32($i97, 16);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i98, $i95);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($p1, $mul.ref(23, 4));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $i102 := $shl.i32($i101, 24);
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i103 := $or.i32($i102, $i99);
    $p104 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(53268, 1));
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} writel($i103, $p106);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p1, $mul.ref(24, 4));
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i108 := $load.i32($M.0, $p107);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($p1, $mul.ref(25, 4));
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i111 := $shl.i32($i110, 8);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i112 := $or.i32($i111, $i108);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p1, $mul.ref(26, 4));
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i115 := $shl.i32($i114, 16);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i116 := $or.i32($i115, $i112);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($p1, $mul.ref(27, 4));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p117);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $i119 := $shl.i32($i118, 24);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $i120 := $or.i32($i119, $i116);
    $p121 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p122 := $load.ref($M.0, $p121);
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p122, $mul.ref(53272, 1));
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} writel($i120, $p123);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($p1, $mul.ref(28, 4));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($p1, $mul.ref(29, 4));
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i127 := $load.i32($M.0, $p126);
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i128 := $shl.i32($i127, 8);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $i129 := $or.i32($i128, $i125);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($p1, $mul.ref(30, 4));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $i131 := $load.i32($M.0, $p130);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $i132 := $shl.i32($i131, 16);
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i133 := $or.i32($i132, $i129);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($p1, $mul.ref(31, 4));
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    $i136 := $shl.i32($i135, 24);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i137 := $or.i32($i136, $i133);
    $p138 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p139, $mul.ref(53276, 1));
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} writel($i137, $p140);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($p1, $mul.ref(32, 4));
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($p1, $mul.ref(33, 4));
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i145 := $shl.i32($i144, 8);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i146 := $or.i32($i145, $i142);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p1, $mul.ref(34, 4));
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $i149 := $shl.i32($i148, 16);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i149, $i146);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($p1, $mul.ref(35, 4));
    goto corral_source_split_7219;

  corral_source_split_7219:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $i153 := $shl.i32($i152, 24);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i153, $i150);
    $p155 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p156 := $load.ref($M.0, $p155);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($p156, $mul.ref(53280, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} writel($i154, $p157);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($p1, $mul.ref(36, 4));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $i159 := $load.i32($M.0, $p158);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p1, $mul.ref(37, 4));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i162 := $shl.i32($i161, 8);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i163 := $or.i32($i162, $i159);
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($p1, $mul.ref(38, 4));
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i166 := $shl.i32($i165, 16);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i166, $i163);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($p1, $mul.ref(39, 4));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i169 := $load.i32($M.0, $p168);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i170 := $shl.i32($i169, 24);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, $i167);
    $p172 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p173, $mul.ref(53284, 1));
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} writel($i171, $p174);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($p1, $mul.ref(40, 4));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i176 := $load.i32($M.0, $p175);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($p1, $mul.ref(41, 4));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i178 := $load.i32($M.0, $p177);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i179 := $shl.i32($i178, 8);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $i180 := $or.i32($i179, $i176);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($p1, $mul.ref(42, 4));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $i183 := $shl.i32($i182, 16);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i184 := $or.i32($i183, $i180);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($p1, $mul.ref(43, 4));
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.0, $p185);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i187 := $shl.i32($i186, 24);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i187, $i184);
    $p189 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($p190, $mul.ref(53288, 1));
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} writel($i188, $p191);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p1, $mul.ref(44, 4));
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.0, $p192);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($p1, $mul.ref(45, 4));
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i195 := $load.i32($M.0, $p194);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i196 := $shl.i32($i195, 8);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $i197 := $or.i32($i196, $i193);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($p1, $mul.ref(46, 4));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i199 := $load.i32($M.0, $p198);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i200 := $shl.i32($i199, 16);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $i201 := $or.i32($i200, $i197);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($p1, $mul.ref(47, 4));
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i203 := $load.i32($M.0, $p202);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $i204 := $shl.i32($i203, 24);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i205 := $or.i32($i204, $i201);
    $p206 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($p207, $mul.ref(53292, 1));
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} writel($i205, $p208);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($p1, $mul.ref(48, 4));
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i210 := $load.i32($M.0, $p209);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($p1, $mul.ref(49, 4));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i212 := $load.i32($M.0, $p211);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i213 := $shl.i32($i212, 8);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $i214 := $or.i32($i213, $i210);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($p1, $mul.ref(50, 4));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i216 := $load.i32($M.0, $p215);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $i217 := $shl.i32($i216, 16);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i218 := $or.i32($i217, $i214);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($p1, $mul.ref(51, 4));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i220 := $load.i32($M.0, $p219);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i221 := $shl.i32($i220, 24);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i222 := $or.i32($i221, $i218);
    $p223 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($p224, $mul.ref(53296, 1));
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} writel($i222, $p225);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p1, $mul.ref(52, 4));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($p1, $mul.ref(53, 4));
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i229 := $load.i32($M.0, $p228);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i230 := $shl.i32($i229, 8);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i231 := $or.i32($i230, $i227);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($p1, $mul.ref(54, 4));
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i233 := $load.i32($M.0, $p232);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i234 := $shl.i32($i233, 16);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i235 := $or.i32($i234, $i231);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($p1, $mul.ref(55, 4));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i238 := $shl.i32($i237, 24);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i239 := $or.i32($i238, $i235);
    $p240 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($p241, $mul.ref(53300, 1));
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} writel($i239, $p242);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($p1, $mul.ref(56, 4));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.0, $p243);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($p1, $mul.ref(57, 4));
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.0, $p245);
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i247 := $shl.i32($i246, 8);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i248 := $or.i32($i247, $i244);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p249 := $add.ref($p1, $mul.ref(58, 4));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.0, $p249);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $i251 := $shl.i32($i250, 16);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i252 := $or.i32($i251, $i248);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($p1, $mul.ref(59, 4));
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i254 := $load.i32($M.0, $p253);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i255 := $shl.i32($i254, 24);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i256 := $or.i32($i255, $i252);
    $p257 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p258 := $load.ref($M.0, $p257);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($p258, $mul.ref(53304, 1));
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} writel($i256, $p259);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($p1, $mul.ref(60, 4));
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $i261 := $load.i32($M.0, $p260);
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($p1, $mul.ref(61, 4));
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $i263 := $load.i32($M.0, $p262);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i264 := $shl.i32($i263, 8);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $i265 := $or.i32($i264, $i261);
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($p1, $mul.ref(62, 4));
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $i267 := $load.i32($M.0, $p266);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i268 := $shl.i32($i267, 16);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i269 := $or.i32($i268, $i265);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p1, $mul.ref(63, 4));
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $i271 := $load.i32($M.0, $p270);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $i272 := $shl.i32($i271, 24);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $i273 := $or.i32($i272, $i269);
    $p274 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p275 := $load.ref($M.0, $p274);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($p275, $mul.ref(53308, 1));
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1361} writel($i273, $p276);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const i40evf_get_channels: ref;

axiom i40evf_get_channels == $sub.ref(0, 670352);

procedure i40evf_get_channels($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation i40evf_get_channels($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} $p2 := netdev_priv($p0);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i7 := $load.i16($M.0, $p6);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i8 := $zext.i16.i32($i7);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(16, 1));
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i8);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(12, 1));
    goto corral_source_split_7362;

  corral_source_split_7362:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 1);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(28, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 3448)), $mul.ref(2768, 1));
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 36)), $mul.ref(32, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, $i16);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_set_rss_hash_opt: ref;

axiom i40evf_set_rss_hash_opt == $sub.ref(0, 671384);

procedure i40evf_set_rss_hash_opt($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_set_rss_hash_opt($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p20: ref;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i64;
  var $i54: i64;
  var $i53: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i64;
  var $i64: i64;
  var $i63: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i64;
  var $i73: i64;
  var $i72: i64;
  var $p74: ref;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i64;
  var $i82: i64;
  var $i81: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $i88: i64;
  var $i89: i64;
  var $i90: i1;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $i95: i1;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i55: i64;
  var $i103: i32;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i19: i32;
  var vslice_dummy_var_212: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(50176, 1));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1363} $i6 := readl($p5);
    call {:si_unique_call 1364} {:cexpr "tmp"} boogie_si_record_i32($i6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(50180, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1365} $i10 := readl($p9);
    call {:si_unique_call 1366} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i6);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i10);
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $i13 := $shl.i64($i12, 32);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i14 := $or.i64($i11, $i13);
    call {:si_unique_call 1367} {:cexpr "hena"} boogie_si_record_i64($i14);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $i16 := $load.i64($M.0, $p15);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, $sub.i64(0, 241));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, 16);
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 32);
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i27 := $eq.i64($i26, 0);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i29, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i29, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i29, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i29, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i29, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $r := $i19;
    return;

  $bb20:
    assume $i34 == 1;
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $i102 := $or.i64($i14, 105553116266496);
    call {:si_unique_call 1369} {:cexpr "hena"} boogie_si_record_i64($i102);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $i55 := $i102;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i103 := $trunc.i64.i32($i55);
    $p104 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($p105, $mul.ref(50176, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} writel($i103, $p106);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i107 := $lshr.i64($i55, 32);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i64.i32($i107);
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p110 := $load.ref($M.0, $p109);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($p110, $mul.ref(50180, 1));
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} writel($i108, $p111);
    $p112 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $p113 := $load.ref($M.0, $p112);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($p113, $mul.ref(34816, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_212 := readl($p114);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $i19 := 0;
    goto $bb3;

  $bb18:
    assume $i33 == 1;
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $i101 := $or.i64($i14, 103079215104);
    call {:si_unique_call 1368} {:cexpr "hena"} boogie_si_record_i64($i101);
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $i55 := $i101;
    goto $bb61;

  $bb16:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i29, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i29, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb22;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i93 := $load.i64($M.0, $p92);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $i94 := $and.i64($i93, 64);
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i95 := $ne.i64($i94, 0);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb100;

  $bb100:
    assume !($i95 == 1);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i97 := $load.i64($M.0, $p96);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i98 := $and.i64($i97, 128);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i100 := $or.i64($i14, 35184372088832);
    call {:si_unique_call 1382} {:cexpr "hena"} boogie_si_record_i64($i100);
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $i55 := $i100;
    goto $bb61;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i99 == 1;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i95 == 1;
    goto $bb99;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb14:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i29, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i29, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i84 := $load.i64($M.0, $p83);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 64);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb92, $bb94;

  $bb94:
    assume !($i86 == 1);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $i88 := $load.i64($M.0, $p87);
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 128);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i90 := $ne.i64($i89, 0);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i91 := $or.i64($i14, 34359738368);
    call {:si_unique_call 1381} {:cexpr "hena"} boogie_si_record_i64($i91);
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i55 := $i91;
    goto $bb61;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i90 == 1;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i86 == 1;
    goto $bb93;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb29:
    assume $i37 == 1;
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb12:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i29, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i29, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i29, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb41;

  $bb39:
    assume $i41 == 1;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i76 := $and.i64($i75, 192);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i77 := $slt.i64($i76, 192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $eq.i64($i76, 192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb85:
    assume $i78 == 1;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $i82 := $or.i64($i14, 72567767433216);
    call {:si_unique_call 1379} {:cexpr "hena"} boogie_si_record_i64($i82);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i81 := $i82;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i55 := $i81;
    goto $bb61;

  $bb83:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i79 := $eq.i64($i76, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb88, $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    assume !($i79 == 1);
    goto $bb87;

  $bb88:
    assume $i79 == 1;
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i14, $sub.i64(0, 72567767433217));
    call {:si_unique_call 1380} {:cexpr "hena"} boogie_si_record_i64($i80);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    $i81 := $i80;
    goto $bb90;

  $bb37:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i29, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i42 == 1);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i57 := $load.i64($M.0, $p56);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 192);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i59 := $slt.i64($i58, 192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    $i60 := $eq.i64($i58, 192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb65:
    assume $i60 == 1;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i64 := $or.i64($i14, 8796093022208);
    call {:si_unique_call 1375} {:cexpr "hena"} boogie_si_record_i64($i64);
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $i63 := $i64;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $i55 := $i63;
    goto $bb61;

  $bb63:
    assume $i59 == 1;
    assume {:verifier.code 0} true;
    $i61 := $eq.i64($i58, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb67;

  $bb68:
    assume $i61 == 1;
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i14, $sub.i64(0, 8796093022209));
    call {:si_unique_call 1376} {:cexpr "hena"} boogie_si_record_i64($i62);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i63 := $i62;
    goto $bb70;

  $bb42:
    assume $i42 == 1;
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb35:
    assume $i39 == 1;
    assume {:verifier.code 0} true;
    $i43 := $slt.i32($i29, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i29, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb48;

  $bb46:
    assume $i44 == 1;
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $i66 := $load.i64($M.0, $p65);
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i67 := $and.i64($i66, 192);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $i68 := $slt.i64($i67, 192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $eq.i64($i67, 192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i69} true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb75:
    assume $i69 == 1;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $i73 := $or.i64($i14, 70866960384);
    call {:si_unique_call 1377} {:cexpr "hena"} boogie_si_record_i64($i73);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i72 := $i73;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i55 := $i72;
    goto $bb61;

  $bb73:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i70 := $eq.i64($i67, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb77;

  $bb78:
    assume $i70 == 1;
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i71 := $and.i64($i14, $sub.i64(0, 70866960385));
    call {:si_unique_call 1378} {:cexpr "hena"} boogie_si_record_i64($i71);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    $i72 := $i71;
    goto $bb80;

  $bb44:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i29, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb22;

  $bb49:
    assume $i45 == 1;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i48 := $and.i64($i47, 192);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $i49 := $slt.i64($i48, 192);
    assume {:verifier.code 0} true;
    assume {:branchcond $i49} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $eq.i64($i48, 192);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb54:
    assume $i50 == 1;
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i54 := $or.i64($i14, 8589934592);
    call {:si_unique_call 1370} {:cexpr "hena"} boogie_si_record_i64($i54);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $i53 := $i54;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i55 := $i53;
    goto $bb61;

  $bb52:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i48, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb56;

  $bb57:
    assume $i51 == 1;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i14, $sub.i64(0, 8589934593));
    call {:si_unique_call 1371} {:cexpr "hena"} boogie_si_record_i64($i52);
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i53 := $i52;
    goto $bb59;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i19 := $sub.i32(0, 22);
    goto $bb3;
}



const i40evf_get_rss_hash_opts: ref;

axiom i40evf_get_rss_hash_opts == $sub.ref(0, 672416);

procedure i40evf_get_rss_hash_opts($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_get_rss_hash_opts($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var $i37: i64;
  var $i38: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref(50176, 1));
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} $i6 := readl($p5);
    call {:si_unique_call 1384} {:cexpr "tmp"} boogie_si_record_i32($i6);
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p8, $mul.ref(50180, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $i10 := readl($p9);
    call {:si_unique_call 1386} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i6);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i10);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i13 := $shl.i64($i12, 32);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i14 := $or.i64($i11, $i13);
    call {:si_unique_call 1387} {:cexpr "hena"} boogie_si_record_i64($i14);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, 48);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(4, 1));
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32($i17, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i17, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i17, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i17, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i17, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p58, 0);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i59 := $sub.i32(0, 22);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $r := $i59;
    return;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i59 := 0;
    goto $bb57;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb6:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i17, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb17;

  $bb17:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i17, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb14;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb15:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb4:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i17, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb23;

  $bb23:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i17, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb2:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i17, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i17, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i17, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i29 == 1);
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb32:
    assume $i29 == 1;
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i52 := $and.i64($i14, 2199023255552);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $i53 := $ne.i64($i52, 0);
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb53:
    assume $i53 == 1;
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i55 := $load.i64($M.0, $p54);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i56 := $or.i64($i55, 192);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p57, $i56);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb30:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i17, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb36;

  $bb36:
    assume !($i30 == 1);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    $i46 := $and.i64($i14, 8796093022208);
    goto corral_source_split_7529;

  corral_source_split_7529:
    assume {:verifier.code 0} true;
    $i47 := $ne.i64($i46, 0);
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb50:
    assume $i47 == 1;
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i49 := $load.i64($M.0, $p48);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i50 := $or.i64($i49, 192);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, $i50);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i30 == 1;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb28:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i17, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i17, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i32 == 1);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb39:
    assume $i32 == 1;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i14, 2147483648);
    goto corral_source_split_7533;

  corral_source_split_7533:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb47:
    assume $i41 == 1;
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $i43 := $load.i64($M.0, $p42);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i44 := $or.i64($i43, 192);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p45, $i44);
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb37:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i17, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb14;

  $bb41:
    assume $i33 == 1;
    goto corral_source_split_7538;

  corral_source_split_7538:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i14, 8589934592);
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb43:
    assume $i35 == 1;
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i37 := $load.i64($M.0, $p36);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i38 := $or.i64($i37, 192);
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    goto $bb45;
}



const strlcpy: ref;

axiom strlcpy == $sub.ref(0, 673448);

procedure strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation strlcpy($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1388} {:cexpr "strlcpy:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1389} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1390} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_name: ref;

axiom pci_name == $sub.ref(0, 674480);

procedure pci_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation pci_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 2984)), $mul.ref(152, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p2 := dev_name($p1);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 675512);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $p9 := kobject_name($p8);
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7590;

  corral_source_split_7590:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 676544);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 677576);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1393} __VERIFIER_error();
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_1:
    assume !assertsPassed;
    return;
}



const choose_interrupt_2: ref;

axiom choose_interrupt_2 == $sub.ref(0, 678608);

procedure choose_interrupt_2();
  free requires assertsPassed;
  modifies $M.35, $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation choose_interrupt_2()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1394} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1395} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1396} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} ldv_stop();
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    $i18 := $M.44;
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i19 := $M.45;
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $p20 := $M.46;
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} $i21 := ldv_irq_2($i18, $i19, $p20);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    $M.35 := $i21;
    call {:si_unique_call 1400} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i21);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i14 := $M.41;
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i15 := $M.42;
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $p16 := $M.43;
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} $i17 := ldv_irq_2($i14, $i15, $p16);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $M.35 := $i17;
    call {:si_unique_call 1398} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i17);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i10 := $M.38;
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i11 := $M.39;
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $p12 := $M.40;
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} $i13 := ldv_irq_2($i10, $i11, $p12);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $M.35 := $i13;
    call {:si_unique_call 1402} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $i6 := $M.35;
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $i7 := $M.36;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p8 := $M.37;
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} $i9 := ldv_irq_2($i6, $i7, $p8);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $M.35 := $i9;
    call {:si_unique_call 1404} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32($i9);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const ldv_irq_2: ref;

axiom ldv_irq_2 == $sub.ref(0, 679640);

procedure ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation ldv_irq_2($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1406} {:cexpr "ldv_irq_2:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1407} {:cexpr "ldv_irq_2:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1408} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1409} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1410} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} ldv_stop();
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $i7 := i40evf_msix_aq($i1, $p2);
    call {:si_unique_call 1413} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 680672);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_pci_driver_5: ref;

axiom ldv_initialize_pci_driver_5 == $sub.ref(0, 681704);

procedure ldv_initialize_pci_driver_5();
  free requires assertsPassed;
  modifies $M.48, $M.0, $CurrAddr;



implementation ldv_initialize_pci_driver_5()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} $p0 := ldv_zalloc(2976);
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $M.48 := $p0;
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_3: ref;

axiom choose_timer_3 == $sub.ref(0, 682736);

procedure choose_timer_3($p0: ref);
  free requires assertsPassed;
  modifies $M.15;



implementation choose_timer_3($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7660;

  corral_source_split_7660:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(40, 1));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    call {:si_unique_call 1418} devirtbounce.17($p2, $i4);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $M.15 := 2;
    call {:si_unique_call 1420} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(2);
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    return;
}



const ldv_irq_1: ref;

axiom ldv_irq_1 == $sub.ref(0, 683768);

procedure ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation ldv_irq_1($i0: i32, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} {:cexpr "ldv_irq_1:arg:state"} boogie_si_record_i32($i0);
    call {:si_unique_call 1422} {:cexpr "ldv_irq_1:arg:line"} boogie_si_record_i32($i1);
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i0, 0);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1423} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 1424} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    call {:si_unique_call 1425} {:cexpr "tmp"} boogie_si_record_i32($i4);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} ldv_stop();
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, 1);
    goto corral_source_split_7674;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} $i7 := i40evf_msix_clean_rings($i1, $p2);
    call {:si_unique_call 1428} {:cexpr "irq_retval"} boogie_si_record_i32($i7);
    goto corral_source_split_7678;

  corral_source_split_7678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1429} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const choose_interrupt_1: ref;

axiom choose_interrupt_1 == $sub.ref(0, 684800);

procedure choose_interrupt_1();
  free requires assertsPassed;
  modifies $M.5, $CurrAddr;



implementation choose_interrupt_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1431} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1432} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1433} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1442} ldv_stop();
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i18 := $M.11;
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i19 := $M.12;
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $p20 := $M.19;
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i21 := ldv_irq_1($i18, $i19, $p20);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $M.5 := $i21;
    call {:si_unique_call 1437} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i21);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i14 := $M.9;
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $i15 := $M.10;
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p16 := $M.18;
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} $i17 := ldv_irq_1($i14, $i15, $p16);
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $M.5 := $i17;
    call {:si_unique_call 1435} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i17);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i10 := $M.7;
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    $i11 := $M.8;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    $p12 := $M.17;
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} $i13 := ldv_irq_1($i10, $i11, $p12);
    goto corral_source_split_7703;

  corral_source_split_7703:
    assume {:verifier.code 0} true;
    $M.5 := $i13;
    call {:si_unique_call 1439} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i13);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i6 := $M.5;
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i7 := $M.6;
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $p8 := $M.16;
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i9 := ldv_irq_1($i6, $i7, $p8);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $M.5 := $i9;
    call {:si_unique_call 1441} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32($i9);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    goto $bb13;
}



const main: ref;

axiom main == $sub.ref(0, 685832);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.49, $M.50, $M.51, $M.20, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.0, $M.59, $M.60, $M.5, $M.61, $M.48, $M.15, $M.35, $M.62, $M.1, $M.63, $M.64, $M.11, $M.9, $M.7, $M.44, $M.41, $M.38, $M.14, $M.24, $M.36, $M.37, $M.39, $M.40, $M.42, $M.43, $M.45, $M.46, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.18, $M.19, $M.67, $M.66, $M.68, $M.65, $M.28, $M.3, $M.2, $M.4, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $CurrAddr, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, assertsPassed, $M.21;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $p6: ref;
  var $i7: i16;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i32;
  var $i47: i1;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $i61: i32;
  var $i62: i1;
  var $p63: ref;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i16;
  var $i71: i32;
  var $i72: i16;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $i80: i32;
  var $i81: i16;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i16;
  var $i87: i32;
  var $i88: i16;
  var $i89: i32;
  var $i90: i16;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i16;
  var $i96: i32;
  var $i97: i16;
  var $i98: i32;
  var $i99: i16;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $i104: i16;
  var $i105: i32;
  var $i106: i16;
  var $i107: i32;
  var $i108: i16;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var $i113: i16;
  var $i114: i32;
  var $i115: i16;
  var $i116: i32;
  var $i117: i16;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i131: i32;
  var $i132: i1;
  var $p133: ref;
  var $i135: i32;
  var $i136: i1;
  var $p137: ref;
  var $i139: i32;
  var $i140: i1;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $i144: i1;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i153: i32;
  var $i154: i1;
  var $p155: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i161: i32;
  var $i162: i1;
  var $p163: ref;
  var $i164: i32;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $i172: i32;
  var $i173: i32;
  var $i174: i1;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i178: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i187: i1;
  var $i188: i32;
  var $i189: i1;
  var $i190: i1;
  var $i191: i1;
  var $i192: i32;
  var $i193: i1;
  var $i194: i32;
  var $i195: i1;
  var $i196: i32;
  var $i197: i1;
  var $i198: i32;
  var $i199: i32;
  var $i200: i1;
  var $i201: i32;
  var $i202: i1;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i1;
  var $i208: i32;
  var $i209: i1;
  var $i210: i32;
  var $i211: i1;
  var $i212: i1;
  var $i213: i1;
  var $i214: i1;
  var $i215: i1;
  var $i216: i1;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i220: i32;
  var $i221: i32;
  var $i222: i1;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $i231: i32;
  var $i232: i1;
  var $p233: ref;
  var $p234: ref;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i1;
  var $i239: i32;
  var $i240: i1;
  var $p241: ref;
  var $i242: i32;
  var $i243: i32;
  var $i244: i32;
  var $i245: i1;
  var $p246: ref;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i1;
  var $p256: ref;
  var $i257: i32;
  var $i258: i32;
  var $i259: i1;
  var cmdloc_dummy_var_122: [ref]i8;
  var cmdloc_dummy_var_123: [ref]i8;
  var cmdloc_dummy_var_124: [ref]i8;
  var cmdloc_dummy_var_125: [ref]i8;
  var cmdloc_dummy_var_126: [ref]i8;
  var cmdloc_dummy_var_127: [ref]i8;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: ref;
  var vslice_dummy_var_224: ref;
  var vslice_dummy_var_225: ref;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;

  $bb0:
    call {:si_unique_call 1443} $initialize();
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1444} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $p0 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1446} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} $p3 := ldv_zalloc(232);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_7718;

  corral_source_split_7718:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1449} $i5 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1450} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i5);
    call {:si_unique_call 1451} {:cexpr "tmp___0"} boogie_si_record_i16($i5);
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $p6 := ldv_zalloc(1);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1453} $i7 := __VERIFIER_nondet_u16();
    call {:si_unique_call 1454} {:cexpr "smack:ext:__VERIFIER_nondet_u16"} boogie_si_record_i16($i7);
    call {:si_unique_call 1455} {:cexpr "tmp___2"} boogie_si_record_i16($i7);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1456} $i8 := __VERIFIER_nondet_int();
    call {:si_unique_call 1457} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i8);
    call {:si_unique_call 1458} {:cexpr "tmp___3"} boogie_si_record_i32($i8);
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p9 := ldv_zalloc(32);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} ldv_initialize();
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_122 := $M.49;
    call {:si_unique_call 1461} cmdloc_dummy_var_123 := $memset.i8(cmdloc_dummy_var_122, $p11, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.49 := cmdloc_dummy_var_123;
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p1);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_124 := $M.50;
    call {:si_unique_call 1462} cmdloc_dummy_var_125 := $memset.i8(cmdloc_dummy_var_124, $p12, 0, 2, $zext.i32.i64(2), 0 == 1);
    $M.50 := cmdloc_dummy_var_125;
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p2);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_126 := $M.51;
    call {:si_unique_call 1463} cmdloc_dummy_var_127 := $memset.i8(cmdloc_dummy_var_126, $p13, 0, 4, $zext.i32.i64(4), 0 == 1);
    $M.51 := cmdloc_dummy_var_127;
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $M.52 := 0;
    call {:si_unique_call 1465} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $M.53 := 1;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $M.54 := 0;
    call {:si_unique_call 1467} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $M.55 := 1;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $M.56 := 1;
    call {:si_unique_call 1469} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.57 := 1;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $M.58 := 0;
    call {:si_unique_call 1471} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $p59, $i61, $i62, $p63, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $p85, $i86, $i87, $i88, $i89, $i90, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $i108, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $i139, $i140, $p141, $i142, $i143, $i144, $i145, $i146, $p147, $i149, $i150, $p151, $i153, $i154, $p155, $i157, $i158, $p159, $i161, $i162, $p163, $i164, $i165, $p166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $p219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $p227, $i228, $i229, $p230, $i231, $i232, $p233, $p234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $i244, $i245, $p246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $p256, $i257, $i258, $i259, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232 := main_loop_$bb1($p0, $p1, $p2, $p4, $i5, $p6, $i7, $i8, $p10, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $i46, $i47, $p48, $i49, $i50, $p51, $i53, $i54, $p55, $i57, $i58, $p59, $i61, $i62, $p63, $i65, $i66, $p67, $i68, $i69, $i70, $i71, $i72, $i74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i83, $i84, $p85, $i86, $i87, $i88, $i89, $i90, $i92, $i93, $p94, $i95, $i96, $i97, $i98, $i99, $i101, $i102, $p103, $i104, $i105, $i106, $i107, $i108, $i110, $i111, $p112, $i113, $i114, $i115, $i116, $i117, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i131, $i132, $p133, $i135, $i136, $p137, $i139, $i140, $p141, $i142, $i143, $i144, $i145, $i146, $p147, $i149, $i150, $p151, $i153, $i154, $p155, $i157, $i158, $p159, $i161, $i162, $p163, $i164, $i165, $p166, $i167, $i168, $p169, $i170, $i171, $i172, $i173, $i174, $i175, $i176, $i177, $i178, $i180, $i181, $i182, $i183, $i184, $i185, $i186, $i187, $i188, $i189, $i190, $i191, $i192, $i193, $i194, $i195, $i196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $p205, $i206, $i207, $i208, $i209, $i210, $i211, $i212, $i213, $i214, $i215, $i216, $i217, $i218, $p219, $i220, $i221, $i222, $i223, $i224, $i225, $i226, $p227, $i228, $i229, $p230, $i231, $i232, $p233, $p234, $i235, $i236, $i237, $i238, $i239, $i240, $p241, $i242, $i243, $i244, $i245, $p246, $i247, $i248, $i249, $i250, $p251, $i252, $i253, $i254, $i255, $p256, $i257, $i258, $i259, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $slt.i32($i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} ldv_stop();
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb146_dummy;

  $bb9:
    assume $i18 == 1;
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i208 := $M.58;
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $i209 := $ne.i32($i208, 0);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb189:
    assume $i209 == 1;
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1558} $i210 := __VERIFIER_nondet_int();
    call {:si_unique_call 1559} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i210);
    call {:si_unique_call 1560} {:cexpr "tmp___8"} boogie_si_record_i32($i210);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i211 := $slt.i32($i210, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    $i212 := $slt.i32($i210, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i212 == 1);
    assume {:verifier.code 0} true;
    $i213 := $slt.i32($i210, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i210, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    assume !($i214 == 1);
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ldv_stop();
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb198:
    assume $i214 == 1;
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $i254 := $M.58;
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $i255 := $eq.i32($i254, 4);
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb233:
    assume $i255 == 1;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $p256 := $M.48;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} $i257 := i40evf_resume($p256);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.64 := $i257;
    call {:si_unique_call 1582} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i257);
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $i258 := $M.64;
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $i259 := $eq.i32($i258, 0);
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  $bb236:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb235:
    assume $i259 == 1;
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb196:
    assume $i213 == 1;
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    $i239 := $M.58;
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $i240 := $eq.i32($i239, 4);
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    $i244 := $M.58;
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i245 := $eq.i32($i244, 3);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i249 := $M.58;
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $i250 := $eq.i32($i249, 2);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb230:
    assume $i250 == 1;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p251 := $M.48;
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} i40evf_remove($p251);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $i252 := $M.54;
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $i253 := $sub.i32($i252, 1);
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $M.54 := $i253;
    call {:si_unique_call 1580} {:cexpr "ref_cnt"} boogie_si_record_i32($i253);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb227:
    assume $i245 == 1;
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $p246 := $M.48;
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} i40evf_remove($p246);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i247 := $M.54;
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i248 := $sub.i32($i247, 1);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.54 := $i248;
    call {:si_unique_call 1577} {:cexpr "ref_cnt"} boogie_si_record_i32($i248);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb224:
    assume $i240 == 1;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $p241 := $M.48;
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} i40evf_remove($p241);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i242 := $M.54;
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    $i243 := $sub.i32($i242, 1);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.54 := $i243;
    call {:si_unique_call 1574} {:cexpr "ref_cnt"} boogie_si_record_i32($i243);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb194:
    assume $i212 == 1;
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $i231 := $M.58;
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i232 := $eq.i32($i231, 2);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb218:
    assume $i232 == 1;
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p233 := $M.48;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $i235 := $load.i32($M.51, $p234);
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} $i236 := i40evf_suspend($p233, $i235);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.63 := $i236;
    call {:si_unique_call 1570} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i236);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i237 := $M.63;
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i238 := $eq.i32($i237, 0);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  $bb221:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb220:
    assume $i238 == 1;
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $M.58 := 4;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb192:
    assume $i211 == 1;
    assume {:verifier.code 0} true;
    $i215 := $slt.i32($i210, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i215 == 1);
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $i225 := $M.58;
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 4);
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    $i228 := $M.58;
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    $i229 := $eq.i32($i228, 2);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb215:
    assume $i229 == 1;
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p230 := $M.48;
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} i40evf_shutdown($p230);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb212:
    assume $i226 == 1;
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $p227 := $M.48;
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} i40evf_shutdown($p227);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1566} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb201:
    assume $i215 == 1;
    assume {:verifier.code 0} true;
    $i216 := $eq.i32($i210, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    assume !($i216 == 1);
    goto $bb200;

  $bb203:
    assume $i216 == 1;
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i217 := $M.58;
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 1);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb205:
    assume $i218 == 1;
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $p219 := $M.48;
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} $i220 := i40evf_probe($p219, $p10);
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $M.62 := $i220;
    call {:si_unique_call 1562} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i220);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i221 := $M.62;
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 0);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb207:
    assume $i222 == 1;
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8138;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    $i223 := $M.54;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $i224 := $add.i32($i223, 1);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $M.54 := $i224;
    call {:si_unique_call 1564} {:cexpr "ref_cnt"} boogie_si_record_i32($i224);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i206 := $M.57;
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb186:
    assume $i207 == 1;
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} choose_interrupt_2();
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb5:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $i203 := $M.56;
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i203, 0);
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb183:
    assume $i204 == 1;
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $p205 := $M.14;
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} choose_timer_3($p205);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb12:
    assume $i19 == 1;
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $i186 := $M.55;
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i186, 0);
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb153:
    assume $i187 == 1;
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1541} $i188 := __VERIFIER_nondet_int();
    call {:si_unique_call 1542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i188);
    call {:si_unique_call 1543} {:cexpr "tmp___7"} boogie_si_record_i32($i188);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i189 := $slt.i32($i188, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i188, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_stop();
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb158:
    assume $i190 == 1;
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i196 := $M.55;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, 1);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb171:
    assume $i197 == 1;
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} $i198 := i40evf_init_module();
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $M.61 := $i198;
    call {:si_unique_call 1548} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i198);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $i199 := $M.61;
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i201 := $M.61;
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 0);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb176:
    assume $i202 == 1;
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_initialize_pci_driver_5();
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume $i200 == 1;
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 1549} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1546} ldv_check_final_state();
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb156:
    assume $i189 == 1;
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i188, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume {:verifier.code 0} true;
    assume !($i191 == 1);
    goto $bb160;

  $bb161:
    assume $i191 == 1;
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i192 := $M.55;
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 2);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i193 == 1);
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb163:
    assume $i193 == 1;
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i194 := $M.54;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 0);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i195 == 1);
    goto $bb165;

  $bb166:
    assume $i195 == 1;
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1544} i40evf_exit_module();
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $M.55 := 3;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb3:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i21 == 1);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i184 := $M.53;
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb150:
    assume $i185 == 1;
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} choose_interrupt_1();
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb16:
    assume $i21 == 1;
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $i182 := $M.52;
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $i183 := $ne.i32($i182, 0);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb147:
    assume $i183 == 1;
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} ldv_main_exported_4();
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb14:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb11;

  $bb18:
    assume $i22 == 1;
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $i23 := $M.20;
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} $i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 1476} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i25);
    call {:si_unique_call 1477} {:cexpr "tmp___6"} boogie_si_record_i32($i25);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i25, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i25, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i25, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i25, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i25, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} ldv_stop();
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb31:
    assume $i30 == 1;
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i177 := $M.20;
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 2);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb140:
    assume $i178 == 1;
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_232 := ldv_ndo_uninit_6();
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i180 := $M.54;
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32($i180, 1);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $M.54 := $i181;
    call {:si_unique_call 1537} {:cexpr "ref_cnt"} boogie_si_record_i32($i181);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb29:
    assume $i29 == 1;
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i170 := $M.20;
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb134:
    assume $i171 == 1;
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} $i172 := ldv_ndo_init_6();
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.60 := $i172;
    call {:si_unique_call 1532} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i172);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $i173 := $M.60;
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 0);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i174 == 1;
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i175 := $M.54;
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i176 := $add.i32($i175, 1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.54 := $i176;
    call {:si_unique_call 1534} {:cexpr "ref_cnt"} boogie_si_record_i32($i176);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb27:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i25, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i31 == 1);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $i161 := $M.20;
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $i162 := $eq.i32($i161, 1);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    $i164 := $M.20;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i165 := $eq.i32($i164, 3);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i167 := $M.20;
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 2);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  $bb132:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb131:
    assume $i168 == 1;
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p169 := $M.24;
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} i40evf_tx_timeout($p169);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    goto $bb133;

  $bb128:
    assume $i165 == 1;
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    $p166 := $M.24;
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} i40evf_tx_timeout($p166);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    goto $bb130;

  $bb125:
    assume $i162 == 1;
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $p163 := $M.24;
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} i40evf_tx_timeout($p163);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb34:
    assume $i31 == 1;
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $i149 := $M.20;
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 1);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i153 := $M.20;
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $i154 := $eq.i32($i153, 3);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  $bb120:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i157 := $M.20;
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 2);
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb122:
    assume $i158 == 1;
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p159 := $M.24;
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} vslice_dummy_var_231 := i40evf_set_mac($p159, $p6);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb119:
    assume $i154 == 1;
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p155 := $M.24;
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} vslice_dummy_var_230 := i40evf_set_mac($p155, $p6);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb121;

  $bb116:
    assume $i150 == 1;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $p151 := $M.24;
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} vslice_dummy_var_229 := i40evf_set_mac($p151, $p6);
    goto corral_source_split_7993;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb25:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i25, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i33 == 1);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $i145 := $M.20;
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 3);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb113:
    assume $i146 == 1;
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    $p147 := $M.24;
    goto corral_source_split_7987;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} vslice_dummy_var_228 := i40evf_xmit_frame($p4, $p147);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb38:
    assume $i33 == 1;
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i139 := $M.20;
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i139, 2);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb107:
    assume $i140 == 1;
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p141 := $M.24;
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $i142 := i40evf_open($p141);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $M.59 := $i142;
    call {:si_unique_call 1515} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i142);
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $i143 := $M.59;
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $i144 := $eq.i32($i143, 0);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb109:
    assume $i144 == 1;
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb36:
    assume $i32 == 1;
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $i131 := $M.20;
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i131, 3);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i135 := $M.20;
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $i136 := $eq.i32($i135, 2);
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb104:
    assume $i136 == 1;
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $p137 := $M.24;
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} vslice_dummy_var_227 := i40evf_change_mtu($p137, $i8);
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1513} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    goto $bb106;

  $bb101:
    assume $i132 == 1;
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $p133 := $M.24;
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} vslice_dummy_var_226 := i40evf_change_mtu($p133, $i8);
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb23:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i25, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i36 == 1);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    $i119 := $M.20;
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 1);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    $i123 := $M.20;
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 3);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    $i127 := $M.20;
    goto corral_source_split_7955;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 2);
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb98:
    assume $i128 == 1;
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $p129 := $M.24;
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_225 := i40evf_get_stats($p129);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb95:
    assume $i124 == 1;
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $p125 := $M.24;
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vslice_dummy_var_224 := i40evf_get_stats($p125);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb92:
    assume $i120 == 1;
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $p121 := $M.24;
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} vslice_dummy_var_223 := i40evf_get_stats($p121);
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb94;

  $bb44:
    assume $i36 == 1;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $i92 := $M.20;
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $i101 := $M.20;
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 3);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $i110 := $M.20;
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 2);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb89:
    assume $i111 == 1;
    goto corral_source_split_7932;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    $p112 := $M.24;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $i113 := $load.i16($M.49, $p0);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i5);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i16($i116);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} vslice_dummy_var_222 := i40evf_vlan_rx_add_vid($p112, $i115, $i117);
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb86:
    assume $i102 == 1;
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $p103 := $M.24;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $i104 := $load.i16($M.49, $p0);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i105 := $zext.i16.i32($i104);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i32.i16($i105);
    goto corral_source_split_7923;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i5);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} vslice_dummy_var_221 := i40evf_vlan_rx_add_vid($p103, $i106, $i108);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb83:
    assume $i93 == 1;
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p94 := $M.24;
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $i95 := $load.i16($M.49, $p0);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i5);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i16($i98);
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} vslice_dummy_var_220 := i40evf_vlan_rx_add_vid($p94, $i97, $i99);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb42:
    assume $i35 == 1;
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $i65 := $M.20;
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i66 := $eq.i32($i65, 1);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i74 := $M.20;
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 3);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $i83 := $M.20;
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 2);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb80:
    assume $i84 == 1;
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $p85 := $M.24;
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i86 := $load.i16($M.50, $p1);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i88 := $trunc.i32.i16($i87);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i7);
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i89);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} vslice_dummy_var_219 := i40evf_vlan_rx_kill_vid($p85, $i88, $i90);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1497} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb77:
    assume $i75 == 1;
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $p76 := $M.24;
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.50, $p1);
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i78);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i7);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i81 := $trunc.i32.i16($i80);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} vslice_dummy_var_218 := i40evf_vlan_rx_kill_vid($p76, $i79, $i81);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb74:
    assume $i66 == 1;
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p67 := $M.24;
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.50, $p1);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $i70 := $trunc.i32.i16($i69);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i7);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i16($i71);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} vslice_dummy_var_217 := i40evf_vlan_rx_kill_vid($p67, $i70, $i72);
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb40:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i38 == 1);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $i53 := $M.20;
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 1);
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $i57 := $M.20;
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 3);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i61 := $M.20;
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 2);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb71:
    assume $i62 == 1;
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $p63 := $M.24;
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} vslice_dummy_var_216 := eth_validate_addr($p63);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb68:
    assume $i58 == 1;
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p59 := $M.24;
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} vslice_dummy_var_215 := eth_validate_addr($p59);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb65:
    assume $i54 == 1;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $p55 := $M.24;
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} vslice_dummy_var_214 := eth_validate_addr($p55);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb48:
    assume $i38 == 1;
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $i49 := $M.20;
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 3);
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb62:
    assume $i50 == 1;
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $p51 := $M.24;
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} vslice_dummy_var_213 := i40evf_close($p51);
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb46:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb33;

  $bb50:
    assume $i39 == 1;
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i40 := $M.20;
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i40, 1);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i43 := $M.20;
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 3);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i46 := $M.20;
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32($i46, 2);
    goto corral_source_split_7837;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb58:
    assume $i47 == 1;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p48 := $M.24;
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} i40evf_set_rx_mode($p48);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume $i44 == 1;
    goto corral_source_split_7831;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    $p45 := $M.24;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} i40evf_set_rx_mode($p45);
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i41 == 1;
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $p42 := $M.24;
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} i40evf_set_rx_mode($p42);
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb146_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} $i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 1473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i14);
    call {:si_unique_call 1474} {:cexpr "tmp___5"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const __VERIFIER_nondet_u16: ref;

axiom __VERIFIER_nondet_u16 == $sub.ref(0, 686864);

procedure __VERIFIER_nondet_u16() returns ($r: i16);



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 687896);

procedure ldv_initialize();
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_initialize()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $p0 := $M.2;
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} ldv_set_init($p0);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    return;
}



const ldv_ndo_init_6: ref;

axiom ldv_ndo_init_6 == $sub.ref(0, 688928);

procedure ldv_ndo_init_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_init_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1587} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1588} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_ndo_uninit_6: ref;

axiom ldv_ndo_uninit_6 == $sub.ref(0, 689960);

procedure ldv_ndo_uninit_6() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_ndo_uninit_6() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1589} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1590} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_main_exported_4: ref;

axiom ldv_main_exported_4 == $sub.ref(0, 690992);

procedure ldv_main_exported_4();
  free requires assertsPassed;
  modifies $M.52, $M.0, $M.14, $M.15, $CurrAddr, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3;



implementation ldv_main_exported_4()
{
  var $i0: i32;
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i1;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p60: ref;
  var $p61: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i75: i32;
  var $i76: i1;
  var $p77: ref;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $i83: i32;
  var $i84: i1;
  var $p85: ref;
  var $i87: i32;
  var $i88: i1;
  var $p89: ref;
  var $p90: ref;
  var $i92: i32;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i110: i32;
  var $i111: i1;
  var $p112: ref;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;
  var vslice_dummy_var_244: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1591} $i0 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1592} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i0);
    call {:si_unique_call 1593} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} $p1 := ldv_zalloc(4);
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1595} $i3 := __VERIFIER_nondet_u32();
    call {:si_unique_call 1596} {:cexpr "smack:ext:__VERIFIER_nondet_u32"} boogie_si_record_i32($i3);
    call {:si_unique_call 1597} {:cexpr "tmp___1"} boogie_si_record_i32($i3);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} $p4 := ldv_zalloc(1);
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} $p5 := ldv_zalloc(4);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} $p7 := ldv_zalloc(8);
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} $p9 := ldv_zalloc(1);
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1602} $p10 := ldv_zalloc(1);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} $p11 := ldv_zalloc(4);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1604} $i13 := __VERIFIER_nondet_int();
    call {:si_unique_call 1605} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i13);
    call {:si_unique_call 1606} {:cexpr "tmp___8"} boogie_si_record_i32($i13);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} $p14 := ldv_zalloc(36);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} $p16 := ldv_zalloc(196);
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} $p18 := ldv_zalloc(44);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} $p20 := ldv_zalloc(8);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1611} $i22 := __VERIFIER_nondet_int();
    call {:si_unique_call 1612} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i22);
    call {:si_unique_call 1613} {:cexpr "tmp___13"} boogie_si_record_i32($i22);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i22, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $slt.i32($i22, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i22, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i22, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i22, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i22, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} ldv_stop();
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume $i28 == 1;
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i110 := $M.52;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i111 := $eq.i32($i110, 1);
    goto corral_source_split_8256;

  corral_source_split_8256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb93:
    assume $i111 == 1;
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p112 := $M.65;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vslice_dummy_var_244 := ethtool_op_get_link($p112);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i107 := $M.52;
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 1);
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    assume {:branchcond $i108} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb90:
    assume $i108 == 1;
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $p109 := $M.65;
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} i40evf_get_channels($p109, $p15);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1647} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i102 := $M.52;
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 1);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb87:
    assume $i103 == 1;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $p104 := $M.65;
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    $p105 := $M.68;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} vslice_dummy_var_243 := i40evf_set_ringparam($p104, $p105);
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb6:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i22, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i29 == 1);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $i98 := $M.52;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 1);
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb84:
    assume $i99 == 1;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    $p100 := $M.65;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1642} vslice_dummy_var_242 := i40evf_get_msglevel($p100);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1643} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb15:
    assume $i29 == 1;
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    $i95 := $M.52;
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 1);
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb81:
    assume $i96 == 1;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    $p97 := $M.65;
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} i40evf_get_strings($p97, $i0, $p9);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1641} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb4:
    assume $i24 == 1;
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i22, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i22, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i31 == 1);
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $i92 := $M.52;
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 1);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb78:
    assume $i93 == 1;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $p94 := $M.65;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} i40evf_set_msglevel($p94, $i3);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb19:
    assume $i31 == 1;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $i87 := $M.52;
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 1);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb75:
    assume $i88 == 1;
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    $p89 := $M.65;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $p90 := $M.67;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} vslice_dummy_var_241 := i40evf_set_coalesce($p89, $p90);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb17:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i22, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i32 == 1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    $i83 := $M.52;
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 1);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb72:
    assume $i84 == 1;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $p85 := $M.65;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1634} vslice_dummy_var_240 := i40evf_get_rxfh_indir_size($p85);
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb21:
    assume $i32 == 1;
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i79 := $M.52;
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 1);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb69:
    assume $i80 == 1;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $p81 := $M.65;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} vslice_dummy_var_239 := i40evf_get_settings($p81, $p19);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1633} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb2:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i33 := $slt.i32($i22, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    $i34 := $slt.i32($i22, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i22, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $slt.i32($i22, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i36 == 1);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i75 := $M.52;
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i76 := $eq.i32($i75, 1);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb66:
    assume $i76 == 1;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    $p77 := $M.65;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1630} vslice_dummy_var_238 := i40evf_get_sset_count($p77, $i13);
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1631} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb29:
    assume $i36 == 1;
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $i71 := $M.52;
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i71, 1);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb63:
    assume $i72 == 1;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    $p73 := $M.65;
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1628} vslice_dummy_var_237 := i40evf_get_rxfh($p73, $p6, $p4);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1629} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb27:
    assume $i35 == 1;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i67 := $M.52;
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 1);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb60:
    assume $i68 == 1;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $p69 := $M.65;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1626} vslice_dummy_var_236 := i40evf_set_rxfh($p69, $p12, $p10);
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1627} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb25:
    assume $i34 == 1;
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i22, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i37 == 1);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i63 := $M.52;
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i64 := $eq.i32($i63, 1);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb57:
    assume $i64 == 1;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $p65 := $M.65;
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $p66 := $M.68;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} i40evf_get_ringparam($p65, $p66);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1625} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb31:
    assume $i37 == 1;
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i58 := $M.52;
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i58, 1);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb54:
    assume $i59 == 1;
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $p60 := $M.65;
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    $p61 := $M.67;
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} vslice_dummy_var_235 := i40evf_get_coalesce($p60, $p61);
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb23:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $i38 := $slt.i32($i22, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $slt.i32($i22, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i39 == 1);
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $i55 := $M.52;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i55, 1);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb51:
    assume $i56 == 1;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $p57 := $M.65;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} i40evf_get_ethtool_stats($p57, $p21, $p8);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb35:
    assume $i39 == 1;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i50 := $M.52;
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb48:
    assume $i51 == 1;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $p52 := $M.65;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $p53 := $M.66;
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} vslice_dummy_var_234 := i40evf_get_rxnfc($p52, $p53, $p2);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb33:
    assume $i38 == 1;
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i22, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i40 == 1);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i45 := $M.52;
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i45, 1);
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb45:
    assume $i46 == 1;
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    $p47 := $M.65;
    goto corral_source_split_8324;

  corral_source_split_8324:
    assume {:verifier.code 0} true;
    $p48 := $M.66;
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_233 := i40evf_set_rxnfc($p47, $p48);
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb37:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i41 := $eq.i32($i22, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb14;

  $bb39:
    assume $i41 == 1;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i42 := $M.52;
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 1);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb41:
    assume $i43 == 1;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $p44 := $M.65;
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} i40evf_get_drvinfo($p44, $p17);
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    goto $bb43;
}



const i40evf_exit_module: ref;

axiom i40evf_exit_module == $sub.ref(0, 692024);

procedure i40evf_exit_module();
  free requires assertsPassed;



implementation i40evf_exit_module()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} pci_unregister_driver(i40evf_driver);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    return;
}



const i40evf_init_module: ref;

axiom i40evf_init_module == $sub.ref(0, 693056);

procedure i40evf_init_module() returns ($r: i32);
  free requires assertsPassed;



implementation i40evf_init_module() returns ($r: i32)
{
  var $i2: i32;
  var vslice_dummy_var_245: i32;
  var vslice_dummy_var_246: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} vslice_dummy_var_245 := printk.ref.ref.ref(.str.68, i40evf_driver_string, i40evf_driver_version);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} vslice_dummy_var_246 := printk.ref.ref(.str.69, i40evf_copyright);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} $i2 := __pci_register_driver(i40evf_driver, __this_module, .str.70);
    call {:si_unique_call 1655} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_initialize_ethtool_ops_4: ref;

axiom ldv_initialize_ethtool_ops_4 == $sub.ref(0, 694088);

procedure ldv_initialize_ethtool_ops_4();
  free requires assertsPassed;
  modifies $M.67, $M.66, $M.68, $M.65, $M.0, $CurrAddr;



implementation ldv_initialize_ethtool_ops_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} $p0 := ldv_zalloc(92);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $M.67 := $p0;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} $p2 := ldv_zalloc(192);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.66 := $p2;
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} $p4 := ldv_zalloc(36);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $M.68 := $p4;
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} $p6 := ldv_zalloc(3264);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $M.65 := $p6;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 695120);

procedure ldv_check_final_state();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_final_state()
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p0 := $M.2;
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} $i1 := ldv_set_is_empty($p0);
    call {:si_unique_call 1661} {:cexpr "tmp___7"} boogie_si_record_i32($i1);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} ldv_error();
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv_set_is_empty: ref;

axiom ldv_set_is_empty == $sub.ref(0, 696152);

procedure ldv_set_is_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ldv_set_is_empty($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    $i1 := $M.3;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 0);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __pci_register_driver: ref;

axiom __pci_register_driver == $sub.ref(0, 697184);

procedure __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __pci_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1663} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1664} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const pci_unregister_driver: ref;

axiom pci_unregister_driver == $sub.ref(0, 698216);

procedure pci_unregister_driver($p0: ref);
  free requires assertsPassed;



implementation pci_unregister_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_nondet_u32: ref;

axiom __VERIFIER_nondet_u32 == $sub.ref(0, 699248);

procedure __VERIFIER_nondet_u32() returns ($r: i32);



const ldv_set_init: ref;

axiom ldv_set_init == $sub.ref(0, 700280);

procedure ldv_set_init($p0: ref);
  free requires assertsPassed;
  modifies $M.3;



implementation ldv_set_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    $M.3 := 0;
    call {:si_unique_call 1665} {:cexpr "last_index"} boogie_si_record_i32(0);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 701312);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1666} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 1} true;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 702344);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 703376);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 704408);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 705440);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 706472);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 707504);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 708536);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 709568);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 710600);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 711632);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __VERIFIER_nondet_unsigned_short: ref;

axiom __VERIFIER_nondet_unsigned_short == $sub.ref(0, 712664);

procedure __VERIFIER_nondet_unsigned_short() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_short() returns ($r: i16)
{
  var $i0: i16;
  var $i1: i32;
  var $i2: i1;
  var $i4: i32;
  var $i5: i1;
  var $i3: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1667} $i0 := __SMACK_nondet_unsigned_short();
    call {:si_unique_call 1668} {:cexpr "smack:ext:__SMACK_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1669} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $i2 := $sge.i32($i1, 0);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $i3 := 0;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 1} true;
    $i6 := $zext.i1.i32($i3);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1670} __VERIFIER_assume($i6);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 1} true;
    $i4 := $zext.i16.i32($i0);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 1} true;
    $i5 := $sle.i32($i4, 65535);
    assume {:verifier.code 0} true;
    $i3 := $i5;
    goto $bb3;
}



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 713696);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 714728);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 715760);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1671} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1672} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1673} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1674} __VERIFIER_assume($i4);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 716792);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 717824);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 718856);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 719888);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8489;

  corral_source_split_8489:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1675} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1676} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1677} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1678} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1679} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1680} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1681} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1682} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1683} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1684} __VERIFIER_assume($i7);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1685} __VERIFIER_assume($i11);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 720920);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 721952);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 722984);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 724016);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 725048);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 726080);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1686} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1687} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1688} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1689} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1690} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1691} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1692} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1693} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1694} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_8515;

  corral_source_split_8515:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1695} __VERIFIER_assume($i7);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_8523;

  corral_source_split_8523:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1696} __VERIFIER_assume($i11);
    goto corral_source_split_8531;

  corral_source_split_8531:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 727112);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 728144);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 729176);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 730208);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 731240);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 732272);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 733304);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 734336);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 735368);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1697} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1698} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1699} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1700} __VERIFIER_assume($i10);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_ushort: ref;

axiom __VERIFIER_nondet_ushort == $sub.ref(0, 736400);

procedure __VERIFIER_nondet_ushort() returns ($r: i16);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ushort() returns ($r: i16)
{
  var $i0: i16;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1701} $i0 := __VERIFIER_nondet_unsigned_short();
    call {:si_unique_call 1702} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_short"} boogie_si_record_i16($i0);
    call {:si_unique_call 1703} {:cexpr "x"} boogie_si_record_i16($i0);
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 737432);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1704} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1705} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1706} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 738464);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1707} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1708} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1709} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 739496);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1710} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1711} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 740528);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 741560);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1712} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1713} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 742592);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 743624);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 744656);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_128: [ref]i8;
  var cmdloc_dummy_var_129: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1714} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1715} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1716} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1717} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1718} $p6 := malloc($i5);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_128 := $M.0;
    call {:si_unique_call 1719} cmdloc_dummy_var_129 := $memset.i8(cmdloc_dummy_var_128, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_129;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 745688);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 746720);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.11, $M.5, $M.15, $M.35, $M.9, $M.7, $M.44, $M.41, $M.38, $M.0, $M.14, $M.24, $M.36, $M.37, $M.39, $M.40, $M.42, $M.43, $M.45, $M.46, $M.48, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.18, $M.19, $M.20, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.67, $M.66, $M.68, $M.65, $M.28, $M.3, $M.2, $M.4, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84;



implementation __SMACK_static_init()
{

  $bb0:
    $M.11 := 0;
    call {:si_unique_call 1720} {:cexpr "ldv_irq_1_3"} boogie_si_record_i32(0);
    $M.5 := 0;
    call {:si_unique_call 1721} {:cexpr "ldv_irq_1_0"} boogie_si_record_i32(0);
    $M.15 := 0;
    call {:si_unique_call 1722} {:cexpr "ldv_timer_state_3"} boogie_si_record_i32(0);
    $M.35 := 0;
    call {:si_unique_call 1723} {:cexpr "ldv_irq_2_0"} boogie_si_record_i32(0);
    $M.9 := 0;
    call {:si_unique_call 1724} {:cexpr "ldv_irq_1_2"} boogie_si_record_i32(0);
    call {:si_unique_call 1725} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.7 := 0;
    call {:si_unique_call 1726} {:cexpr "ldv_irq_1_1"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1727} {:cexpr "ldv_irq_2_3"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1728} {:cexpr "ldv_irq_2_2"} boogie_si_record_i32(0);
    $M.38 := 0;
    call {:si_unique_call 1729} {:cexpr "ldv_irq_2_1"} boogie_si_record_i32(0);
    $M.0 := $store.i8($M.0, i40evf_driver_name, 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_name, $mul.ref(0, 7)), $mul.ref(1, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_name, $mul.ref(0, 7)), $mul.ref(2, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_name, $mul.ref(0, 7)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_name, $mul.ref(0, 7)), $mul.ref(4, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_name, $mul.ref(0, 7)), $mul.ref(5, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_name, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i8($M.0, i40evf_driver_version, 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_version, $mul.ref(0, 7)), $mul.ref(1, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_version, $mul.ref(0, 7)), $mul.ref(2, 1)), 57);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_version, $mul.ref(0, 7)), $mul.ref(3, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_version, $mul.ref(0, 7)), $mul.ref(4, 1)), 51);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_version, $mul.ref(0, 7)), $mul.ref(5, 1)), 52);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_version, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    $M.14 := $0.ref;
    $M.24 := $0.ref;
    $M.36 := 0;
    call {:si_unique_call 1730} {:cexpr "ldv_irq_line_2_0"} boogie_si_record_i32(0);
    $M.37 := $0.ref;
    $M.39 := 0;
    call {:si_unique_call 1731} {:cexpr "ldv_irq_line_2_1"} boogie_si_record_i32(0);
    $M.40 := $0.ref;
    $M.42 := 0;
    call {:si_unique_call 1732} {:cexpr "ldv_irq_line_2_2"} boogie_si_record_i32(0);
    $M.43 := $0.ref;
    $M.45 := 0;
    call {:si_unique_call 1733} {:cexpr "ldv_irq_line_2_3"} boogie_si_record_i32(0);
    $M.46 := $0.ref;
    $M.48 := $0.ref;
    $M.6 := 0;
    call {:si_unique_call 1734} {:cexpr "ldv_irq_line_1_0"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1735} {:cexpr "ldv_irq_line_1_1"} boogie_si_record_i32(0);
    $M.10 := 0;
    call {:si_unique_call 1736} {:cexpr "ldv_irq_line_1_2"} boogie_si_record_i32(0);
    $M.12 := 0;
    call {:si_unique_call 1737} {:cexpr "ldv_irq_line_1_3"} boogie_si_record_i32(0);
    $M.16 := $0.ref;
    $M.17 := $0.ref;
    $M.18 := $0.ref;
    $M.19 := $0.ref;
    $M.20 := 0;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 1741} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 1743} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 1745} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 1746} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.60 := 0;
    call {:si_unique_call 1747} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.61 := 0;
    call {:si_unique_call 1748} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.62 := 0;
    call {:si_unique_call 1749} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.63 := 0;
    call {:si_unique_call 1750} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.64 := 0;
    call {:si_unique_call 1751} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.67 := $0.ref;
    $M.66 := $0.ref;
    $M.68 := $0.ref;
    $M.65 := $0.ref;
    $M.28 := $store.i8($M.28, i40evf_ptype_lookup, 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(0, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(0, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(1, 4)), $mul.ref(0, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(1, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(1, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(1, 4)), $mul.ref(3, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(2, 4)), $mul.ref(0, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(2, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(2, 4)), $mul.ref(2, 1)), 40);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(2, 4)), $mul.ref(3, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(3, 4)), $mul.ref(0, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(3, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(3, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(3, 4)), $mul.ref(3, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(4, 4)), $mul.ref(0, 1)), 4);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(4, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(4, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(4, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(5, 4)), $mul.ref(0, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(5, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(5, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(5, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(6, 4)), $mul.ref(0, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(6, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(6, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(6, 4)), $mul.ref(3, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(7, 4)), $mul.ref(0, 1)), 7);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(7, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(7, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(7, 4)), $mul.ref(3, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(8, 4)), $mul.ref(0, 1)), 8);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(8, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(8, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(8, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(9, 4)), $mul.ref(0, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(9, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(9, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(9, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(10, 4)), $mul.ref(0, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(10, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(10, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(10, 4)), $mul.ref(3, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(11, 4)), $mul.ref(0, 1)), 11);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(11, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(11, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(11, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(12, 4)), $mul.ref(0, 1)), 12);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(12, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(12, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(12, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(13, 4)), $mul.ref(0, 1)), 13);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(13, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(13, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(13, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(14, 4)), $mul.ref(0, 1)), 14);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(14, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(14, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(14, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(15, 4)), $mul.ref(0, 1)), 15);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(15, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(15, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(15, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(16, 4)), $mul.ref(0, 1)), 16);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(16, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(16, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(16, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(17, 4)), $mul.ref(0, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(17, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(17, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(17, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(18, 4)), $mul.ref(0, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(18, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(18, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(18, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(19, 4)), $mul.ref(0, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(19, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(19, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(19, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(20, 4)), $mul.ref(0, 1)), 20);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(20, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(20, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(20, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(21, 4)), $mul.ref(0, 1)), 21);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(21, 4)), $mul.ref(1, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(21, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(21, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(22, 4)), $mul.ref(0, 1)), 22);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(22, 4)), $mul.ref(1, 1)), 11);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(22, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(22, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(23, 4)), $mul.ref(0, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(23, 4)), $mul.ref(1, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(23, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(23, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(24, 4)), $mul.ref(0, 1)), 24);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(24, 4)), $mul.ref(1, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(24, 4)), $mul.ref(2, 1)), 8);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(24, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(25, 4)), $mul.ref(0, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(25, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(25, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(25, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(26, 4)), $mul.ref(0, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(26, 4)), $mul.ref(1, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(26, 4)), $mul.ref(2, 1)), 16);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(26, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(27, 4)), $mul.ref(0, 1)), 27);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(27, 4)), $mul.ref(1, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(27, 4)), $mul.ref(2, 1)), 24);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(27, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(28, 4)), $mul.ref(0, 1)), 28);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(28, 4)), $mul.ref(1, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(28, 4)), $mul.ref(2, 1)), 32);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(28, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(29, 4)), $mul.ref(0, 1)), 29);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(29, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(29, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(29, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(30, 4)), $mul.ref(0, 1)), 30);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(30, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(30, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(30, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(31, 4)), $mul.ref(0, 1)), 31);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(31, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(31, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(31, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(32, 4)), $mul.ref(0, 1)), 32);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(32, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(32, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(32, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(33, 4)), $mul.ref(0, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(33, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(33, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(33, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(34, 4)), $mul.ref(0, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(34, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(34, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(34, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(35, 4)), $mul.ref(0, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(35, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(35, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(35, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(36, 4)), $mul.ref(0, 1)), 36);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(36, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(36, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(36, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(37, 4)), $mul.ref(0, 1)), 37);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(37, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(37, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(37, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(38, 4)), $mul.ref(0, 1)), 38);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(38, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(38, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(38, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(39, 4)), $mul.ref(0, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(39, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(39, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(39, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(40, 4)), $mul.ref(0, 1)), 40);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(40, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(40, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(40, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(41, 4)), $mul.ref(0, 1)), 41);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(41, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(41, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(41, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(42, 4)), $mul.ref(0, 1)), 42);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(42, 4)), $mul.ref(1, 1)), 19);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(42, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(42, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(43, 4)), $mul.ref(0, 1)), 43);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(43, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(43, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(43, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(44, 4)), $mul.ref(0, 1)), 44);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(44, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(44, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(44, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(45, 4)), $mul.ref(0, 1)), 45);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(45, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(45, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(45, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(46, 4)), $mul.ref(0, 1)), 46);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(46, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(46, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(46, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(47, 4)), $mul.ref(0, 1)), 47);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(47, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(47, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(47, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(48, 4)), $mul.ref(0, 1)), 48);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(48, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(48, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(48, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(49, 4)), $mul.ref(0, 1)), 49);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(49, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(49, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(49, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(50, 4)), $mul.ref(0, 1)), 50);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(50, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(50, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(50, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(51, 4)), $mul.ref(0, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(51, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(51, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(51, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(52, 4)), $mul.ref(0, 1)), 52);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(52, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(52, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(52, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(53, 4)), $mul.ref(0, 1)), 53);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(53, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(53, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(53, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(54, 4)), $mul.ref(0, 1)), 54);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(54, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(54, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(54, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(55, 4)), $mul.ref(0, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(55, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(55, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(55, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(56, 4)), $mul.ref(0, 1)), 56);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(56, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(56, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(56, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(57, 4)), $mul.ref(0, 1)), 57);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(57, 4)), $mul.ref(1, 1)), 35);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(57, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(57, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(58, 4)), $mul.ref(0, 1)), 58);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(58, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(58, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(58, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(59, 4)), $mul.ref(0, 1)), 59);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(59, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(59, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(59, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(60, 4)), $mul.ref(0, 1)), 60);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(60, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(60, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(60, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(61, 4)), $mul.ref(0, 1)), 61);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(61, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(61, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(61, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(62, 4)), $mul.ref(0, 1)), 62);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(62, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(62, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(62, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(63, 4)), $mul.ref(0, 1)), 63);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(63, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(63, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(63, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(64, 4)), $mul.ref(0, 1)), 64);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(64, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(64, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(64, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(65, 4)), $mul.ref(0, 1)), 65);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(65, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(65, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(65, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(66, 4)), $mul.ref(0, 1)), 66);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(66, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(66, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(66, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(67, 4)), $mul.ref(0, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(67, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(67, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(67, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(68, 4)), $mul.ref(0, 1)), 68);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(68, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(68, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(68, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(69, 4)), $mul.ref(0, 1)), 69);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(69, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(69, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(69, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(70, 4)), $mul.ref(0, 1)), 70);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(70, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(70, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(70, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(71, 4)), $mul.ref(0, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(71, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(71, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(71, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(72, 4)), $mul.ref(0, 1)), 72);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(72, 4)), $mul.ref(1, 1)), 51);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(72, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(72, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(73, 4)), $mul.ref(0, 1)), 73);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(73, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(73, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(73, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(74, 4)), $mul.ref(0, 1)), 74);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(74, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(74, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(74, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(75, 4)), $mul.ref(0, 1)), 75);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(75, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(75, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(75, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(76, 4)), $mul.ref(0, 1)), 76);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(76, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(76, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(76, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(77, 4)), $mul.ref(0, 1)), 77);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(77, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(77, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(77, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(78, 4)), $mul.ref(0, 1)), 78);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(78, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(78, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(78, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(79, 4)), $mul.ref(0, 1)), 79);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(79, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(79, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(79, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(80, 4)), $mul.ref(0, 1)), 80);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(80, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(80, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(80, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(81, 4)), $mul.ref(0, 1)), 81);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(81, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(81, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(81, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(82, 4)), $mul.ref(0, 1)), 82);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(82, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(82, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(82, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(83, 4)), $mul.ref(0, 1)), 83);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(83, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(83, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(83, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(84, 4)), $mul.ref(0, 1)), 84);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(84, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(84, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(84, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(85, 4)), $mul.ref(0, 1)), 85);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(85, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(85, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(85, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(86, 4)), $mul.ref(0, 1)), 86);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(86, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(86, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(86, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(87, 4)), $mul.ref(0, 1)), 87);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(87, 4)), $mul.ref(1, 1)), 67);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(87, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(87, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(88, 4)), $mul.ref(0, 1)), 88);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(88, 4)), $mul.ref(1, 1)), 15);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(88, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(88, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(89, 4)), $mul.ref(0, 1)), 89);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(89, 4)), $mul.ref(1, 1)), 7);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(89, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(89, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(90, 4)), $mul.ref(0, 1)), 90);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(90, 4)), $mul.ref(1, 1)), 7);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(90, 4)), $mul.ref(2, 1)), 8);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(90, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(91, 4)), $mul.ref(0, 1)), 91);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(91, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(91, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(91, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(92, 4)), $mul.ref(0, 1)), 92);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(92, 4)), $mul.ref(1, 1)), 7);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(92, 4)), $mul.ref(2, 1)), 16);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(92, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(93, 4)), $mul.ref(0, 1)), 93);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(93, 4)), $mul.ref(1, 1)), 7);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(93, 4)), $mul.ref(2, 1)), 24);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(93, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(94, 4)), $mul.ref(0, 1)), 94);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(94, 4)), $mul.ref(1, 1)), 7);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(94, 4)), $mul.ref(2, 1)), 32);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(94, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(95, 4)), $mul.ref(0, 1)), 95);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(95, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(95, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(95, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(96, 4)), $mul.ref(0, 1)), 96);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(96, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(96, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(96, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(97, 4)), $mul.ref(0, 1)), 97);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(97, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(97, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(97, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(98, 4)), $mul.ref(0, 1)), 98);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(98, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(98, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(98, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(99, 4)), $mul.ref(0, 1)), 99);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(99, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(99, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(99, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(100, 4)), $mul.ref(0, 1)), 100);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(100, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(100, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(100, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(101, 4)), $mul.ref(0, 1)), 101);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(101, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(101, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(101, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(102, 4)), $mul.ref(0, 1)), 102);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(102, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(102, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(102, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(103, 4)), $mul.ref(0, 1)), 103);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(103, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(103, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(103, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(104, 4)), $mul.ref(0, 1)), 104);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(104, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(104, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(104, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(105, 4)), $mul.ref(0, 1)), 105);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(105, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(105, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(105, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(106, 4)), $mul.ref(0, 1)), 106);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(106, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(106, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(106, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(107, 4)), $mul.ref(0, 1)), 107);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(107, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(107, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(107, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(108, 4)), $mul.ref(0, 1)), 108);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(108, 4)), $mul.ref(1, 1)), 23);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(108, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(108, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(109, 4)), $mul.ref(0, 1)), 109);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(109, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(109, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(109, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(110, 4)), $mul.ref(0, 1)), 110);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(110, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(110, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(110, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(111, 4)), $mul.ref(0, 1)), 111);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(111, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(111, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(111, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(112, 4)), $mul.ref(0, 1)), 112);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(112, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(112, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(112, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(113, 4)), $mul.ref(0, 1)), 113);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(113, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(113, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(113, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(114, 4)), $mul.ref(0, 1)), 114);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(114, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(114, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(114, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(115, 4)), $mul.ref(0, 1)), 115);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(115, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(115, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(115, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(116, 4)), $mul.ref(0, 1)), 116);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(116, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(116, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(116, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(117, 4)), $mul.ref(0, 1)), 117);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(117, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(117, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(117, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(118, 4)), $mul.ref(0, 1)), 118);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(118, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(118, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(118, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(119, 4)), $mul.ref(0, 1)), 119);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(119, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(119, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(119, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(120, 4)), $mul.ref(0, 1)), 120);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(120, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(120, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(120, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(121, 4)), $mul.ref(0, 1)), 121);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(121, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(121, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(121, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(122, 4)), $mul.ref(0, 1)), 122);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(122, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(122, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(122, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(123, 4)), $mul.ref(0, 1)), 123);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(123, 4)), $mul.ref(1, 1)), 39);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(123, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(123, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(124, 4)), $mul.ref(0, 1)), 124);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(124, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(124, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(124, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(125, 4)), $mul.ref(0, 1)), 125);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(125, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(125, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(125, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(126, 4)), $mul.ref(0, 1)), 126);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(126, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(126, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(126, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(127, 4)), $mul.ref(0, 1)), 127);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(127, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(127, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(127, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(128, 4)), $mul.ref(0, 1)), $sub.i8(0, 128));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(128, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(128, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(128, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(129, 4)), $mul.ref(0, 1)), $sub.i8(0, 127));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(129, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(129, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(129, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(130, 4)), $mul.ref(0, 1)), $sub.i8(0, 126));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(130, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(130, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(130, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(131, 4)), $mul.ref(0, 1)), $sub.i8(0, 125));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(131, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(131, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(131, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(132, 4)), $mul.ref(0, 1)), $sub.i8(0, 124));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(132, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(132, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(132, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(133, 4)), $mul.ref(0, 1)), $sub.i8(0, 123));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(133, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(133, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(133, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(134, 4)), $mul.ref(0, 1)), $sub.i8(0, 122));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(134, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(134, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(134, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(135, 4)), $mul.ref(0, 1)), $sub.i8(0, 121));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(135, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(135, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(135, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(136, 4)), $mul.ref(0, 1)), $sub.i8(0, 120));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(136, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(136, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(136, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(137, 4)), $mul.ref(0, 1)), $sub.i8(0, 119));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(137, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(137, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(137, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(138, 4)), $mul.ref(0, 1)), $sub.i8(0, 118));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(138, 4)), $mul.ref(1, 1)), 55);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(138, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(138, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(139, 4)), $mul.ref(0, 1)), $sub.i8(0, 117));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(139, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(139, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(139, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(140, 4)), $mul.ref(0, 1)), $sub.i8(0, 116));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(140, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(140, 4)), $mul.ref(2, 1)), 5);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(140, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(141, 4)), $mul.ref(0, 1)), $sub.i8(0, 115));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(141, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(141, 4)), $mul.ref(2, 1)), 1);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(141, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(142, 4)), $mul.ref(0, 1)), $sub.i8(0, 114));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(142, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(142, 4)), $mul.ref(2, 1)), 9);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(142, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(143, 4)), $mul.ref(0, 1)), $sub.i8(0, 113));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(143, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(143, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(143, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(144, 4)), $mul.ref(0, 1)), $sub.i8(0, 112));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(144, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(144, 4)), $mul.ref(2, 1)), 17);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(144, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(145, 4)), $mul.ref(0, 1)), $sub.i8(0, 111));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(145, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(145, 4)), $mul.ref(2, 1)), 25);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(145, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(146, 4)), $mul.ref(0, 1)), $sub.i8(0, 110));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(146, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(146, 4)), $mul.ref(2, 1)), 33);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(146, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(147, 4)), $mul.ref(0, 1)), $sub.i8(0, 109));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(147, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(147, 4)), $mul.ref(2, 1)), 6);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(147, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(148, 4)), $mul.ref(0, 1)), $sub.i8(0, 108));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(148, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(148, 4)), $mul.ref(2, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(148, 4)), $mul.ref(3, 1)), 2);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(149, 4)), $mul.ref(0, 1)), $sub.i8(0, 107));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(149, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(149, 4)), $mul.ref(2, 1)), 10);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(149, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(150, 4)), $mul.ref(0, 1)), $sub.i8(0, 106));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(150, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(150, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(150, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(151, 4)), $mul.ref(0, 1)), $sub.i8(0, 105));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(151, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(151, 4)), $mul.ref(2, 1)), 18);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(151, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(152, 4)), $mul.ref(0, 1)), $sub.i8(0, 104));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(152, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(152, 4)), $mul.ref(2, 1)), 26);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(152, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(153, 4)), $mul.ref(0, 1)), $sub.i8(0, 103));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(153, 4)), $mul.ref(1, 1)), 71);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(153, 4)), $mul.ref(2, 1)), 34);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(153, 4)), $mul.ref(3, 1)), 3);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(154, 4)), $mul.ref(0, 1)), $sub.i8(0, 102));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(154, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(154, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(154, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(155, 4)), $mul.ref(0, 1)), $sub.i8(0, 101));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(155, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(155, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(155, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(156, 4)), $mul.ref(0, 1)), $sub.i8(0, 100));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(156, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(156, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(156, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(157, 4)), $mul.ref(0, 1)), $sub.i8(0, 99));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(157, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(157, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(157, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(158, 4)), $mul.ref(0, 1)), $sub.i8(0, 98));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(158, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(158, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(158, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(159, 4)), $mul.ref(0, 1)), $sub.i8(0, 97));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(159, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(159, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(159, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(160, 4)), $mul.ref(0, 1)), $sub.i8(0, 96));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(160, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(160, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(160, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(161, 4)), $mul.ref(0, 1)), $sub.i8(0, 95));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(161, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(161, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(161, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(162, 4)), $mul.ref(0, 1)), $sub.i8(0, 94));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(162, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(162, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(162, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(163, 4)), $mul.ref(0, 1)), $sub.i8(0, 93));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(163, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(163, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(163, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(164, 4)), $mul.ref(0, 1)), $sub.i8(0, 92));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(164, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(164, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(164, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(165, 4)), $mul.ref(0, 1)), $sub.i8(0, 91));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(165, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(165, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(165, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(166, 4)), $mul.ref(0, 1)), $sub.i8(0, 90));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(166, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(166, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(166, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(167, 4)), $mul.ref(0, 1)), $sub.i8(0, 89));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(167, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(167, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(167, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(168, 4)), $mul.ref(0, 1)), $sub.i8(0, 88));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(168, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(168, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(168, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(169, 4)), $mul.ref(0, 1)), $sub.i8(0, 87));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(169, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(169, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(169, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(170, 4)), $mul.ref(0, 1)), $sub.i8(0, 86));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(170, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(170, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(170, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(171, 4)), $mul.ref(0, 1)), $sub.i8(0, 85));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(171, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(171, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(171, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(172, 4)), $mul.ref(0, 1)), $sub.i8(0, 84));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(172, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(172, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(172, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(173, 4)), $mul.ref(0, 1)), $sub.i8(0, 83));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(173, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(173, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(173, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(174, 4)), $mul.ref(0, 1)), $sub.i8(0, 82));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(174, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(174, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(174, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(175, 4)), $mul.ref(0, 1)), $sub.i8(0, 81));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(175, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(175, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(175, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(176, 4)), $mul.ref(0, 1)), $sub.i8(0, 80));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(176, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(176, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(176, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(177, 4)), $mul.ref(0, 1)), $sub.i8(0, 79));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(177, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(177, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(177, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(178, 4)), $mul.ref(0, 1)), $sub.i8(0, 78));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(178, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(178, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(178, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(179, 4)), $mul.ref(0, 1)), $sub.i8(0, 77));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(179, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(179, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(179, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(180, 4)), $mul.ref(0, 1)), $sub.i8(0, 76));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(180, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(180, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(180, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(181, 4)), $mul.ref(0, 1)), $sub.i8(0, 75));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(181, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(181, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(181, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(182, 4)), $mul.ref(0, 1)), $sub.i8(0, 74));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(182, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(182, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(182, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(183, 4)), $mul.ref(0, 1)), $sub.i8(0, 73));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(183, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(183, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(183, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(184, 4)), $mul.ref(0, 1)), $sub.i8(0, 72));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(184, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(184, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(184, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(185, 4)), $mul.ref(0, 1)), $sub.i8(0, 71));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(185, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(185, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(185, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(186, 4)), $mul.ref(0, 1)), $sub.i8(0, 70));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(186, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(186, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(186, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(187, 4)), $mul.ref(0, 1)), $sub.i8(0, 69));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(187, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(187, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(187, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(188, 4)), $mul.ref(0, 1)), $sub.i8(0, 68));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(188, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(188, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(188, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(189, 4)), $mul.ref(0, 1)), $sub.i8(0, 67));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(189, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(189, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(189, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(190, 4)), $mul.ref(0, 1)), $sub.i8(0, 66));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(190, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(190, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(190, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(191, 4)), $mul.ref(0, 1)), $sub.i8(0, 65));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(191, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(191, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(191, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(192, 4)), $mul.ref(0, 1)), $sub.i8(0, 64));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(192, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(192, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(192, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(193, 4)), $mul.ref(0, 1)), $sub.i8(0, 63));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(193, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(193, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(193, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(194, 4)), $mul.ref(0, 1)), $sub.i8(0, 62));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(194, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(194, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(194, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(195, 4)), $mul.ref(0, 1)), $sub.i8(0, 61));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(195, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(195, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(195, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(196, 4)), $mul.ref(0, 1)), $sub.i8(0, 60));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(196, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(196, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(196, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(197, 4)), $mul.ref(0, 1)), $sub.i8(0, 59));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(197, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(197, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(197, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(198, 4)), $mul.ref(0, 1)), $sub.i8(0, 58));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(198, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(198, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(198, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(199, 4)), $mul.ref(0, 1)), $sub.i8(0, 57));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(199, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(199, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(199, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(200, 4)), $mul.ref(0, 1)), $sub.i8(0, 56));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(200, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(200, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(200, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(201, 4)), $mul.ref(0, 1)), $sub.i8(0, 55));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(201, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(201, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(201, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(202, 4)), $mul.ref(0, 1)), $sub.i8(0, 54));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(202, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(202, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(202, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(203, 4)), $mul.ref(0, 1)), $sub.i8(0, 53));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(203, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(203, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(203, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(204, 4)), $mul.ref(0, 1)), $sub.i8(0, 52));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(204, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(204, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(204, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(205, 4)), $mul.ref(0, 1)), $sub.i8(0, 51));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(205, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(205, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(205, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(206, 4)), $mul.ref(0, 1)), $sub.i8(0, 50));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(206, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(206, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(206, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(207, 4)), $mul.ref(0, 1)), $sub.i8(0, 49));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(207, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(207, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(207, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(208, 4)), $mul.ref(0, 1)), $sub.i8(0, 48));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(208, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(208, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(208, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(209, 4)), $mul.ref(0, 1)), $sub.i8(0, 47));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(209, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(209, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(209, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(210, 4)), $mul.ref(0, 1)), $sub.i8(0, 46));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(210, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(210, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(210, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(211, 4)), $mul.ref(0, 1)), $sub.i8(0, 45));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(211, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(211, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(211, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(212, 4)), $mul.ref(0, 1)), $sub.i8(0, 44));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(212, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(212, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(212, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(213, 4)), $mul.ref(0, 1)), $sub.i8(0, 43));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(213, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(213, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(213, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(214, 4)), $mul.ref(0, 1)), $sub.i8(0, 42));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(214, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(214, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(214, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(215, 4)), $mul.ref(0, 1)), $sub.i8(0, 41));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(215, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(215, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(215, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(216, 4)), $mul.ref(0, 1)), $sub.i8(0, 40));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(216, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(216, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(216, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(217, 4)), $mul.ref(0, 1)), $sub.i8(0, 39));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(217, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(217, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(217, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(218, 4)), $mul.ref(0, 1)), $sub.i8(0, 38));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(218, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(218, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(218, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(219, 4)), $mul.ref(0, 1)), $sub.i8(0, 37));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(219, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(219, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(219, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(220, 4)), $mul.ref(0, 1)), $sub.i8(0, 36));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(220, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(220, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(220, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(221, 4)), $mul.ref(0, 1)), $sub.i8(0, 35));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(221, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(221, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(221, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(222, 4)), $mul.ref(0, 1)), $sub.i8(0, 34));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(222, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(222, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(222, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(223, 4)), $mul.ref(0, 1)), $sub.i8(0, 33));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(223, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(223, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(223, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(224, 4)), $mul.ref(0, 1)), $sub.i8(0, 32));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(224, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(224, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(224, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(225, 4)), $mul.ref(0, 1)), $sub.i8(0, 31));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(225, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(225, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(225, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(226, 4)), $mul.ref(0, 1)), $sub.i8(0, 30));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(226, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(226, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(226, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(227, 4)), $mul.ref(0, 1)), $sub.i8(0, 29));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(227, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(227, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(227, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(228, 4)), $mul.ref(0, 1)), $sub.i8(0, 28));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(228, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(228, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(228, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(229, 4)), $mul.ref(0, 1)), $sub.i8(0, 27));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(229, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(229, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(229, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(230, 4)), $mul.ref(0, 1)), $sub.i8(0, 26));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(230, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(230, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(230, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(231, 4)), $mul.ref(0, 1)), $sub.i8(0, 25));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(231, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(231, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(231, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(232, 4)), $mul.ref(0, 1)), $sub.i8(0, 24));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(232, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(232, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(232, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(233, 4)), $mul.ref(0, 1)), $sub.i8(0, 23));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(233, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(233, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(233, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(234, 4)), $mul.ref(0, 1)), $sub.i8(0, 22));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(234, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(234, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(234, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(235, 4)), $mul.ref(0, 1)), $sub.i8(0, 21));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(235, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(235, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(235, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(236, 4)), $mul.ref(0, 1)), $sub.i8(0, 20));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(236, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(236, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(236, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(237, 4)), $mul.ref(0, 1)), $sub.i8(0, 19));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(237, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(237, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(237, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(238, 4)), $mul.ref(0, 1)), $sub.i8(0, 18));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(238, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(238, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(238, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(239, 4)), $mul.ref(0, 1)), $sub.i8(0, 17));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(239, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(239, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(239, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(240, 4)), $mul.ref(0, 1)), $sub.i8(0, 16));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(240, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(240, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(240, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(241, 4)), $mul.ref(0, 1)), $sub.i8(0, 15));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(241, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(241, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(241, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(242, 4)), $mul.ref(0, 1)), $sub.i8(0, 14));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(242, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(242, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(242, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(243, 4)), $mul.ref(0, 1)), $sub.i8(0, 13));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(243, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(243, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(243, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(244, 4)), $mul.ref(0, 1)), $sub.i8(0, 12));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(244, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(244, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(244, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(245, 4)), $mul.ref(0, 1)), $sub.i8(0, 11));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(245, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(245, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(245, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(246, 4)), $mul.ref(0, 1)), $sub.i8(0, 10));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(246, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(246, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(246, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(247, 4)), $mul.ref(0, 1)), $sub.i8(0, 9));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(247, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(247, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(247, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(248, 4)), $mul.ref(0, 1)), $sub.i8(0, 8));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(248, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(248, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(248, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(249, 4)), $mul.ref(0, 1)), $sub.i8(0, 7));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(249, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(249, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(249, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(250, 4)), $mul.ref(0, 1)), $sub.i8(0, 6));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(250, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(250, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(250, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(251, 4)), $mul.ref(0, 1)), $sub.i8(0, 5));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(251, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(251, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(251, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(252, 4)), $mul.ref(0, 1)), $sub.i8(0, 4));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(252, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(252, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(252, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(253, 4)), $mul.ref(0, 1)), $sub.i8(0, 3));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(253, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(253, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(253, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(254, 4)), $mul.ref(0, 1)), $sub.i8(0, 2));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(254, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(254, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(254, 4)), $mul.ref(3, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(255, 4)), $mul.ref(0, 1)), $sub.i8(0, 1));
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(255, 4)), $mul.ref(1, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(255, 4)), $mul.ref(2, 1)), 0);
    $M.28 := $store.i8($M.28, $add.ref($add.ref($add.ref(i40evf_ptype_lookup, $mul.ref(0, 1024)), $mul.ref(255, 4)), $mul.ref(3, 1)), 0);
    $M.3 := 0;
    call {:si_unique_call 1752} {:cexpr "last_index"} boogie_si_record_i32(0);
    $M.2 := $0.ref;
    $M.4 := $store.ref($M.4, set_impl, $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(1, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(2, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(3, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(4, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(5, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(6, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(7, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(8, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(9, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(10, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(11, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(12, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(13, 8)), $0.ref);
    $M.4 := $store.ref($M.4, $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(14, 8)), $0.ref);
    $M.0 := $store.i8($M.0, i40evf_gstrings_stats, 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(0, 36)), $mul.ref(32, 1)), 2768);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(1, 36)), $mul.ref(32, 1)), 2776);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(2, 36)), $mul.ref(32, 1)), 2784);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(3, 36)), $mul.ref(32, 1)), 2792);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(4, 36)), $mul.ref(32, 1)), 2800);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(5, 36)), $mul.ref(32, 1)), 2808);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(6, 36)), $mul.ref(32, 1)), 2816);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(7, 36)), $mul.ref(32, 1)), 2824);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(8, 36)), $mul.ref(32, 1)), 2832);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(9, 36)), $mul.ref(32, 1)), 2840);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(10, 36)), $mul.ref(32, 1)), 2848);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(0, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(1, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(2, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(4, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(5, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(18, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(29, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(30, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(0, 1)), $mul.ref(31, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_gstrings_stats, $mul.ref(0, 432)), $mul.ref(11, 36)), $mul.ref(32, 1)), 2856);
    $M.0 := $store.ref($M.0, i40evf_ethtool_ops, i40evf_get_settings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(16, 1)), i40evf_get_drvinfo);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(24, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(32, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(56, 1)), i40evf_get_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(64, 1)), i40evf_set_msglevel);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(72, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(80, 1)), ethtool_op_get_link);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(112, 1)), i40evf_get_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(120, 1)), i40evf_set_coalesce);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(128, 1)), i40evf_get_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(136, 1)), i40evf_set_ringparam);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(144, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(168, 1)), i40evf_get_strings);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(184, 1)), i40evf_get_ethtool_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(224, 1)), i40evf_get_sset_count);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(232, 1)), i40evf_get_rxnfc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(240, 1)), i40evf_set_rxnfc);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(272, 1)), i40evf_get_rxfh_indir_size);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(280, 1)), i40evf_get_rxfh);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(288, 1)), i40evf_set_rxfh);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(296, 1)), i40evf_get_channels);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_ethtool_ops, $mul.ref(0, 376)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, i40evf_netdev_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(16, 1)), i40evf_open);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(24, 1)), i40evf_close);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(32, 1)), i40evf_xmit_frame);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(48, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(56, 1)), i40evf_set_rx_mode);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(64, 1)), i40evf_set_mac);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(72, 1)), eth_validate_addr);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(80, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(88, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(96, 1)), i40evf_change_mtu);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(112, 1)), i40evf_tx_timeout);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(120, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(128, 1)), i40evf_get_stats);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(136, 1)), i40evf_vlan_rx_add_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(144, 1)), i40evf_vlan_rx_kill_vid);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(152, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(160, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(168, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(176, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(184, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(192, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(200, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(208, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(216, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(224, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(232, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(240, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(248, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(256, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(264, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(272, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(280, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(288, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(296, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(304, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(312, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(320, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(328, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(336, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(344, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(352, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(360, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(368, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(376, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(384, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(392, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(400, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(408, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(416, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(424, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(432, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(440, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(448, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(456, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(464, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(i40evf_netdev_ops, $mul.ref(0, 480)), $mul.ref(472, 1)), $0.ref);
    $M.76 := $store.i8($M.76, i40evf_copyright, 67);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(1, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(2, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(3, 1)), 121);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(4, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(5, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(6, 1)), 103);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(7, 1)), 104);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(8, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(9, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(10, 1)), 40);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(11, 1)), 99);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(12, 1)), 41);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(13, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(14, 1)), 50);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(15, 1)), 48);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(16, 1)), 49);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(17, 1)), 51);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(18, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(19, 1)), 45);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(20, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(21, 1)), 50);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(22, 1)), 48);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(23, 1)), 49);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(24, 1)), 52);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(25, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(26, 1)), 73);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(27, 1)), 110);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(28, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(29, 1)), 101);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(30, 1)), 108);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(31, 1)), 32);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(32, 1)), 67);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(33, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(34, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(35, 1)), 112);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(36, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(37, 1)), 114);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(38, 1)), 97);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(39, 1)), 116);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(40, 1)), 105);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(41, 1)), 111);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(42, 1)), 110);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(43, 1)), 46);
    $M.76 := $store.i8($M.76, $add.ref($add.ref(i40evf_copyright, $mul.ref(0, 45)), $mul.ref(44, 1)), 0);
    $M.0 := $store.i8($M.0, i40evf_driver_string, 73);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(1, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(5, 1)), 40);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(6, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(7, 1)), 41);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(8, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(9, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(10, 1)), 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(11, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(12, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(13, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(14, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(15, 1)), 88);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(16, 1)), 55);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(17, 1)), 49);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(18, 1)), 48);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(19, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(20, 1)), 86);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(21, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(22, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(23, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(24, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(25, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(26, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(27, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(28, 1)), 70);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(29, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(30, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(31, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(32, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(33, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(34, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(35, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(36, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(37, 1)), 78);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(38, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(39, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(40, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(41, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(42, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(43, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(44, 1)), 32);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(45, 1)), 68);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(46, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(47, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(48, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(49, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(50, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(i40evf_driver_string, $mul.ref(0, 52)), $mul.ref(51, 1)), 0);
    $M.0 := $store.i32($M.0, i40evf_pci_tbl, 32902);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(4, 1)), 5452);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(12, 1)), $sub.i32(0, 1));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(i40evf_pci_tbl, $mul.ref(0, 64)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.77 := $store.ref($M.77, i40evf_driver, $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(16, 1)), i40evf_driver_name);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(24, 1)), i40evf_pci_tbl);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(32, 1)), i40evf_probe);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(40, 1)), i40evf_remove);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(48, 1)), i40evf_suspend);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(56, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(64, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(72, 1)), i40evf_resume);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(80, 1)), i40evf_shutdown);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(88, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(96, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(0, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(8, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(16, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(24, 1)), $0.ref);
    $M.77 := $store.i8($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(40, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(48, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(56, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(64, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(72, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(80, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(88, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(96, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(104, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(104, 1)), $mul.ref(112, 1)), $0.ref);
    $M.77 := $store.i32($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.77 := $store.i32($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i32($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.77 := $store.i32($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.77 := $store.i64($M.77, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.77 := $store.ref($M.77, $add.ref($add.ref($add.ref($add.ref(i40evf_driver, $mul.ref(0, 312)), $mul.ref(224, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.78 := $store.i8($M.78, .str.107, 105);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(1, 1)), 52);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(2, 1)), 48);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(4, 1)), 118);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(5, 1)), 102);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(6, 1)), 58);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(7, 1)), 109);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(8, 1)), 98);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(9, 1)), 120);
    $M.78 := $store.i8($M.78, $add.ref($add.ref(.str.107, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.79 := $store.i8($M.79, .str.43, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(2, 1)), 84);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(6, 1)), 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(7, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(8, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(9, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(10, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(11, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(12, 1)), 113);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(13, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(14, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(15, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(16, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(17, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(18, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(19, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(20, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(21, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(22, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(23, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(24, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(25, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(26, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(27, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(28, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(29, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(30, 1)), 122);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(31, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(32, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(33, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(34, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.43, $mul.ref(0, 36)), $mul.ref(35, 1)), 0);
    $M.79 := $store.i8($M.79, .str.44, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(2, 1)), 84);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(6, 1)), 78);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(7, 1)), 86);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(8, 1)), 77);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(9, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(10, 1)), 98);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(11, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(12, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(13, 1)), 121);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(14, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(15, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.44, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.79 := $store.i8($M.79, .str.45, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(2, 1)), 84);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(6, 1)), 73);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(7, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(8, 1)), 118);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(9, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(10, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(11, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(12, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(13, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(14, 1)), 98);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(15, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(16, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(17, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(18, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(19, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(20, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(21, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(22, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(23, 1)), 122);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(24, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(25, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(26, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(27, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(28, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(29, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(30, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.45, $mul.ref(0, 32)), $mul.ref(31, 1)), 0);
    $M.79 := $store.i8($M.79, .str.46, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(2, 1)), 84);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(6, 1)), 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(7, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(8, 1)), 121);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(9, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(10, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(11, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(12, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(13, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(14, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(15, 1)), 103);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(16, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(17, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(18, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(19, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(20, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(21, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(22, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(23, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(24, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(25, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(26, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(27, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(28, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(29, 1)), 103);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(30, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(31, 1)), 119);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(32, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(33, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(34, 1)), 104);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(35, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(36, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(37, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(38, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(39, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(40, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(41, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(42, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(43, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(44, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(45, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(46, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(47, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(48, 1)), 103);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.46, $mul.ref(0, 50)), $mul.ref(49, 1)), 0);
    $M.79 := $store.i8($M.79, .str.47, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(2, 1)), 84);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(6, 1)), 69);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(7, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(8, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(9, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(10, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(11, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(12, 1)), 113);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(13, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(14, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(15, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(16, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(17, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(18, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(19, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(20, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(21, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(22, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(23, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(24, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(25, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(26, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.47, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.79 := $store.i8($M.79, .str.48, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(2, 1)), 84);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(6, 1)), 67);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(7, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(8, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(9, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(10, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(11, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(12, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(13, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(14, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(15, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(16, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(17, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(18, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(19, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(20, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(21, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(22, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(23, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(24, 1)), 119);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(25, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(26, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(27, 1)), 104);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(28, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(29, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(30, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(31, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(32, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(33, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(34, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(35, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(36, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(37, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(38, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(39, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(40, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.48, $mul.ref(0, 42)), $mul.ref(41, 1)), 0);
    $M.79 := $store.i8($M.79, .str.49, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(2, 1)), 84);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(6, 1)), 87);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(7, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(8, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(9, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(10, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(11, 1)), 98);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(12, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(13, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(14, 1)), 107);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(15, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(16, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(17, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(18, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(19, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(20, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(21, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(22, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(23, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(24, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.49, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.79 := $store.i8($M.79, .str.35, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(2, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(3, 1)), 67);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(4, 1)), 77);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(5, 1)), 68);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(6, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(7, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(8, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(9, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(10, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(11, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(12, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(13, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(14, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(15, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(16, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(17, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(18, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(19, 1)), 52);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(20, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(21, 1)), 44);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(22, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(23, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(24, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(25, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(26, 1)), 103);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(27, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(28, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(29, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(30, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(31, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(32, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(33, 1)), 52);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(34, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(35, 1)), 44);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(36, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(37, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(38, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(39, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(40, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(41, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(42, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(43, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(44, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(45, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(46, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(47, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(48, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(49, 1)), 52);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(50, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(51, 1)), 44);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(52, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(53, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(54, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(55, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(56, 1)), 118);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(57, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(58, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(59, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(60, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(61, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(62, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(63, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(64, 1)), 52);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(65, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(66, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.35, $mul.ref(0, 68)), $mul.ref(67, 1)), 0);
    $M.79 := $store.i8($M.79, .str.36, 9);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(1, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(2, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(3, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(4, 1)), 107);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(5, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(6, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(7, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(8, 1)), 40);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(9, 1)), 104);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(10, 1)), 44);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(11, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(12, 1)), 41);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(13, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(14, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(15, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(16, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(17, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(18, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(19, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(20, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(21, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(22, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(23, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(24, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(25, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(26, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(27, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.36, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.79 := $store.i8($M.79, .str.37, 9);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(1, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(2, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(3, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(4, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(5, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(6, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(7, 1)), 40);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(8, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(9, 1)), 44);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(10, 1)), 49);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(11, 1)), 41);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(12, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(13, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(14, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(15, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(16, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(17, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(18, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(19, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(20, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(21, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(22, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(23, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(24, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(25, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(26, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(27, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.37, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.79 := $store.i8($M.79, .str.38, 9);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(1, 1)), 97);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(2, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(3, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(4, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(6, 1)), 40);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(7, 1)), 104);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(8, 1)), 44);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(9, 1)), 108);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(10, 1)), 41);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(11, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(12, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(13, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(14, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(15, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(16, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(17, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(18, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(19, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(20, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(21, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(22, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(23, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(24, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(25, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(26, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(27, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.38, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.79 := $store.i8($M.79, .str.39, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(2, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(3, 1)), 67);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(4, 1)), 77);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(5, 1)), 68);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(6, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(7, 1)), 66);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(8, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(9, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(10, 1)), 102);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(11, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(12, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(13, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(14, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.39, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.79 := $store.i8($M.79, .str.40, 9);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(1, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(2, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(3, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(4, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(5, 1)), 52);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(6, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(7, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(8, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(9, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(10, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(11, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(12, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(13, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(14, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(15, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(16, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(17, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(18, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(19, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(20, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(21, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(22, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(23, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(24, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(25, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(26, 1)), 56);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(27, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(28, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.40, $mul.ref(0, 30)), $mul.ref(29, 1)), 0);
    $M.79 := $store.i8($M.79, .str.50, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(2, 1)), 82);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(6, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(8, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(9, 1)), 117);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(10, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(11, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(12, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(13, 1)), 115);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(14, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(15, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(16, 1)), 109);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(17, 1)), 112);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(18, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(19, 1)), 121);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(20, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(21, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.50, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.79 := $store.i8($M.79, .str.51, 65);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(1, 1)), 81);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(2, 1)), 82);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(3, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(4, 1)), 58);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(5, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(6, 1)), 69);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(7, 1)), 118);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(8, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(9, 1)), 110);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(10, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(11, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(12, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(13, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(14, 1)), 99);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(15, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(16, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(17, 1)), 118);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(18, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(19, 1)), 100);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(20, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(21, 1)), 119);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(22, 1)), 105);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(23, 1)), 116);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(24, 1)), 104);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(25, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(26, 1)), 101);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(27, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(28, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(29, 1)), 111);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(30, 1)), 114);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(31, 1)), 32);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(32, 1)), 48);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(33, 1)), 120);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(34, 1)), 37);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(35, 1)), 88);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(36, 1)), 46);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(37, 1)), 10);
    $M.79 := $store.i8($M.79, $add.ref($add.ref(.str.51, $mul.ref(0, 39)), $mul.ref(38, 1)), 0);
    $M.80 := $store.i8($M.80, .str.62, 105);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(1, 1)), 52);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(2, 1)), 48);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(3, 1)), 101);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(4, 1)), 118);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(5, 1)), 102);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(6, 1)), 45);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(7, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(8, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(9, 1)), 45);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(10, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(11, 1)), 115);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(12, 1)), 45);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(13, 1)), 37);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(14, 1)), 100);
    $M.80 := $store.i8($M.80, $add.ref($add.ref(.str.62, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.81 := $store.i8($M.81, .str.112, 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(1, 1)), 120);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(2, 1)), 45);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(3, 1)), 37);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(4, 1)), 117);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(5, 1)), 46);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(6, 1)), 112);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(7, 1)), 97);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(8, 1)), 99);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(9, 1)), 107);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(12, 1)), 115);
    $M.81 := $store.i8($M.81, $add.ref($add.ref(.str.112, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.82 := $store.i8($M.82, .str.113, 116);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(2, 1)), 45);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(4, 1)), 117);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(5, 1)), 46);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(6, 1)), 98);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(7, 1)), 121);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(8, 1)), 116);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(10, 1)), 115);
    $M.82 := $store.i8($M.82, $add.ref($add.ref(.str.113, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    $M.83 := $store.i8($M.83, .str.114, 114);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(1, 1)), 120);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(2, 1)), 45);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(3, 1)), 37);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(4, 1)), 117);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(5, 1)), 46);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(6, 1)), 112);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(7, 1)), 97);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(8, 1)), 99);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(9, 1)), 107);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(11, 1)), 116);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(12, 1)), 115);
    $M.83 := $store.i8($M.83, $add.ref($add.ref(.str.114, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.84 := $store.i8($M.84, .str.115, 114);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(1, 1)), 120);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(2, 1)), 45);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(3, 1)), 37);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(4, 1)), 117);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(5, 1)), 46);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(6, 1)), 98);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(7, 1)), 121);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(8, 1)), 116);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(9, 1)), 101);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(10, 1)), 115);
    $M.84 := $store.i8($M.84, $add.ref($add.ref(.str.115, $mul.ref(0, 12)), $mul.ref(11, 1)), 0);
    call {:si_unique_call 1753} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 747752);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 748784);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i64, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 749816);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 750848);

procedure devirtbounce.3(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: i64, arg1: ref, arg2: i32) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 751880);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: i64, arg3: i32, arg4: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 752912);

procedure devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation devirtbounce.5(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i21 := $eq.ref(i40evf_get_rxfh_indir_size, $p0);
    assume true;
    goto $bb8, $bb15;

  $bb15:
    assume !($i21 == 1);
    $i20 := $eq.ref(ethtool_op_get_link, $p0);
    assume true;
    goto $bb7, $bb14;

  $bb14:
    assume !($i20 == 1);
    $i19 := $eq.ref(i40evf_get_msglevel, $p0);
    assume true;
    goto $bb6, $bb13;

  $bb13:
    assume !($i19 == 1);
    $i18 := $eq.ref(eth_validate_addr, $p0);
    assume true;
    goto $bb5, $bb12;

  $bb12:
    assume !($i18 == 1);
    $i17 := $eq.ref(i40evf_open, $p0);
    assume true;
    goto $bb4, $bb11;

  $bb11:
    assume !($i17 == 1);
    $i16 := $eq.ref(i40evf_close, $p0);
    assume true;
    goto $bb3, $bb10;

  $bb10:
    assume !($i16 == 1);
    $i15 := $eq.ref(i40evf_resume, $p0);
    assume true;
    goto $bb2, $bb9;

  $bb9:
    assume !($i15 == 1);
    assume false;
    return;

  $bb2:
    assume $i15 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1754} $i2 := i40evf_resume($p1);
    $r := $i2;
    return;

  $bb3:
    assume $i16 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1755} $i4 := i40evf_close($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i17 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1756} $i6 := i40evf_open($p5);
    $r := $i6;
    return;

  $bb5:
    assume $i18 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1757} $i8 := eth_validate_addr($p7);
    $r := $i8;
    return;

  $bb6:
    assume $i19 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1758} $i10 := i40evf_get_msglevel($p9);
    $r := $i10;
    return;

  $bb7:
    assume $i20 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1759} $i12 := ethtool_op_get_link($p11);
    $r := $i12;
    return;

  $bb8:
    assume $i21 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1760} $i14 := i40evf_get_rxfh_indir_size($p13);
    $r := $i14;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 753944);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 754976);

procedure devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 756008);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i9 := $eq.ref(i40evf_get_channels, $p0);
    assume true;
    goto $bb4, $bb7;

  $bb7:
    assume !($i9 == 1);
    $i8 := $eq.ref(i40evf_get_ringparam, $p0);
    assume true;
    goto $bb3, $bb6;

  $bb6:
    assume !($i8 == 1);
    $i7 := $eq.ref(i40evf_get_drvinfo, $p0);
    assume {:branchcond $i7} true;
    goto $bb2, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume false;
    return;

  $bb2:
    assume $i7 == 1;
    $p1 := $bitcast.ref.ref(arg);
    $p2 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1761} i40evf_get_drvinfo($p1, $p2);
    return;

  $bb3:
    assume $i8 == 1;
    $p3 := $bitcast.ref.ref(arg);
    $p4 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1762} i40evf_get_ringparam($p3, $p4);
    return;

  $bb4:
    assume $i9 == 1;
    $p5 := $bitcast.ref.ref(arg);
    $p6 := $bitcast.ref.ref(arg1);
    call {:si_unique_call 1763} i40evf_get_channels($p5, $p6);
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 757040);

procedure devirtbounce.9(funcPtr: ref, arg: ref);



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 758072);

procedure devirtbounce.10(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.11: ref;

axiom devirtbounce.11 == $sub.ref(0, 759104);

procedure devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.11(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: i64, arg4: i32, arg5: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.12: ref;

axiom devirtbounce.12 == $sub.ref(0, 760136);

procedure devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.12(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.13: ref;

axiom devirtbounce.13 == $sub.ref(0, 761168);

procedure devirtbounce.13(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.13(funcPtr: ref, arg: i32, arg1: i32, arg2: i32, arg3: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.14: ref;

axiom devirtbounce.14 == $sub.ref(0, 762200);

procedure devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.14(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.15: ref;

axiom devirtbounce.15 == $sub.ref(0, 763232);

procedure devirtbounce.15(funcPtr: ref, arg: ref, arg1: ref);



const devirtbounce.16: ref;

axiom devirtbounce.16 == $sub.ref(0, 764264);

procedure devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.16(funcPtr: ref, arg: ref, arg1: i64, arg2: ref, arg3: i32, arg4: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.17: ref;

axiom devirtbounce.17 == $sub.ref(0, 765296);

procedure devirtbounce.17(funcPtr: ref, arg: i64);
  free requires assertsPassed;



implementation devirtbounce.17(funcPtr: ref, arg: i64)
{
  var $p0: ref;
  var $i1: i1;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(i40evf_watchdog_timer, $p0);
    assume {:branchcond $i2} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i2 == 1);
    $i1 := $eq.ref(delayed_work_timer_fn, $p0);
    assume {:branchcond $i1} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i1 == 1);
    assume false;
    return;

  $bb2:
    assume $i1 == 1;
    call {:si_unique_call 1764} delayed_work_timer_fn(arg);
    return;

  $bb3:
    assume $i2 == 1;
    call {:si_unique_call 1765} i40evf_watchdog_timer(arg);
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i32;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.11, $M.5, $M.15, $M.35, $M.9, $M.7, $M.44, $M.41, $M.38, $M.0, $M.14, $M.24, $M.36, $M.37, $M.39, $M.40, $M.42, $M.43, $M.45, $M.46, $M.48, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.18, $M.19, $M.20, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.67, $M.66, $M.68, $M.65, $M.28, $M.3, $M.2, $M.4, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1766} __SMACK_static_init();
    call {:si_unique_call 1767} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.49, $M.50, $M.51, $M.20, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.0, $M.59, $M.60, $M.5, $M.61, $M.48, $M.15, $M.35, $M.62, $M.1, $M.63, $M.64, $M.11, $M.9, $M.7, $M.44, $M.41, $M.38, $M.14, $M.24, $M.36, $M.37, $M.39, $M.40, $M.42, $M.43, $M.45, $M.46, $M.6, $M.8, $M.10, $M.12, $M.16, $M.17, $M.18, $M.19, $M.67, $M.66, $M.68, $M.65, $M.28, $M.3, $M.2, $M.4, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $CurrAddr, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.21;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation i40evf_down_loop_$bb16(in_$i31: i64, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p33: ref) returns (out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p33: ref)
{

  entry:
    out_$p34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p33 := in_$p34, in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p33;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_426;

  $bb18:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p33 := out_$p37;
    goto $bb18_dummy;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, in_$i31);
    goto corral_source_split_435;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_433;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref($add.ref(out_$p33, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p34, 1);
    goto corral_source_split_429;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p33, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$p34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p33 := i40evf_down_loop_$bb16(in_$i31, out_$p34, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p33);
    return;

  exit:
    return;
}



procedure i40evf_down_loop_$bb16(in_$i31: i64, in_$p34: ref, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p33: ref) returns (out_$p34: ref, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p33: ref);
  modifies $M.0;



implementation i40evf_down_loop_$bb8(in_$i13: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p15: ref)
{

  entry:
    out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p15 := in_$p16, in_$p18, in_$p19, in_$p20, in_$p21, in_$i22, in_$i23, in_$p15;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  $bb10:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$p15 := out_$p19;
    goto $bb10_dummy;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$i23 := $ne.i64(out_$i22, in_$i13);
    goto corral_source_split_411;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    out_$i22 := $p2i.ref.i64(out_$p21);
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_409;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_407;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_406;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p16, 1);
    goto corral_source_split_405;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_404;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p15 := i40evf_down_loop_$bb8(in_$i13, out_$p16, out_$p18, out_$p19, out_$p20, out_$p21, out_$i22, out_$i23, out_$p15);
    return;

  exit:
    return;
}



procedure i40evf_down_loop_$bb8(in_$i13: i64, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$i23: i1, in_$p15: ref) returns (out_$p16: ref, out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$i23: i1, out_$p15: ref);
  modifies $M.0;



implementation i40evf_free_traffic_irqs_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$p11: ref, in_$i12: i32, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i5: i32, in_vslice_dummy_var_150: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$p11: ref, out_$i12: i32, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i5: i32, out_vslice_dummy_var_150: i32)
{

  entry:
    out_$p6, out_$p7, out_$i8, out_$i9, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i5, out_vslice_dummy_var_150 := in_$p6, in_$p7, in_$i8, in_$i9, in_$p11, in_$i12, in_$p14, in_$p15, in_$i16, in_$i17, in_$p19, in_$i20, in_$i21, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$i5, in_vslice_dummy_var_150;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_487;

  $bb6:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i26;
    goto $bb6_dummy;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i26, in_$i3);
    goto corral_source_split_510;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    out_$i26 := $add.i32(out_$i5, 1);
    call {:si_unique_call 140} {:cexpr "i"} boogie_si_record_i32(out_$i26);
    goto corral_source_split_509;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} ldv_free_irq_18(out_$i20, out_$p25);
    goto corral_source_split_508;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_507;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_506;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref(out_$i21, 8));
    goto corral_source_split_505;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i5);
    goto corral_source_split_504;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i32($M.0, out_$p19);
    goto corral_source_split_503;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i17, 8)), $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    goto corral_source_split_501;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i64(out_$i16, 1);
    goto corral_source_split_500;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i5);
    goto corral_source_split_499;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_498;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_497;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} out_vslice_dummy_var_150 := irq_set_affinity_hint(out_$i12, $0.ref);
    goto corral_source_split_496;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    out_$i12 := $load.i32($M.0, out_$p11);
    goto corral_source_split_495;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(out_$p7, $mul.ref(out_$i9, 8)), $mul.ref(0, 1));
    goto corral_source_split_494;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    goto corral_source_split_493;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    out_$i9 := $add.i64(out_$i8, 1);
    goto corral_source_split_492;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i5);
    goto corral_source_split_491;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    out_$p7 := $load.ref($M.0, out_$p6);
    goto corral_source_split_490;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p6 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_489;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p6, out_$p7, out_$i8, out_$i9, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i5, out_vslice_dummy_var_150 := i40evf_free_traffic_irqs_loop_$bb4(in_$p0, in_$i3, out_$p6, out_$p7, out_$i8, out_$i9, out_$p11, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$i20, out_$i21, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$i5, out_vslice_dummy_var_150);
    return;

  exit:
    return;
}



procedure i40evf_free_traffic_irqs_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$p6: ref, in_$p7: ref, in_$i8: i64, in_$i9: i64, in_$p11: ref, in_$i12: i32, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i64, in_$p19: ref, in_$i20: i32, in_$i21: i64, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i32, in_$i27: i1, in_$i5: i32, in_vslice_dummy_var_150: i32) returns (out_$p6: ref, out_$p7: ref, out_$i8: i64, out_$i9: i64, out_$p11: ref, out_$i12: i32, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i64, out_$p19: ref, out_$i20: i32, out_$i21: i64, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i32, out_$i27: i1, out_$i5: i32, out_vslice_dummy_var_150: i32);
  modifies $M.5, $M.7, $M.9, $M.11;



implementation i40evf_free_all_tx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7 := in_$i8, in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_524;

  $bb9:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i20;
    goto $bb9_dummy;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, out_$i20);
    goto corral_source_split_545;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_544;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i16($M.0, out_$p22);
    goto corral_source_split_543;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_542;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, in_$p1);
    goto corral_source_split_541;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i7, 1);
    call {:si_unique_call 142} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_540;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} i40evf_free_tx_resources(out_$p19);
    goto corral_source_split_538;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_537;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i16, 8));
    goto corral_source_split_536;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i7);
    goto corral_source_split_535;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_534;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_532;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_531;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_530;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_529;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_528;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_527;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_526;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7 := i40evf_free_all_tx_resources_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7);
    return;

  exit:
    return;
}



procedure i40evf_free_all_tx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i7: i32);
  modifies $M.0;



implementation i40evf_free_all_rx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7 := in_$i8, in_$p10, in_$p11, in_$p12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_559;

  $bb9:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i20;
    goto $bb9_dummy;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i25 := $sgt.i32(out_$i24, out_$i20);
    goto corral_source_split_580;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_579;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i16($M.0, out_$p22);
    goto corral_source_split_578;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_577;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, in_$p1);
    goto corral_source_split_576;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i7, 1);
    call {:si_unique_call 144} {:cexpr "i"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_575;

  $bb7:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} i40evf_free_rx_resources(out_$p19);
    goto corral_source_split_573;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_572;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i16, 8));
    goto corral_source_split_571;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i7);
    goto corral_source_split_570;

  $bb6:
    assume out_$i15 == 1;
    goto corral_source_split_569;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    out_$i15 := $ne.i64(out_$i14, 0);
    goto corral_source_split_567;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    out_$i14 := $p2i.ref.i64(out_$p13);
    goto corral_source_split_566;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_565;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_564;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_563;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_562;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_561;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7 := i40evf_free_all_rx_resources_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$p12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i7);
    return;

  exit:
    return;
}



procedure i40evf_free_all_rx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$i15: i1, in_$i16: i64, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$i15: i1, out_$i16: i64, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i1, out_$i7: i32);
  modifies $M.0, $M.4, $M.3;



implementation i40evf_clean_rx_ring_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i16, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i12: i16) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i16, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i12: i16)
{

  entry:
    out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i12 := in_$p13, in_$p14, in_$p15, in_$i16, in_$p18, in_$i19, in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$p33, in_$p34, in_$p35, in_$p36, in_$i37, in_$i38, in_$p39, in_$i40, in_$i41, in_$p42, in_$i43, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i12;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_631;

  $bb22:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i12 := out_$i51;
    goto $bb22_dummy;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    out_$i55 := $sgt.i32(out_$i53, out_$i54);
    goto corral_source_split_696;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    out_$i54 := $zext.i16.i32(out_$i51);
    goto corral_source_split_695;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i52);
    goto corral_source_split_694;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i16($M.0, in_$p8);
    goto corral_source_split_693;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    call {:si_unique_call 152} {:cexpr "i"} boogie_si_record_i16(out_$i51);
    goto corral_source_split_692;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    out_$i50 := $add.i32(out_$i49, 1);
    goto corral_source_split_691;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i12);
    goto corral_source_split_690;

  $bb17:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p48, 0);
    goto corral_source_split_688;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(32, 1));
    goto corral_source_split_687;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p47, $0.ref);
    goto corral_source_split_686;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_685;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} __free_pages(out_$p46, 0);
    goto corral_source_split_684;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_683;

  $bb20:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_682;

  $bb19:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p44, 0);
    goto corral_source_split_680;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(24, 1));
    goto corral_source_split_679;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} dma_unmap_page(in_$p2, out_$i43, 2048, 2);
    goto corral_source_split_678;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i64($M.0, out_$p42);
    goto corral_source_split_677;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(24, 1));
    goto corral_source_split_676;

  $bb18:
    assume out_$i41 == 1;
    goto corral_source_split_675;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_673;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i64($M.0, out_$p39);
    goto corral_source_split_672;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(24, 1));
    goto corral_source_split_671;

  $bb16:
    assume out_$i38 == 1;
    goto corral_source_split_670;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i37, 0);
    goto corral_source_split_668;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_667;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    out_$p36 := $load.ref($M.0, out_$p35);
    goto corral_source_split_666;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_665;

  $bb14:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p34, $0.ref);
    goto corral_source_split_663;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_662;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} ldv_skb_free(out_$p33);
    goto corral_source_split_661;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_660;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_659;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_658;

  $bb13:
    assume out_$i30 == 1;
    goto corral_source_split_657;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    out_$i30 := $ne.i64(out_$i29, 0);
    goto corral_source_split_655;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_654;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    out_$p28 := $load.ref($M.0, out_$p27);
    goto corral_source_split_653;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(0, 1));
    goto corral_source_split_652;

  $bb11:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p26, 0);
    goto corral_source_split_650;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(8, 1));
    goto corral_source_split_649;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} dma_unmap_single_attrs(in_$p2, out_$i22, out_$i25, 2, $0.ref);
    goto corral_source_split_648;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i64(out_$i24);
    goto corral_source_split_647;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i16($M.0, out_$p23);
    goto corral_source_split_646;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_645;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i64($M.0, out_$p21);
    goto corral_source_split_644;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(8, 1));
    goto corral_source_split_643;

  $bb10:
    assume out_$i20 == 1;
    goto corral_source_split_642;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    out_$i20 := $ne.i64(out_$i19, 0);
    goto corral_source_split_640;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i64($M.0, out_$p18);
    goto corral_source_split_639;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p15, $mul.ref(out_$i16, 40)), $mul.ref(8, 1));
    goto corral_source_split_638;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    goto corral_source_split_637;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i64(out_$i12);
    goto corral_source_split_636;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_635;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    out_$p14 := $bitcast.ref.ref(out_$p13);
    goto corral_source_split_634;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_633;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i12 := i40evf_clean_rx_ring_loop_$bb8(in_$p0, in_$p2, in_$p8, out_$p13, out_$p14, out_$p15, out_$i16, out_$p18, out_$i19, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$p33, out_$p34, out_$p35, out_$p36, out_$i37, out_$i38, out_$p39, out_$i40, out_$i41, out_$p42, out_$i43, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i12);
    return;

  exit:
    return;
}



procedure i40evf_clean_rx_ring_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$p8: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p18: ref, in_$i19: i64, in_$i20: i1, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i24: i16, in_$i25: i64, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_$p31: ref, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$p36: ref, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$i49: i32, in_$i50: i32, in_$i51: i16, in_$i52: i16, in_$i53: i32, in_$i54: i32, in_$i55: i1, in_$i12: i16) returns (out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p18: ref, out_$i19: i64, out_$i20: i1, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i24: i16, out_$i25: i64, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_$p31: ref, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$p36: ref, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$i49: i32, out_$i50: i32, out_$i51: i16, out_$i52: i16, out_$i53: i32, out_$i54: i32, out_$i55: i1, out_$i12: i16);
  modifies $M.0, $M.4, $M.3;



implementation arch_local_save_flags_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} arch_local_save_flags_loop_$bb3();
    return;

  exit:
    return;
}



procedure arch_local_save_flags_loop_$bb3();



implementation dma_unmap_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_single_attrs_loop_$bb3();



implementation dma_unmap_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_unmap_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_unmap_page_loop_$bb3();



implementation ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1)
{

  entry:
    out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := in_$i20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p26, in_$i27, in_$i28, in_$i29;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_896;

  $bb21:
    assume out_$i29 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := out_$i27;
    goto $bb21_dummy;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i27, out_$i28);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i28 := $M.3;
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i20, 1);
    call {:si_unique_call 216} {:cexpr "i"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_905;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p26, out_$p23);
    goto corral_source_split_904;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i25, 8));
    goto corral_source_split_903;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    out_$i25 := $sext.i32.i64(out_$i24);
    goto corral_source_split_902;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    out_$i24 := $sub.i32(out_$i20, 1);
    goto corral_source_split_901;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.4, out_$p22);
    goto corral_source_split_900;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i21, 8));
    goto corral_source_split_899;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i21 := $sext.i32.i64(out_$i20);
    goto corral_source_split_898;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29 := ldv_set_remove_loop_$bb17(out_$i20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p26, out_$i27, out_$i28, out_$i29);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb17(in_$i20: i32, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i64, in_$p26: ref, in_$i27: i32, in_$i28: i32, in_$i29: i1) returns (out_$i20: i32, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i64, out_$p26: ref, out_$i27: i32, out_$i28: i32, out_$i29: i1);
  modifies $M.4;



implementation ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1)
{

  entry:
    out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := in_$i4, in_$i6, in_$p7, in_$p8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$i14, in_$i15;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_869;

  $bb11:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i13;
    goto $bb11_dummy;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i13, out_$i14);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    out_$i14 := $M.3;
    goto corral_source_split_886;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i4, 1);
    call {:si_unique_call 214} {:cexpr "i"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_885;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$i12 := out_$i4;
    assume true;
    goto $bb9;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i64(out_$i9, out_$i10);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$i10 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_$i9 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.4, out_$p7);
    goto corral_source_split_873;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(set_impl, $mul.ref(0, 120)), $mul.ref(out_$i6, 8));
    goto corral_source_split_872;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i4);
    goto corral_source_split_871;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15 := ldv_set_remove_loop_$bb4(in_$p1, out_$i4, out_$i6, out_$p7, out_$p8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$i14, out_$i15);
    return;

  exit:
    return;
}



procedure ldv_set_remove_loop_$bb4(in_$p1: ref, in_$i4: i32, in_$i6: i64, in_$p7: ref, in_$p8: ref, in_$i9: i64, in_$i10: i64, in_$i11: i1, in_$i12: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1) returns (out_$i4: i32, out_$i6: i64, out_$p7: ref, out_$p8: ref, out_$i9: i64, out_$i10: i64, out_$i11: i1, out_$i12: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1);



implementation i40evf_clean_tx_ring_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i16, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i10: i16) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i16, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i10: i16)
{

  entry:
    out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i10 := in_$p11, in_$p12, in_$p13, in_$i14, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i10;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_960;

  $bb10:
    assume out_$i22 == 1;
    assume {:verifier.code 0} true;
    out_$i10 := out_$i18;
    goto $bb10_dummy;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i22 := $sgt.i32(out_$i20, out_$i21);
    goto corral_source_split_974;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i18);
    goto corral_source_split_973;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_972;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, in_$p6);
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i16(out_$i17);
    call {:si_unique_call 222} {:cexpr "i"} boogie_si_record_i16(out_$i18);
    goto corral_source_split_970;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i16, 1);
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i10);
    goto corral_source_split_968;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} i40e_unmap_and_free_tx_resource(in_$p0, out_$p15);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p13, $mul.ref(out_$i14, 48));
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i64(out_$i10);
    goto corral_source_split_965;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, out_$p12);
    goto corral_source_split_964;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_963;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i10 := i40evf_clean_tx_ring_loop_$bb8(in_$p0, in_$p6, out_$p11, out_$p12, out_$p13, out_$i14, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i10);
    return;

  exit:
    return;
}



procedure i40evf_clean_tx_ring_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$i14: i64, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i16, in_$i19: i16, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$i10: i16) returns (out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$i14: i64, out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i16, out_$i19: i16, out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$i10: i16);
  modifies $M.0;



implementation netif_tx_disable_loop_$bb26(in_$p0: ref, in_$i9: i32, in_$p13: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i16: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i16: i32)
{

  entry:
    out_$p17, out_$i18, out_$i19, out_$i20, out_$i16 := in_$p17, in_$i18, in_$i19, in_$i20, in_$i16;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_1154;

  $bb28:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i16 := out_$i18;
    goto $bb28_dummy;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    out_$i20 := $ugt.i32(out_$i19, out_$i18);
    goto corral_source_split_1162;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, in_$p13);
    goto corral_source_split_1161;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i16, 1);
    call {:si_unique_call 269} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_1160;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 268} __netif_tx_unlock(out_$p17);
    goto corral_source_split_1159;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} netif_tx_stop_queue(out_$p17);
    goto corral_source_split_1158;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} __netif_tx_lock(out_$p17, in_$i9);
    goto corral_source_split_1157;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} out_$p17 := netdev_get_tx_queue(in_$p0, out_$i16);
    goto corral_source_split_1156;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb28_dummy:
    call {:si_unique_call 1} out_$p17, out_$i18, out_$i19, out_$i20, out_$i16 := netif_tx_disable_loop_$bb26(in_$p0, in_$i9, in_$p13, out_$p17, out_$i18, out_$i19, out_$i20, out_$i16);
    return;

  exit:
    return;
}



procedure netif_tx_disable_loop_$bb26(in_$p0: ref, in_$i9: i32, in_$p13: ref, in_$p17: ref, in_$i18: i32, in_$i19: i32, in_$i20: i1, in_$i16: i32) returns (out_$p17: ref, out_$i18: i32, out_$i19: i32, out_$i20: i1, out_$i16: i32);
  modifies $M.0;



implementation netif_tx_stop_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32)
{

  entry:
    out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := in_$p5, in_$i6, in_$i7, in_$i8, in_$i4;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1175;

  $bb6:
    assume out_$i8 == 1;
    assume {:verifier.code 0} true;
    out_$i4 := out_$i6;
    goto $bb6_dummy;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    out_$i8 := $ugt.i32(out_$i7, out_$i6);
    goto corral_source_split_1181;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    out_$i7 := $load.i32($M.0, in_$p1);
    goto corral_source_split_1180;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    out_$i6 := $add.i32(out_$i4, 1);
    call {:si_unique_call 273} {:cexpr "i"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_1179;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} netif_tx_stop_queue(out_$p5);
    goto corral_source_split_1178;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} out_$p5 := netdev_get_tx_queue(in_$p0, out_$i4);
    goto corral_source_split_1177;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p5, out_$i6, out_$i7, out_$i8, out_$i4 := netif_tx_stop_all_queues_loop_$bb4(in_$p0, in_$p1, out_$p5, out_$i6, out_$i7, out_$i8, out_$i4);
    return;

  exit:
    return;
}



procedure netif_tx_stop_all_queues_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p5: ref, in_$i6: i32, in_$i7: i32, in_$i8: i1, in_$i4: i32) returns (out_$p5: ref, out_$i6: i32, out_$i7: i32, out_$i8: i1, out_$i4: i32);



implementation i40evf_irq_disable_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i9: i32)
{

  entry:
    out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i9 := in_$p10, in_$p11, in_$i12, in_$i13, in_$i14, in_$p15, in_$p16, in_$p17, in_$i18, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i9;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1200;

  $bb10:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i9 := out_$i22;
    goto $bb10_dummy;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, out_$i22);
    goto corral_source_split_1218;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, in_$p6);
    goto corral_source_split_1217;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i9, 1);
    call {:si_unique_call 276} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} synchronize_irq(out_$i21);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(out_$p17, $mul.ref(out_$i18, 8)), $mul.ref(0, 1));
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i9);
    goto corral_source_split_1211;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1209;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} writel(0, out_$p15);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref(out_$p11, $mul.ref(out_$i14, 1));
    goto corral_source_split_1207;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_1206;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    out_$i13 := $mul.i32(out_$i12, 4);
    goto corral_source_split_1205;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i9, 3583);
    goto corral_source_split_1204;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1203;

  $bb9:
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i9 := i40evf_irq_disable_loop_$bb8(in_$p0, in_$p6, out_$p10, out_$p11, out_$i12, out_$i13, out_$i14, out_$p15, out_$p16, out_$p17, out_$i18, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i9);
    return;

  exit:
    return;
}



procedure i40evf_irq_disable_loop_$bb8(in_$p0: ref, in_$p6: ref, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i64, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$i18: i64, in_$p20: ref, in_$i21: i32, in_$i22: i32, in_$i23: i32, in_$i24: i1, in_$i9: i32) returns (out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i64, out_$p15: ref, out_$p16: ref, out_$p17: ref, out_$i18: i64, out_$p20: ref, out_$i21: i32, out_$i22: i32, out_$i23: i32, out_$i24: i1, out_$i9: i32);



implementation i40evf_napi_disable_all_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5 := in_$i6, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1235;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, in_$i3);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i5, 1);
    call {:si_unique_call 280} {:cexpr "q_idx"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_1242;

  corral_source_split_1240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} napi_disable(out_$p10);
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 320)), $mul.ref(16, 1));
    goto corral_source_split_1240;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_1238;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5 := i40evf_napi_disable_all_loop_$bb4(in_$p0, in_$i3, out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5);
    return;

  exit:
    return;
}



procedure i40evf_napi_disable_all_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32);
  modifies $CurrAddr;



implementation i40evf_clean_all_tx_rings_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i7 := in_$i8, in_$p10, in_$p11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1259;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, out_$i12);
    goto corral_source_split_1270;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_1269;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.0, out_$p14);
    goto corral_source_split_1268;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1267;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, in_$p1);
    goto corral_source_split_1266;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i7, 1);
    call {:si_unique_call 282} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1265;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} i40evf_clean_tx_ring(out_$p11);
    goto corral_source_split_1264;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1263;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_1262;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1261;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i7 := i40evf_clean_all_tx_rings_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i7);
    return;

  exit:
    return;
}



procedure i40evf_clean_all_tx_rings_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$i7: i32);
  modifies $M.0;



implementation i40evf_clean_all_rx_rings_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$i7: i32)
{

  entry:
    out_$i8, out_$p10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i7 := in_$i8, in_$p10, in_$p11, in_$i12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_1284;

  $bb6:
    assume out_$i17 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, out_$i12);
    goto corral_source_split_1295;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i16.i32(out_$i15);
    goto corral_source_split_1294;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i16($M.0, out_$p14);
    goto corral_source_split_1293;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p13, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1292;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    out_$p13 := $load.ref($M.0, in_$p1);
    goto corral_source_split_1291;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i7, 1);
    call {:si_unique_call 284} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_1290;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} i40evf_clean_rx_ring(out_$p11);
    goto corral_source_split_1289;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_1288;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i8, 8));
    goto corral_source_split_1287;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i8 := $sext.i32.i64(out_$i7);
    goto corral_source_split_1286;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i8, out_$p10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i7 := i40evf_clean_all_rx_rings_loop_$bb4(in_$p0, in_$p1, out_$i8, out_$p10, out_$p11, out_$i12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$i7);
    return;

  exit:
    return;
}



procedure i40evf_clean_all_rx_rings_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i8: i64, in_$p10: ref, in_$p11: ref, in_$i12: i32, in_$p13: ref, in_$p14: ref, in_$i15: i16, in_$i16: i32, in_$i17: i1, in_$i7: i32) returns (out_$i8: i64, out_$p10: ref, out_$p11: ref, out_$i12: i32, out_$p13: ref, out_$p14: ref, out_$i15: i16, out_$i16: i32, out_$i17: i1, out_$i7: i32);
  modifies $M.0, $M.4, $M.3;



implementation napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1)
{

  entry:
    out_$i5, out_$i6 := in_$i5, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6:
    assume {:verifier.code 0} true;
    assume out_$i6 == 1;
    goto $bb6_dummy;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    out_$i6 := $ne.i32(out_$i5, 0);
    goto corral_source_split_1311;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} out_$i5 := test_and_set_bit(0, in_$p2);
    call {:si_unique_call 291} {:cexpr "tmp"} boogie_si_record_i32(out_$i5);
    goto corral_source_split_1310;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} msleep(1);
    goto corral_source_split_1309;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i5, out_$i6 := napi_disable_loop_$bb4(in_$p2, out_$i5, out_$i6);
    return;

  exit:
    return;
}



procedure napi_disable_loop_$bb4(in_$p2: ref, in_$i5: i32, in_$i6: i1) returns (out_$i5: i32, out_$i6: i1);
  modifies $CurrAddr;



implementation i40evf_set_interrupt_capability_loop_$bb17(in_$p0: ref, in_$i24: i32, in_$i35: i16, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i34: i32) returns (out_$i35: i16, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i34: i32)
{

  entry:
    out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i34 := in_$i35, in_$p36, in_$p37, in_$i38, in_$p40, in_$i41, in_$i42, in_$i34;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_1529;

  $bb19:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := out_$i41;
    goto $bb19_dummy;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i41, in_$i24);
    goto corral_source_split_1539;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i34, 1);
    call {:si_unique_call 355} {:cexpr "vector"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_1538;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p40, out_$i35);
    goto corral_source_split_1537;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p37, $mul.ref(out_$i38, 8)), $mul.ref(4, 1));
    goto corral_source_split_1536;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    goto corral_source_split_1535;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    out_$i38 := $sext.i32.i64(out_$i34);
    goto corral_source_split_1534;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_1533;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_1532;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i35 := $trunc.i32.i16(out_$i34);
    goto corral_source_split_1531;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb19_dummy:
    call {:si_unique_call 1} out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i34 := i40evf_set_interrupt_capability_loop_$bb17(in_$p0, in_$i24, out_$i35, out_$p36, out_$p37, out_$i38, out_$p40, out_$i41, out_$i42, out_$i34);
    return;

  exit:
    return;
}



procedure i40evf_set_interrupt_capability_loop_$bb17(in_$p0: ref, in_$i24: i32, in_$i35: i16, in_$p36: ref, in_$p37: ref, in_$i38: i64, in_$p40: ref, in_$i41: i32, in_$i42: i1, in_$i34: i32) returns (out_$i35: i16, out_$p36: ref, out_$p37: ref, out_$i38: i64, out_$p40: ref, out_$i41: i32, out_$i42: i1, out_$i34: i32);
  modifies $M.0;



implementation i40evf_free_queues_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i11: i32) returns (out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i11: i32)
{

  entry:
    out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i11 := in_$i12, in_$p14, in_$p15, in_$i16, in_$i17, in_$i18, in_$p20, in_$p21, in_$p22, in_$i23, in_$p25, in_$i26, in_$p28, in_$i29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i11;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_1884;

  $bb13:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i11 := out_$i29;
    goto $bb13_dummy;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    out_$i34 := $sgt.i32(out_$i33, out_$i29);
    goto corral_source_split_1910;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i16.i32(out_$i32);
    goto corral_source_split_1909;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i16($M.0, out_$p31);
    goto corral_source_split_1908;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_1907;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, in_$p5);
    goto corral_source_split_1906;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i11, 1);
    call {:si_unique_call 469} {:cexpr "i"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_1905;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p28, $0.ref);
    goto corral_source_split_1904;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i26, 8));
    goto corral_source_split_1903;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i11);
    goto corral_source_split_1902;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p25, $0.ref);
    goto corral_source_split_1901;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i23, 8));
    goto corral_source_split_1900;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i11);
    goto corral_source_split_1899;

  $bb11:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} kfree_call_rcu(out_$p22, $i2p.i64.ref(160));
    goto corral_source_split_1897;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 176)), $mul.ref(160, 1));
    goto corral_source_split_1896;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_1895;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i18, 8));
    goto corral_source_split_1894;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i11);
    goto corral_source_split_1893;

  $bb10:
    assume out_$i17 == 1;
    goto corral_source_split_1892;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_1890;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_1889;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_1888;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i12, 8));
    goto corral_source_split_1887;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_1886;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i11 := i40evf_free_queues_loop_$bb8(in_$p0, in_$p5, out_$i12, out_$p14, out_$p15, out_$i16, out_$i17, out_$i18, out_$p20, out_$p21, out_$p22, out_$i23, out_$p25, out_$i26, out_$p28, out_$i29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i11);
    return;

  exit:
    return;
}



procedure i40evf_free_queues_loop_$bb8(in_$p0: ref, in_$p5: ref, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$i18: i64, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$p25: ref, in_$i26: i64, in_$p28: ref, in_$i29: i32, in_$p30: ref, in_$p31: ref, in_$i32: i16, in_$i33: i32, in_$i34: i1, in_$i11: i32) returns (out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$i18: i64, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$p25: ref, out_$i26: i64, out_$p28: ref, out_$i29: i32, out_$p30: ref, out_$p31: ref, out_$i32: i16, out_$i33: i32, out_$i34: i1, out_$i11: i32);
  modifies $M.0;



implementation i40e_free_arq_bufs_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i15: i32, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i6: i32, in_vslice_dummy_var_164: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$i15: i32, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i6: i32, out_vslice_dummy_var_164: i32)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$i12, out_$p13, out_$i15, out_$i16, out_$i17, out_$i18, out_$i6, out_vslice_dummy_var_164 := in_$p9, in_$p10, in_$p11, in_$i12, in_$p13, in_$i15, in_$i16, in_$i17, in_$i18, in_$i6, in_vslice_dummy_var_164;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  $bb6:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i15;
    goto $bb6_dummy;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    out_$i18 := $sgt.i32(out_$i17, out_$i15);
    goto corral_source_split_2056;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_2055;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, in_$p2);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i15 := $add.i32(out_$i6, 1);
    call {:si_unique_call 495} {:cexpr "i"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} out_vslice_dummy_var_164 := i40evf_free_dma_mem_d(in_$p0, out_$p13);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p11, $mul.ref(out_$i12, 24));
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i6);
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_2048;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$i12, out_$p13, out_$i15, out_$i16, out_$i17, out_$i18, out_$i6, out_vslice_dummy_var_164 := i40e_free_arq_bufs_loop_$bb4(in_$p0, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$p13, out_$i15, out_$i16, out_$i17, out_$i18, out_$i6, out_vslice_dummy_var_164);
    return;

  exit:
    return;
}



procedure i40e_free_arq_bufs_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$i15: i32, in_$i16: i16, in_$i17: i32, in_$i18: i1, in_$i6: i32, in_vslice_dummy_var_164: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$i15: i32, out_$i16: i16, out_$i17: i32, out_$i18: i1, out_$i6: i32, out_vslice_dummy_var_164: i32);



implementation i40e_free_asq_bufs_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i6: i32, in_vslice_dummy_var_167: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i6: i32, out_vslice_dummy_var_167: i32)
{

  entry:
    out_$p9, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i6, out_vslice_dummy_var_167 := in_$p9, in_$p10, in_$p11, in_$i12, in_$p14, in_$i15, in_$i16, in_$p19, in_$p20, in_$p21, in_$i22, in_$p23, in_$i25, in_$i26, in_$i27, in_$i28, in_$i6, in_vslice_dummy_var_167;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2114;

  $bb9:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i25;
    goto $bb9_dummy;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    out_$i28 := $sgt.i32(out_$i27, out_$i25);
    goto corral_source_split_2136;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    goto corral_source_split_2135;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i16($M.0, in_$p2);
    goto corral_source_split_2134;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i6, 1);
    call {:si_unique_call 501} {:cexpr "i"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_2133;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} out_vslice_dummy_var_167 := i40evf_free_dma_mem_d(in_$p0, out_$p23);
    goto corral_source_split_2131;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p21, $mul.ref(out_$i22, 24));
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$i22 := $sext.i32.i64(out_$i6);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_2126;

  $bb6:
    assume out_$i16 == 1;
    goto corral_source_split_2125;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    out_$i16 := $ne.i64(out_$i15, 0);
    goto corral_source_split_2123;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    out_$i15 := $load.i64($M.0, out_$p14);
    goto corral_source_split_2122;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p11, $mul.ref(out_$i12, 24)), $mul.ref(8, 1));
    goto corral_source_split_2121;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i6);
    goto corral_source_split_2119;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    out_$p11 := $load.ref($M.0, out_$p10);
    goto corral_source_split_2118;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_2117;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(56, 1));
    goto corral_source_split_2116;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i6, out_vslice_dummy_var_167 := i40e_free_asq_bufs_loop_$bb4(in_$p0, in_$p2, out_$p9, out_$p10, out_$p11, out_$i12, out_$p14, out_$i15, out_$i16, out_$p19, out_$p20, out_$p21, out_$i22, out_$p23, out_$i25, out_$i26, out_$i27, out_$i28, out_$i6, out_vslice_dummy_var_167);
    return;

  exit:
    return;
}



procedure i40e_free_asq_bufs_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$i12: i64, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$i22: i64, in_$p23: ref, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i6: i32, in_vslice_dummy_var_167: i32) returns (out_$p9: ref, out_$p10: ref, out_$p11: ref, out_$i12: i64, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$i22: i64, out_$p23: ref, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i6: i32, out_vslice_dummy_var_167: i32);



implementation i40evf_asq_send_command_loop_$bb47(in_$p0: ref, in_$i187: i32, in_$i188: i1, in_$i189: i8, in_$i190: i1, in_$i186: i32, in_$i191: i64, in_$i192: i32, in_$i193: i1) returns (out_$i187: i32, out_$i188: i1, out_$i189: i8, out_$i190: i1, out_$i186: i32, out_$i191: i64, out_$i192: i32, out_$i193: i1)
{

  entry:
    out_$i187, out_$i188, out_$i189, out_$i190, out_$i186, out_$i191, out_$i192, out_$i193 := in_$i187, in_$i188, in_$i189, in_$i190, in_$i186, in_$i191, in_$i192, in_$i193;
    goto $bb47, exit;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb50:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    out_$i186 := out_$i187;
    goto $bb50_dummy;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    out_$i190 := $trunc.i8.i1(out_$i189);
    goto corral_source_split_2373;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    out_$i189 := $zext.i1.i8(out_$i188);
    call {:si_unique_call 529} {:cexpr "tmp___1"} boogie_si_record_i8(out_$i189);
    goto corral_source_split_2372;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} out_$i188 := i40evf_asq_done(in_$p0);
    goto corral_source_split_2371;

  $bb48:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2370;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    out_$i187 := out_$i192;
    assume true;
    goto $bb48;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    out_$i193 := $ule.i32(out_$i192, 99999);
    goto corral_source_split_2380;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    out_$i192 := $add.i32(out_$i186, 10);
    call {:si_unique_call 531} {:cexpr "total_delay"} boogie_si_record_i32(out_$i192);
    goto corral_source_split_2379;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} __udelay(out_$i191);
    goto corral_source_split_2378;

  $bb52:
    assume {:verifier.code 0} true;
    out_$i191 := $zext.i32.i64(10);
    goto corral_source_split_2377;

  $bb50_dummy:
    call {:si_unique_call 1} out_$i187, out_$i188, out_$i189, out_$i190, out_$i186, out_$i191, out_$i192, out_$i193 := i40evf_asq_send_command_loop_$bb47(in_$p0, out_$i187, out_$i188, out_$i189, out_$i190, out_$i186, out_$i191, out_$i192, out_$i193);
    return;

  exit:
    return;
}



procedure i40evf_asq_send_command_loop_$bb47(in_$p0: ref, in_$i187: i32, in_$i188: i1, in_$i189: i8, in_$i190: i1, in_$i186: i32, in_$i191: i64, in_$i192: i32, in_$i193: i1) returns (out_$i187: i32, out_$i188: i1, out_$i189: i8, out_$i190: i1, out_$i186: i32, out_$i191: i64, out_$i192: i32, out_$i193: i1);
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40e_clean_asq_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p18: ref, in_$p22: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i16, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i16, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p30: ref, in_$i31: i16, in_$p32: ref, in_$i72: i16, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8, in_cmdloc_dummy_var_45: [ref]i8) returns (out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i16, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i16, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p30: ref, out_$i31: i16, out_$p32: ref, out_$i72: i16, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8, out_cmdloc_dummy_var_45: [ref]i8)
{

  entry:
    out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p30, out_$i31, out_$p32, out_$i72, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_cmdloc_dummy_var_45 := in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p54, in_$p55, in_$p56, in_$i57, in_$p58, in_$p60, in_$p61, in_$p62, in_$i63, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$p30, in_$i31, in_$p32, in_$i72, in_cmdloc_dummy_var_39, in_cmdloc_dummy_var_40, in_cmdloc_dummy_var_41, in_cmdloc_dummy_var_42, in_cmdloc_dummy_var_43, in_cmdloc_dummy_var_44, in_cmdloc_dummy_var_45;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;

  $bb12:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$i31, out_$p32 := out_$p58, out_$i52, out_$p64;
    goto $bb12_dummy;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i52;
    assume true;
    goto $bb12;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i32(out_$i69, out_$i70);
    goto corral_source_split_2636;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i16.i32(out_$i52);
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} out_$i69 := readl(out_$p68);
    call {:si_unique_call 588} {:cexpr "tmp"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_2634;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(out_$p65, $mul.ref(out_$i67, 1));
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i32.i64(out_$i66);
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.0, in_$p22);
    goto corral_source_split_2631;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, in_$p18);
    goto corral_source_split_2630;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref(out_$p62, $mul.ref(out_$i63, 24));
    goto corral_source_split_2629;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i64(out_$i52);
    goto corral_source_split_2628;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p61);
    goto corral_source_split_2627;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref(out_$p56, $mul.ref(out_$i57, 32));
    out_$p60 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(40, 1)), $mul.ref(0, 1));
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i16.i64(out_$i52);
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p55);
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_2622;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(16, 1)), $mul.ref(0, 1));
    goto corral_source_split_2621;

  $bb10:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := out_$i46;
    goto $bb11;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$i52 := 0;
    goto $bb11;

  $bb9:
    assume out_$i51 == 1;
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i49, out_$i50);
    goto corral_source_split_2617;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(out_$i46);
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_2615;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i48 := $load.i16($M.0, out_$p47);
    goto corral_source_split_2614;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i32.i16(out_$i45);
    call {:si_unique_call 586} {:cexpr "ntc"} boogie_si_record_i16(out_$i46);
    out_$p47 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 1536)), $mul.ref(544, 1)), $mul.ref(88, 1)), $mul.ref(64, 1));
    goto corral_source_split_2613;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    out_$i45 := $add.i32(out_$i44, 1);
    goto corral_source_split_2612;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i31);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_44 := $M.0;
    call {:si_unique_call 585} out_cmdloc_dummy_var_45 := $memset.i8(out_cmdloc_dummy_var_44, out_$p43, 0, 24, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_45;
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_42 := $M.0;
    call {:si_unique_call 584} out_cmdloc_dummy_var_43 := $memset.i8(out_cmdloc_dummy_var_42, out_$p42, 0, 32, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_43;
    goto corral_source_split_2608;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p42 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2607;

  $bb7:
    assume !(out_$i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_39 := $M.0;
    out_cmdloc_dummy_var_40 := $M.0;
    call {:si_unique_call 582} out_cmdloc_dummy_var_41 := $memcpy.i8(out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_$p40, out_$p41, 32, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_41;
    call {:si_unique_call 583} devirtbounce.8(out_$p39, in_$p0, in_$p1);
    goto corral_source_split_2605;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p39 := $bitcast.ref.ref(out_$p38);
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$p38 := $load.ref($M.0, out_$p37);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p32, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2600;

  $bb6:
    assume out_$i36 == 1;
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i64(out_$i35, 0);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    out_$i35 := $p2i.ref.i64(out_$p34);
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2595;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(out_$p32, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb12_dummy:
    call {:si_unique_call 1} out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p30, out_$i31, out_$p32, out_$i72, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_cmdloc_dummy_var_45 := i40e_clean_asq_loop_$bb4(in_$p0, in_$p1, in_$p18, in_$p22, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$p56, out_$i57, out_$p58, out_$p60, out_$p61, out_$p62, out_$i63, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p30, out_$i31, out_$p32, out_$i72, out_cmdloc_dummy_var_39, out_cmdloc_dummy_var_40, out_cmdloc_dummy_var_41, out_cmdloc_dummy_var_42, out_cmdloc_dummy_var_43, out_cmdloc_dummy_var_44, out_cmdloc_dummy_var_45);
    return;

  exit:
    return;
}



procedure i40e_clean_asq_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p18: ref, in_$p22: ref, in_$p33: ref, in_$p34: ref, in_$i35: i64, in_$i36: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$i45: i32, in_$i46: i16, in_$p47: ref, in_$i48: i16, in_$i49: i32, in_$i50: i32, in_$i51: i1, in_$i52: i16, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$p58: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$i71: i1, in_$p30: ref, in_$i31: i16, in_$p32: ref, in_$i72: i16, in_cmdloc_dummy_var_39: [ref]i8, in_cmdloc_dummy_var_40: [ref]i8, in_cmdloc_dummy_var_41: [ref]i8, in_cmdloc_dummy_var_42: [ref]i8, in_cmdloc_dummy_var_43: [ref]i8, in_cmdloc_dummy_var_44: [ref]i8, in_cmdloc_dummy_var_45: [ref]i8) returns (out_$p33: ref, out_$p34: ref, out_$i35: i64, out_$i36: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$i45: i32, out_$i46: i16, out_$p47: ref, out_$i48: i16, out_$i49: i32, out_$i50: i32, out_$i51: i1, out_$i52: i16, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$p58: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$i71: i1, out_$p30: ref, out_$i31: i16, out_$p32: ref, out_$i72: i16, out_cmdloc_dummy_var_39: [ref]i8, out_cmdloc_dummy_var_40: [ref]i8, out_cmdloc_dummy_var_41: [ref]i8, out_cmdloc_dummy_var_42: [ref]i8, out_cmdloc_dummy_var_43: [ref]i8, out_cmdloc_dummy_var_44: [ref]i8, out_cmdloc_dummy_var_45: [ref]i8);
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_debug_aq_loop_$bb16(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p4: ref, in_$p56: ref, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i16, in_$i94: i32, in_$i95: i1, in_$i61: i32, in_$i96: i32, in_cmdloc_dummy_var_48: [ref]i8, in_cmdloc_dummy_var_49: [ref]i8) returns (out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i16, out_$i94: i32, out_$i95: i1, out_$i61: i32, out_$i96: i32, out_cmdloc_dummy_var_48: [ref]i8, out_cmdloc_dummy_var_49: [ref]i8)
{

  entry:
    out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$p89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i61, out_$i96, out_cmdloc_dummy_var_48, out_cmdloc_dummy_var_49 := in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$i79, in_$i80, in_$p81, in_$i82, in_$p83, in_$i84, in_$p85, in_$i86, in_$p87, in_$i88, in_$p89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i61, in_$i96, in_cmdloc_dummy_var_48, in_cmdloc_dummy_var_49;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_2736;

  $bb21:
    assume out_$i95 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := out_$i92;
    goto $bb21_dummy;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i96 := out_$i92;
    assume true;
    goto $bb21;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    out_$i95 := $ugt.i32(out_$i94, out_$i92);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i94 := $zext.i16.i32(out_$i93);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i16($M.0, in_$p56);
    goto corral_source_split_2775;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i92 := $add.i32(out_$i61, 1);
    call {:si_unique_call 599} {:cexpr "i"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_2774;

  $bb19:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_48 := $M.21;
    call {:si_unique_call 598} out_cmdloc_dummy_var_49 := $memset.i8(out_cmdloc_dummy_var_48, out_$p91, 0, 16, $zext.i32.i64(16), 0 == 1);
    $M.21 := out_cmdloc_dummy_var_49;
    goto corral_source_split_2772;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    out_$p91 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_2771;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} i40evf_debug_d.ref.i32.ref.i32.i32.i32.i32.i32(out_$p81, in_$i1, .str.40, out_$i82, out_$i84, out_$i86, out_$i88, out_$i90);
    goto corral_source_split_2770;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i32($M.21, out_$p89);
    goto corral_source_split_2769;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(3, 4));
    goto corral_source_split_2768;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.21, out_$p87);
    goto corral_source_split_2767;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(2, 4));
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.21, out_$p85);
    goto corral_source_split_2765;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(1, 4));
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i32($M.21, out_$p83);
    goto corral_source_split_2763;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(0, 4));
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    out_$i82 := $sub.i32(out_$i61, 15);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$p81 := $bitcast.ref.ref(in_$p0);
    goto corral_source_split_2760;

  $bb18:
    assume out_$i80 == 1;
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i32(out_$i79, 15);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i32(out_$i61, 15);
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $M.21 := $store.i32($M.21, out_$p78, out_$i74);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(out_$i77, 4));
    goto corral_source_split_2754;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i32.i64(out_$i76);
    goto corral_source_split_2753;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$i76 := $udiv.i32(out_$i75, 4);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$i75 := $and.i32(out_$i61, 15);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_$i74 := $or.i32(out_$i66, out_$i73);
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$i73 := $shl.i32(out_$i70, out_$i72);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$i72 := $mul.i32(out_$i71, 8);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$i71 := $and.i32(out_$i61, 3);
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.0, out_$p68);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref(in_$p3, $mul.ref(out_$i67, 1));
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i67 := $zext.i32.i64(out_$i61);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$i66 := $load.i32($M.21, out_$p65);
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p4, $mul.ref(0, 16)), $mul.ref(out_$i64, 4));
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i32.i64(out_$i63);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    out_$i63 := $udiv.i32(out_$i62, 4);
    goto corral_source_split_2739;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i62 := $and.i32(out_$i61, 15);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$p89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i61, out_$i96, out_cmdloc_dummy_var_48, out_cmdloc_dummy_var_49 := i40evf_debug_aq_loop_$bb16(in_$p0, in_$i1, in_$p3, in_$p4, in_$p56, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$i79, out_$i80, out_$p81, out_$i82, out_$p83, out_$i84, out_$p85, out_$i86, out_$p87, out_$i88, out_$p89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i61, out_$i96, out_cmdloc_dummy_var_48, out_cmdloc_dummy_var_49);
    return;

  exit:
    return;
}



procedure i40evf_debug_aq_loop_$bb16(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$p4: ref, in_$p56: ref, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i32, in_$i67: i64, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i32, in_$i72: i32, in_$i73: i32, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i64, in_$p78: ref, in_$i79: i32, in_$i80: i1, in_$p81: ref, in_$i82: i32, in_$p83: ref, in_$i84: i32, in_$p85: ref, in_$i86: i32, in_$p87: ref, in_$i88: i32, in_$p89: ref, in_$i90: i32, in_$p91: ref, in_$i92: i32, in_$i93: i16, in_$i94: i32, in_$i95: i1, in_$i61: i32, in_$i96: i32, in_cmdloc_dummy_var_48: [ref]i8, in_cmdloc_dummy_var_49: [ref]i8) returns (out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i32, out_$i67: i64, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i32, out_$i72: i32, out_$i73: i32, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i64, out_$p78: ref, out_$i79: i32, out_$i80: i1, out_$p81: ref, out_$i82: i32, out_$p83: ref, out_$i84: i32, out_$p85: ref, out_$i86: i32, out_$p87: ref, out_$i88: i32, out_$p89: ref, out_$i90: i32, out_$p91: ref, out_$i92: i32, out_$i93: i16, out_$i94: i32, out_$i95: i1, out_$i61: i32, out_$i96: i32, out_cmdloc_dummy_var_48: [ref]i8, out_cmdloc_dummy_var_49: [ref]i8);
  modifies $M.21, $CurrAddr;



implementation i40evf_irq_enable_queues_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6 := in_$i7, in_$i8, in_$i9, in_$i10, in_$p11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$i17, in_$i18, in_$i19, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2979;

  $bb9:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i17;
    goto $bb9_dummy;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    out_$i19 := $sgt.i32(out_$i18, out_$i17);
    goto corral_source_split_2996;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i32($M.0, in_$p3);
    goto corral_source_split_2995;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i6, 1);
    call {:si_unique_call 667} {:cexpr "i"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_2994;

  $bb7:
    assume !(out_$i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    goto $bb8;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} writel(3, out_$p16);
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref(out_$p12, $mul.ref(out_$i15, 1));
    goto corral_source_split_2991;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$i15 := $sext.i32.i64(out_$i14);
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$i14 := $mul.i32(out_$i13, 4);
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i6, 3583);
    goto corral_source_split_2988;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_2987;

  $bb6:
    assume out_$i10 == 1;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$i10 := $ne.i32(out_$i9, 0);
    goto corral_source_split_2984;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    out_$i9 := $and.i32(out_$i8, in_$i1);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    out_$i8 := $shl.i32(1, out_$i7);
    goto corral_source_split_2982;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $add.i32(out_$i6, $sub.i32(0, 1));
    goto corral_source_split_2981;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb9_dummy:
    call {:si_unique_call 1} out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6 := i40evf_irq_enable_queues_loop_$bb4(in_$p0, in_$i1, in_$p3, out_$i7, out_$i8, out_$i9, out_$i10, out_$p11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$i17, out_$i18, out_$i19, out_$i6);
    return;

  exit:
    return;
}



procedure i40evf_irq_enable_queues_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p3: ref, in_$i7: i32, in_$i8: i32, in_$i9: i32, in_$i10: i1, in_$p11: ref, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i64, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i1, in_$i6: i32) returns (out_$i7: i32, out_$i8: i32, out_$i9: i32, out_$i10: i1, out_$p11: ref, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i64, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i1, out_$i6: i32);



implementation i40evf_alloc_rx_buffers_loop_$bb11(in_$p0: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i16, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i16, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i16, in_$p75: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i16, in_$p107: ref, in_$i108: i64, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i64, in_$i121: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i32, in_$i128: i1, in_$i129: i16, in_$p130: ref, in_$p140: ref, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$p146: ref, in_$p147: ref, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$i148: i16, in_$i155: i32, in_$i156: i32, in_$i157: i16, in_$p158: ref, in_$i159: i16, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i16, in_$i164: i32, in_$i165: i32, in_$i166: i16, in_$i167: i32, in_$i168: i1, in_$i16: i16, in_$i17: i16, in_$i169: i16) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i16, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i16, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i16, out_$p75: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i16, out_$p107: ref, out_$i108: i64, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i64, out_$i121: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i32, out_$i128: i1, out_$i129: i16, out_$p130: ref, out_$p140: ref, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$p146: ref, out_$p147: ref, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$i148: i16, out_$i155: i32, out_$i156: i32, out_$i157: i16, out_$p158: ref, out_$i159: i16, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i16, out_$i164: i32, out_$i165: i32, out_$i166: i16, out_$i167: i32, out_$i168: i1, out_$i16: i16, out_$i17: i16, out_$i169: i16)
{

  entry:
    out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$i145, out_$p146, out_$p147, out_$p149, out_$i150, out_$p151, out_$p152, out_$p153, out_$p154, out_$i148, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i16, out_$i17, out_$i169 := in_$p18, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$i39, in_$i40, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$p56, in_$i57, in_$i58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$p75, in_$p85, in_$i86, in_$i87, in_$p88, in_$p89, in_$i90, in_$i91, in_$p92, in_$p93, in_$p94, in_$p95, in_$i96, in_$i97, in_$i98, in_$p107, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$p118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p140, in_$i141, in_$p142, in_$p143, in_$p144, in_$i145, in_$p146, in_$p147, in_$p149, in_$i150, in_$p151, in_$p152, in_$p153, in_$p154, in_$i148, in_$i155, in_$i156, in_$i157, in_$p158, in_$i159, in_$i160, in_$i161, in_$i162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i16, in_$i17, in_$i169;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3029;

  $bb44:
    assume out_$i168 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i166, out_$i163;
    goto $bb44_dummy;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i163;
    assume true;
    goto $bb44;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    out_$i168 := $ne.i32(out_$i167, 0);
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i16.i32(out_$i16);
    goto corral_source_split_3224;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i16(out_$i165);
    call {:si_unique_call 684} {:cexpr "cleaned_count"} boogie_si_record_i16(out_$i166);
    goto corral_source_split_3223;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    out_$i165 := $sub.i32(out_$i164, 1);
    goto corral_source_split_3222;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i164 := $zext.i16.i32(out_$i16);
    goto corral_source_split_3221;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_3220;

  $bb42:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    out_$i163 := out_$i157;
    goto $bb43;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i163 := 0;
    goto $bb43;

  $bb41:
    assume out_$i162 == 1;
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i160, out_$i161);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i161 := $zext.i16.i32(out_$i157);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i16.i32(out_$i159);
    goto corral_source_split_3214;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    out_$i159 := $load.i16($M.0, out_$p158);
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$p158 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3212;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i157 := $trunc.i32.i16(out_$i156);
    call {:si_unique_call 683} {:cexpr "i"} boogie_si_record_i16(out_$i157);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i156 := $add.i32(out_$i155, 1);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i155 := $zext.i16.i32(out_$i148);
    goto corral_source_split_3209;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_3208;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p154, 0);
    assume {:verifier.code 0} true;
    out_$i148 := out_$i17;
    goto $bb40;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i148 := out_$i17;
    goto $bb40;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p147, out_$i145);
    goto corral_source_split_3206;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(out_$p146, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3205;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$p146 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i64($M.0, out_$p144);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p143, out_$i141);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p142, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$p142 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i64($M.0, out_$p140);
    goto corral_source_split_3198;

  $bb39:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3197;

  $bb35:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i129, out_$p130 := out_$i17, out_$p27;
    assume true;
    goto $bb37;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i32(out_$i127, 0);
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} out_$i127 := dma_mapping_error(out_$p124, out_$i126);
    call {:si_unique_call 682} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i127);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i64($M.0, out_$p125);
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$p124 := $load.ref($M.0, out_$p123);
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p122, out_$i121);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} out_$i121 := dma_map_page(out_$p115, out_$p117, out_$i120, 2048, 2);
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i32.i64(out_$i119);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i32($M.0, out_$p118);
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(32, 1));
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$p115 := $load.ref($M.0, out_$p114);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p113, out_$i112);
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(32, 1));
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i112 := $xor.i32(out_$i111, 2048);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i32($M.0, out_$p110);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(32, 1));
    goto corral_source_split_3162;

  $bb34:
    assume out_$i109 == 1;
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i64(out_$i108, 0);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i64($M.0, out_$p107);
    goto corral_source_split_3158;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(24, 1));
    goto corral_source_split_3157;

  $bb29:
    assume !(out_$i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i98 := out_$i17;
    assume true;
    goto $bb31;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$i97 := $eq.i64(out_$i96, 0);
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    out_$i96 := $p2i.ref.i64(out_$p95);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p93, out_$p92);
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} out_$p92 := alloc_pages(32, 0);
    goto corral_source_split_3138;

  $bb28:
    assume out_$i91 == 1;
    goto corral_source_split_3137;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i64(out_$i90, 0);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$i90 := $p2i.ref.i64(out_$p89);
    goto corral_source_split_3125;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    out_$p89 := $load.ref($M.0, out_$p88);
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(16, 1));
    goto corral_source_split_3123;

  $bb26:
    assume out_$i87 == 1;
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i86, 0);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} out_$i86 := constant_test_bit(4, out_$p85);
    call {:si_unique_call 678} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_3119;

  $bb25:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(40, 1));
    goto corral_source_split_3118;

  $bb21:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i74, out_$p75 := out_$i17, out_$p27;
    assume true;
    goto $bb23;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 675} out_$i72 := dma_mapping_error(out_$p69, out_$i71);
    call {:si_unique_call 676} {:cexpr "tmp"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i71 := $load.i64($M.0, out_$p70);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p67, out_$i66);
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} out_$i66 := dma_map_single_attrs(out_$p60, out_$p62, out_$i65, 2, $0.ref);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i16.i64(out_$i64);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i16($M.0, out_$p63);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$p61 := $add.ref($add.ref(out_$p55, $mul.ref(0, 232)), $mul.ref(216, 1));
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$p60 := $load.ref($M.0, out_$p59);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_3088;

  $bb20:
    assume out_$i58 == 1;
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i64(out_$i57, 0);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i64($M.0, out_$p56);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3083;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3082;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    out_$p55 := out_$p29;
    goto $bb19;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$p55 := out_$p37;
    goto $bb19;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p54, out_$p37);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(0, 1));
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} skb_record_rx_queue(out_$p37, out_$i53);
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i52);
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i51);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i16($M.0, out_$p50);
    goto corral_source_split_3075;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(48, 1));
    goto corral_source_split_3074;

  $bb16:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$i40 := out_$i17;
    assume true;
    goto $bb16;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i64(out_$i38, 0);
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$i38 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_3053;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} out_$p37 := netdev_alloc_skb_ip_align(out_$p33, out_$i36);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i35);
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i16($M.0, out_$p34);
    goto corral_source_split_3050;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_3049;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$p33 := $load.ref($M.0, out_$p32);
    goto corral_source_split_3048;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(24, 1));
    goto corral_source_split_3047;

  $bb13:
    assume out_$i31 == 1;
    goto corral_source_split_3046;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i30, 0);
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p29);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(0, 1));
    goto corral_source_split_3041;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 40));
    goto corral_source_split_3040;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i64(out_$i17);
    goto corral_source_split_3039;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_3038;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3037;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_3036;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref(out_$p20, $mul.ref(out_$i21, 32));
    goto corral_source_split_3035;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i64(out_$i17);
    goto corral_source_split_3034;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    out_$p20 := $bitcast.ref.ref(out_$p19);
    goto corral_source_split_3033;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_3032;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_3031;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(out_$p153, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$p153 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p152, out_$i150);
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(out_$p151, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_3132;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$p151 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i64($M.0, out_$p149);
    goto corral_source_split_3130;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref($add.ref(out_$p25, $mul.ref(out_$i26, 40)), $mul.ref(8, 1));
    goto corral_source_split_3129;

  $bb27:
    assume !(out_$i87 == 1);
    goto corral_source_split_3128;

  $bb44_dummy:
    call {:si_unique_call 1} out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$i145, out_$p146, out_$p147, out_$p149, out_$i150, out_$p151, out_$p152, out_$p153, out_$p154, out_$i148, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i16, out_$i17, out_$i169 := i40evf_alloc_rx_buffers_loop_$bb11(in_$p0, out_$p18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$i39, out_$i40, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$p56, out_$i57, out_$i58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$p75, out_$p85, out_$i86, out_$i87, out_$p88, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$p94, out_$p95, out_$i96, out_$i97, out_$i98, out_$p107, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p140, out_$i141, out_$p142, out_$p143, out_$p144, out_$i145, out_$p146, out_$p147, out_$p149, out_$i150, out_$p151, out_$p152, out_$p153, out_$p154, out_$i148, out_$i155, out_$i156, out_$i157, out_$p158, out_$i159, out_$i160, out_$i161, out_$i162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i16, out_$i17, out_$i169);
    return;

  exit:
    return;
}



procedure i40evf_alloc_rx_buffers_loop_$bb11(in_$p0: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$i35: i16, in_$i36: i32, in_$p37: ref, in_$i38: i64, in_$i39: i1, in_$i40: i16, in_$p50: ref, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$i57: i64, in_$i58: i1, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i16, in_$i65: i64, in_$i66: i64, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i64, in_$i72: i32, in_$i73: i1, in_$i74: i16, in_$p75: ref, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$i91: i1, in_$p92: ref, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$i96: i64, in_$i97: i1, in_$i98: i16, in_$p107: ref, in_$i108: i64, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i119: i32, in_$i120: i64, in_$i121: i64, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i32, in_$i128: i1, in_$i129: i16, in_$p130: ref, in_$p140: ref, in_$i141: i64, in_$p142: ref, in_$p143: ref, in_$p144: ref, in_$i145: i64, in_$p146: ref, in_$p147: ref, in_$p149: ref, in_$i150: i64, in_$p151: ref, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$i148: i16, in_$i155: i32, in_$i156: i32, in_$i157: i16, in_$p158: ref, in_$i159: i16, in_$i160: i32, in_$i161: i32, in_$i162: i1, in_$i163: i16, in_$i164: i32, in_$i165: i32, in_$i166: i16, in_$i167: i32, in_$i168: i1, in_$i16: i16, in_$i17: i16, in_$i169: i16) returns (out_$p18: ref, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$i35: i16, out_$i36: i32, out_$p37: ref, out_$i38: i64, out_$i39: i1, out_$i40: i16, out_$p50: ref, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$i57: i64, out_$i58: i1, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i16, out_$i65: i64, out_$i66: i64, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i64, out_$i72: i32, out_$i73: i1, out_$i74: i16, out_$p75: ref, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$i91: i1, out_$p92: ref, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$i96: i64, out_$i97: i1, out_$i98: i16, out_$p107: ref, out_$i108: i64, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i119: i32, out_$i120: i64, out_$i121: i64, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i32, out_$i128: i1, out_$i129: i16, out_$p130: ref, out_$p140: ref, out_$i141: i64, out_$p142: ref, out_$p143: ref, out_$p144: ref, out_$i145: i64, out_$p146: ref, out_$p147: ref, out_$p149: ref, out_$i150: i64, out_$p151: ref, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$i148: i16, out_$i155: i32, out_$i156: i32, out_$i157: i16, out_$p158: ref, out_$i159: i16, out_$i160: i32, out_$i161: i32, out_$i162: i1, out_$i163: i16, out_$i164: i32, out_$i165: i32, out_$i166: i16, out_$i167: i32, out_$i168: i1, out_$i16: i16, out_$i17: i16, out_$i169: i16);
  modifies $M.0;



implementation dma_map_single_attrs_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_single_attrs_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_single_attrs_loop_$bb3();



implementation dma_map_page_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dma_map_page_loop_$bb3();
    return;

  exit:
    return;
}



procedure dma_map_page_loop_$bb3();



implementation i40evf_setup_all_tx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i8: i32, in_$i36: i32) returns (out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i8: i32, out_$i36: i32)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i8, out_$i36 := in_$p9, in_$i10, in_$i11, in_$i12, in_$p14, in_$p15, in_$p16, in_$i17, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i8, in_$i36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;

  $bb11:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i30;
    goto $bb11_dummy;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i21;
    assume true;
    goto $bb11;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, out_$i30);
    goto corral_source_split_3563;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_3562;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_3561;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3560;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, in_$p1);
    goto corral_source_split_3559;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i8, 1);
    call {:si_unique_call 805} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3558;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_3556;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i8, out_$i21;
    assume true;
    goto $bb6;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_3554;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} out_$i21 := i40evf_setup_tx_descriptors(out_$p20);
    call {:si_unique_call 804} {:cexpr "err"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_3553;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_3552;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i17, 8));
    goto corral_source_split_3551;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i8);
    goto corral_source_split_3550;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p16, out_$i11);
    goto corral_source_split_3549;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3548;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3547;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i12, 8));
    goto corral_source_split_3546;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i8);
    goto corral_source_split_3545;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i32.i16(out_$i10);
    goto corral_source_split_3544;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_3543;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(744, 1));
    goto corral_source_split_3542;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i8, out_$i36 := i40evf_setup_all_tx_resources_loop_$bb4(in_$p0, in_$p1, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i8, out_$i36);
    return;

  exit:
    return;
}



procedure i40evf_setup_all_tx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i8: i32, in_$i36: i32) returns (out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i8: i32, out_$i36: i32);
  modifies $M.0, $CurrAddr;



implementation i40evf_setup_all_rx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i8: i32, in_$i36: i32) returns (out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i8: i32, out_$i36: i32)
{

  entry:
    out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i8, out_$i36 := in_$p9, in_$i10, in_$i11, in_$i12, in_$p14, in_$p15, in_$p16, in_$i17, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i8, in_$i36;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3584;

  $bb11:
    assume out_$i35 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i30;
    goto $bb11_dummy;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    out_$i36 := out_$i21;
    assume true;
    goto $bb11;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    out_$i35 := $sgt.i32(out_$i34, out_$i30);
    goto corral_source_split_3607;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_3606;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i16($M.0, out_$p32);
    goto corral_source_split_3605;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(out_$p31, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3604;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, in_$p1);
    goto corral_source_split_3603;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i30 := $add.i32(out_$i8, 1);
    call {:si_unique_call 809} {:cexpr "i"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_3602;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb6:
    assume out_$i22 == 1;
    goto corral_source_split_3600;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i8, out_$i21;
    assume true;
    goto $bb6;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_3598;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} out_$i21 := i40evf_setup_rx_descriptors(out_$p20);
    call {:si_unique_call 808} {:cexpr "err"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_3597;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_3596;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i17, 8));
    goto corral_source_split_3595;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i8);
    goto corral_source_split_3594;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p16, out_$i11);
    goto corral_source_split_3593;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p15, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3592;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_3591;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i12, 8));
    goto corral_source_split_3590;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i8);
    goto corral_source_split_3589;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    out_$i11 := $trunc.i32.i16(out_$i10);
    goto corral_source_split_3588;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_3587;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(888, 1));
    goto corral_source_split_3586;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i8, out_$i36 := i40evf_setup_all_rx_resources_loop_$bb4(in_$p0, in_$p1, out_$p9, out_$i10, out_$i11, out_$i12, out_$p14, out_$p15, out_$p16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i8, out_$i36);
    return;

  exit:
    return;
}



procedure i40evf_setup_all_rx_resources_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p9: ref, in_$i10: i32, in_$i11: i16, in_$i12: i64, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1, in_$i23: i32, in_$i24: i32, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i8: i32, in_$i36: i32) returns (out_$p9: ref, out_$i10: i32, out_$i11: i16, out_$i12: i64, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1, out_$i23: i32, out_$i24: i32, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i8: i32, out_$i36: i32);
  modifies $M.0, $CurrAddr;



implementation i40evf_configure_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$p27: ref, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$i13: i32) returns (out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$p27: ref, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$i13: i32)
{

  entry:
    out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i13 := in_$i14, in_$p16, in_$p17, in_$p18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$p27, in_$p28, in_$i29, in_$i30, in_$p31, in_$p32, in_$i33, in_$p34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i13;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3638;

  $bb6:
    assume out_$i38 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i33;
    goto $bb6_dummy;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    out_$i38 := $sgt.i32(out_$i37, out_$i33);
    goto corral_source_split_3666;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i36);
    goto corral_source_split_3665;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i16($M.0, out_$p35);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p34, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, in_$p7);
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    out_$i33 := $add.i32(out_$i13, 1);
    call {:si_unique_call 816} {:cexpr "i"} boogie_si_record_i32(out_$i33);
    goto corral_source_split_3661;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 815} writel(out_$i30, out_$p32);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_3659;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p17, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_3658;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    out_$i30 := $zext.i16.i32(out_$i29);
    goto corral_source_split_3657;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    out_$i29 := $load.i16($M.0, out_$p28);
    goto corral_source_split_3656;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p17, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_3655;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p27, out_$i26);
    goto corral_source_split_3654;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(out_$p17, $mul.ref(0, 176)), $mul.ref(74, 1));
    goto corral_source_split_3653;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i16(out_$i25);
    goto corral_source_split_3652;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    out_$i25 := $add.i32(out_$i24, 65535);
    goto corral_source_split_3651;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i23);
    goto corral_source_split_3650;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i16($M.0, out_$p22);
    goto corral_source_split_3649;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p17, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3648;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} i40evf_alloc_rx_buffers(out_$p17, out_$i21);
    goto corral_source_split_3647;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    out_$i21 := $trunc.i32.i16(out_$i20);
    goto corral_source_split_3646;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_3645;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i16($M.0, out_$p18);
    goto corral_source_split_3644;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_3643;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_3642;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_3641;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i13);
    goto corral_source_split_3640;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i13 := i40evf_configure_loop_$bb4(in_$p0, in_$p7, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$p27, out_$p28, out_$i29, out_$i30, out_$p31, out_$p32, out_$i33, out_$p34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i13);
    return;

  exit:
    return;
}



procedure i40evf_configure_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i16, in_$i20: i32, in_$i21: i16, in_$p22: ref, in_$i23: i16, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$p27: ref, in_$p28: ref, in_$i29: i16, in_$i30: i32, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$p35: ref, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$i13: i32) returns (out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i16, out_$i20: i32, out_$i21: i16, out_$p22: ref, out_$i23: i16, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$p27: ref, out_$p28: ref, out_$i29: i16, out_$i30: i32, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$p35: ref, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$i13: i32);
  modifies $M.0;



implementation i40evf_napi_enable_all_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5 := in_$i6, in_$p8, in_$p9, in_$p10, in_$i11, in_$i12, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3694;

  $bb6:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i11;
    goto $bb6_dummy;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    out_$i12 := $slt.i32(out_$i11, in_$i3);
    goto corral_source_split_3702;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    out_$i11 := $add.i32(out_$i5, 1);
    call {:si_unique_call 822} {:cexpr "q_idx"} boogie_si_record_i32(out_$i11);
    goto corral_source_split_3701;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} napi_enable(out_$p10);
    goto corral_source_split_3700;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p9, $mul.ref(0, 320)), $mul.ref(16, 1));
    goto corral_source_split_3699;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_3698;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref(out_$i6, 8));
    goto corral_source_split_3697;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i6 := $sext.i32.i64(out_$i5);
    goto corral_source_split_3696;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5 := i40evf_napi_enable_all_loop_$bb4(in_$p0, in_$i3, out_$i6, out_$p8, out_$p9, out_$p10, out_$i11, out_$i12, out_$i5);
    return;

  exit:
    return;
}



procedure i40evf_napi_enable_all_loop_$bb4(in_$p0: ref, in_$i3: i32, in_$i6: i64, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i64, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i1, out_$i5: i32);



implementation napi_enable_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} napi_enable_loop_$bb3();
    return;

  exit:
    return;
}



procedure napi_enable_loop_$bb3();



implementation i40evf_set_rx_mode_loop_$bb54(in_$i110: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i1, in_$i119: i8, in_$i120: i1, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i64, in_$i129: i1, in_$p113: ref, in_$p65: ref) returns (out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i1, out_$i119: i8, out_$i120: i1, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i64, out_$i129: i1, out_$p113: ref)
{

  entry:
    out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113 := in_$p114, in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$p124, in_$p125, in_$p126, in_$p127, in_$i128, in_$i129, in_$p113;
    goto $bb54, exit;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  $bb60:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$p113 := out_$p125;
    goto $bb60_dummy;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i64(out_$i128, in_$i110);
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i128 := $p2i.ref.i64(out_$p127);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p126, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(out_$p125);
    goto corral_source_split_3880;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_3879;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref($add.ref(out_$p113, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3878;

  $bb57:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i8.i1(out_$i119);
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i1.i8(out_$i118);
    call {:si_unique_call 848} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i119);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_$i118 := ether_addr_equal(out_$p115, out_$p117);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_3869;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb60_dummy:
    call {:si_unique_call 1} out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113 := i40evf_set_rx_mode_loop_$bb54(in_$i110, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113, in_$p65);
    return;

  exit:
    return;
}



procedure i40evf_set_rx_mode_loop_$bb54(in_$i110: i64, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i1, in_$i119: i8, in_$i120: i1, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i64, in_$i129: i1, in_$p113: ref, in_$p65: ref) returns (out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i1, out_$i119: i8, out_$i120: i1, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i64, out_$i129: i1, out_$p113: ref);



implementation i40evf_set_rx_mode_loop_$bb41(in_$i81: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i1, in_$i89: i8, in_$i90: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p83: ref, in_$p65: ref) returns (out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i1, out_$i89: i8, out_$i90: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p83: ref)
{

  entry:
    out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83 := in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$p93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$p83;
    goto $bb41, exit;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  $bb47:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$p83 := out_$p94;
    goto $bb47_dummy;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i64(out_$i97, in_$i81);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_3853;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(out_$p83, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  $bb44:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i8.i1(out_$i89);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i1.i8(out_$i88);
    call {:si_unique_call 846} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i89);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} out_$i88 := ether_addr_equal(out_$p85, out_$p87);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p84);
    goto corral_source_split_3841;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb47_dummy:
    call {:si_unique_call 1} out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83 := i40evf_set_rx_mode_loop_$bb41(in_$i81, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83, in_$p65);
    return;

  exit:
    return;
}



procedure i40evf_set_rx_mode_loop_$bb41(in_$i81: i64, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i1, in_$i89: i8, in_$i90: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p83: ref, in_$p65: ref) returns (out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i1, out_$i89: i8, out_$i90: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p83: ref);



implementation i40evf_set_rx_mode_loop_$bb34(in_$p0: ref, in_$p2: ref, in_$i63: i64, in_$p67: ref, in_$p68: ref, in_$i69: i1, in_$i70: i8, in_$i71: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i1, in_$i89: i8, in_$i90: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p83: ref, in_$i91: i8, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i1, in_$i119: i8, in_$i120: i1, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i64, in_$i129: i1, in_$p113: ref, in_$p112: ref, in_$p121: ref, in_$i122: i8, in_$p99: ref, in_$i100: i8, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p65: ref, in_$p66: ref) returns (out_$p67: ref, out_$p68: ref, out_$i69: i1, out_$i70: i8, out_$i71: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i1, out_$i89: i8, out_$i90: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p83: ref, out_$i91: i8, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i1, out_$i119: i8, out_$i120: i1, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i64, out_$i129: i1, out_$p113: ref, out_$p112: ref, out_$p121: ref, out_$i122: i8, out_$p99: ref, out_$i100: i8, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p65: ref, out_$p66: ref)
{

  entry:
    out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83, out_$i91, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113, out_$p112, out_$p121, out_$i122, out_$p99, out_$i100, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p137, out_$p138, out_$p140, out_$i141, out_$i142, out_$p65, out_$p66 := in_$p67, in_$p68, in_$i69, in_$i70, in_$i71, in_$p74, in_$p75, in_$p76, in_$p77, in_$i78, in_$p80, in_$i81, in_$i82, in_$p84, in_$p85, in_$p86, in_$p87, in_$i88, in_$i89, in_$i90, in_$p93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$p83, in_$i91, in_$p103, in_$p104, in_$p105, in_$p106, in_$i107, in_$p109, in_$i110, in_$i111, in_$p114, in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$p124, in_$p125, in_$p126, in_$p127, in_$i128, in_$i129, in_$p113, in_$p112, in_$p121, in_$i122, in_$p99, in_$i100, in_$i130, in_$p131, in_$p132, in_$i133, in_$i134, in_$p135, in_$p137, in_$p138, in_$p140, in_$i141, in_$i142, in_$p65, in_$p66;
    goto $bb34, exit;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  $bb66:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$p65, out_$p66 := out_$p66, out_$p138;
    goto $bb66_dummy;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i64(out_$i141, in_$i63);
    goto corral_source_split_3901;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    out_$i141 := $p2i.ref.i64(out_$p140);
    goto corral_source_split_3900;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p66, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_3899;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    goto corral_source_split_3898;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    out_$p138 := $load.ref($M.0, out_$p137);
    goto corral_source_split_3897;

  $bb65:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref($add.ref(out_$p66, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3896;

  $bb64:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    goto $bb65;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p135, out_$i134);
    goto corral_source_split_3894;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(in_$p2, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3893;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    out_$i134 := $or.i32(out_$i133, 16);
    goto corral_source_split_3892;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    out_$i133 := $load.i32($M.0, out_$p132);
    goto corral_source_split_3891;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p2, $mul.ref(0, 3448)), $mul.ref(908, 1));
    goto corral_source_split_3890;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p131, 1);
    goto corral_source_split_3889;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p99, $mul.ref(0, 24)), $mul.ref(22, 1));
    goto corral_source_split_3888;

  $bb63:
    assume out_$i130 == 1;
    goto corral_source_split_3887;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb63, $bb64;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    out_$i130 := $trunc.i8.i1(out_$i100);
    goto corral_source_split_3862;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p99, out_$i100 := out_$p121, out_$i122;
    goto $bb50;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    out_$p99, out_$i100 := out_$p65, out_$i91;
    goto $bb50;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3850;

  $bb49:
    assume {:verifier.code 0} true;
    out_$i91 := 0;
    goto $bb45;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i91 := 1;
    goto $bb45;

  $bb43:
    assume out_$i90 == 1;
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i8.i1(out_$i89);
    goto corral_source_split_3846;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i1.i8(out_$i88);
    call {:si_unique_call 846} {:cexpr "tmp___2"} boogie_si_record_i8(out_$i89);
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} out_$i88 := ether_addr_equal(out_$p85, out_$p87);
    goto corral_source_split_3844;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    out_$p87 := $bitcast.ref.ref(out_$p86);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(out_$p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p84);
    goto corral_source_split_3841;

  $bb42:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(out_$p83, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb41:
    call out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83 := i40evf_set_rx_mode_loop_$bb41(out_$i81, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83, out_$p65);
    goto $bb41_last;

  $bb41_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$p83 := out_$p75;
    goto $bb41;

  $bb47:
    assume out_$i98 == 1;
    assume {:verifier.code 0} true;
    out_$p83 := out_$p94;
    assume false;
    return;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    out_$i98 := $ne.i64(out_$i97, out_$i81);
    goto corral_source_split_3857;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    out_$i97 := $p2i.ref.i64(out_$p96);
    goto corral_source_split_3856;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3855;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$p95 := $bitcast.ref.ref(out_$p94);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$p94 := $load.ref($M.0, out_$p93);
    goto corral_source_split_3853;

  $bb46:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref($add.ref(out_$p83, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3852;

  $bb44:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb38:
    assume out_$i82 == 1;
    goto corral_source_split_3836;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i78, out_$i81);
    goto corral_source_split_3824;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i81 := $p2i.ref.i64(out_$p80);
    goto corral_source_split_3823;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    out_$p80 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1));
    goto corral_source_split_3822;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p77);
    goto corral_source_split_3821;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p76, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3820;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(out_$p75);
    goto corral_source_split_3819;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(688, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3817;

  $bb36:
    assume out_$i71 == 1;
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i8.i1(out_$i70);
    goto corral_source_split_3814;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i1.i8(out_$i69);
    call {:si_unique_call 844} {:cexpr "tmp___4"} boogie_si_record_i8(out_$i70);
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} out_$i69 := is_multicast_ether_addr(out_$p68);
    goto corral_source_split_3812;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_3811;

  $bb35:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3810;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb39:
    assume {:verifier.code 0} true;
    assume !(out_$i82 == 1);
    goto $bb40;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb48:
    assume !(out_$i98 == 1);
    goto corral_source_split_3859;

  $bb62:
    assume {:verifier.code 0} true;
    out_$p121, out_$i122 := out_$p112, 0;
    goto $bb58;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    out_$p121, out_$i122 := out_$p65, 1;
    goto $bb58;

  $bb56:
    assume out_$i120 == 1;
    goto corral_source_split_3876;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i8.i1(out_$i119);
    goto corral_source_split_3874;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i1.i8(out_$i118);
    call {:si_unique_call 848} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i119);
    goto corral_source_split_3873;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} out_$i118 := ether_addr_equal(out_$p115, out_$p117);
    goto corral_source_split_3872;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(out_$p116);
    goto corral_source_split_3871;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p65, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_3870;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_3869;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(out_$p113, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3868;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb54:
    call out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113 := i40evf_set_rx_mode_loop_$bb54(out_$i110, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113, out_$p65);
    goto $bb54_last;

  $bb54_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3866;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$p113 := out_$p104;
    goto $bb54;

  $bb60:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$p113 := out_$p125;
    assume false;
    return;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i64(out_$i128, out_$i110);
    goto corral_source_split_3883;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    out_$i128 := $p2i.ref.i64(out_$p127);
    goto corral_source_split_3882;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref($add.ref(out_$p126, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3881;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    out_$p126 := $bitcast.ref.ref(out_$p125);
    goto corral_source_split_3880;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_3879;

  $bb59:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref($add.ref(out_$p113, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3878;

  $bb57:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb51:
    assume out_$i111 == 1;
    goto corral_source_split_3864;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    out_$p112 := out_$p65;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i107, out_$i110);
    goto corral_source_split_3834;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    out_$i110 := $p2i.ref.i64(out_$p109);
    goto corral_source_split_3833;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1));
    goto corral_source_split_3832;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$i107 := $p2i.ref.i64(out_$p106);
    goto corral_source_split_3831;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$p105 := $bitcast.ref.ref(out_$p104);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p104 := $load.ref($M.0, out_$p103);
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3176)), $mul.ref(664, 1)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3827;

  $bb37:
    assume !(out_$i71 == 1);
    goto corral_source_split_3826;

  $bb53:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb52:
    assume {:verifier.code 0} true;
    assume !(out_$i111 == 1);
    goto $bb53;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    out_$p112 := out_$p65;
    goto $bb53;

  $bb61:
    assume !(out_$i129 == 1);
    goto corral_source_split_3885;

  $bb66_dummy:
    call {:si_unique_call 1} out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83, out_$i91, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113, out_$p112, out_$p121, out_$i122, out_$p99, out_$i100, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p137, out_$p138, out_$p140, out_$i141, out_$i142, out_$p65, out_$p66 := i40evf_set_rx_mode_loop_$bb34(in_$p0, in_$p2, in_$i63, out_$p67, out_$p68, out_$i69, out_$i70, out_$i71, out_$p74, out_$p75, out_$p76, out_$p77, out_$i78, out_$p80, out_$i81, out_$i82, out_$p84, out_$p85, out_$p86, out_$p87, out_$i88, out_$i89, out_$i90, out_$p93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$p83, out_$i91, out_$p103, out_$p104, out_$p105, out_$p106, out_$i107, out_$p109, out_$i110, out_$i111, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p124, out_$p125, out_$p126, out_$p127, out_$i128, out_$i129, out_$p113, out_$p112, out_$p121, out_$i122, out_$p99, out_$i100, out_$i130, out_$p131, out_$p132, out_$i133, out_$i134, out_$p135, out_$p137, out_$p138, out_$p140, out_$i141, out_$i142, out_$p65, out_$p66);
    return;

  exit:
    return;
}



procedure i40evf_set_rx_mode_loop_$bb34(in_$p0: ref, in_$p2: ref, in_$i63: i64, in_$p67: ref, in_$p68: ref, in_$i69: i1, in_$i70: i8, in_$i71: i1, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i64, in_$p80: ref, in_$i81: i64, in_$i82: i1, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$i88: i1, in_$i89: i8, in_$i90: i1, in_$p93: ref, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i1, in_$p83: ref, in_$i91: i8, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i64, in_$p109: ref, in_$i110: i64, in_$i111: i1, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i1, in_$i119: i8, in_$i120: i1, in_$p124: ref, in_$p125: ref, in_$p126: ref, in_$p127: ref, in_$i128: i64, in_$i129: i1, in_$p113: ref, in_$p112: ref, in_$p121: ref, in_$i122: i8, in_$p99: ref, in_$i100: i8, in_$i130: i1, in_$p131: ref, in_$p132: ref, in_$i133: i32, in_$i134: i32, in_$p135: ref, in_$p137: ref, in_$p138: ref, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p65: ref, in_$p66: ref) returns (out_$p67: ref, out_$p68: ref, out_$i69: i1, out_$i70: i8, out_$i71: i1, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i64, out_$p80: ref, out_$i81: i64, out_$i82: i1, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$i88: i1, out_$i89: i8, out_$i90: i1, out_$p93: ref, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i1, out_$p83: ref, out_$i91: i8, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i64, out_$p109: ref, out_$i110: i64, out_$i111: i1, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i1, out_$i119: i8, out_$i120: i1, out_$p124: ref, out_$p125: ref, out_$p126: ref, out_$p127: ref, out_$i128: i64, out_$i129: i1, out_$p113: ref, out_$p112: ref, out_$p121: ref, out_$i122: i8, out_$p99: ref, out_$i100: i8, out_$i130: i1, out_$p131: ref, out_$p132: ref, out_$i133: i32, out_$i134: i32, out_$p135: ref, out_$p137: ref, out_$p138: ref, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p65: ref, out_$p66: ref);
  modifies $M.0;



implementation i40evf_set_rx_mode_loop_$bb20(in_$p47: ref, in_$i50: i32, in_$i51: i1) returns (out_$i50: i32, out_$i51: i1)
{

  entry:
    out_$i50, out_$i51 := in_$i50, in_$i51;
    goto $bb20, exit;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28:
    assume {:verifier.code 0} true;
    assume out_$i51 == 1;
    goto $bb28_dummy;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i51 := $ne.i32(out_$i50, 0);
    goto corral_source_split_3790;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} out_$i50 := test_and_set_bit(0, in_$p47);
    call {:si_unique_call 841} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i50);
    goto corral_source_split_3789;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} __const_udelay(4295000);
    goto corral_source_split_3785;

  $bb22:
    assume 1 == 1;
    goto corral_source_split_3784;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb22, $bb23;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb23:
    assume !(1 == 1);
    goto corral_source_split_3787;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i50, out_$i51 := i40evf_set_rx_mode_loop_$bb20(in_$p47, out_$i50, out_$i51);
    return;

  exit:
    return;
}



procedure i40evf_set_rx_mode_loop_$bb20(in_$p47: ref, in_$i50: i32, in_$i51: i1) returns (out_$i50: i32, out_$i51: i1);
  modifies $CurrAddr;



implementation i40evf_set_rx_mode_loop_$bb12(in_$p2: ref, in_$i34: i64, in_$p37: ref, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p36: ref, in_vslice_dummy_var_188: ref) returns (out_$p37: ref, out_$p38: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p36: ref, out_vslice_dummy_var_188: ref)
{

  entry:
    out_$p37, out_$p38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p36, out_vslice_dummy_var_188 := in_$p37, in_$p38, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$p36, in_vslice_dummy_var_188;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_3764;

  $bb14:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$p36 := out_$p42;
    goto $bb14_dummy;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, in_$i34);
    goto corral_source_split_3774;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_3773;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3772;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p42);
    goto corral_source_split_3771;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    out_$p42 := $load.ref($M.0, out_$p41);
    goto corral_source_split_3770;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3769;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_vslice_dummy_var_188 := i40evf_add_filter(in_$p2, out_$p38);
    goto corral_source_split_3768;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_3767;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3766;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p36, out_vslice_dummy_var_188 := i40evf_set_rx_mode_loop_$bb12(in_$p2, in_$i34, out_$p37, out_$p38, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$p36, out_vslice_dummy_var_188);
    return;

  exit:
    return;
}



procedure i40evf_set_rx_mode_loop_$bb12(in_$p2: ref, in_$i34: i64, in_$p37: ref, in_$p38: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$p36: ref, in_vslice_dummy_var_188: ref) returns (out_$p37: ref, out_$p38: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$p36: ref, out_vslice_dummy_var_188: ref);
  modifies $M.0, $CurrAddr;



implementation i40evf_set_rx_mode_loop_$bb4(in_$p2: ref, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_vslice_dummy_var_187: ref) returns (out_$p15: ref, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_vslice_dummy_var_187: ref)
{

  entry:
    out_$p15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_vslice_dummy_var_187 := in_$p15, in_$p16, in_$p19, in_$p20, in_$p21, in_$p22, in_$i23, in_$i24, in_$p14, in_vslice_dummy_var_187;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3739;

  $bb6:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p20;
    goto $bb6_dummy;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i64(out_$i23, in_$i12);
    goto corral_source_split_3749;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    out_$i23 := $p2i.ref.i64(out_$p22);
    goto corral_source_split_3748;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(out_$p21, $mul.ref(0, 80)), $mul.ref(0, 1));
    goto corral_source_split_3747;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_3746;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_3745;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 80)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3744;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_vslice_dummy_var_187 := i40evf_add_filter(in_$p2, out_$p16);
    goto corral_source_split_3743;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_3742;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 80)), $mul.ref(16, 1));
    goto corral_source_split_3741;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_vslice_dummy_var_187 := i40evf_set_rx_mode_loop_$bb4(in_$p2, in_$i12, out_$p15, out_$p16, out_$p19, out_$p20, out_$p21, out_$p22, out_$i23, out_$i24, out_$p14, out_vslice_dummy_var_187);
    return;

  exit:
    return;
}



procedure i40evf_set_rx_mode_loop_$bb4(in_$p2: ref, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$i23: i64, in_$i24: i1, in_$p14: ref, in_vslice_dummy_var_187: ref) returns (out_$p15: ref, out_$p16: ref, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$i23: i64, out_$i24: i1, out_$p14: ref, out_vslice_dummy_var_187: ref);
  modifies $M.0, $CurrAddr;



implementation i40evf_configure_tx_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i8: i32)
{

  entry:
    out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i8 := in_$p9, in_$p10, in_$i11, in_$i12, in_$p13, in_$i14, in_$p16, in_$p17, in_$p18, in_$i19, in_$p20, in_$p21, in_$i22, in_$i23, in_$i24, in_$i8;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_3919;

  $bb6:
    assume out_$i24 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i19;
    goto $bb6_dummy;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    out_$i24 := $sgt.i32(out_$i23, out_$i19);
    goto corral_source_split_3936;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    out_$i23 := $zext.i16.i32(out_$i22);
    goto corral_source_split_3935;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, out_$p21);
    goto corral_source_split_3934;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(out_$p20, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_3933;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, in_$p2);
    goto corral_source_split_3932;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    out_$i19 := $add.i32(out_$i8, 1);
    call {:si_unique_call 850} {:cexpr "i"} boogie_si_record_i32(out_$i19);
    goto corral_source_split_3931;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p18, out_$p13);
    goto corral_source_split_3930;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(out_$p17, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_3929;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    out_$p17 := $load.ref($M.0, out_$p16);
    goto corral_source_split_3928;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i14, 8));
    goto corral_source_split_3927;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    out_$i14 := $sext.i32.i64(out_$i8);
    goto corral_source_split_3926;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p10, $mul.ref(out_$i12, 1));
    goto corral_source_split_3925;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i11);
    goto corral_source_split_3924;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    out_$i11 := $mul.i32(out_$i8, 4);
    goto corral_source_split_3923;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    out_$p10 := $load.ref($M.0, out_$p9);
    goto corral_source_split_3922;

  $bb5:
    out_$p9 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_3921;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i8 := i40evf_configure_tx_loop_$bb4(in_$p0, in_$p2, out_$p9, out_$p10, out_$i11, out_$i12, out_$p13, out_$i14, out_$p16, out_$p17, out_$p18, out_$i19, out_$p20, out_$p21, out_$i22, out_$i23, out_$i24, out_$i8);
    return;

  exit:
    return;
}



procedure i40evf_configure_tx_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p9: ref, in_$p10: ref, in_$i11: i32, in_$i12: i64, in_$p13: ref, in_$i14: i64, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$i19: i32, in_$p20: ref, in_$p21: ref, in_$i22: i16, in_$i23: i32, in_$i24: i1, in_$i8: i32) returns (out_$p9: ref, out_$p10: ref, out_$i11: i32, out_$i12: i64, out_$p13: ref, out_$i14: i64, out_$p16: ref, out_$p17: ref, out_$p18: ref, out_$i19: i32, out_$p20: ref, out_$p21: ref, out_$i22: i16, out_$i23: i32, out_$i24: i1, out_$i8: i32);
  modifies $M.0;



implementation i40evf_configure_rx_loop_$bb19(in_$p0: ref, in_$i46: i32, in_$p53: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i16, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i1, in_$i59: i32) returns (out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i16, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i1, out_$i59: i32)
{

  entry:
    out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i59 := in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$p65, in_$i66, in_$p68, in_$p69, in_$p70, in_$i71, in_$i72, in_$p74, in_$p75, in_$p76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i81, in_$i82, in_$i59;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_4026;

  $bb21:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := out_$i77;
    goto $bb21_dummy;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    out_$i82 := $sgt.i32(out_$i81, out_$i77);
    goto corral_source_split_4050;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    out_$i81 := $zext.i16.i32(out_$i80);
    goto corral_source_split_4049;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i16($M.0, out_$p79);
    goto corral_source_split_4048;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    out_$p79 := $add.ref($add.ref(out_$p78, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_4047;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, in_$p53);
    goto corral_source_split_4046;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    out_$i77 := $add.i32(out_$i59, 1);
    call {:si_unique_call 853} {:cexpr "i"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_4045;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p76, out_$i71);
    goto corral_source_split_4044;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p75, $mul.ref(0, 176)), $mul.ref(70, 1));
    goto corral_source_split_4043;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_4042;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i72, 8));
    goto corral_source_split_4041;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i59);
    goto corral_source_split_4040;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    out_$i71 := $trunc.i32.i16(in_$i46);
    goto corral_source_split_4039;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p70, out_$p65);
    goto corral_source_split_4038;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(out_$p69, $mul.ref(0, 176)), $mul.ref(56, 1));
    goto corral_source_split_4037;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_4036;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i66, 8));
    goto corral_source_split_4035;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(out_$i59);
    goto corral_source_split_4034;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref(out_$p61, $mul.ref(out_$i64, 1));
    goto corral_source_split_4033;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i63);
    goto corral_source_split_4032;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    out_$i63 := $mul.i32(out_$i62, 4);
    goto corral_source_split_4031;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i59, 2048);
    goto corral_source_split_4030;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_4029;

  $bb20:
    out_$p60 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_4028;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i59 := i40evf_configure_rx_loop_$bb19(in_$p0, in_$i46, in_$p53, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$p65, out_$i66, out_$p68, out_$p69, out_$p70, out_$i71, out_$i72, out_$p74, out_$p75, out_$p76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i81, out_$i82, out_$i59);
    return;

  exit:
    return;
}



procedure i40evf_configure_rx_loop_$bb19(in_$p0: ref, in_$i46: i32, in_$p53: ref, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i64, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$i71: i16, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i80: i16, in_$i81: i32, in_$i82: i1, in_$i59: i32) returns (out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i64, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$i71: i16, out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i80: i16, out_$i81: i32, out_$i82: i1, out_$i59: i32);
  modifies $M.0;



implementation i40evf_add_filter_loop_$bb8(in_$p5: ref, in_$i8: i32, in_$i9: i1) returns (out_$i8: i32, out_$i9: i1)
{

  entry:
    out_$i8, out_$i9 := in_$i8, in_$i9;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i9 == 1;
    goto $bb16_dummy;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    out_$i9 := $ne.i32(out_$i8, 0);
    goto corral_source_split_4074;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 857} out_$i8 := test_and_set_bit(0, in_$p5);
    call {:si_unique_call 858} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i8);
    goto corral_source_split_4073;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} __const_udelay(4295000);
    goto corral_source_split_4069;

  $bb10:
    assume 1 == 1;
    goto corral_source_split_4068;

  $bb9:
    assume {:verifier.code 0} true;
    assume {:branchcond 1} true;
    goto $bb10, $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb11:
    assume !(1 == 1);
    goto corral_source_split_4071;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i8, out_$i9 := i40evf_add_filter_loop_$bb8(in_$p5, out_$i8, out_$i9);
    return;

  exit:
    return;
}



procedure i40evf_add_filter_loop_$bb8(in_$p5: ref, in_$i8: i32, in_$i9: i1) returns (out_$i8: i32, out_$i9: i1);
  modifies $CurrAddr;



implementation i40evf_find_filter_loop_$bb8(in_$p1: ref, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p14: ref)
{

  entry:
    out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p14 := in_$p15, in_$p16, in_$i17, in_$i18, in_$i19, in_$p20, in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$i27, in_$p14;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4147;

  $bb13:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$p14 := out_$p23;
    goto $bb13_dummy;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    out_$i27 := $ne.i64(out_$i26, in_$i12);
    goto corral_source_split_4162;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    out_$i26 := $p2i.ref.i64(out_$p25);
    goto corral_source_split_4161;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4160;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_4159;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4158;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4157;

  $bb11:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    out_$p20 := out_$p14;
    assume true;
    goto $bb11;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    out_$i19 := $trunc.i8.i1(out_$i18);
    goto corral_source_split_4153;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i1.i8(out_$i17);
    call {:si_unique_call 868} {:cexpr "tmp"} boogie_si_record_i8(out_$i18);
    goto corral_source_split_4152;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} out_$i17 := ether_addr_equal(in_$p1, out_$p16);
    goto corral_source_split_4151;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    out_$p16 := $bitcast.ref.ref(out_$p15);
    goto corral_source_split_4150;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p14, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4149;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb13_dummy:
    call {:si_unique_call 1} out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p14 := i40evf_find_filter_loop_$bb8(in_$p1, in_$i12, out_$p15, out_$p16, out_$i17, out_$i18, out_$i19, out_$p20, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$i27, out_$p14);
    return;

  exit:
    return;
}



procedure i40evf_find_filter_loop_$bb8(in_$p1: ref, in_$i12: i64, in_$p15: ref, in_$p16: ref, in_$i17: i1, in_$i18: i8, in_$i19: i1, in_$p20: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$i27: i1, in_$p14: ref) returns (out_$p15: ref, out_$p16: ref, out_$i17: i1, out_$i18: i8, out_$i19: i1, out_$p20: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$i27: i1, out_$p14: ref);



implementation i40evf_find_vlan_loop_$bb4(in_$i1: i16, in_$i9: i64, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p11: ref)
{

  entry:
    out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p11 := in_$p12, in_$i13, in_$i14, in_$i15, in_$i16, in_$p17, in_$p20, in_$p21, in_$p22, in_$p23, in_$i24, in_$i25, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4583;

  $bb10:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    out_$p11 := out_$p21;
    goto $bb10_dummy;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, in_$i9);
    goto corral_source_split_4600;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i24 := $p2i.ref.i64(out_$p23);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 24)), $mul.ref(0, 1));
    goto corral_source_split_4598;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p21);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$p21 := $load.ref($M.0, out_$p20);
    goto corral_source_split_4596;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4595;

  $bb7:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$p17 := out_$p11;
    assume true;
    goto $bb7;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i32(out_$i14, out_$i15);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(in_$i1);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_$i14 := $zext.i16.i32(out_$i13);
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i16($M.0, out_$p12);
    goto corral_source_split_4586;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p11, $mul.ref(0, 24)), $mul.ref(16, 1));
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p11 := i40evf_find_vlan_loop_$bb4(in_$i1, in_$i9, out_$p12, out_$i13, out_$i14, out_$i15, out_$i16, out_$p17, out_$p20, out_$p21, out_$p22, out_$p23, out_$i24, out_$i25, out_$p11);
    return;

  exit:
    return;
}



procedure i40evf_find_vlan_loop_$bb4(in_$i1: i16, in_$i9: i64, in_$p12: ref, in_$i13: i16, in_$i14: i32, in_$i15: i32, in_$i16: i1, in_$p17: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$i24: i64, in_$i25: i1, in_$p11: ref) returns (out_$p12: ref, out_$i13: i16, out_$i14: i32, out_$i15: i32, out_$i16: i1, out_$p17: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$i24: i64, out_$i25: i1, out_$p11: ref);



implementation i40e_xmit_descriptor_count_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i9: i32, in_$i10: i32, in_$i28: i32) returns (out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i9: i32, out_$i10: i32, out_$i28: i32)
{

  entry:
    out_$p11, out_$i12, out_$p13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i9, out_$i10, out_$i28 := in_$p11, in_$i12, in_$p13, in_$p16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i9, in_$i10, in_$i28;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4801;

  $bb6:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i9, out_$i10 := out_$i20, out_$i21;
    goto $bb6_dummy;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i20;
    assume true;
    goto $bb6;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$i27 := $ugt.i32(out_$i26, out_$i21);
    goto corral_source_split_4817;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i8.i32(out_$i25);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i8($M.0, out_$p24);
    goto corral_source_split_4815;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 320)), $mul.ref(0, 1));
    goto corral_source_split_4814;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    out_$p23 := $bitcast.ref.ref(out_$p22);
    goto corral_source_split_4813;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} out_$p22 := skb_end_pointer(in_$p0);
    goto corral_source_split_4812;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i10, 1);
    call {:si_unique_call 1001} {:cexpr "f"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    out_$i20 := $add.i32(out_$i19, out_$i9);
    call {:si_unique_call 1000} {:cexpr "count"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i19 := $udiv.i32(out_$i18, 8192);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 8191);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, out_$p16);
    goto corral_source_split_4807;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref($add.ref($add.ref(out_$p13, $mul.ref(0, 320)), $mul.ref(48, 1)), $mul.ref(out_$i12, 16)), $mul.ref(12, 1));
    goto corral_source_split_4806;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    out_$p13 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_4805;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i32.i64(out_$i10);
    goto corral_source_split_4804;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} out_$p11 := skb_end_pointer(in_$p0);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p11, out_$i12, out_$p13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i9, out_$i10, out_$i28 := i40e_xmit_descriptor_count_loop_$bb4(in_$p0, out_$p11, out_$i12, out_$p13, out_$p16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i9, out_$i10, out_$i28);
    return;

  exit:
    return;
}



procedure i40e_xmit_descriptor_count_loop_$bb4(in_$p0: ref, in_$p11: ref, in_$i12: i64, in_$p13: ref, in_$p16: ref, in_$i17: i32, in_$i18: i32, in_$i19: i32, in_$i20: i32, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i8, in_$i26: i32, in_$i27: i1, in_$i9: i32, in_$i10: i32, in_$i28: i32) returns (out_$p11: ref, out_$i12: i64, out_$p13: ref, out_$p16: ref, out_$i17: i32, out_$i18: i32, out_$i19: i32, out_$i20: i32, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i8, out_$i26: i32, out_$i27: i1, out_$i9: i32, out_$i10: i32, out_$i28: i32);



implementation i40e_tx_map_loop_$bb48(in_$p0: ref, in_$p202: ref, in_$i207: i64, in_$i211: i16, in_$i210: i16, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i16, in_$i216: i16, in_$i217: i32, in_$i218: i32, in_$i219: i16, in_$p220: ref, in_$i221: i64, in_$p222: ref, in_$i223: i64, in_$i224: i1) returns (out_$i211: i16, out_$i210: i16, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i16, out_$i216: i16, out_$i217: i32, out_$i218: i32, out_$i219: i16, out_$p220: ref, out_$i221: i64, out_$p222: ref, out_$i223: i64, out_$i224: i1)
{

  entry:
    out_$i211, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$p222, out_$i223, out_$i224 := in_$i211, in_$i210, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$p220, in_$i221, in_$p222, in_$i223, in_$i224;
    goto $bb48, exit;

  $bb48:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb55:
    assume !(out_$i224 == 1);
    assume {:verifier.code 0} true;
    out_$i210 := out_$i219;
    goto $bb55_dummy;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    out_$i211 := out_$i219;
    assume true;
    goto $bb55;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    out_$i224 := $eq.i64(out_$i223, in_$i207);
    goto corral_source_split_5505;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    out_$i223 := $p2i.ref.i64(out_$p222);
    goto corral_source_split_5504;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} i40e_unmap_and_free_tx_resource(in_$p0, out_$p222);
    goto corral_source_split_5503;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    out_$p222 := $add.ref(out_$p220, $mul.ref(out_$i221, 48));
    goto corral_source_split_5502;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    out_$i221 := $zext.i16.i64(out_$i219);
    goto corral_source_split_5501;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    out_$p220 := $load.ref($M.0, in_$p202);
    goto corral_source_split_5500;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    out_$i219 := $trunc.i32.i16(out_$i218);
    call {:si_unique_call 1129} {:cexpr "i"} boogie_si_record_i16(out_$i219);
    goto corral_source_split_5499;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    out_$i218 := $sub.i32(out_$i217, 1);
    goto corral_source_split_5498;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    out_$i217 := $zext.i16.i32(out_$i216);
    goto corral_source_split_5497;

  $bb54:
    assume {:verifier.code 0} true;
    goto corral_source_split_5496;

  $bb53:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    out_$i216 := out_$i210;
    goto $bb54;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    out_$i216 := out_$i215;
    goto $bb54;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i16($M.0, out_$p214);
    call {:si_unique_call 1128} {:cexpr "i"} boogie_si_record_i16(out_$i215);
    goto corral_source_split_5494;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    out_$p214 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5493;

  $bb52:
    assume out_$i213 == 1;
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 0);
    goto corral_source_split_5490;

  $bb51:
    assume {:verifier.code 0} true;
    out_$i212 := $zext.i16.i32(out_$i210);
    goto corral_source_split_5489;

  $bb55_dummy:
    call {:si_unique_call 1} out_$i211, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$p222, out_$i223, out_$i224 := i40e_tx_map_loop_$bb48(in_$p0, in_$p202, in_$i207, out_$i211, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$p220, out_$i221, out_$p222, out_$i223, out_$i224);
    return;

  exit:
    return;
}



procedure i40e_tx_map_loop_$bb48(in_$p0: ref, in_$p202: ref, in_$i207: i64, in_$i211: i16, in_$i210: i16, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i16, in_$i216: i16, in_$i217: i32, in_$i218: i32, in_$i219: i16, in_$p220: ref, in_$i221: i64, in_$p222: ref, in_$i223: i64, in_$i224: i1) returns (out_$i211: i16, out_$i210: i16, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i16, out_$i216: i16, out_$i217: i32, out_$i218: i32, out_$i219: i16, out_$p220: ref, out_$i221: i64, out_$p222: ref, out_$i223: i64, out_$i224: i1);
  modifies $M.0;



implementation i40e_tx_map_loop_$bb17(in_$p0: ref, in_$i6: i32, in_$i16: i32, in_$i17: i32, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$p86: ref, in_$i87: i16, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i16, in_$i96: i64, in_$i97: i32, in_$p98: ref, in_$i99: i1, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$i76: i64, in_$i77: i16, in_$p78: ref, in_$i79: i32, in_$i104: i32, in_$p105: ref, in_$i106: i16) returns (out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$p86: ref, out_$i87: i16, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i16, out_$i96: i64, out_$i97: i32, out_$p98: ref, out_$i99: i1, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$i76: i64, out_$i77: i16, out_$p78: ref, out_$i79: i32, out_$i104: i32, out_$p105: ref, out_$i106: i16)
{

  entry:
    out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106 := in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i76, in_$i77, in_$p78, in_$i79, in_$i104, in_$p105, in_$i106;
    goto $bb17, exit;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  $bb22:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i76, out_$i77, out_$p78, out_$i79 := out_$i96, out_$i95, out_$p94, out_$i97;
    goto $bb22_dummy;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$i104, out_$p105, out_$i106 := out_$i97, out_$p94, out_$i95;
    assume true;
    goto $bb22;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i102, 0);
    goto corral_source_split_5363;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} out_$i102 := ldv__builtin_expect(out_$i101, 0);
    call {:si_unique_call 1107} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_5362;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i1.i32(out_$i99);
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$i99 := $ugt.i32(out_$i97, 8192);
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p98, out_$i96);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p94, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$i97 := $sub.i32(out_$i79, 8192);
    call {:si_unique_call 1105} {:cexpr "size"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i64(out_$i76, 8192);
    call {:si_unique_call 1104} {:cexpr "dma"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_5355;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  $bb20:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$p94, out_$i95 := out_$p82, out_$i85;
    goto $bb21;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$p94, out_$i95 := out_$p92, 0;
    goto $bb21;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_5350;

  $bb19:
    assume out_$i90 == 1;
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i88, out_$i89);
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i16.i32(out_$i85);
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i16.i32(out_$i87);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i16($M.0, out_$p86);
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i16(out_$i84);
    call {:si_unique_call 1103} {:cexpr "i"} boogie_si_record_i16(out_$i85);
    goto corral_source_split_5342;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, 1);
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i77);
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p78, $mul.ref(1, 16));
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p81, out_$i80);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p78, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5337;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} out_$i80 := build_ctob(in_$i16, in_$i6, 8192, in_$i17);
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106 := i40e_tx_map_loop_$bb17(in_$p0, in_$i6, in_$i16, in_$i17, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106);
    return;

  exit:
    return;
}



procedure i40e_tx_map_loop_$bb17(in_$p0: ref, in_$i6: i32, in_$i16: i32, in_$i17: i32, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$p86: ref, in_$i87: i16, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i16, in_$i96: i64, in_$i97: i32, in_$p98: ref, in_$i99: i1, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$i76: i64, in_$i77: i16, in_$p78: ref, in_$i79: i32, in_$i104: i32, in_$p105: ref, in_$i106: i16) returns (out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$p86: ref, out_$i87: i16, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i16, out_$i96: i64, out_$i97: i32, out_$p98: ref, out_$i99: i1, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$i76: i64, out_$i77: i16, out_$p78: ref, out_$i79: i32, out_$i104: i32, out_$p105: ref, out_$i106: i16);
  modifies $M.0;



implementation i40e_tx_map_loop_$bb10(in_$p0: ref, in_$i6: i32, in_$i16: i32, in_$i17: i32, in_$p52: ref, in_$i64: i16, in_$i57: i64, in_$i58: i16, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i1, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$i72: i1, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$p86: ref, in_$i87: i16, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i16, in_$i96: i64, in_$i97: i32, in_$p98: ref, in_$i99: i1, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$i76: i64, in_$i77: i16, in_$p78: ref, in_$i79: i32, in_$i104: i32, in_$p105: ref, in_$i106: i16, in_$i73: i32, in_$p74: ref, in_$i75: i16, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$i112: i32, in_$p113: ref, in_$i114: i16, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i16, in_$p121: ref, in_$i122: i16, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$p129: ref, in_$i130: i16, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i64, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i1) returns (out_$i64: i16, out_$i57: i64, out_$i58: i16, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i1, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$i72: i1, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$p86: ref, out_$i87: i16, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i16, out_$i96: i64, out_$i97: i32, out_$p98: ref, out_$i99: i1, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$i76: i64, out_$i77: i16, out_$p78: ref, out_$i79: i32, out_$i104: i32, out_$p105: ref, out_$i106: i16, out_$i73: i32, out_$p74: ref, out_$i75: i16, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$i112: i32, out_$p113: ref, out_$i114: i16, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i16, out_$p121: ref, out_$i122: i16, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$p129: ref, out_$i130: i16, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i64, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i1)
{

  entry:
    out_$i64, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106, out_$i73, out_$p74, out_$i75, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145 := in_$i64, in_$i57, in_$i58, in_$p59, in_$p60, in_$i61, in_$i62, in_$p63, in_$p65, in_$p66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i80, in_$p81, in_$p82, in_$i83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$i89, in_$i90, in_$p91, in_$p92, in_$p94, in_$i95, in_$i96, in_$i97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i76, in_$i77, in_$p78, in_$i79, in_$i104, in_$p105, in_$i106, in_$i73, in_$p74, in_$i75, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i118, in_$i119, in_$i120, in_$p121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p127, in_$p129, in_$i130, in_$i131, in_$i132, in_$p133, in_$p134, in_$i135, in_$i136, in_$p137, in_$p138, in_$p139, in_$i140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb32:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63 := out_$i136, out_$i130, out_$p129, out_$p141, out_$i132, out_$i131, out_$p142;
    goto $bb32_dummy;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    out_$i64 := out_$i130;
    assume true;
    goto $bb32;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i32(out_$i144, 0);
    goto corral_source_split_5412;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} out_$i144 := dma_mapping_error(out_$p143, out_$i136);
    call {:si_unique_call 1118} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_5411;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    out_$p143 := $load.ref($M.0, in_$p52);
    goto corral_source_split_5410;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref(out_$p63, $mul.ref(1, 16));
    goto corral_source_split_5409;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref(out_$p139, $mul.ref(out_$i140, 48));
    goto corral_source_split_5408;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    out_$i140 := $zext.i16.i64(out_$i130);
    goto corral_source_split_5407;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    out_$p139 := $load.ref($M.0, out_$p138);
    goto corral_source_split_5406;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p137);
    goto corral_source_split_5405;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(32, 1));
    goto corral_source_split_5404;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} out_$i136 := skb_frag_dma_map(out_$p134, out_$p63, 0, out_$i135, 1);
    call {:si_unique_call 1116} {:cexpr "dma"} boogie_si_record_i64(out_$i136);
    goto corral_source_split_5403;

  corral_source_split_5401:
    assume {:verifier.code 0} true;
    out_$i135 := $zext.i32.i64(out_$i131);
    goto corral_source_split_5402;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_5401;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(16, 1));
    goto corral_source_split_5400;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    out_$i132 := $sub.i32(out_$i61, out_$i131);
    call {:si_unique_call 1114} {:cexpr "data_len"} boogie_si_record_i32(out_$i132);
    goto corral_source_split_5399;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} out_$i131 := skb_frag_size(out_$p63);
    call {:si_unique_call 1113} {:cexpr "size"} boogie_si_record_i32(out_$i131);
    goto corral_source_split_5398;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5397;

  $bb30:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$p129, out_$i130 := out_$p117, out_$i120;
    goto $bb31;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    out_$p129, out_$i130 := out_$p127, 0;
    goto $bb31;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    goto corral_source_split_5395;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    out_$p127 := $load.ref($M.0, out_$p126);
    goto corral_source_split_5394;

  corral_source_split_5392:
    assume {:verifier.code 0} true;
    out_$p126 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_5393;

  $bb29:
    assume out_$i125 == 1;
    goto corral_source_split_5392;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i123, out_$i124);
    goto corral_source_split_5390;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    out_$i124 := $zext.i16.i32(out_$i120);
    goto corral_source_split_5389;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    out_$i123 := $zext.i16.i32(out_$i122);
    goto corral_source_split_5388;

  corral_source_split_5386:
    assume {:verifier.code 0} true;
    out_$i122 := $load.i16($M.0, out_$p121);
    goto corral_source_split_5387;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5386;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i16(out_$i119);
    call {:si_unique_call 1111} {:cexpr "i"} boogie_si_record_i16(out_$i120);
    goto corral_source_split_5385;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    out_$i119 := $add.i32(out_$i118, 1);
    goto corral_source_split_5384;

  corral_source_split_5382:
    assume {:verifier.code 0} true;
    out_$i118 := $zext.i16.i32(out_$i75);
    goto corral_source_split_5383;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    out_$p117 := $add.ref(out_$p74, $mul.ref(1, 16));
    goto corral_source_split_5382;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p116, out_$i115);
    goto corral_source_split_5381;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(out_$p74, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5380;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} out_$i115 := build_ctob(in_$i16, in_$i6, out_$i73, in_$i17);
    goto corral_source_split_5379;

  $bb26:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    out_$i112, out_$p113, out_$i114 := out_$i73, out_$p74, out_$i75;
    assume true;
    goto $bb26;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i110, 0);
    goto corral_source_split_5371;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} out_$i110 := ldv__builtin_expect(out_$i109, 1);
    call {:si_unique_call 1109} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i110);
    goto corral_source_split_5370;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i108);
    goto corral_source_split_5369;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i1.i32(out_$i107);
    goto corral_source_split_5368;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i61, 0);
    goto corral_source_split_5367;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i72 == 1);
    goto $bb16;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    out_$i73, out_$p74, out_$i75 := out_$i104, out_$p105, out_$i106;
    goto $bb16;

  $bb23:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5365;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    out_$i104, out_$p105, out_$i106 := out_$i97, out_$p94, out_$i95;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i102, 0);
    goto corral_source_split_5363;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} out_$i102 := ldv__builtin_expect(out_$i101, 0);
    call {:si_unique_call 1107} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i102);
    goto corral_source_split_5362;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    out_$i101 := $sext.i32.i64(out_$i100);
    goto corral_source_split_5361;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i1.i32(out_$i99);
    goto corral_source_split_5360;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    out_$i99 := $ugt.i32(out_$i97, 8192);
    goto corral_source_split_5359;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p98, out_$i96);
    goto corral_source_split_5358;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(out_$p94, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5357;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    out_$i97 := $sub.i32(out_$i79, 8192);
    call {:si_unique_call 1105} {:cexpr "size"} boogie_si_record_i32(out_$i97);
    goto corral_source_split_5356;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    out_$i96 := $add.i64(out_$i76, 8192);
    call {:si_unique_call 1104} {:cexpr "dma"} boogie_si_record_i64(out_$i96);
    goto corral_source_split_5355;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5354;

  $bb20:
    assume !(out_$i90 == 1);
    assume {:verifier.code 0} true;
    out_$p94, out_$i95 := out_$p82, out_$i85;
    goto $bb21;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    out_$p94, out_$i95 := out_$p92, 0;
    goto $bb21;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    goto corral_source_split_5352;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    out_$p92 := $load.ref($M.0, out_$p91);
    goto corral_source_split_5351;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(8, 1));
    goto corral_source_split_5350;

  $bb19:
    assume out_$i90 == 1;
    goto corral_source_split_5349;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i88, out_$i89);
    goto corral_source_split_5347;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i16.i32(out_$i85);
    goto corral_source_split_5346;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i16.i32(out_$i87);
    goto corral_source_split_5345;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i16($M.0, out_$p86);
    goto corral_source_split_5344;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 176)), $mul.ref(64, 1));
    goto corral_source_split_5343;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i16(out_$i84);
    call {:si_unique_call 1103} {:cexpr "i"} boogie_si_record_i16(out_$i85);
    goto corral_source_split_5342;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    out_$i84 := $add.i32(out_$i83, 1);
    goto corral_source_split_5341;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    out_$i83 := $zext.i16.i32(out_$i77);
    goto corral_source_split_5340;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    out_$p82 := $add.ref(out_$p78, $mul.ref(1, 16));
    goto corral_source_split_5339;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p81, out_$i80);
    goto corral_source_split_5338;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(out_$p78, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5337;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} out_$i80 := build_ctob(in_$i16, in_$i6, 8192, in_$i17);
    goto corral_source_split_5336;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb17:
    call out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106 := i40e_tx_map_loop_$bb17(in_$p0, in_$i6, in_$i16, in_$i17, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106);
    goto $bb17_last;

  $bb17_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5334;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    out_$i76, out_$i77, out_$p78, out_$i79 := out_$i57, out_$i58, out_$p59, out_$i62;
    goto $bb17;

  $bb22:
    assume out_$i103 == 1;
    assume {:verifier.code 0} true;
    out_$i76, out_$i77, out_$p78, out_$i79 := out_$i96, out_$i95, out_$p94, out_$i97;
    assume false;
    return;

  $bb14:
    assume out_$i72 == 1;
    goto corral_source_split_5332;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    out_$i73, out_$p74, out_$i75 := out_$i62, out_$p59, out_$i58;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i64(out_$i71, 0);
    goto corral_source_split_5330;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} out_$i71 := ldv__builtin_expect(out_$i70, 0);
    call {:si_unique_call 1101} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i71);
    goto corral_source_split_5329;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    out_$i70 := $sext.i32.i64(out_$i69);
    goto corral_source_split_5328;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i1.i32(out_$i68);
    goto corral_source_split_5327;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    out_$i68 := $ugt.i32(out_$i62, 8192);
    goto corral_source_split_5326;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p67, out_$i57);
    goto corral_source_split_5325;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p59, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5324;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p66, out_$i57);
    goto corral_source_split_5323;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref(out_$p60, $mul.ref(0, 48)), $mul.ref(32, 1));
    goto corral_source_split_5322;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p65, out_$i62);
    goto corral_source_split_5321;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(out_$p60, $mul.ref(0, 48)), $mul.ref(40, 1));
    goto corral_source_split_5320;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i64, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106, out_$i73, out_$p74, out_$i75, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145 := i40e_tx_map_loop_$bb10(in_$p0, in_$i6, in_$i16, in_$i17, in_$p52, out_$i64, out_$i57, out_$i58, out_$p59, out_$p60, out_$i61, out_$i62, out_$p63, out_$p65, out_$p66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i80, out_$p81, out_$p82, out_$i83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$i89, out_$i90, out_$p91, out_$p92, out_$p94, out_$i95, out_$i96, out_$i97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i76, out_$i77, out_$p78, out_$i79, out_$i104, out_$p105, out_$i106, out_$i73, out_$p74, out_$i75, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i118, out_$i119, out_$i120, out_$p121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p127, out_$p129, out_$i130, out_$i131, out_$i132, out_$p133, out_$p134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145);
    return;

  exit:
    return;
}



procedure i40e_tx_map_loop_$bb10(in_$p0: ref, in_$i6: i32, in_$i16: i32, in_$i17: i32, in_$p52: ref, in_$i64: i16, in_$i57: i64, in_$i58: i16, in_$p59: ref, in_$p60: ref, in_$i61: i32, in_$i62: i32, in_$p63: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i1, in_$i69: i32, in_$i70: i64, in_$i71: i64, in_$i72: i1, in_$i80: i64, in_$p81: ref, in_$p82: ref, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$p86: ref, in_$i87: i16, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$p91: ref, in_$p92: ref, in_$p94: ref, in_$i95: i16, in_$i96: i64, in_$i97: i32, in_$p98: ref, in_$i99: i1, in_$i100: i32, in_$i101: i64, in_$i102: i64, in_$i103: i1, in_$i76: i64, in_$i77: i16, in_$p78: ref, in_$i79: i32, in_$i104: i32, in_$p105: ref, in_$i106: i16, in_$i73: i32, in_$p74: ref, in_$i75: i16, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$i112: i32, in_$p113: ref, in_$i114: i16, in_$i115: i64, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$i120: i16, in_$p121: ref, in_$i122: i16, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$p126: ref, in_$p127: ref, in_$p129: ref, in_$i130: i16, in_$i131: i32, in_$i132: i32, in_$p133: ref, in_$p134: ref, in_$i135: i64, in_$i136: i64, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i32, in_$i145: i1) returns (out_$i64: i16, out_$i57: i64, out_$i58: i16, out_$p59: ref, out_$p60: ref, out_$i61: i32, out_$i62: i32, out_$p63: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i1, out_$i69: i32, out_$i70: i64, out_$i71: i64, out_$i72: i1, out_$i80: i64, out_$p81: ref, out_$p82: ref, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$p86: ref, out_$i87: i16, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$p91: ref, out_$p92: ref, out_$p94: ref, out_$i95: i16, out_$i96: i64, out_$i97: i32, out_$p98: ref, out_$i99: i1, out_$i100: i32, out_$i101: i64, out_$i102: i64, out_$i103: i1, out_$i76: i64, out_$i77: i16, out_$p78: ref, out_$i79: i32, out_$i104: i32, out_$p105: ref, out_$i106: i16, out_$i73: i32, out_$p74: ref, out_$i75: i16, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$i112: i32, out_$p113: ref, out_$i114: i16, out_$i115: i64, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$i120: i16, out_$p121: ref, out_$i122: i16, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$p126: ref, out_$p127: ref, out_$p129: ref, out_$i130: i16, out_$i131: i32, out_$i132: i32, out_$p133: ref, out_$p134: ref, out_$i135: i64, out_$i136: i64, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i32, out_$i145: i1);
  modifies $M.0;



implementation dql_queued_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} dql_queued_loop_$bb3();
    return;

  exit:
    return;
}



procedure dql_queued_loop_$bb3();



implementation i40evf_request_traffic_irqs_loop_$bb30(in_$p0: ref, in_$i86: i32, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p92: ref, in_$i93: i32, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i1, in_$i85: i32, in_vslice_dummy_var_203: i32) returns (out_$i86: i32, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p92: ref, out_$i93: i32, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i1, out_$i85: i32, out_vslice_dummy_var_203: i32)
{

  entry:
    out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$i107, out_$i85, out_vslice_dummy_var_203 := in_$i86, in_$p87, in_$p88, in_$i89, in_$i90, in_$p92, in_$i93, in_$p95, in_$p96, in_$i97, in_$i98, in_$p100, in_$i101, in_$i102, in_$p104, in_$p105, in_$p106, in_$i107, in_$i85, in_vslice_dummy_var_203;
    goto $bb30, exit;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_6050;

  $bb32:
    assume out_$i107 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := out_$i86;
    goto $bb32_dummy;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i86, 0);
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} ldv_free_irq_15(out_$i101, out_$p106);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(out_$p105);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref(out_$i102, 8));
    goto corral_source_split_6069;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i86);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_6067;

  corral_source_split_6065:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p96, $mul.ref(out_$i98, 8)), $mul.ref(0, 1));
    goto corral_source_split_6066;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    goto corral_source_split_6065;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    out_$i98 := $add.i64(out_$i97, 1);
    goto corral_source_split_6064;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    out_$i97 := $sext.i32.i64(out_$i86);
    goto corral_source_split_6063;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    out_$p96 := $load.ref($M.0, out_$p95);
    goto corral_source_split_6062;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_6061;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1240} out_vslice_dummy_var_203 := irq_set_affinity_hint(out_$i93, $0.ref);
    goto corral_source_split_6060;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    out_$i93 := $load.i32($M.0, out_$p92);
    goto corral_source_split_6059;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    out_$p92 := $add.ref($add.ref(out_$p88, $mul.ref(out_$i90, 8)), $mul.ref(0, 1));
    goto corral_source_split_6058;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    goto corral_source_split_6057;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    out_$i90 := $add.i64(out_$i89, 1);
    goto corral_source_split_6056;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i86);
    goto corral_source_split_6055;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    out_$p88 := $load.ref($M.0, out_$p87);
    goto corral_source_split_6054;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_6053;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i85, 1);
    call {:si_unique_call 1239} {:cexpr "vector"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_6052;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb32_dummy:
    call {:si_unique_call 1} out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$i107, out_$i85, out_vslice_dummy_var_203 := i40evf_request_traffic_irqs_loop_$bb30(in_$p0, out_$i86, out_$p87, out_$p88, out_$i89, out_$i90, out_$p92, out_$i93, out_$p95, out_$p96, out_$i97, out_$i98, out_$p100, out_$i101, out_$i102, out_$p104, out_$p105, out_$p106, out_$i107, out_$i85, out_vslice_dummy_var_203);
    return;

  exit:
    return;
}



procedure i40evf_request_traffic_irqs_loop_$bb30(in_$p0: ref, in_$i86: i32, in_$p87: ref, in_$p88: ref, in_$i89: i64, in_$i90: i64, in_$p92: ref, in_$i93: i32, in_$p95: ref, in_$p96: ref, in_$i97: i64, in_$i98: i64, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i107: i1, in_$i85: i32, in_vslice_dummy_var_203: i32) returns (out_$i86: i32, out_$p87: ref, out_$p88: ref, out_$i89: i64, out_$i90: i64, out_$p92: ref, out_$i93: i32, out_$p95: ref, out_$p96: ref, out_$i97: i64, out_$i98: i64, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i107: i1, out_$i85: i32, out_vslice_dummy_var_203: i32);
  modifies $M.5, $M.7, $M.9, $M.11;



implementation i40evf_request_traffic_irqs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i39: i32, in_$i40: i32, in_$i28: i32, in_$i29: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i81: i32, in_$i82: i1, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_202: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i39: i32, out_$i40: i32, out_$i28: i32, out_$i29: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i81: i32, out_$i82: i1, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_202: i32)
{

  entry:
    out_$i9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i27, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i39, out_$i40, out_$i28, out_$i29, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p71, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p78, out_$p79, out_$i50, out_$i51, out_$i52, out_$i81, out_$i82, out_$i6, out_$i7, out_$i8, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_202 := in_$i9, in_$p11, in_$p12, in_$p14, in_$p15, in_$i16, in_$i17, in_$p19, in_$p20, in_$i21, in_$i22, in_$i23, in_$p24, in_$p25, in_$i27, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$p47, in_$p48, in_$i39, in_$i40, in_$i28, in_$i29, in_$p53, in_$p54, in_$i55, in_$i56, in_$p58, in_$i59, in_$p60, in_$p61, in_$p62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p71, in_$p72, in_$i73, in_$i74, in_$p76, in_$i77, in_$p78, in_$p79, in_$i50, in_$i51, in_$i52, in_$i81, in_$i82, in_$i6, in_$i7, in_$i8, in_vslice_dummy_var_198, in_vslice_dummy_var_199, in_vslice_dummy_var_200, in_vslice_dummy_var_202;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5959;

  $bb23:
    assume out_$i82 == 1;
    assume {:verifier.code 0} true;
    out_$i6, out_$i7, out_$i8 := out_$i52, out_$i51, out_$i81;
    goto $bb23_dummy;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    out_$i82 := $slt.i32(out_$i81, in_$i4);
    goto corral_source_split_6023;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i50, 1);
    call {:si_unique_call 1236} {:cexpr "vector"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_6022;

  $bb18:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6021;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52 := out_$i8, out_$i7, out_$i6;
    goto $bb18;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    out_$i50, out_$i51, out_$i52 := out_$i8, out_$i28, out_$i29;
    goto $bb18;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1238} out_vslice_dummy_var_202 := irq_set_affinity_hint(out_$i77, out_$p79);
    goto corral_source_split_6042;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    goto corral_source_split_6041;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(312, 1));
    goto corral_source_split_6040;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, out_$p76);
    goto corral_source_split_6039;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(out_$p72, $mul.ref(out_$i74, 8)), $mul.ref(0, 1));
    goto corral_source_split_6038;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    goto corral_source_split_6037;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i64(out_$i73, 1);
    goto corral_source_split_6036;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    out_$i73 := $sext.i32.i64(out_$i8);
    goto corral_source_split_6035;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    out_$p72 := $load.ref($M.0, out_$p71);
    goto corral_source_split_6034;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_6033;

  $bb20:
    assume !(out_$i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    out_$i65, out_$i66 := out_$i8, out_$i63;
    assume true;
    goto $bb20;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    out_$i64 := $ne.i32(out_$i63, 0);
    goto corral_source_split_5999;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} out_$i63 := ldv_request_irq_14(out_$i59, i40evf_msix_clean_rings, 0, out_$p61, out_$p62);
    call {:si_unique_call 1231} {:cexpr "err"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_5998;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    out_$p62 := $bitcast.ref.ref(out_$p12);
    goto corral_source_split_5997;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_5996;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_5995;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_5994;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p54, $mul.ref(out_$i56, 8)), $mul.ref(0, 1));
    goto corral_source_split_5993;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    goto corral_source_split_5992;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    out_$i56 := $add.i64(out_$i55, 1);
    goto corral_source_split_5991;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    out_$i55 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5990;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_5989;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(896, 1));
    goto corral_source_split_5988;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5987;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i39, out_$i40;
    goto $bb11;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    out_$i28, out_$i29 := out_$i23, out_$i27;
    goto $bb11;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    out_$i27 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1229} {:cexpr "tx_int_idx"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_5985;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} out_vslice_dummy_var_198 := snprintf.ref.i64.ref.ref.ref.i32(out_$p25, 24, .str.62, in_$p1, .str.63, out_$i7);
    goto corral_source_split_5984;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_5983;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_5982;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1227} {:cexpr "rx_int_idx"} boogie_si_record_i32(out_$i23);
    goto corral_source_split_5981;

  $bb9:
    assume out_$i22 == 1;
    goto corral_source_split_5980;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    out_$i22 := $ne.i64(out_$i21, 0);
    goto corral_source_split_5973;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    out_$i21 := $p2i.ref.i64(out_$p20);
    goto corral_source_split_5972;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_5971;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_5970;

  $bb6:
    assume out_$i17 == 1;
    goto corral_source_split_5969;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    out_$i17 := $ne.i64(out_$i16, 0);
    goto corral_source_split_5967;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    out_$i16 := $p2i.ref.i64(out_$p15);
    goto corral_source_split_5966;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_5965;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_5964;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    out_$p12 := $load.ref($M.0, out_$p11);
    goto corral_source_split_5963;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref(out_$i9, 8));
    goto corral_source_split_5962;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i9 := $sext.i32.i64(out_$i8);
    goto corral_source_split_5961;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i7, out_$i46;
    goto $bb14;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    out_$i39, out_$i40 := out_$i35, out_$i6;
    goto $bb14;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1233} out_vslice_dummy_var_199 := snprintf.ref.i64.ref.ref.ref.i32(out_$p37, 24, .str.62, in_$p1, .str.64, out_$i7);
    goto corral_source_split_6005;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    out_$p37 := $bitcast.ref.ref(out_$p36);
    goto corral_source_split_6004;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_6003;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i7, 1);
    call {:si_unique_call 1232} {:cexpr "rx_int_idx"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_6002;

  $bb12:
    assume out_$i34 == 1;
    goto corral_source_split_6001;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_5978;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_5977;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_5976;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(0, 1));
    goto corral_source_split_5975;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i17 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb8;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    goto $bb17;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} out_vslice_dummy_var_200 := snprintf.ref.i64.ref.ref.ref.i32(out_$p48, 24, .str.62, in_$p1, .str.65, out_$i6);
    goto corral_source_split_6017;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    out_$p48 := $bitcast.ref.ref(out_$p47);
    goto corral_source_split_6016;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(284, 1));
    goto corral_source_split_6015;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    out_$i46 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1234} {:cexpr "tx_int_idx"} boogie_si_record_i32(out_$i46);
    goto corral_source_split_6014;

  $bb15:
    assume out_$i45 == 1;
    goto corral_source_split_6013;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i44, 0);
    goto corral_source_split_6011;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_6010;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_6009;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref($add.ref(out_$p12, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(0, 1));
    goto corral_source_split_6008;

  $bb13:
    assume !(out_$i34 == 1);
    goto corral_source_split_6007;

  $bb16:
    assume !(out_$i45 == 1);
    goto corral_source_split_6019;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i27, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i39, out_$i40, out_$i28, out_$i29, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p71, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p78, out_$p79, out_$i50, out_$i51, out_$i52, out_$i81, out_$i82, out_$i6, out_$i7, out_$i8, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_202 := i40evf_request_traffic_irqs_loop_$bb4(in_$p0, in_$p1, in_$i4, out_$i9, out_$p11, out_$p12, out_$p14, out_$p15, out_$i16, out_$i17, out_$p19, out_$p20, out_$i21, out_$i22, out_$i23, out_$p24, out_$p25, out_$i27, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$p47, out_$p48, out_$i39, out_$i40, out_$i28, out_$i29, out_$p53, out_$p54, out_$i55, out_$i56, out_$p58, out_$i59, out_$p60, out_$p61, out_$p62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p71, out_$p72, out_$i73, out_$i74, out_$p76, out_$i77, out_$p78, out_$p79, out_$i50, out_$i51, out_$i52, out_$i81, out_$i82, out_$i6, out_$i7, out_$i8, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_202);
    return;

  exit:
    return;
}



procedure i40evf_request_traffic_irqs_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$i4: i32, in_$i9: i64, in_$p11: ref, in_$p12: ref, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$i17: i1, in_$p19: ref, in_$p20: ref, in_$i21: i64, in_$i22: i1, in_$i23: i32, in_$p24: ref, in_$p25: ref, in_$i27: i32, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i1, in_$i46: i32, in_$p47: ref, in_$p48: ref, in_$i39: i32, in_$i40: i32, in_$i28: i32, in_$i29: i32, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i64, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$i63: i32, in_$i64: i1, in_$i65: i32, in_$i66: i32, in_$p71: ref, in_$p72: ref, in_$i73: i64, in_$i74: i64, in_$p76: ref, in_$i77: i32, in_$p78: ref, in_$p79: ref, in_$i50: i32, in_$i51: i32, in_$i52: i32, in_$i81: i32, in_$i82: i1, in_$i6: i32, in_$i7: i32, in_$i8: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_202: i32) returns (out_$i9: i64, out_$p11: ref, out_$p12: ref, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$i17: i1, out_$p19: ref, out_$p20: ref, out_$i21: i64, out_$i22: i1, out_$i23: i32, out_$p24: ref, out_$p25: ref, out_$i27: i32, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i1, out_$i46: i32, out_$p47: ref, out_$p48: ref, out_$i39: i32, out_$i40: i32, out_$i28: i32, out_$i29: i32, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i64, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$i63: i32, out_$i64: i1, out_$i65: i32, out_$i66: i32, out_$p71: ref, out_$p72: ref, out_$i73: i64, out_$i74: i64, out_$p76: ref, out_$i77: i32, out_$p78: ref, out_$p79: ref, out_$i50: i32, out_$i51: i32, out_$i52: i32, out_$i81: i32, out_$i82: i1, out_$i6: i32, out_$i7: i32, out_$i8: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_202: i32);
  modifies $M.6, $M.16, $M.5, $M.8, $M.17, $M.7, $M.10, $M.18, $M.9, $M.12, $M.19, $M.11;



implementation i40evf_set_coalesce_loop_$bb32(in_$p3: ref, in_$p71: ref, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$p87: ref, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$p98: ref, in_$i99: i16, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i16, in_$p105: ref, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i64, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i75: i32, in_vslice_dummy_var_207: i32) returns (out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$p87: ref, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$p98: ref, out_$i99: i16, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i16, out_$p105: ref, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i64, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i75: i32, out_vslice_dummy_var_207: i32)
{

  entry:
    out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i120, out_$i121, out_$i122, out_$i123, out_$i75, out_vslice_dummy_var_207 := in_$i76, in_$p78, in_$p79, in_$p80, in_$i81, in_$i82, in_$i83, in_$i84, in_$i85, in_$p87, in_$p89, in_$i90, in_$i91, in_$p92, in_$p93, in_$i94, in_$i95, in_$i96, in_$p97, in_$p98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p105, in_$p107, in_$i108, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113, in_$i114, in_$p115, in_$p116, in_$p117, in_$p118, in_$i120, in_$i121, in_$i122, in_$i123, in_$i75, in_vslice_dummy_var_207;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_6277;

  $bb34:
    assume out_$i123 == 1;
    assume {:verifier.code 0} true;
    out_$i75 := out_$i120;
    goto $bb34_dummy;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    out_$i123 := $sgt.i32(out_$i122, out_$i120);
    goto corral_source_split_6320;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    out_$i122 := $add.i32(out_$i121, $sub.i32(0, 1));
    goto corral_source_split_6319;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i32($M.0, in_$p71);
    goto corral_source_split_6318;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    out_$i120 := $add.i32(out_$i75, 1);
    call {:si_unique_call 1267} {:cexpr "i"} boogie_si_record_i32(out_$i120);
    goto corral_source_split_6317;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} out_vslice_dummy_var_207 := readl(out_$p118);
    goto corral_source_split_6316;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p117, $mul.ref(34816, 1));
    goto corral_source_split_6315;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_6314;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} writel(out_$i109, out_$p115);
    out_$p116 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6313;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(out_$p111, $mul.ref(out_$i114, 1));
    goto corral_source_split_6312;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    out_$i114 := $sext.i32.i64(out_$i113);
    goto corral_source_split_6311;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    out_$i113 := $mul.i32(out_$i112, 4);
    goto corral_source_split_6310;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(out_$i75, 2576);
    goto corral_source_split_6309;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_6308;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i16.i32(out_$i108);
    out_$p110 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6307;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i16($M.0, out_$p107);
    goto corral_source_split_6306;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref($add.ref(out_$p79, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(24, 1));
    goto corral_source_split_6305;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p105, out_$i103);
    goto corral_source_split_6304;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref($add.ref(out_$p79, $mul.ref(0, 320)), $mul.ref(240, 1)), $mul.ref(24, 1));
    goto corral_source_split_6303;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    out_$i103 := $trunc.i32.i16(out_$i102);
    goto corral_source_split_6302;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    out_$i102 := $ashr.i32(out_$i101, 1);
    goto corral_source_split_6301;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i32(out_$i100, $sub.i32(0, 32769));
    goto corral_source_split_6300;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    out_$i100 := $zext.i16.i32(out_$i99);
    goto corral_source_split_6299;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    out_$i99 := $load.i16($M.0, out_$p98);
    goto corral_source_split_6298;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} writel(out_$i91, out_$p97);
    out_$p98 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(552, 1));
    goto corral_source_split_6297;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref(out_$p93, $mul.ref(out_$i96, 1));
    goto corral_source_split_6296;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    out_$i96 := $sext.i32.i64(out_$i95);
    goto corral_source_split_6295;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    out_$i95 := $mul.i32(out_$i94, 4);
    goto corral_source_split_6294;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    out_$i94 := $add.i32(out_$i75, 2560);
    goto corral_source_split_6293;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    out_$p93 := $load.ref($M.0, out_$p92);
    goto corral_source_split_6292;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    out_$i91 := $zext.i16.i32(out_$i90);
    out_$p92 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3448)), $mul.ref(1120, 1)), $mul.ref(0, 1));
    goto corral_source_split_6291;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i16($M.0, out_$p89);
    goto corral_source_split_6290;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref($add.ref(out_$p79, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(24, 1));
    goto corral_source_split_6289;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p87, out_$i85);
    goto corral_source_split_6288;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref($add.ref(out_$p79, $mul.ref(0, 320)), $mul.ref(208, 1)), $mul.ref(24, 1));
    goto corral_source_split_6287;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    out_$i85 := $trunc.i32.i16(out_$i84);
    goto corral_source_split_6286;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    out_$i84 := $ashr.i32(out_$i83, 1);
    goto corral_source_split_6285;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i82, $sub.i32(0, 32769));
    goto corral_source_split_6284;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    out_$i82 := $zext.i16.i32(out_$i81);
    goto corral_source_split_6283;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    out_$i81 := $load.i16($M.0, out_$p80);
    goto corral_source_split_6282;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.0, out_$p78);
    out_$p80 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3448)), $mul.ref(2880, 1)), $mul.ref(550, 1));
    goto corral_source_split_6281;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    out_$p78 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3448)), $mul.ref(512, 1)), $mul.ref(out_$i76, 8));
    goto corral_source_split_6280;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i75);
    goto corral_source_split_6279;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i120, out_$i121, out_$i122, out_$i123, out_$i75, out_vslice_dummy_var_207 := i40evf_set_coalesce_loop_$bb32(in_$p3, in_$p71, out_$i76, out_$p78, out_$p79, out_$p80, out_$i81, out_$i82, out_$i83, out_$i84, out_$i85, out_$p87, out_$p89, out_$i90, out_$i91, out_$p92, out_$p93, out_$i94, out_$i95, out_$i96, out_$p97, out_$p98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p105, out_$p107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$p115, out_$p116, out_$p117, out_$p118, out_$i120, out_$i121, out_$i122, out_$i123, out_$i75, out_vslice_dummy_var_207);
    return;

  exit:
    return;
}



procedure i40evf_set_coalesce_loop_$bb32(in_$p3: ref, in_$p71: ref, in_$i76: i64, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$i81: i16, in_$i82: i32, in_$i83: i32, in_$i84: i32, in_$i85: i16, in_$p87: ref, in_$p89: ref, in_$i90: i16, in_$i91: i32, in_$p92: ref, in_$p93: ref, in_$i94: i32, in_$i95: i32, in_$i96: i64, in_$p97: ref, in_$p98: ref, in_$i99: i16, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i16, in_$p105: ref, in_$p107: ref, in_$i108: i16, in_$i109: i32, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i64, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$p118: ref, in_$i120: i32, in_$i121: i32, in_$i122: i32, in_$i123: i1, in_$i75: i32, in_vslice_dummy_var_207: i32) returns (out_$i76: i64, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$i81: i16, out_$i82: i32, out_$i83: i32, out_$i84: i32, out_$i85: i16, out_$p87: ref, out_$p89: ref, out_$i90: i16, out_$i91: i32, out_$p92: ref, out_$p93: ref, out_$i94: i32, out_$i95: i32, out_$i96: i64, out_$p97: ref, out_$p98: ref, out_$i99: i16, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i16, out_$p105: ref, out_$p107: ref, out_$i108: i16, out_$i109: i32, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i64, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$p118: ref, out_$i120: i32, out_$i121: i32, out_$i122: i32, out_$i123: i1, out_$i75: i32, out_vslice_dummy_var_207: i32);
  modifies $M.0, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.4, $M.3, $CurrAddr;



implementation i40evf_get_strings_loop_$bb21(in_$p29: ref, in_$p38: ref, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$i35: i32, in_$p36: ref, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i32) returns (out_$p38: ref, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$i35: i32, out_$p36: ref, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i32)
{

  entry:
    out_$p38, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i35, out_$p36, out_vslice_dummy_var_210, out_vslice_dummy_var_211 := in_$p38, in_$i40, in_$p41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i35, in_$p36, in_vslice_dummy_var_210, in_vslice_dummy_var_211;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6459;

  $bb23:
    assume out_$i47 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$p36 := out_$i42, out_$p41;
    goto $bb23_dummy;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    out_$i47 := $sgt.i32(out_$i46, out_$i42);
    goto corral_source_split_6470;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i45);
    goto corral_source_split_6469;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    out_$i45 := $load.i16($M.0, out_$p44);
    goto corral_source_split_6468;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6467;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, in_$p29);
    goto corral_source_split_6466;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    out_$i42 := $add.i32(out_$i35, 1);
    call {:si_unique_call 1286} {:cexpr "i"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_6465;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref(out_$p36, $mul.ref(out_$i40, 1));
    goto corral_source_split_6464;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} out_vslice_dummy_var_211 := snprintf.ref.i64.ref.i32(out_$p38, 32, .str.115, out_$i35);
    out_$i40 := $add.i64(32, 32);
    goto corral_source_split_6463;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(out_$p36, $mul.ref(32, 1));
    goto corral_source_split_6462;

  $bb22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} out_vslice_dummy_var_210 := snprintf.ref.i64.ref.i32(out_$p36, 32, .str.114, out_$i35);
    goto corral_source_split_6461;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$p38, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i35, out_$p36, out_vslice_dummy_var_210, out_vslice_dummy_var_211 := i40evf_get_strings_loop_$bb21(in_$p29, out_$p38, out_$i40, out_$p41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i35, out_$p36, out_vslice_dummy_var_210, out_vslice_dummy_var_211);
    return;

  exit:
    return;
}



procedure i40evf_get_strings_loop_$bb21(in_$p29: ref, in_$p38: ref, in_$i40: i64, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$i35: i32, in_$p36: ref, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i32) returns (out_$p38: ref, out_$i40: i64, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$i35: i32, out_$p36: ref, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i32);



implementation i40evf_get_strings_loop_$bb13(in_$p7: ref, in_$p18: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i15: i32, in_$p16: ref, in_$p28: ref, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32) returns (out_$p18: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i15: i32, out_$p16: ref, out_$p28: ref, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32)
{

  entry:
    out_$p18, out_$i20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i15, out_$p16, out_$p28, out_vslice_dummy_var_208, out_vslice_dummy_var_209 := in_$p18, in_$i20, in_$p21, in_$i22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i15, in_$p16, in_$p28, in_vslice_dummy_var_208, in_vslice_dummy_var_209;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6435;

  $bb15:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i15, out_$p16 := out_$i22, out_$p21;
    goto $bb15_dummy;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    out_$p28 := out_$p21;
    assume true;
    goto $bb15;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    out_$i27 := $sgt.i32(out_$i26, out_$i22);
    goto corral_source_split_6446;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(out_$i25);
    goto corral_source_split_6445;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i16($M.0, out_$p24);
    goto corral_source_split_6444;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6443;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, in_$p7);
    goto corral_source_split_6442;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i15, 1);
    call {:si_unique_call 1283} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_6441;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref(out_$p16, $mul.ref(out_$i20, 1));
    goto corral_source_split_6440;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} out_vslice_dummy_var_209 := snprintf.ref.i64.ref.i32(out_$p18, 32, .str.113, out_$i15);
    out_$i20 := $add.i64(32, 32);
    goto corral_source_split_6439;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref(out_$p16, $mul.ref(32, 1));
    goto corral_source_split_6438;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} out_vslice_dummy_var_208 := snprintf.ref.i64.ref.i32(out_$p16, 32, .str.112, out_$i15);
    goto corral_source_split_6437;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p18, out_$i20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i15, out_$p16, out_$p28, out_vslice_dummy_var_208, out_vslice_dummy_var_209 := i40evf_get_strings_loop_$bb13(in_$p7, out_$p18, out_$i20, out_$p21, out_$i22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i15, out_$p16, out_$p28, out_vslice_dummy_var_208, out_vslice_dummy_var_209);
    return;

  exit:
    return;
}



procedure i40evf_get_strings_loop_$bb13(in_$p7: ref, in_$p18: ref, in_$i20: i64, in_$p21: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$i25: i16, in_$i26: i32, in_$i27: i1, in_$i15: i32, in_$p16: ref, in_$p28: ref, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32) returns (out_$p18: ref, out_$i20: i64, out_$p21: ref, out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$i25: i16, out_$i26: i32, out_$i27: i1, out_$i15: i32, out_$p16: ref, out_$p28: ref, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32);



implementation i40evf_get_ethtool_stats_loop_$bb16(in_$p2: ref, in_$p4: ref, in_$p45: ref, in_$i53: i32, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$i60: i64, in_$i61: i64, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i51: i32, in_$i52: i32) returns (out_$i53: i32, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$i60: i64, out_$i61: i64, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i51: i32, out_$i52: i32)
{

  entry:
    out_$i53, out_$i54, out_$p56, out_$p57, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i51, out_$i52 := in_$i53, in_$i54, in_$p56, in_$p57, in_$p59, in_$i60, in_$i61, in_$p62, in_$i63, in_$i64, in_$p66, in_$p67, in_$p69, in_$i70, in_$i71, in_$p72, in_$i73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i51, in_$i52;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6625;

  $bb18:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i51, out_$i52 := out_$i73, out_$i63;
    goto $bb18_dummy;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i73);
    goto corral_source_split_6650;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    out_$i77 := $zext.i16.i32(out_$i76);
    goto corral_source_split_6649;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    out_$i76 := $load.i16($M.0, out_$p75);
    goto corral_source_split_6648;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref(out_$p74, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6647;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, in_$p45);
    goto corral_source_split_6646;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    out_$i73 := $add.i32(out_$i51, 1);
    call {:si_unique_call 1315} {:cexpr "j"} boogie_si_record_i32(out_$i73);
    goto corral_source_split_6645;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p72, out_$i70);
    goto corral_source_split_6644;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref(in_$p2, $mul.ref(out_$i71, 8));
    goto corral_source_split_6643;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i53);
    goto corral_source_split_6642;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i64($M.0, out_$p69);
    goto corral_source_split_6641;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref($add.ref(out_$p67, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_6640;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.0, out_$p66);
    goto corral_source_split_6639;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    out_$p66 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i64, 8));
    goto corral_source_split_6638;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    out_$i64 := $sext.i32.i64(out_$i51);
    goto corral_source_split_6637;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    out_$i63 := $add.i32(out_$i53, 1);
    call {:si_unique_call 1314} {:cexpr "i"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_6636;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p62, out_$i60);
    goto corral_source_split_6635;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref(in_$p2, $mul.ref(out_$i61, 8));
    goto corral_source_split_6634;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    out_$i61 := $sext.i32.i64(out_$i52);
    goto corral_source_split_6633;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    out_$i60 := $load.i64($M.0, out_$p59);
    goto corral_source_split_6632;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    out_$p59 := $add.ref($add.ref($add.ref(out_$p57, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_6631;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_6630;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 3448)), $mul.ref(752, 1)), $mul.ref(out_$i54, 8));
    goto corral_source_split_6629;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i51);
    goto corral_source_split_6628;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i53 := $add.i32(out_$i52, 1);
    call {:si_unique_call 1313} {:cexpr "i"} boogie_si_record_i32(out_$i53);
    goto corral_source_split_6627;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb18_dummy:
    call {:si_unique_call 1} out_$i53, out_$i54, out_$p56, out_$p57, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i51, out_$i52 := i40evf_get_ethtool_stats_loop_$bb16(in_$p2, in_$p4, in_$p45, out_$i53, out_$i54, out_$p56, out_$p57, out_$p59, out_$i60, out_$i61, out_$p62, out_$i63, out_$i64, out_$p66, out_$p67, out_$p69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i51, out_$i52);
    return;

  exit:
    return;
}



procedure i40evf_get_ethtool_stats_loop_$bb16(in_$p2: ref, in_$p4: ref, in_$p45: ref, in_$i53: i32, in_$i54: i64, in_$p56: ref, in_$p57: ref, in_$p59: ref, in_$i60: i64, in_$i61: i64, in_$p62: ref, in_$i63: i32, in_$i64: i64, in_$p66: ref, in_$p67: ref, in_$p69: ref, in_$i70: i64, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$p74: ref, in_$p75: ref, in_$i76: i16, in_$i77: i32, in_$i78: i1, in_$i51: i32, in_$i52: i32) returns (out_$i53: i32, out_$i54: i64, out_$p56: ref, out_$p57: ref, out_$p59: ref, out_$i60: i64, out_$i61: i64, out_$p62: ref, out_$i63: i32, out_$i64: i64, out_$p66: ref, out_$p67: ref, out_$p69: ref, out_$i70: i64, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$p74: ref, out_$p75: ref, out_$i76: i16, out_$i77: i32, out_$i78: i1, out_$i51: i32, out_$i52: i32);
  modifies $M.0;



implementation i40evf_get_ethtool_stats_loop_$bb8(in_$p2: ref, in_$p4: ref, in_$p9: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i16: i32, in_$i17: i32, in_$i44: i32) returns (out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i16: i32, out_$i17: i32, out_$i44: i32)
{

  entry:
    out_$i18, out_$i19, out_$p21, out_$p22, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i16, out_$i17, out_$i44 := in_$i18, in_$i19, in_$p21, in_$p22, in_$p24, in_$i25, in_$i26, in_$p27, in_$i28, in_$i29, in_$p31, in_$p32, in_$p34, in_$i35, in_$i36, in_$p37, in_$i38, in_$p39, in_$p40, in_$i41, in_$i42, in_$i43, in_$i16, in_$i17, in_$i44;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6587;

  $bb10:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$i17 := out_$i38, out_$i28;
    goto $bb10_dummy;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    out_$i44 := out_$i28;
    assume true;
    goto $bb10;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    out_$i43 := $sgt.i32(out_$i42, out_$i38);
    goto corral_source_split_6612;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    out_$i42 := $zext.i16.i32(out_$i41);
    goto corral_source_split_6611;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i16($M.0, out_$p40);
    goto corral_source_split_6610;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p39, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_6609;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, in_$p9);
    goto corral_source_split_6608;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    out_$i38 := $add.i32(out_$i16, 1);
    call {:si_unique_call 1312} {:cexpr "j"} boogie_si_record_i32(out_$i38);
    goto corral_source_split_6607;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p37, out_$i35);
    goto corral_source_split_6606;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(in_$p2, $mul.ref(out_$i36, 8));
    goto corral_source_split_6605;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    out_$i36 := $sext.i32.i64(out_$i18);
    goto corral_source_split_6604;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i64($M.0, out_$p34);
    goto corral_source_split_6603;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(out_$p32, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_6602;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_6601;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i29, 8));
    goto corral_source_split_6600;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    out_$i29 := $sext.i32.i64(out_$i16);
    goto corral_source_split_6599;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    out_$i28 := $add.i32(out_$i18, 1);
    call {:si_unique_call 1311} {:cexpr "i"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_6598;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p27, out_$i25);
    goto corral_source_split_6597;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(in_$p2, $mul.ref(out_$i26, 8));
    goto corral_source_split_6596;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i17);
    goto corral_source_split_6595;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i64($M.0, out_$p24);
    goto corral_source_split_6594;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref($add.ref(out_$p22, $mul.ref(0, 176)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_6593;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_6592;

  corral_source_split_6590:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref($add.ref(in_$p4, $mul.ref(0, 3448)), $mul.ref(592, 1)), $mul.ref(out_$i19, 8));
    goto corral_source_split_6591;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    out_$i19 := $sext.i32.i64(out_$i16);
    goto corral_source_split_6590;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i17, 1);
    call {:si_unique_call 1310} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_6589;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i18, out_$i19, out_$p21, out_$p22, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i16, out_$i17, out_$i44 := i40evf_get_ethtool_stats_loop_$bb8(in_$p2, in_$p4, in_$p9, out_$i18, out_$i19, out_$p21, out_$p22, out_$p24, out_$i25, out_$i26, out_$p27, out_$i28, out_$i29, out_$p31, out_$p32, out_$p34, out_$i35, out_$i36, out_$p37, out_$i38, out_$p39, out_$p40, out_$i41, out_$i42, out_$i43, out_$i16, out_$i17, out_$i44);
    return;

  exit:
    return;
}



procedure i40evf_get_ethtool_stats_loop_$bb8(in_$p2: ref, in_$p4: ref, in_$p9: ref, in_$i18: i32, in_$i19: i64, in_$p21: ref, in_$p22: ref, in_$p24: ref, in_$i25: i64, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i64, in_$p31: ref, in_$p32: ref, in_$p34: ref, in_$i35: i64, in_$i36: i64, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$p40: ref, in_$i41: i16, in_$i42: i32, in_$i43: i1, in_$i16: i32, in_$i17: i32, in_$i44: i32) returns (out_$i18: i32, out_$i19: i64, out_$p21: ref, out_$p22: ref, out_$p24: ref, out_$i25: i64, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i64, out_$p31: ref, out_$p32: ref, out_$p34: ref, out_$i35: i64, out_$i36: i64, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$p40: ref, out_$i41: i16, out_$i42: i32, out_$i43: i1, out_$i16: i32, out_$i17: i32, out_$i44: i32);
  modifies $M.0;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i5: i16, in_$p6: ref, in_$i7: i16, in_$i8: i32, in_$p10: ref, in_$i14: i32, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i16, in_$i69: i32, in_$i70: i16, in_$i71: i32, in_$i72: i16, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i16, in_$i80: i32, in_$i81: i16, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i16, in_$i89: i32, in_$i90: i16, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i16, in_$i96: i32, in_$i97: i16, in_$i98: i32, in_$i99: i16, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i16, in_$i105: i32, in_$i106: i16, in_$i107: i32, in_$i108: i16, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i16, in_$i114: i32, in_$i115: i16, in_$i116: i32, in_$i117: i16, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$p234: ref, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: ref, in_vslice_dummy_var_224: ref, in_vslice_dummy_var_225: ref, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32) returns (out_$i14: i32, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i16, out_$i69: i32, out_$i70: i16, out_$i71: i32, out_$i72: i16, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i16, out_$i80: i32, out_$i81: i16, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i16, out_$i89: i32, out_$i90: i16, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i16, out_$i96: i32, out_$i97: i16, out_$i98: i32, out_$i99: i16, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i16, out_$i105: i32, out_$i106: i16, out_$i107: i32, out_$i108: i16, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i16, out_$i114: i32, out_$i115: i16, out_$i116: i32, out_$i117: i16, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$p234: ref, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: ref, out_vslice_dummy_var_224: ref, out_vslice_dummy_var_225: ref, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32)
{

  entry:
    out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232 := in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$p48, in_$i49, in_$i50, in_$p51, in_$i53, in_$i54, in_$p55, in_$i57, in_$i58, in_$p59, in_$i61, in_$i62, in_$p63, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i83, in_$i84, in_$p85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i92, in_$i93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$i101, in_$i102, in_$p103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i110, in_$i111, in_$p112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i119, in_$i120, in_$p121, in_$i123, in_$i124, in_$p125, in_$i127, in_$i128, in_$p129, in_$i131, in_$i132, in_$p133, in_$i135, in_$i136, in_$p137, in_$i139, in_$i140, in_$p141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$p147, in_$i149, in_$i150, in_$p151, in_$i153, in_$i154, in_$p155, in_$i157, in_$i158, in_$p159, in_$i161, in_$i162, in_$p163, in_$i164, in_$i165, in_$p166, in_$i167, in_$i168, in_$p169, in_$i170, in_$i171, in_$i172, in_$i173, in_$i174, in_$i175, in_$i176, in_$i177, in_$i178, in_$i180, in_$i181, in_$i182, in_$i183, in_$i184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$i191, in_$i192, in_$i193, in_$i194, in_$i195, in_$i196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$i208, in_$i209, in_$i210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$p219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i225, in_$i226, in_$p227, in_$i228, in_$i229, in_$p230, in_$i231, in_$i232, in_$p233, in_$p234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$p241, in_$i242, in_$i243, in_$i244, in_$i245, in_$p246, in_$i247, in_$i248, in_$i249, in_$i250, in_$p251, in_$i252, in_$i253, in_$i254, in_$i255, in_$p256, in_$i257, in_$i258, in_$i259, in_vslice_dummy_var_213, in_vslice_dummy_var_214, in_vslice_dummy_var_215, in_vslice_dummy_var_216, in_vslice_dummy_var_217, in_vslice_dummy_var_218, in_vslice_dummy_var_219, in_vslice_dummy_var_220, in_vslice_dummy_var_221, in_vslice_dummy_var_222, in_vslice_dummy_var_223, in_vslice_dummy_var_224, in_vslice_dummy_var_225, in_vslice_dummy_var_226, in_vslice_dummy_var_227, in_vslice_dummy_var_228, in_vslice_dummy_var_229, in_vslice_dummy_var_230, in_vslice_dummy_var_231, in_vslice_dummy_var_232;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1472} out_$i14 := __VERIFIER_nondet_int();
    call {:si_unique_call 1473} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i14);
    call {:si_unique_call 1474} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i14);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb146_dummy;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb241:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb185:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb182:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb21:
    assume !(out_$i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb142:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb133:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb124:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb106:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb100:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb82:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb60:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb59:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1483} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7842;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1482} i40evf_set_rx_mode(out_$p48);
    goto corral_source_split_7841;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    out_$p48 := $M.24;
    goto corral_source_split_7840;

  $bb58:
    assume out_$i47 == 1;
    goto corral_source_split_7839;

  corral_source_split_7837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i32(out_$i46, 2);
    goto corral_source_split_7837;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i46 := $M.20;
    goto corral_source_split_7836;

  $bb56:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1481} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7834;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1480} i40evf_set_rx_mode(out_$p45);
    goto corral_source_split_7833;

  corral_source_split_7831:
    assume {:verifier.code 0} true;
    out_$p45 := $M.24;
    goto corral_source_split_7832;

  $bb55:
    assume out_$i44 == 1;
    goto corral_source_split_7831;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    out_$i44 := $eq.i32(out_$i43, 3);
    goto corral_source_split_7829;

  $bb54:
    assume {:verifier.code 0} true;
    out_$i43 := $M.20;
    goto corral_source_split_7828;

  $bb53:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1479} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7826;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} i40evf_set_rx_mode(out_$p42);
    goto corral_source_split_7825;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    out_$p42 := $M.24;
    goto corral_source_split_7824;

  $bb52:
    assume out_$i41 == 1;
    goto corral_source_split_7823;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    out_$i41 := $eq.i32(out_$i40, 1);
    goto corral_source_split_7821;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    out_$i40 := $M.20;
    goto corral_source_split_7820;

  $bb50:
    assume out_$i39 == 1;
    goto corral_source_split_7819;

  $bb46:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i39 := $eq.i32(out_$i25, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb40:
    assume out_$i34 == 1;
    assume {:verifier.code 0} true;
    out_$i37 := $slt.i32(out_$i25, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb23:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i34 := $slt.i32(out_$i25, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i26 := $slt.i32(out_$i25, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_7769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1475} out_$i25 := __VERIFIER_nondet_int();
    call {:si_unique_call 1476} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i25);
    call {:si_unique_call 1477} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i25);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb20:
    assume out_$i24 == 1;
    goto corral_source_split_7769;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    out_$i24 := $ne.i32(out_$i23, 0);
    goto corral_source_split_7767;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    out_$i23 := $M.20;
    goto corral_source_split_7766;

  $bb18:
    assume out_$i22 == 1;
    goto corral_source_split_7765;

  $bb14:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i15 == 1;
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i14, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i15 := $slt.i32(out_$i14, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb63:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1485} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7847;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1484} out_vslice_dummy_var_213 := i40evf_close(out_$p51);
    goto corral_source_split_7846;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    out_$p51 := $M.24;
    goto corral_source_split_7845;

  $bb62:
    assume out_$i50 == 1;
    goto corral_source_split_7844;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i49, 3);
    goto corral_source_split_7813;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    out_$i49 := $M.20;
    goto corral_source_split_7812;

  $bb48:
    assume out_$i38 == 1;
    goto corral_source_split_7811;

  $bb47:
    assume !(out_$i37 == 1);
    assume {:verifier.code 0} true;
    out_$i38 := $slt.i32(out_$i25, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb72:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1491} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7868;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1490} out_vslice_dummy_var_216 := eth_validate_addr(out_$p63);
    goto corral_source_split_7867;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    out_$p63 := $M.24;
    goto corral_source_split_7866;

  $bb71:
    assume out_$i62 == 1;
    goto corral_source_split_7865;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i61, 2);
    goto corral_source_split_7863;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i61 := $M.20;
    goto corral_source_split_7862;

  $bb69:
    assume !(out_$i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1489} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7860;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1488} out_vslice_dummy_var_215 := eth_validate_addr(out_$p59);
    goto corral_source_split_7859;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    out_$p59 := $M.24;
    goto corral_source_split_7858;

  $bb68:
    assume out_$i58 == 1;
    goto corral_source_split_7857;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i57, 3);
    goto corral_source_split_7855;

  $bb67:
    assume {:verifier.code 0} true;
    out_$i57 := $M.20;
    goto corral_source_split_7854;

  $bb66:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    goto $bb67;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1487} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7852;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} out_vslice_dummy_var_214 := eth_validate_addr(out_$p55);
    goto corral_source_split_7851;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    out_$p55 := $M.24;
    goto corral_source_split_7850;

  $bb65:
    assume out_$i54 == 1;
    goto corral_source_split_7849;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    out_$i54 := $eq.i32(out_$i53, 1);
    goto corral_source_split_7817;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    out_$i53 := $M.20;
    goto corral_source_split_7816;

  $bb49:
    assume !(out_$i38 == 1);
    goto corral_source_split_7815;

  $bb81:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    goto $bb82;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1497} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7904;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1496} out_vslice_dummy_var_219 := i40evf_vlan_rx_kill_vid(out_$p85, out_$i88, out_$i90);
    goto corral_source_split_7903;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    out_$i90 := $trunc.i32.i16(out_$i89);
    goto corral_source_split_7902;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    out_$i89 := $zext.i16.i32(in_$i7);
    goto corral_source_split_7901;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    out_$i88 := $trunc.i32.i16(out_$i87);
    goto corral_source_split_7900;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    out_$i87 := $zext.i16.i32(out_$i86);
    goto corral_source_split_7899;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i16($M.50, in_$p1);
    goto corral_source_split_7898;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    out_$p85 := $M.24;
    goto corral_source_split_7897;

  $bb80:
    assume out_$i84 == 1;
    goto corral_source_split_7896;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb80, $bb81;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 2);
    goto corral_source_split_7894;

  $bb79:
    assume {:verifier.code 0} true;
    out_$i83 := $M.20;
    goto corral_source_split_7893;

  $bb78:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1495} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7891;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} out_vslice_dummy_var_218 := i40evf_vlan_rx_kill_vid(out_$p76, out_$i79, out_$i81);
    goto corral_source_split_7890;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    out_$i81 := $trunc.i32.i16(out_$i80);
    goto corral_source_split_7889;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    out_$i80 := $zext.i16.i32(in_$i7);
    goto corral_source_split_7888;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    out_$i79 := $trunc.i32.i16(out_$i78);
    goto corral_source_split_7887;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    out_$i78 := $zext.i16.i32(out_$i77);
    goto corral_source_split_7886;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i16($M.50, in_$p1);
    goto corral_source_split_7885;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    out_$p76 := $M.24;
    goto corral_source_split_7884;

  $bb77:
    assume out_$i75 == 1;
    goto corral_source_split_7883;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 3);
    goto corral_source_split_7881;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i74 := $M.20;
    goto corral_source_split_7880;

  $bb75:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1493} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7878;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1492} out_vslice_dummy_var_217 := i40evf_vlan_rx_kill_vid(out_$p67, out_$i70, out_$i72);
    goto corral_source_split_7877;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    out_$i72 := $trunc.i32.i16(out_$i71);
    goto corral_source_split_7876;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(in_$i7);
    goto corral_source_split_7875;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    out_$i70 := $trunc.i32.i16(out_$i69);
    goto corral_source_split_7874;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    out_$i69 := $zext.i16.i32(out_$i68);
    goto corral_source_split_7873;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    out_$i68 := $load.i16($M.50, in_$p1);
    goto corral_source_split_7872;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    out_$p67 := $M.24;
    goto corral_source_split_7871;

  $bb74:
    assume out_$i66 == 1;
    goto corral_source_split_7870;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    out_$i66 := $eq.i32(out_$i65, 1);
    goto corral_source_split_7801;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    out_$i65 := $M.20;
    goto corral_source_split_7800;

  $bb42:
    assume out_$i35 == 1;
    goto corral_source_split_7799;

  $bb41:
    assume !(out_$i34 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := $slt.i32(out_$i25, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb90:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    goto $bb91;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7940;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} out_vslice_dummy_var_222 := i40evf_vlan_rx_add_vid(out_$p112, out_$i115, out_$i117);
    goto corral_source_split_7939;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    out_$i117 := $trunc.i32.i16(out_$i116);
    goto corral_source_split_7938;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i16.i32(in_$i5);
    goto corral_source_split_7937;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i32.i16(out_$i114);
    goto corral_source_split_7936;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i16.i32(out_$i113);
    goto corral_source_split_7935;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    out_$i113 := $load.i16($M.49, in_$p0);
    goto corral_source_split_7934;

  corral_source_split_7932:
    assume {:verifier.code 0} true;
    out_$p112 := $M.24;
    goto corral_source_split_7933;

  $bb89:
    assume out_$i111 == 1;
    goto corral_source_split_7932;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    out_$i111 := $eq.i32(out_$i110, 2);
    goto corral_source_split_7930;

  $bb88:
    assume {:verifier.code 0} true;
    out_$i110 := $M.20;
    goto corral_source_split_7929;

  $bb87:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    goto $bb88;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7927;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} out_vslice_dummy_var_221 := i40evf_vlan_rx_add_vid(out_$p103, out_$i106, out_$i108);
    goto corral_source_split_7926;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i32.i16(out_$i107);
    goto corral_source_split_7925;

  corral_source_split_7923:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i16.i32(in_$i5);
    goto corral_source_split_7924;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    out_$i106 := $trunc.i32.i16(out_$i105);
    goto corral_source_split_7923;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    out_$i105 := $zext.i16.i32(out_$i104);
    goto corral_source_split_7922;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    out_$i104 := $load.i16($M.49, in_$p0);
    goto corral_source_split_7921;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    out_$p103 := $M.24;
    goto corral_source_split_7920;

  $bb86:
    assume out_$i102 == 1;
    goto corral_source_split_7919;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 3);
    goto corral_source_split_7917;

  $bb85:
    assume {:verifier.code 0} true;
    out_$i101 := $M.20;
    goto corral_source_split_7916;

  $bb84:
    assume !(out_$i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    goto $bb85;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7914;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} out_vslice_dummy_var_220 := i40evf_vlan_rx_add_vid(out_$p94, out_$i97, out_$i99);
    goto corral_source_split_7913;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    out_$i99 := $trunc.i32.i16(out_$i98);
    goto corral_source_split_7912;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(in_$i5);
    goto corral_source_split_7911;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    out_$i97 := $trunc.i32.i16(out_$i96);
    goto corral_source_split_7910;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i16.i32(out_$i95);
    goto corral_source_split_7909;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i16($M.49, in_$p0);
    goto corral_source_split_7908;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    out_$p94 := $M.24;
    goto corral_source_split_7907;

  $bb83:
    assume out_$i93 == 1;
    goto corral_source_split_7906;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb83, $bb84;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    out_$i93 := $eq.i32(out_$i92, 1);
    goto corral_source_split_7805;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    out_$i92 := $M.20;
    goto corral_source_split_7804;

  $bb44:
    assume out_$i36 == 1;
    goto corral_source_split_7803;

  $bb43:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    out_$i36 := $slt.i32(out_$i25, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb99:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    goto $bb100;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7961;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} out_vslice_dummy_var_225 := i40evf_get_stats(out_$p129);
    goto corral_source_split_7960;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    out_$p129 := $M.24;
    goto corral_source_split_7959;

  $bb98:
    assume out_$i128 == 1;
    goto corral_source_split_7958;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  corral_source_split_7955:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 2);
    goto corral_source_split_7956;

  $bb97:
    assume {:verifier.code 0} true;
    out_$i127 := $M.20;
    goto corral_source_split_7955;

  $bb96:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    goto $bb97;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7953;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} out_vslice_dummy_var_224 := i40evf_get_stats(out_$p125);
    goto corral_source_split_7952;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    out_$p125 := $M.24;
    goto corral_source_split_7951;

  $bb95:
    assume out_$i124 == 1;
    goto corral_source_split_7950;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb96;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 3);
    goto corral_source_split_7948;

  $bb94:
    assume {:verifier.code 0} true;
    out_$i123 := $M.20;
    goto corral_source_split_7947;

  $bb93:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    goto $bb94;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7945;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} out_vslice_dummy_var_223 := i40evf_get_stats(out_$p121);
    goto corral_source_split_7944;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    out_$p121 := $M.24;
    goto corral_source_split_7943;

  $bb92:
    assume out_$i120 == 1;
    goto corral_source_split_7942;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 1);
    goto corral_source_split_7809;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    out_$i119 := $M.20;
    goto corral_source_split_7808;

  $bb45:
    assume !(out_$i36 == 1);
    goto corral_source_split_7807;

  $bb105:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    goto $bb106;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1513} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_7974;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} out_vslice_dummy_var_227 := i40evf_change_mtu(out_$p137, in_$i8);
    goto corral_source_split_7973;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    out_$p137 := $M.24;
    goto corral_source_split_7972;

  $bb104:
    assume out_$i136 == 1;
    goto corral_source_split_7971;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i32(out_$i135, 2);
    goto corral_source_split_7969;

  $bb103:
    assume {:verifier.code 0} true;
    out_$i135 := $M.20;
    goto corral_source_split_7968;

  $bb102:
    assume !(out_$i132 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    goto $bb103;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7966;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} out_vslice_dummy_var_226 := i40evf_change_mtu(out_$p133, in_$i8);
    goto corral_source_split_7965;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    out_$p133 := $M.24;
    goto corral_source_split_7964;

  $bb101:
    assume out_$i132 == 1;
    goto corral_source_split_7963;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb101, $bb102;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i131, 3);
    goto corral_source_split_7789;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    out_$i131 := $M.20;
    goto corral_source_split_7788;

  $bb36:
    assume out_$i32 == 1;
    goto corral_source_split_7787;

  $bb25:
    assume out_$i27 == 1;
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i25, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb24:
    assume !(out_$i26 == 1);
    assume {:verifier.code 0} true;
    out_$i27 := $slt.i32(out_$i25, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb108:
    assume !(out_$i140 == 1);
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb110:
    assume !(out_$i144 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1516} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7984;

  $bb109:
    assume out_$i144 == 1;
    goto corral_source_split_7983;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    out_$i144 := $eq.i32(out_$i143, 0);
    goto corral_source_split_7981;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    out_$i143 := $M.59;
    goto corral_source_split_7980;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $M.59 := out_$i142;
    call {:si_unique_call 1515} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_7979;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} out_$i142 := i40evf_open(out_$p141);
    goto corral_source_split_7978;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    out_$p141 := $M.24;
    goto corral_source_split_7977;

  $bb107:
    assume out_$i140 == 1;
    goto corral_source_split_7976;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    out_$i140 := $eq.i32(out_$i139, 2);
    goto corral_source_split_7793;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    out_$i139 := $M.20;
    goto corral_source_split_7792;

  $bb38:
    assume out_$i33 == 1;
    goto corral_source_split_7791;

  $bb37:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    out_$i33 := $slt.i32(out_$i25, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb114:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    goto $bb115;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1518} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_7989;

  corral_source_split_7987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} out_vslice_dummy_var_228 := i40evf_xmit_frame(in_$p4, out_$p147);
    goto corral_source_split_7988;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    out_$p147 := $M.24;
    goto corral_source_split_7987;

  $bb113:
    assume out_$i146 == 1;
    goto corral_source_split_7986;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 3);
    goto corral_source_split_7797;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    out_$i145 := $M.20;
    goto corral_source_split_7796;

  $bb39:
    assume !(out_$i33 == 1);
    goto corral_source_split_7795;

  $bb123:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    goto $bb124;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8010;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} out_vslice_dummy_var_231 := i40evf_set_mac(out_$p159, in_$p6);
    goto corral_source_split_8009;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$p159 := $M.24;
    goto corral_source_split_8008;

  $bb122:
    assume out_$i158 == 1;
    goto corral_source_split_8007;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 2);
    goto corral_source_split_8005;

  $bb121:
    assume {:verifier.code 0} true;
    out_$i157 := $M.20;
    goto corral_source_split_8004;

  $bb120:
    assume !(out_$i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    goto $bb121;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1522} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8002;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} out_vslice_dummy_var_230 := i40evf_set_mac(out_$p155, in_$p6);
    goto corral_source_split_8001;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$p155 := $M.24;
    goto corral_source_split_8000;

  $bb119:
    assume out_$i154 == 1;
    goto corral_source_split_7999;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb119, $bb120;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    out_$i154 := $eq.i32(out_$i153, 3);
    goto corral_source_split_7997;

  $bb118:
    assume {:verifier.code 0} true;
    out_$i153 := $M.20;
    goto corral_source_split_7996;

  $bb117:
    assume !(out_$i150 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    goto $bb118;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1520} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_7994;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} out_vslice_dummy_var_229 := i40evf_set_mac(out_$p151, in_$p6);
    goto corral_source_split_7993;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    out_$p151 := $M.24;
    goto corral_source_split_7992;

  $bb116:
    assume out_$i150 == 1;
    goto corral_source_split_7991;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 1);
    goto corral_source_split_7781;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    out_$i149 := $M.20;
    goto corral_source_split_7780;

  $bb34:
    assume out_$i31 == 1;
    goto corral_source_split_7779;

  $bb27:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i25, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb26:
    assume !(out_$i27 == 1);
    assume {:verifier.code 0} true;
    out_$i28 := $slt.i32(out_$i25, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb132:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    goto $bb133;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8031;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} i40evf_tx_timeout(out_$p169);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    out_$p169 := $M.24;
    goto corral_source_split_8029;

  $bb131:
    assume out_$i168 == 1;
    goto corral_source_split_8028;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb131, $bb132;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 2);
    goto corral_source_split_8026;

  $bb130:
    assume {:verifier.code 0} true;
    out_$i167 := $M.20;
    goto corral_source_split_8025;

  $bb129:
    assume !(out_$i165 == 1);
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    goto $bb130;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $M.20 := 3;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(3);
    goto corral_source_split_8023;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} i40evf_tx_timeout(out_$p166);
    goto corral_source_split_8022;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    out_$p166 := $M.24;
    goto corral_source_split_8021;

  $bb128:
    assume out_$i165 == 1;
    goto corral_source_split_8020;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$i165 := $eq.i32(out_$i164, 3);
    goto corral_source_split_8018;

  $bb127:
    assume {:verifier.code 0} true;
    out_$i164 := $M.20;
    goto corral_source_split_8017;

  $bb126:
    assume !(out_$i162 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    goto $bb127;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8015;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} i40evf_tx_timeout(out_$p163);
    goto corral_source_split_8014;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    out_$p163 := $M.24;
    goto corral_source_split_8013;

  $bb125:
    assume out_$i162 == 1;
    goto corral_source_split_8012;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb125, $bb126;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    out_$i162 := $eq.i32(out_$i161, 1);
    goto corral_source_split_7785;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    out_$i161 := $M.20;
    goto corral_source_split_7784;

  $bb35:
    assume !(out_$i31 == 1);
    goto corral_source_split_7783;

  $bb135:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $M.54 := out_$i176;
    call {:si_unique_call 1534} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i176);
    goto corral_source_split_8043;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    out_$i176 := $add.i32(out_$i175, 1);
    goto corral_source_split_8042;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    out_$i175 := $M.54;
    goto corral_source_split_8041;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $M.20 := 2;
    call {:si_unique_call 1533} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(2);
    goto corral_source_split_8040;

  $bb136:
    assume out_$i174 == 1;
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 0);
    goto corral_source_split_8037;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    out_$i173 := $M.60;
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $M.60 := out_$i172;
    call {:si_unique_call 1532} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} out_$i172 := ldv_ndo_init_6();
    goto corral_source_split_8034;

  $bb134:
    assume out_$i171 == 1;
    goto corral_source_split_8033;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 1);
    goto corral_source_split_7773;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    out_$i170 := $M.20;
    goto corral_source_split_7772;

  $bb29:
    assume out_$i29 == 1;
    goto corral_source_split_7771;

  $bb28:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i29 := $slt.i32(out_$i25, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb141:
    assume !(out_$i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    $M.54 := out_$i181;
    call {:si_unique_call 1537} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_8050;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    out_$i181 := $sub.i32(out_$i180, 1);
    goto corral_source_split_8049;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    out_$i180 := $M.54;
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} out_vslice_dummy_var_232 := ldv_ndo_uninit_6();
    goto corral_source_split_8046;

  $bb140:
    assume out_$i178 == 1;
    goto corral_source_split_8045;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    out_$i178 := $eq.i32(out_$i177, 2);
    goto corral_source_split_7777;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    out_$i177 := $M.20;
    goto corral_source_split_7776;

  $bb31:
    assume out_$i30 == 1;
    goto corral_source_split_7775;

  $bb30:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i25, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} ldv_stop();
    goto corral_source_split_8052;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb33;

  $bb51:
    assume {:verifier.code 0} true;
    assume !(out_$i39 == 1);
    goto $bb33;

  $bb148:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} ldv_main_exported_4();
    goto corral_source_split_8055;

  $bb147:
    assume out_$i183 == 1;
    goto corral_source_split_8054;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    out_$i183 := $ne.i32(out_$i182, 0);
    goto corral_source_split_7759;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    out_$i182 := $M.52;
    goto corral_source_split_7758;

  $bb16:
    assume out_$i21 == 1;
    goto corral_source_split_7757;

  $bb15:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i14, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb151:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} choose_interrupt_1();
    goto corral_source_split_8058;

  $bb150:
    assume out_$i185 == 1;
    goto corral_source_split_8057;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    out_$i185 := $ne.i32(out_$i184, 0);
    goto corral_source_split_7763;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    out_$i184 := $M.53;
    goto corral_source_split_7762;

  $bb17:
    assume !(out_$i21 == 1);
    goto corral_source_split_7761;

  $bb154:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb170:
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb181:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb179:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb164:
    assume {:verifier.code 0} true;
    assume !(out_$i193 == 1);
    goto $bb165;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i195 == 1);
    goto $bb165;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 0);
    goto corral_source_split_8072;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    out_$i194 := $M.54;
    goto corral_source_split_8071;

  $bb163:
    assume out_$i193 == 1;
    goto corral_source_split_8070;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb163, $bb164;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 2);
    goto corral_source_split_8068;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    out_$i192 := $M.55;
    goto corral_source_split_8067;

  $bb161:
    assume out_$i191 == 1;
    goto corral_source_split_8066;

  $bb156:
    assume out_$i189 == 1;
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i188, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i189 := $slt.i32(out_$i188, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_8060:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1541} out_$i188 := __VERIFIER_nondet_int();
    call {:si_unique_call 1542} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i188);
    call {:si_unique_call 1543} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i188);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb153:
    assume out_$i187 == 1;
    goto corral_source_split_8060;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    out_$i187 := $ne.i32(out_$i186, 0);
    goto corral_source_split_7751;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    out_$i186 := $M.55;
    goto corral_source_split_7750;

  $bb12:
    assume out_$i19 == 1;
    goto corral_source_split_7749;

  $bb5:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i14, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i14, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb172:
    assume !(out_$i197 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb177:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} ldv_initialize_ethtool_ops_4();
    goto corral_source_split_8097;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $M.52 := 1;
    call {:si_unique_call 1553} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8096;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} ldv_initialize_pci_driver_5();
    goto corral_source_split_8095;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1551} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8094;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $M.55 := 2;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8093;

  $bb176:
    assume out_$i202 == 1;
    goto corral_source_split_8092;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i201, 0);
    goto corral_source_split_8090;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i201 := $M.61;
    goto corral_source_split_8089;

  $bb174:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i32(out_$i199, 0);
    goto corral_source_split_8084;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    out_$i199 := $M.61;
    goto corral_source_split_8083;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $M.61 := out_$i198;
    call {:si_unique_call 1548} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i198);
    goto corral_source_split_8082;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_$i198 := i40evf_init_module();
    goto corral_source_split_8081;

  $bb171:
    assume out_$i197 == 1;
    goto corral_source_split_8080;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, 1);
    goto corral_source_split_8064;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    out_$i196 := $M.55;
    goto corral_source_split_8063;

  $bb158:
    assume out_$i190 == 1;
    goto corral_source_split_8062;

  $bb157:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i188, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1555} ldv_stop();
    goto corral_source_split_8099;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb159:
    assume {:verifier.code 0} true;
    assume !(out_$i190 == 1);
    goto $bb160;

  $bb162:
    assume {:verifier.code 0} true;
    assume !(out_$i191 == 1);
    goto $bb160;

  $bb184:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} choose_timer_3(out_$p205);
    goto corral_source_split_8103;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    out_$p205 := $M.14;
    goto corral_source_split_8102;

  $bb183:
    assume out_$i204 == 1;
    goto corral_source_split_8101;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    out_$i204 := $ne.i32(out_$i203, 0);
    goto corral_source_split_7755;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    out_$i203 := $M.56;
    goto corral_source_split_7754;

  $bb13:
    assume !(out_$i19 == 1);
    goto corral_source_split_7753;

  $bb187:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1557} choose_interrupt_2();
    goto corral_source_split_8106;

  $bb186:
    assume out_$i207 == 1;
    goto corral_source_split_8105;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    out_$i207 := $ne.i32(out_$i206, 0);
    goto corral_source_split_7743;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    out_$i206 := $M.57;
    goto corral_source_split_7742;

  $bb7:
    assume out_$i17 == 1;
    goto corral_source_split_7741;

  $bb6:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := $slt.i32(out_$i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb190:
    assume !(out_$i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb211:
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb240:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb232:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb210:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb206:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb208:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $M.54 := out_$i224;
    call {:si_unique_call 1564} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i224);
    goto corral_source_split_8141;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    out_$i224 := $add.i32(out_$i223, 1);
    goto corral_source_split_8140;

  corral_source_split_8138:
    assume {:verifier.code 0} true;
    out_$i223 := $M.54;
    goto corral_source_split_8139;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8138;

  $bb207:
    assume out_$i222 == 1;
    goto corral_source_split_8137;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 0);
    goto corral_source_split_8135;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    out_$i221 := $M.62;
    goto corral_source_split_8134;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $M.62 := out_$i220;
    call {:si_unique_call 1562} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i220);
    goto corral_source_split_8133;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1561} out_$i220 := i40evf_probe(out_$p219, in_$p10);
    goto corral_source_split_8132;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    out_$p219 := $M.48;
    goto corral_source_split_8131;

  $bb205:
    assume out_$i218 == 1;
    goto corral_source_split_8130;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 1);
    goto corral_source_split_8128;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    out_$i217 := $M.58;
    goto corral_source_split_8127;

  $bb203:
    assume out_$i216 == 1;
    goto corral_source_split_8126;

  $bb201:
    assume out_$i215 == 1;
    assume {:verifier.code 0} true;
    out_$i216 := $eq.i32(out_$i210, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb192:
    assume out_$i211 == 1;
    assume {:verifier.code 0} true;
    out_$i215 := $slt.i32(out_$i210, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb191:
    assume {:verifier.code 0} true;
    out_$i211 := $slt.i32(out_$i210, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_8108:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1558} out_$i210 := __VERIFIER_nondet_int();
    call {:si_unique_call 1559} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i210);
    call {:si_unique_call 1560} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i210);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb189:
    assume out_$i209 == 1;
    goto corral_source_split_8108;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    out_$i209 := $ne.i32(out_$i208, 0);
    goto corral_source_split_7747;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    out_$i208 := $M.58;
    goto corral_source_split_7746;

  $bb9:
    assume out_$i18 == 1;
    goto corral_source_split_7745;

  $bb8:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    out_$i18 := $eq.i32(out_$i14, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb216:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1568} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8154;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1567} i40evf_shutdown(out_$p230);
    goto corral_source_split_8153;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    out_$p230 := $M.48;
    goto corral_source_split_8152;

  $bb215:
    assume out_$i229 == 1;
    goto corral_source_split_8151;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i32(out_$i228, 2);
    goto corral_source_split_8149;

  $bb214:
    assume {:verifier.code 0} true;
    out_$i228 := $M.58;
    goto corral_source_split_8148;

  $bb213:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $M.58 := 3;
    call {:si_unique_call 1566} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(3);
    goto corral_source_split_8146;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1565} i40evf_shutdown(out_$p227);
    goto corral_source_split_8145;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    out_$p227 := $M.48;
    goto corral_source_split_8144;

  $bb212:
    assume out_$i226 == 1;
    goto corral_source_split_8143;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 4);
    goto corral_source_split_8124;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    out_$i225 := $M.58;
    goto corral_source_split_8123;

  $bb202:
    assume !(out_$i215 == 1);
    goto corral_source_split_8122;

  $bb219:
    assume !(out_$i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb221:
    assume !(out_$i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $M.58 := 4;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(4);
    goto corral_source_split_8166;

  $bb220:
    assume out_$i238 == 1;
    goto corral_source_split_8165;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220, $bb221;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    out_$i238 := $eq.i32(out_$i237, 0);
    goto corral_source_split_8163;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    out_$i237 := $M.63;
    goto corral_source_split_8162;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $M.63 := out_$i236;
    call {:si_unique_call 1570} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i236);
    goto corral_source_split_8161;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1569} out_$i236 := i40evf_suspend(out_$p233, out_$i235);
    goto corral_source_split_8160;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i32($M.51, out_$p234);
    goto corral_source_split_8159;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_8158;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    out_$p233 := $M.48;
    goto corral_source_split_8157;

  $bb218:
    assume out_$i232 == 1;
    goto corral_source_split_8156;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    out_$i232 := $eq.i32(out_$i231, 2);
    goto corral_source_split_8112;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    out_$i231 := $M.58;
    goto corral_source_split_8111;

  $bb194:
    assume out_$i212 == 1;
    goto corral_source_split_8110;

  $bb193:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    out_$i212 := $slt.i32(out_$i210, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb231:
    assume !(out_$i250 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $M.54 := out_$i253;
    call {:si_unique_call 1580} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i253);
    goto corral_source_split_8196;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    out_$i253 := $sub.i32(out_$i252, 1);
    goto corral_source_split_8195;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    out_$i252 := $M.54;
    goto corral_source_split_8194;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8193;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} i40evf_remove(out_$p251);
    goto corral_source_split_8192;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    out_$p251 := $M.48;
    goto corral_source_split_8191;

  $bb230:
    assume out_$i250 == 1;
    goto corral_source_split_8190;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    out_$i250 := $eq.i32(out_$i249, 2);
    goto corral_source_split_8188;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i249 := $M.58;
    goto corral_source_split_8187;

  $bb228:
    assume !(out_$i245 == 1);
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb229;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $M.54 := out_$i248;
    call {:si_unique_call 1577} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i248);
    goto corral_source_split_8185;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    out_$i248 := $sub.i32(out_$i247, 1);
    goto corral_source_split_8184;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    out_$i247 := $M.54;
    goto corral_source_split_8183;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1576} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8182;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1575} i40evf_remove(out_$p246);
    goto corral_source_split_8181;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    out_$p246 := $M.48;
    goto corral_source_split_8180;

  $bb227:
    assume out_$i245 == 1;
    goto corral_source_split_8179;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    out_$i245 := $eq.i32(out_$i244, 3);
    goto corral_source_split_8177;

  $bb226:
    assume {:verifier.code 0} true;
    out_$i244 := $M.58;
    goto corral_source_split_8176;

  $bb225:
    assume !(out_$i240 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    $M.54 := out_$i243;
    call {:si_unique_call 1574} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i243);
    goto corral_source_split_8174;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    out_$i243 := $sub.i32(out_$i242, 1);
    goto corral_source_split_8173;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    out_$i242 := $M.54;
    goto corral_source_split_8172;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    $M.58 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_8171;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} i40evf_remove(out_$p241);
    goto corral_source_split_8170;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    out_$p241 := $M.48;
    goto corral_source_split_8169;

  $bb224:
    assume out_$i240 == 1;
    goto corral_source_split_8168;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    out_$i240 := $eq.i32(out_$i239, 4);
    goto corral_source_split_8116;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    out_$i239 := $M.58;
    goto corral_source_split_8115;

  $bb196:
    assume out_$i213 == 1;
    goto corral_source_split_8114;

  $bb195:
    assume !(out_$i212 == 1);
    assume {:verifier.code 0} true;
    out_$i213 := $slt.i32(out_$i210, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb234:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb237:
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb236:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    goto $bb237;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $M.58 := 2;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(2);
    goto corral_source_split_8206;

  $bb235:
    assume out_$i259 == 1;
    goto corral_source_split_8205;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb235, $bb236;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    out_$i259 := $eq.i32(out_$i258, 0);
    goto corral_source_split_8203;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    out_$i258 := $M.64;
    goto corral_source_split_8202;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $M.64 := out_$i257;
    call {:si_unique_call 1582} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i257);
    goto corral_source_split_8201;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1581} out_$i257 := i40evf_resume(out_$p256);
    goto corral_source_split_8200;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    out_$p256 := $M.48;
    goto corral_source_split_8199;

  $bb233:
    assume out_$i255 == 1;
    goto corral_source_split_8198;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    out_$i255 := $eq.i32(out_$i254, 4);
    goto corral_source_split_8120;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    out_$i254 := $M.58;
    goto corral_source_split_8119;

  $bb198:
    assume out_$i214 == 1;
    goto corral_source_split_8118;

  $bb197:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i210, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} ldv_stop();
    goto corral_source_split_8208;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb199:
    assume {:verifier.code 0} true;
    assume !(out_$i214 == 1);
    goto $bb200;

  $bb204:
    assume {:verifier.code 0} true;
    assume !(out_$i216 == 1);
    goto $bb200;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1585} ldv_stop();
    goto corral_source_split_8210;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i18 == 1);
    goto $bb11;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i22 == 1);
    goto $bb11;

  $bb146_dummy:
    call {:si_unique_call 1} out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p4, in_$i5, in_$p6, in_$i7, in_$i8, in_$p10, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$p48, out_$i49, out_$i50, out_$p51, out_$i53, out_$i54, out_$p55, out_$i57, out_$i58, out_$p59, out_$i61, out_$i62, out_$p63, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i84, out_$p85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i92, out_$i93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$i101, out_$i102, out_$p103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i110, out_$i111, out_$p112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i131, out_$i132, out_$p133, out_$i135, out_$i136, out_$p137, out_$i139, out_$i140, out_$p141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i149, out_$i150, out_$p151, out_$i153, out_$i154, out_$p155, out_$i157, out_$i158, out_$p159, out_$i161, out_$i162, out_$p163, out_$i164, out_$i165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$i172, out_$i173, out_$i174, out_$i175, out_$i176, out_$i177, out_$i178, out_$i180, out_$i181, out_$i182, out_$i183, out_$i184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$i191, out_$i192, out_$i193, out_$i194, out_$i195, out_$i196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$i208, out_$i209, out_$i210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$p219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i225, out_$i226, out_$p227, out_$i228, out_$i229, out_$p230, out_$i231, out_$i232, out_$p233, out_$p234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$p241, out_$i242, out_$i243, out_$i244, out_$i245, out_$p246, out_$i247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i252, out_$i253, out_$i254, out_$i255, out_$p256, out_$i257, out_$i258, out_$i259, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p4: ref, in_$i5: i16, in_$p6: ref, in_$i7: i16, in_$i8: i32, in_$p10: ref, in_$i14: i32, in_$i15: i1, in_$i16: i1, in_$i17: i1, in_$i18: i1, in_$i19: i1, in_$i20: i1, in_$i21: i1, in_$i22: i1, in_$i23: i32, in_$i24: i1, in_$i25: i32, in_$i26: i1, in_$i27: i1, in_$i28: i1, in_$i29: i1, in_$i30: i1, in_$i31: i1, in_$i32: i1, in_$i33: i1, in_$i34: i1, in_$i35: i1, in_$i36: i1, in_$i37: i1, in_$i38: i1, in_$i39: i1, in_$i40: i32, in_$i41: i1, in_$p42: ref, in_$i43: i32, in_$i44: i1, in_$p45: ref, in_$i46: i32, in_$i47: i1, in_$p48: ref, in_$i49: i32, in_$i50: i1, in_$p51: ref, in_$i53: i32, in_$i54: i1, in_$p55: ref, in_$i57: i32, in_$i58: i1, in_$p59: ref, in_$i61: i32, in_$i62: i1, in_$p63: ref, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$i68: i16, in_$i69: i32, in_$i70: i16, in_$i71: i32, in_$i72: i16, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i16, in_$i78: i32, in_$i79: i16, in_$i80: i32, in_$i81: i16, in_$i83: i32, in_$i84: i1, in_$p85: ref, in_$i86: i16, in_$i87: i32, in_$i88: i16, in_$i89: i32, in_$i90: i16, in_$i92: i32, in_$i93: i1, in_$p94: ref, in_$i95: i16, in_$i96: i32, in_$i97: i16, in_$i98: i32, in_$i99: i16, in_$i101: i32, in_$i102: i1, in_$p103: ref, in_$i104: i16, in_$i105: i32, in_$i106: i16, in_$i107: i32, in_$i108: i16, in_$i110: i32, in_$i111: i1, in_$p112: ref, in_$i113: i16, in_$i114: i32, in_$i115: i16, in_$i116: i32, in_$i117: i16, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i131: i32, in_$i132: i1, in_$p133: ref, in_$i135: i32, in_$i136: i1, in_$p137: ref, in_$i139: i32, in_$i140: i1, in_$p141: ref, in_$i142: i32, in_$i143: i32, in_$i144: i1, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i153: i32, in_$i154: i1, in_$p155: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i161: i32, in_$i162: i1, in_$p163: ref, in_$i164: i32, in_$i165: i1, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i32, in_$i171: i1, in_$i172: i32, in_$i173: i32, in_$i174: i1, in_$i175: i32, in_$i176: i32, in_$i177: i32, in_$i178: i1, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$i184: i32, in_$i185: i1, in_$i186: i32, in_$i187: i1, in_$i188: i32, in_$i189: i1, in_$i190: i1, in_$i191: i1, in_$i192: i32, in_$i193: i1, in_$i194: i32, in_$i195: i1, in_$i196: i32, in_$i197: i1, in_$i198: i32, in_$i199: i32, in_$i200: i1, in_$i201: i32, in_$i202: i1, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$i208: i32, in_$i209: i1, in_$i210: i32, in_$i211: i1, in_$i212: i1, in_$i213: i1, in_$i214: i1, in_$i215: i1, in_$i216: i1, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i220: i32, in_$i221: i32, in_$i222: i1, in_$i223: i32, in_$i224: i32, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i228: i32, in_$i229: i1, in_$p230: ref, in_$i231: i32, in_$i232: i1, in_$p233: ref, in_$p234: ref, in_$i235: i32, in_$i236: i32, in_$i237: i32, in_$i238: i1, in_$i239: i32, in_$i240: i1, in_$p241: ref, in_$i242: i32, in_$i243: i32, in_$i244: i32, in_$i245: i1, in_$p246: ref, in_$i247: i32, in_$i248: i32, in_$i249: i32, in_$i250: i1, in_$p251: ref, in_$i252: i32, in_$i253: i32, in_$i254: i32, in_$i255: i1, in_$p256: ref, in_$i257: i32, in_$i258: i32, in_$i259: i1, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: ref, in_vslice_dummy_var_224: ref, in_vslice_dummy_var_225: ref, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32) returns (out_$i14: i32, out_$i15: i1, out_$i16: i1, out_$i17: i1, out_$i18: i1, out_$i19: i1, out_$i20: i1, out_$i21: i1, out_$i22: i1, out_$i23: i32, out_$i24: i1, out_$i25: i32, out_$i26: i1, out_$i27: i1, out_$i28: i1, out_$i29: i1, out_$i30: i1, out_$i31: i1, out_$i32: i1, out_$i33: i1, out_$i34: i1, out_$i35: i1, out_$i36: i1, out_$i37: i1, out_$i38: i1, out_$i39: i1, out_$i40: i32, out_$i41: i1, out_$p42: ref, out_$i43: i32, out_$i44: i1, out_$p45: ref, out_$i46: i32, out_$i47: i1, out_$p48: ref, out_$i49: i32, out_$i50: i1, out_$p51: ref, out_$i53: i32, out_$i54: i1, out_$p55: ref, out_$i57: i32, out_$i58: i1, out_$p59: ref, out_$i61: i32, out_$i62: i1, out_$p63: ref, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$i68: i16, out_$i69: i32, out_$i70: i16, out_$i71: i32, out_$i72: i16, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i16, out_$i78: i32, out_$i79: i16, out_$i80: i32, out_$i81: i16, out_$i83: i32, out_$i84: i1, out_$p85: ref, out_$i86: i16, out_$i87: i32, out_$i88: i16, out_$i89: i32, out_$i90: i16, out_$i92: i32, out_$i93: i1, out_$p94: ref, out_$i95: i16, out_$i96: i32, out_$i97: i16, out_$i98: i32, out_$i99: i16, out_$i101: i32, out_$i102: i1, out_$p103: ref, out_$i104: i16, out_$i105: i32, out_$i106: i16, out_$i107: i32, out_$i108: i16, out_$i110: i32, out_$i111: i1, out_$p112: ref, out_$i113: i16, out_$i114: i32, out_$i115: i16, out_$i116: i32, out_$i117: i16, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i131: i32, out_$i132: i1, out_$p133: ref, out_$i135: i32, out_$i136: i1, out_$p137: ref, out_$i139: i32, out_$i140: i1, out_$p141: ref, out_$i142: i32, out_$i143: i32, out_$i144: i1, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i153: i32, out_$i154: i1, out_$p155: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i161: i32, out_$i162: i1, out_$p163: ref, out_$i164: i32, out_$i165: i1, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i32, out_$i171: i1, out_$i172: i32, out_$i173: i32, out_$i174: i1, out_$i175: i32, out_$i176: i32, out_$i177: i32, out_$i178: i1, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$i184: i32, out_$i185: i1, out_$i186: i32, out_$i187: i1, out_$i188: i32, out_$i189: i1, out_$i190: i1, out_$i191: i1, out_$i192: i32, out_$i193: i1, out_$i194: i32, out_$i195: i1, out_$i196: i32, out_$i197: i1, out_$i198: i32, out_$i199: i32, out_$i200: i1, out_$i201: i32, out_$i202: i1, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$i208: i32, out_$i209: i1, out_$i210: i32, out_$i211: i1, out_$i212: i1, out_$i213: i1, out_$i214: i1, out_$i215: i1, out_$i216: i1, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i220: i32, out_$i221: i32, out_$i222: i1, out_$i223: i32, out_$i224: i32, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i228: i32, out_$i229: i1, out_$p230: ref, out_$i231: i32, out_$i232: i1, out_$p233: ref, out_$p234: ref, out_$i235: i32, out_$i236: i32, out_$i237: i32, out_$i238: i1, out_$i239: i32, out_$i240: i1, out_$p241: ref, out_$i242: i32, out_$i243: i32, out_$i244: i32, out_$i245: i1, out_$p246: ref, out_$i247: i32, out_$i248: i32, out_$i249: i32, out_$i250: i1, out_$p251: ref, out_$i252: i32, out_$i253: i32, out_$i254: i32, out_$i255: i1, out_$p256: ref, out_$i257: i32, out_$i258: i32, out_$i259: i1, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: ref, out_vslice_dummy_var_224: ref, out_vslice_dummy_var_225: ref, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32);
  modifies $M.20, $M.0, $CurrAddr, $M.14, $M.15, $M.5, $M.7, $M.9, $M.11, $M.4, $M.3, $M.6, $M.16, $M.8, $M.17, $M.10, $M.18, $M.12, $M.19, $M.59, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.54, $M.60, $M.52, $M.67, $M.66, $M.68, $M.65, $M.48, $M.58, $M.55, $M.61, $M.35, $M.62, $M.63, $M.1, $M.21, $M.64;


